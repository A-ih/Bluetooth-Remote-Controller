
BT receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003594  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  08003778  08003778  00004778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e08  08003e08  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e08  08003e08  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e08  08003e08  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e08  08003e08  00004e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e0c  08003e0c  00004e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e10  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000005c  08003e6c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003e6c  00005284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009764  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb3  00000000  00000000  0000e7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  000104a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b3  00000000  00000000  00010d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019805  00000000  00000000  00011423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac9b  00000000  00000000  0002ac28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093911  00000000  00000000  000358c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c91d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e4  00000000  00000000  000c9218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cb9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003760 	.word	0x08003760

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	08003760 	.word	0x08003760

08000224 <Delay>:
0x00, 0x00, 0x00, 0x00, 0x38, 0xf0, 0x50, 0x88, 0x20, 0x07, 0x78, 0x00, 0xd2, 0x46, 0x01, 0x10, 0xb5, 0x18, 0x10, 0x2c, 0xa0, 0x43, 0x20, 0x81, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	e002      	b.n	8000234 <Delay+0x10>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3b01      	subs	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <Delay+0xa>
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800024c:	2001      	movs	r0, #1
 800024e:	f000 f829 	bl	80002a4 <LCD_BackLed_Control>
	LCD_Rst();
 8000252:	f000 f80f 	bl	8000274 <LCD_Rst>
	LCD_REG_Config();
 8000256:	f000 f85f 	bl	8000318 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800025a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000264:	22f0      	movs	r2, #240	@ 0xf0
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f000 f9e6 	bl	800063a <LCD_Clear>
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2102      	movs	r1, #2
 800027c:	4807      	ldr	r0, [pc, #28]	@ (800029c <LCD_Rst+0x28>)
 800027e:	f001 fa59 	bl	8001734 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000282:	4807      	ldr	r0, [pc, #28]	@ (80002a0 <LCD_Rst+0x2c>)
 8000284:	f7ff ffce 	bl	8000224 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4803      	ldr	r0, [pc, #12]	@ (800029c <LCD_Rst+0x28>)
 800028e:	f001 fa51 	bl	8001734 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000292:	4803      	ldr	r0, [pc, #12]	@ (80002a0 <LCD_Rst+0x2c>)
 8000294:	f7ff ffc6 	bl	8000224 <Delay>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40011800 	.word	0x40011800
 80002a0:	0002bffc 	.word	0x0002bffc

080002a4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002ba:	4807      	ldr	r0, [pc, #28]	@ (80002d8 <LCD_BackLed_Control+0x34>)
 80002bc:	f001 fa3a 	bl	8001734 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80002c0:	e005      	b.n	80002ce <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002c8:	4803      	ldr	r0, [pc, #12]	@ (80002d8 <LCD_BackLed_Control+0x34>)
 80002ca:	f001 fa33 	bl	8001734 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40011400 	.word	0x40011400

080002dc <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e6:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	8013      	strh	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000302:	4a04      	ldr	r2, [pc, #16]	@ (8000314 <LCD_Write_Data+0x1c>)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	8013      	strh	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	60020000 	.word	0x60020000

08000318 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800031c:	20cf      	movs	r0, #207	@ 0xcf
 800031e:	f7ff ffdd 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffe8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000328:	2081      	movs	r0, #129	@ 0x81
 800032a:	f7ff ffe5 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800032e:	2030      	movs	r0, #48	@ 0x30
 8000330:	f7ff ffe2 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000334:	20ed      	movs	r0, #237	@ 0xed
 8000336:	f7ff ffd1 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800033a:	2064      	movs	r0, #100	@ 0x64
 800033c:	f7ff ffdc 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000340:	2003      	movs	r0, #3
 8000342:	f7ff ffd9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000346:	2012      	movs	r0, #18
 8000348:	f7ff ffd6 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800034c:	2081      	movs	r0, #129	@ 0x81
 800034e:	f7ff ffd3 	bl	80002f8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000352:	20e8      	movs	r0, #232	@ 0xe8
 8000354:	f7ff ffc2 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000358:	2085      	movs	r0, #133	@ 0x85
 800035a:	f7ff ffcd 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800035e:	2010      	movs	r0, #16
 8000360:	f7ff ffca 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000364:	2078      	movs	r0, #120	@ 0x78
 8000366:	f7ff ffc7 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800036a:	20cb      	movs	r0, #203	@ 0xcb
 800036c:	f7ff ffb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000370:	2039      	movs	r0, #57	@ 0x39
 8000372:	f7ff ffc1 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000376:	202c      	movs	r0, #44	@ 0x2c
 8000378:	f7ff ffbe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800037c:	2000      	movs	r0, #0
 800037e:	f7ff ffbb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000382:	2034      	movs	r0, #52	@ 0x34
 8000384:	f7ff ffb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000388:	2002      	movs	r0, #2
 800038a:	f7ff ffb5 	bl	80002f8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800038e:	20f7      	movs	r0, #247	@ 0xf7
 8000390:	f7ff ffa4 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000394:	2020      	movs	r0, #32
 8000396:	f7ff ffaf 	bl	80002f8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800039a:	20ea      	movs	r0, #234	@ 0xea
 800039c:	f7ff ff9e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ffa9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ffa6 	bl	80002f8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80003ac:	20b1      	movs	r0, #177	@ 0xb1
 80003ae:	f7ff ff95 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ffa0 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80003b8:	201b      	movs	r0, #27
 80003ba:	f7ff ff9d 	bl	80002f8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80003be:	20b6      	movs	r0, #182	@ 0xb6
 80003c0:	f7ff ff8c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80003c4:	200a      	movs	r0, #10
 80003c6:	f7ff ff97 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80003ca:	20a2      	movs	r0, #162	@ 0xa2
 80003cc:	f7ff ff94 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80003d0:	20c0      	movs	r0, #192	@ 0xc0
 80003d2:	f7ff ff83 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80003d6:	2035      	movs	r0, #53	@ 0x35
 80003d8:	f7ff ff8e 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80003dc:	20c1      	movs	r0, #193	@ 0xc1
 80003de:	f7ff ff7d 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80003e2:	2011      	movs	r0, #17
 80003e4:	f7ff ff88 	bl	80002f8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80003e8:	20c5      	movs	r0, #197	@ 0xc5
 80003ea:	f7ff ff77 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80003ee:	2045      	movs	r0, #69	@ 0x45
 80003f0:	f7ff ff82 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80003f4:	2045      	movs	r0, #69	@ 0x45
 80003f6:	f7ff ff7f 	bl	80002f8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80003fa:	20c7      	movs	r0, #199	@ 0xc7
 80003fc:	f7ff ff6e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000400:	20a2      	movs	r0, #162	@ 0xa2
 8000402:	f7ff ff79 	bl	80002f8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000406:	20f2      	movs	r0, #242	@ 0xf2
 8000408:	f7ff ff68 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff73 	bl	80002f8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000412:	2026      	movs	r0, #38	@ 0x26
 8000414:	f7ff ff62 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff6d 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800041e:	20e0      	movs	r0, #224	@ 0xe0
 8000420:	f7ff ff5c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000424:	200f      	movs	r0, #15
 8000426:	f7ff ff67 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800042a:	2026      	movs	r0, #38	@ 0x26
 800042c:	f7ff ff64 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000430:	2024      	movs	r0, #36	@ 0x24
 8000432:	f7ff ff61 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000436:	200b      	movs	r0, #11
 8000438:	f7ff ff5e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 800043c:	200e      	movs	r0, #14
 800043e:	f7ff ff5b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000442:	2009      	movs	r0, #9
 8000444:	f7ff ff58 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000448:	2054      	movs	r0, #84	@ 0x54
 800044a:	f7ff ff55 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800044e:	20a8      	movs	r0, #168	@ 0xa8
 8000450:	f7ff ff52 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000454:	2046      	movs	r0, #70	@ 0x46
 8000456:	f7ff ff4f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff4c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000460:	2017      	movs	r0, #23
 8000462:	f7ff ff49 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000466:	2009      	movs	r0, #9
 8000468:	f7ff ff46 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800046c:	200f      	movs	r0, #15
 800046e:	f7ff ff43 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000472:	2007      	movs	r0, #7
 8000474:	f7ff ff40 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff3d 	bl	80002f8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800047e:	20e1      	movs	r0, #225	@ 0xe1
 8000480:	f7ff ff2c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff37 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800048a:	2019      	movs	r0, #25
 800048c:	f7ff ff34 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000490:	201b      	movs	r0, #27
 8000492:	f7ff ff31 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000496:	2004      	movs	r0, #4
 8000498:	f7ff ff2e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800049c:	2010      	movs	r0, #16
 800049e:	f7ff ff2b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80004a2:	2007      	movs	r0, #7
 80004a4:	f7ff ff28 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80004a8:	202a      	movs	r0, #42	@ 0x2a
 80004aa:	f7ff ff25 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80004ae:	2047      	movs	r0, #71	@ 0x47
 80004b0:	f7ff ff22 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80004b4:	2039      	movs	r0, #57	@ 0x39
 80004b6:	f7ff ff1f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80004ba:	2003      	movs	r0, #3
 80004bc:	f7ff ff1c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c0:	2006      	movs	r0, #6
 80004c2:	f7ff ff19 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c6:	2006      	movs	r0, #6
 80004c8:	f7ff ff16 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80004cc:	2030      	movs	r0, #48	@ 0x30
 80004ce:	f7ff ff13 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80004d2:	2038      	movs	r0, #56	@ 0x38
 80004d4:	f7ff ff10 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80004d8:	200f      	movs	r0, #15
 80004da:	f7ff ff0d 	bl	80002f8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80004de:	2036      	movs	r0, #54	@ 0x36
 80004e0:	f7ff fefc 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80004e4:	20c8      	movs	r0, #200	@ 0xc8
 80004e6:	f7ff ff07 	bl	80002f8 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80004ea:	202a      	movs	r0, #42	@ 0x2a
 80004ec:	f7ff fef6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff ff01 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fefe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fefb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000502:	20ef      	movs	r0, #239	@ 0xef
 8000504:	f7ff fef8 	bl	80002f8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000508:	202b      	movs	r0, #43	@ 0x2b
 800050a:	f7ff fee7 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fef2 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff feef 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff feec 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000520:	203f      	movs	r0, #63	@ 0x3f
 8000522:	f7ff fee9 	bl	80002f8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000526:	203a      	movs	r0, #58	@ 0x3a
 8000528:	f7ff fed8 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 800052c:	2055      	movs	r0, #85	@ 0x55
 800052e:	f7ff fee3 	bl	80002f8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000532:	2011      	movs	r0, #17
 8000534:	f7ff fed2 	bl	80002dc <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000538:	4803      	ldr	r0, [pc, #12]	@ (8000548 <LCD_REG_Config+0x230>)
 800053a:	f7ff fe73 	bl	8000224 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800053e:	2029      	movs	r0, #41	@ 0x29
 8000540:	f7ff fecc 	bl	80002dc <LCD_Write_Cmd>
	
	
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0002bffc 	.word	0x0002bffc

0800054c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4604      	mov	r4, r0
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4623      	mov	r3, r4
 800055c:	80fb      	strh	r3, [r7, #6]
 800055e:	4603      	mov	r3, r0
 8000560:	80bb      	strh	r3, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
 8000566:	4613      	mov	r3, r2
 8000568:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800056a:	202a      	movs	r0, #42	@ 0x2a
 800056c:	f7ff feb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff febe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff feb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4413      	add	r3, r2
 800058e:	3b01      	subs	r3, #1
 8000590:	121b      	asrs	r3, r3, #8
 8000592:	b29b      	uxth	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff feaf 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	4413      	add	r3, r2
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fea4 	bl	80002f8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80005b0:	202b      	movs	r0, #43	@ 0x2b
 80005b2:	f7ff fe93 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe9b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe95 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80005ce:	88ba      	ldrh	r2, [r7, #4]
 80005d0:	883b      	ldrh	r3, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	121b      	asrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe8c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005e0:	88ba      	ldrh	r2, [r7, #4]
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe81 	bl	80002f8 <LCD_Write_Data>
	
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800060e:	202c      	movs	r0, #44	@ 0x2c
 8000610:	f7ff fe64 	bl	80002dc <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e006      	b.n	8000628 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe6b 	bl	80002f8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f4      	bcc.n	800061a <LCD_FillColor+0x1c>
		
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	887a      	ldrh	r2, [r7, #2]
 800065c:	88b9      	ldrh	r1, [r7, #4]
 800065e:	88f8      	ldrh	r0, [r7, #6]
 8000660:	f7ff ff74 	bl	800054c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	883a      	ldrh	r2, [r7, #0]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	461a      	mov	r2, r3
 800066e:	8b3b      	ldrh	r3, [r7, #24]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff ffc3 	bl	80005fe <LCD_FillColor>
	
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
 800068a:	460b      	mov	r3, r1
 800068c:	80bb      	strh	r3, [r7, #4]
 800068e:	4613      	mov	r3, r2
 8000690:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	3b20      	subs	r3, #32
 8000696:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000698:	88b9      	ldrh	r1, [r7, #4]
 800069a:	88f8      	ldrh	r0, [r7, #6]
 800069c:	2310      	movs	r3, #16
 800069e:	2208      	movs	r2, #8
 80006a0:	f7ff ff54 	bl	800054c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80006a4:	202c      	movs	r0, #44	@ 0x2c
 80006a6:	f7ff fe19 	bl	80002dc <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006aa:	2300      	movs	r3, #0
 80006ac:	73bb      	strb	r3, [r7, #14]
 80006ae:	e023      	b.n	80006f8 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80006b0:	7b3a      	ldrb	r2, [r7, #12]
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	4914      	ldr	r1, [pc, #80]	@ (8000708 <LCD_DrawChar+0x88>)
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	440a      	add	r2, r1
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006c0:	2300      	movs	r3, #0
 80006c2:	737b      	strb	r3, [r7, #13]
 80006c4:	e012      	b.n	80006ec <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d003      	beq.n	80006d8 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80006d0:	201f      	movs	r0, #31
 80006d2:	f7ff fe11 	bl	80002f8 <LCD_Write_Data>
 80006d6:	e003      	b.n	80006e0 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80006d8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80006dc:	f7ff fe0c 	bl	80002f8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	085b      	lsrs	r3, r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006e6:	7b7b      	ldrb	r3, [r7, #13]
 80006e8:	3301      	adds	r3, #1
 80006ea:	737b      	strb	r3, [r7, #13]
 80006ec:	7b7b      	ldrb	r3, [r7, #13]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d9e9      	bls.n	80006c6 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	3301      	adds	r3, #1
 80006f6:	73bb      	strb	r3, [r7, #14]
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d9d8      	bls.n	80006b0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	080037b8 	.word	0x080037b8

0800070c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	603a      	str	r2, [r7, #0]
 8000716:	80fb      	strh	r3, [r7, #6]
 8000718:	460b      	mov	r3, r1
 800071a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800071c:	e01c      	b.n	8000758 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2be8      	cmp	r3, #232	@ 0xe8
 8000722:	d904      	bls.n	800072e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000724:	2300      	movs	r3, #0
 8000726:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	3310      	adds	r3, #16
 800072c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8000734:	d903      	bls.n	800073e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000736:	2300      	movs	r3, #0
 8000738:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800073a:	2300      	movs	r3, #0
 800073c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	88b9      	ldrh	r1, [r7, #4]
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff9a 	bl	8000680 <LCD_DrawChar>
		
		pStr ++;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	3308      	adds	r3, #8
 8000756:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1de      	bne.n	800071e <LCD_DrawString+0x12>
		
	}
	
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 fb76 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f8a4 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f000 f912 	bl	80009a0 <MX_GPIO_Init>
  MX_FSMC_Init();
 800077c:	f000 f99c 	bl	8000ab8 <MX_FSMC_Init>
  MX_USART2_UART_Init();
 8000780:	f000 f8e4 	bl	800094c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LCD_INIT();
 8000784:	f7ff fd5f 	bl	8000246 <LCD_INIT>


  LCD_DrawString(100, 35, "X       Y");
 8000788:	4a44      	ldr	r2, [pc, #272]	@ (800089c <main+0x130>)
 800078a:	2123      	movs	r1, #35	@ 0x23
 800078c:	2064      	movs	r0, #100	@ 0x64
 800078e:	f7ff ffbd 	bl	800070c <LCD_DrawString>
  LCD_DrawString(10, 60, "Joystick:");
 8000792:	4a43      	ldr	r2, [pc, #268]	@ (80008a0 <main+0x134>)
 8000794:	213c      	movs	r1, #60	@ 0x3c
 8000796:	200a      	movs	r0, #10
 8000798:	f7ff ffb8 	bl	800070c <LCD_DrawString>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Simple polling receive
    if (HAL_UART_Receive(&huart2, Data, 2, 100) == HAL_OK)
 800079c:	2364      	movs	r3, #100	@ 0x64
 800079e:	2202      	movs	r2, #2
 80007a0:	4940      	ldr	r1, [pc, #256]	@ (80008a4 <main+0x138>)
 80007a2:	4841      	ldr	r0, [pc, #260]	@ (80008a8 <main+0x13c>)
 80007a4:	f001 fc8b 	bl	80020be <HAL_UART_Receive>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d116      	bne.n	80007dc <main+0x70>
    {
        // Successfully received data
        sprintf(buff, "RX OK");
 80007ae:	493f      	ldr	r1, [pc, #252]	@ (80008ac <main+0x140>)
 80007b0:	483f      	ldr	r0, [pc, #252]	@ (80008b0 <main+0x144>)
 80007b2:	f002 fb25 	bl	8002e00 <siprintf>
        LCD_DrawString(10, 140, buff);
 80007b6:	4a3e      	ldr	r2, [pc, #248]	@ (80008b0 <main+0x144>)
 80007b8:	218c      	movs	r1, #140	@ 0x8c
 80007ba:	200a      	movs	r0, #10
 80007bc:	f7ff ffa6 	bl	800070c <LCD_DrawString>
        sprintf(buff, "D0:%3d D1:%3d", Data[0], Data[1]);
 80007c0:	4b38      	ldr	r3, [pc, #224]	@ (80008a4 <main+0x138>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b37      	ldr	r3, [pc, #220]	@ (80008a4 <main+0x138>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	493a      	ldr	r1, [pc, #232]	@ (80008b4 <main+0x148>)
 80007cc:	4838      	ldr	r0, [pc, #224]	@ (80008b0 <main+0x144>)
 80007ce:	f002 fb17 	bl	8002e00 <siprintf>
        LCD_DrawString(10, 160, buff);
 80007d2:	4a37      	ldr	r2, [pc, #220]	@ (80008b0 <main+0x144>)
 80007d4:	21a0      	movs	r1, #160	@ 0xa0
 80007d6:	200a      	movs	r0, #10
 80007d8:	f7ff ff98 	bl	800070c <LCD_DrawString>
    }

    switch (Data[0]) {
 80007dc:	4b31      	ldr	r3, [pc, #196]	@ (80008a4 <main+0x138>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b06      	cmp	r3, #6
 80007e2:	d010      	beq.n	8000806 <main+0x9a>
 80007e4:	2b06      	cmp	r3, #6
 80007e6:	dc13      	bgt.n	8000810 <main+0xa4>
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d002      	beq.n	80007f2 <main+0x86>
 80007ec:	2b05      	cmp	r3, #5
 80007ee:	d005      	beq.n	80007fc <main+0x90>
 80007f0:	e00e      	b.n	8000810 <main+0xa4>
        case 4: cal_value[0] = -1; break;
 80007f2:	4b31      	ldr	r3, [pc, #196]	@ (80008b8 <main+0x14c>)
 80007f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f8:	801a      	strh	r2, [r3, #0]
 80007fa:	e010      	b.n	800081e <main+0xb2>
        case 5: cal_value[0] = -2; break;
 80007fc:	4b2e      	ldr	r3, [pc, #184]	@ (80008b8 <main+0x14c>)
 80007fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000802:	801a      	strh	r2, [r3, #0]
 8000804:	e00b      	b.n	800081e <main+0xb2>
        case 6: cal_value[0] = -3; break;
 8000806:	4b2c      	ldr	r3, [pc, #176]	@ (80008b8 <main+0x14c>)
 8000808:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800080c:	801a      	strh	r2, [r3, #0]
 800080e:	e006      	b.n	800081e <main+0xb2>
        default: cal_value[0] = (int8_t)Data[0]; break;
 8000810:	4b24      	ldr	r3, [pc, #144]	@ (80008a4 <main+0x138>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b25b      	sxtb	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <main+0x14c>)
 800081a:	801a      	strh	r2, [r3, #0]
 800081c:	bf00      	nop
    }

    switch (Data[1]) {
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <main+0x138>)
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	2b06      	cmp	r3, #6
 8000824:	d010      	beq.n	8000848 <main+0xdc>
 8000826:	2b06      	cmp	r3, #6
 8000828:	dc13      	bgt.n	8000852 <main+0xe6>
 800082a:	2b04      	cmp	r3, #4
 800082c:	d002      	beq.n	8000834 <main+0xc8>
 800082e:	2b05      	cmp	r3, #5
 8000830:	d005      	beq.n	800083e <main+0xd2>
 8000832:	e00e      	b.n	8000852 <main+0xe6>
        case 4: cal_value[1] = -1; break;
 8000834:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <main+0x14c>)
 8000836:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800083a:	805a      	strh	r2, [r3, #2]
 800083c:	e010      	b.n	8000860 <main+0xf4>
        case 5: cal_value[1] = -2; break;
 800083e:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <main+0x14c>)
 8000840:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000844:	805a      	strh	r2, [r3, #2]
 8000846:	e00b      	b.n	8000860 <main+0xf4>
        case 6: cal_value[1] = -3; break;
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <main+0x14c>)
 800084a:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800084e:	805a      	strh	r2, [r3, #2]
 8000850:	e006      	b.n	8000860 <main+0xf4>
        default: cal_value[1] = (int8_t)Data[1]; break;
 8000852:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <main+0x138>)
 8000854:	785b      	ldrb	r3, [r3, #1]
 8000856:	b25b      	sxtb	r3, r3
 8000858:	461a      	mov	r2, r3
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <main+0x14c>)
 800085c:	805a      	strh	r2, [r3, #2]
 800085e:	bf00      	nop
    }

    // Display calibrated values
    sprintf(buff, "%3d", cal_value[0]);
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <main+0x14c>)
 8000862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000866:	461a      	mov	r2, r3
 8000868:	4914      	ldr	r1, [pc, #80]	@ (80008bc <main+0x150>)
 800086a:	4811      	ldr	r0, [pc, #68]	@ (80008b0 <main+0x144>)
 800086c:	f002 fac8 	bl	8002e00 <siprintf>
    LCD_DrawString(100, 60, buff);
 8000870:	4a0f      	ldr	r2, [pc, #60]	@ (80008b0 <main+0x144>)
 8000872:	213c      	movs	r1, #60	@ 0x3c
 8000874:	2064      	movs	r0, #100	@ 0x64
 8000876:	f7ff ff49 	bl	800070c <LCD_DrawString>

    sprintf(buff, "%3d", cal_value[1]);
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <main+0x14c>)
 800087c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000880:	461a      	mov	r2, r3
 8000882:	490e      	ldr	r1, [pc, #56]	@ (80008bc <main+0x150>)
 8000884:	480a      	ldr	r0, [pc, #40]	@ (80008b0 <main+0x144>)
 8000886:	f002 fabb 	bl	8002e00 <siprintf>
    LCD_DrawString(160, 60, buff);
 800088a:	4a09      	ldr	r2, [pc, #36]	@ (80008b0 <main+0x144>)
 800088c:	213c      	movs	r1, #60	@ 0x3c
 800088e:	20a0      	movs	r0, #160	@ 0xa0
 8000890:	f7ff ff3c 	bl	800070c <LCD_DrawString>

    HAL_Delay(50);
 8000894:	2032      	movs	r0, #50	@ 0x32
 8000896:	f000 fb45 	bl	8000f24 <HAL_Delay>
    if (HAL_UART_Receive(&huart2, Data, 2, 100) == HAL_OK)
 800089a:	e77f      	b.n	800079c <main+0x30>
 800089c:	08003794 	.word	0x08003794
 80008a0:	080037a0 	.word	0x080037a0
 80008a4:	2000012c 	.word	0x2000012c
 80008a8:	20000078 	.word	0x20000078
 80008ac:	080037ac 	.word	0x080037ac
 80008b0:	2000010c 	.word	0x2000010c
 80008b4:	08003784 	.word	0x08003784
 80008b8:	20000108 	.word	0x20000108
 80008bc:	080037b4 	.word	0x080037b4

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b090      	sub	sp, #64	@ 0x40
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0318 	add.w	r3, r7, #24
 80008ca:	2228      	movs	r2, #40	@ 0x28
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 fab6 	bl	8002e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f4:	2302      	movs	r3, #2
 80008f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	4618      	mov	r0, r3
 800090a:	f000 ff2b 	bl	8001764 <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000914:	f000 f934 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2302      	movs	r3, #2
 800091e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000924:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2102      	movs	r1, #2
 8000932:	4618      	mov	r0, r3
 8000934:	f001 f998 	bl	8001c68 <HAL_RCC_ClockConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800093e:	f000 f91f 	bl	8000b80 <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	3740      	adds	r7, #64	@ 0x40
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <MX_USART2_UART_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000984:	f001 fb4b 	bl	800201e <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800098e:	f000 f8f7 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000078 	.word	0x20000078
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b4:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa8 <MX_GPIO_Init+0x108>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a3b      	ldr	r2, [pc, #236]	@ (8000aa8 <MX_GPIO_Init+0x108>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b39      	ldr	r3, [pc, #228]	@ (8000aa8 <MX_GPIO_Init+0x108>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b36      	ldr	r3, [pc, #216]	@ (8000aa8 <MX_GPIO_Init+0x108>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a35      	ldr	r2, [pc, #212]	@ (8000aa8 <MX_GPIO_Init+0x108>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b33      	ldr	r3, [pc, #204]	@ (8000aa8 <MX_GPIO_Init+0x108>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e4:	4b30      	ldr	r3, [pc, #192]	@ (8000aa8 <MX_GPIO_Init+0x108>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a2f      	ldr	r2, [pc, #188]	@ (8000aa8 <MX_GPIO_Init+0x108>)
 80009ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa8 <MX_GPIO_Init+0x108>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fc:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa8 <MX_GPIO_Init+0x108>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a29      	ldr	r2, [pc, #164]	@ (8000aa8 <MX_GPIO_Init+0x108>)
 8000a02:	f043 0320 	orr.w	r3, r3, #32
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b27      	ldr	r3, [pc, #156]	@ (8000aa8 <MX_GPIO_Init+0x108>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0320 	and.w	r3, r3, #32
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2110      	movs	r1, #16
 8000a18:	4824      	ldr	r0, [pc, #144]	@ (8000aac <MX_GPIO_Init+0x10c>)
 8000a1a:	f000 fe8b 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a24:	4822      	ldr	r0, [pc, #136]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 8000a26:	f000 fe85 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4821      	ldr	r0, [pc, #132]	@ (8000ab4 <MX_GPIO_Init+0x114>)
 8000a30:	f000 fe80 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a34:	230c      	movs	r3, #12
 8000a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	481a      	ldr	r0, [pc, #104]	@ (8000aac <MX_GPIO_Init+0x10c>)
 8000a44:	f000 fce2 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4813      	ldr	r0, [pc, #76]	@ (8000aac <MX_GPIO_Init+0x10c>)
 8000a60:	f000 fcd4 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 8000a7e:	f000 fcc5 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a82:	2302      	movs	r3, #2
 8000a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	4619      	mov	r1, r3
 8000a98:	4806      	ldr	r0, [pc, #24]	@ (8000ab4 <MX_GPIO_Init+0x114>)
 8000a9a:	f000 fcb7 	bl	800140c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3720      	adds	r7, #32
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40011000 	.word	0x40011000
 8000ab0:	40011400 	.word	0x40011400
 8000ab4:	40011800 	.word	0x40011800

08000ab8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ad0:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000ad2:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000ad6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ad8:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000ada:	4a27      	ldr	r2, [pc, #156]	@ (8000b78 <MX_FSMC_Init+0xc0>)
 8000adc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000ade:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ae4:	4b23      	ldr	r3, [pc, #140]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000aea:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000af0:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000af2:	2210      	movs	r2, #16
 8000af4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000b10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b14:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000b2e:	230f      	movs	r3, #15
 8000b30:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000b32:	230f      	movs	r3, #15
 8000b34:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000b36:	23ff      	movs	r3, #255	@ 0xff
 8000b38:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b3e:	2310      	movs	r3, #16
 8000b40:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000b42:	2311      	movs	r3, #17
 8000b44:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4808      	ldr	r0, [pc, #32]	@ (8000b74 <MX_FSMC_Init+0xbc>)
 8000b52:	f001 fa17 	bl	8001f84 <HAL_SRAM_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000b5c:	f000 f810 	bl	8000b80 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_FSMC_Init+0xc4>)
 8000b62:	69db      	ldr	r3, [r3, #28]
 8000b64:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <MX_FSMC_Init+0xc4>)
 8000b66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b6a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200000c0 	.word	0x200000c0
 8000b78:	a0000104 	.word	0xa0000104
 8000b7c:	40010000 	.word	0x40010000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <HAL_MspInit+0x5c>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	4a14      	ldr	r2, [pc, #80]	@ (8000be8 <HAL_MspInit+0x5c>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6193      	str	r3, [r2, #24]
 8000b9e:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_MspInit+0x5c>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <HAL_MspInit+0x5c>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4a0e      	ldr	r2, [pc, #56]	@ (8000be8 <HAL_MspInit+0x5c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <HAL_MspInit+0x5c>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_MspInit+0x60>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <HAL_MspInit+0x60>)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010000 	.word	0x40010000

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000c88 <HAL_UART_MspInit+0x98>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d137      	bne.n	8000c80 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c10:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <HAL_UART_MspInit+0x9c>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	4a1d      	ldr	r2, [pc, #116]	@ (8000c8c <HAL_UART_MspInit+0x9c>)
 8000c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1a:	61d3      	str	r3, [r2, #28]
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <HAL_UART_MspInit+0x9c>)
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <HAL_UART_MspInit+0x9c>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a17      	ldr	r2, [pc, #92]	@ (8000c8c <HAL_UART_MspInit+0x9c>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <HAL_UART_MspInit+0x9c>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c40:	2304      	movs	r3, #4
 8000c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	480f      	ldr	r0, [pc, #60]	@ (8000c90 <HAL_UART_MspInit+0xa0>)
 8000c54:	f000 fbda 	bl	800140c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4809      	ldr	r0, [pc, #36]	@ (8000c90 <HAL_UART_MspInit+0xa0>)
 8000c6c:	f000 fbce 	bl	800140c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	2026      	movs	r0, #38	@ 0x26
 8000c76:	f000 fa50 	bl	800111a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c7a:	2026      	movs	r0, #38	@ 0x26
 8000c7c:	f000 fa69 	bl	8001152 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010800 	.word	0x40010800

08000c94 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000ca8:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <HAL_FSMC_MspInit+0x78>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d129      	bne.n	8000d04 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <HAL_FSMC_MspInit+0x78>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <HAL_FSMC_MspInit+0x7c>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4a15      	ldr	r2, [pc, #84]	@ (8000d10 <HAL_FSMC_MspInit+0x7c>)
 8000cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc0:	6153      	str	r3, [r2, #20]
 8000cc2:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <HAL_FSMC_MspInit+0x7c>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000cce:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000cd2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <HAL_FSMC_MspInit+0x80>)
 8000ce4:	f000 fb92 	bl	800140c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ce8:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8000cec:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4806      	ldr	r0, [pc, #24]	@ (8000d18 <HAL_FSMC_MspInit+0x84>)
 8000cfe:	f000 fb85 	bl	800140c <HAL_GPIO_Init>
 8000d02:	e000      	b.n	8000d06 <HAL_FSMC_MspInit+0x72>
    return;
 8000d04:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000130 	.word	0x20000130
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40011800 	.word	0x40011800
 8000d18:	40011400 	.word	0x40011400

08000d1c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000d24:	f7ff ffb6 	bl	8000c94 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <NMI_Handler+0x4>

08000d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <MemManage_Handler+0x4>

08000d48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f8b4 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <USART2_IRQHandler+0x10>)
 8000d8e:	f001 fa2d 	bl	80021ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000078 	.word	0x20000078

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f002 f840 	bl	8002e50 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20010000 	.word	0x20010000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	20000134 	.word	0x20000134
 8000e04:	20000288 	.word	0x20000288

08000e08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e14:	f7ff fff8 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	480b      	ldr	r0, [pc, #44]	@ (8000e48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e1a:	490c      	ldr	r1, [pc, #48]	@ (8000e4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a09      	ldr	r2, [pc, #36]	@ (8000e54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e30:	4c09      	ldr	r4, [pc, #36]	@ (8000e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f002 f80d 	bl	8002e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e42:	f7ff fc93 	bl	800076c <main>
  bx lr
 8000e46:	4770      	bx	lr
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e50:	08003e10 	.word	0x08003e10
  ldr r2, =_sbss
 8000e54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e58:	20000284 	.word	0x20000284

08000e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC1_2_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <HAL_Init+0x28>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	@ (8000e88 <HAL_Init+0x28>)
 8000e6a:	f043 0310 	orr.w	r3, r3, #16
 8000e6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f947 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fe86 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f95f 	bl	800116e <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec8:	f000 f927 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	@ (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <HAL_IncTick+0x1c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <HAL_IncTick+0x20>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a03      	ldr	r2, [pc, #12]	@ (8000f0c <HAL_IncTick+0x20>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000138 	.word	0x20000138

08000f10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b02      	ldr	r3, [pc, #8]	@ (8000f20 <HAL_GetTick+0x10>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000138 	.word	0x20000138

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff fff0 	bl	8000f10 <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffe0 	bl	8000f10 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	db0b      	blt.n	8000ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 021f 	and.w	r2, r3, #31
 8000fe8:	4906      	ldr	r1, [pc, #24]	@ (8001004 <__NVIC_EnableIRQ+0x34>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	@ (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	@ (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	@ 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	@ 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e4:	f7ff ff90 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff2d 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff42 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff90 	bl	800105c <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5f 	bl	8001008 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff35 	bl	8000fd0 <__NVIC_EnableIRQ>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffa2 	bl	80010c0 <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001186:	b480      	push	{r7}
 8001188:	b085      	sub	sp, #20
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d008      	beq.n	80011b0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2204      	movs	r2, #4
 80011a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e020      	b.n	80011f2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 020e 	bic.w	r2, r2, #14
 80011be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0201 	bic.w	r2, r2, #1
 80011ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011d8:	2101      	movs	r1, #1
 80011da:	fa01 f202 	lsl.w	r2, r1, r2
 80011de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d005      	beq.n	8001220 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2204      	movs	r2, #4
 8001218:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e0d6      	b.n	80013ce <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 020e 	bic.w	r2, r2, #14
 800122e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0201 	bic.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b64      	ldr	r3, [pc, #400]	@ (80013d8 <HAL_DMA_Abort_IT+0x1dc>)
 8001248:	429a      	cmp	r2, r3
 800124a:	d958      	bls.n	80012fe <HAL_DMA_Abort_IT+0x102>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a62      	ldr	r2, [pc, #392]	@ (80013dc <HAL_DMA_Abort_IT+0x1e0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d04f      	beq.n	80012f6 <HAL_DMA_Abort_IT+0xfa>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a61      	ldr	r2, [pc, #388]	@ (80013e0 <HAL_DMA_Abort_IT+0x1e4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d048      	beq.n	80012f2 <HAL_DMA_Abort_IT+0xf6>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a5f      	ldr	r2, [pc, #380]	@ (80013e4 <HAL_DMA_Abort_IT+0x1e8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d040      	beq.n	80012ec <HAL_DMA_Abort_IT+0xf0>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a5e      	ldr	r2, [pc, #376]	@ (80013e8 <HAL_DMA_Abort_IT+0x1ec>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d038      	beq.n	80012e6 <HAL_DMA_Abort_IT+0xea>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a5c      	ldr	r2, [pc, #368]	@ (80013ec <HAL_DMA_Abort_IT+0x1f0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d030      	beq.n	80012e0 <HAL_DMA_Abort_IT+0xe4>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a5b      	ldr	r2, [pc, #364]	@ (80013f0 <HAL_DMA_Abort_IT+0x1f4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d028      	beq.n	80012da <HAL_DMA_Abort_IT+0xde>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a52      	ldr	r2, [pc, #328]	@ (80013d8 <HAL_DMA_Abort_IT+0x1dc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d020      	beq.n	80012d4 <HAL_DMA_Abort_IT+0xd8>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a57      	ldr	r2, [pc, #348]	@ (80013f4 <HAL_DMA_Abort_IT+0x1f8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d019      	beq.n	80012d0 <HAL_DMA_Abort_IT+0xd4>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a55      	ldr	r2, [pc, #340]	@ (80013f8 <HAL_DMA_Abort_IT+0x1fc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d012      	beq.n	80012cc <HAL_DMA_Abort_IT+0xd0>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a54      	ldr	r2, [pc, #336]	@ (80013fc <HAL_DMA_Abort_IT+0x200>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d00a      	beq.n	80012c6 <HAL_DMA_Abort_IT+0xca>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a52      	ldr	r2, [pc, #328]	@ (8001400 <HAL_DMA_Abort_IT+0x204>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d102      	bne.n	80012c0 <HAL_DMA_Abort_IT+0xc4>
 80012ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012be:	e01b      	b.n	80012f8 <HAL_DMA_Abort_IT+0xfc>
 80012c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012c4:	e018      	b.n	80012f8 <HAL_DMA_Abort_IT+0xfc>
 80012c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012ca:	e015      	b.n	80012f8 <HAL_DMA_Abort_IT+0xfc>
 80012cc:	2310      	movs	r3, #16
 80012ce:	e013      	b.n	80012f8 <HAL_DMA_Abort_IT+0xfc>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e011      	b.n	80012f8 <HAL_DMA_Abort_IT+0xfc>
 80012d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012d8:	e00e      	b.n	80012f8 <HAL_DMA_Abort_IT+0xfc>
 80012da:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012de:	e00b      	b.n	80012f8 <HAL_DMA_Abort_IT+0xfc>
 80012e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e4:	e008      	b.n	80012f8 <HAL_DMA_Abort_IT+0xfc>
 80012e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ea:	e005      	b.n	80012f8 <HAL_DMA_Abort_IT+0xfc>
 80012ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f0:	e002      	b.n	80012f8 <HAL_DMA_Abort_IT+0xfc>
 80012f2:	2310      	movs	r3, #16
 80012f4:	e000      	b.n	80012f8 <HAL_DMA_Abort_IT+0xfc>
 80012f6:	2301      	movs	r3, #1
 80012f8:	4a42      	ldr	r2, [pc, #264]	@ (8001404 <HAL_DMA_Abort_IT+0x208>)
 80012fa:	6053      	str	r3, [r2, #4]
 80012fc:	e057      	b.n	80013ae <HAL_DMA_Abort_IT+0x1b2>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a36      	ldr	r2, [pc, #216]	@ (80013dc <HAL_DMA_Abort_IT+0x1e0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d04f      	beq.n	80013a8 <HAL_DMA_Abort_IT+0x1ac>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a34      	ldr	r2, [pc, #208]	@ (80013e0 <HAL_DMA_Abort_IT+0x1e4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d048      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x1a8>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a33      	ldr	r2, [pc, #204]	@ (80013e4 <HAL_DMA_Abort_IT+0x1e8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d040      	beq.n	800139e <HAL_DMA_Abort_IT+0x1a2>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a31      	ldr	r2, [pc, #196]	@ (80013e8 <HAL_DMA_Abort_IT+0x1ec>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d038      	beq.n	8001398 <HAL_DMA_Abort_IT+0x19c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a30      	ldr	r2, [pc, #192]	@ (80013ec <HAL_DMA_Abort_IT+0x1f0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d030      	beq.n	8001392 <HAL_DMA_Abort_IT+0x196>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2e      	ldr	r2, [pc, #184]	@ (80013f0 <HAL_DMA_Abort_IT+0x1f4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d028      	beq.n	800138c <HAL_DMA_Abort_IT+0x190>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a26      	ldr	r2, [pc, #152]	@ (80013d8 <HAL_DMA_Abort_IT+0x1dc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d020      	beq.n	8001386 <HAL_DMA_Abort_IT+0x18a>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a2a      	ldr	r2, [pc, #168]	@ (80013f4 <HAL_DMA_Abort_IT+0x1f8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_DMA_Abort_IT+0x186>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a29      	ldr	r2, [pc, #164]	@ (80013f8 <HAL_DMA_Abort_IT+0x1fc>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d012      	beq.n	800137e <HAL_DMA_Abort_IT+0x182>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a27      	ldr	r2, [pc, #156]	@ (80013fc <HAL_DMA_Abort_IT+0x200>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00a      	beq.n	8001378 <HAL_DMA_Abort_IT+0x17c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a26      	ldr	r2, [pc, #152]	@ (8001400 <HAL_DMA_Abort_IT+0x204>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d102      	bne.n	8001372 <HAL_DMA_Abort_IT+0x176>
 800136c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001370:	e01b      	b.n	80013aa <HAL_DMA_Abort_IT+0x1ae>
 8001372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001376:	e018      	b.n	80013aa <HAL_DMA_Abort_IT+0x1ae>
 8001378:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800137c:	e015      	b.n	80013aa <HAL_DMA_Abort_IT+0x1ae>
 800137e:	2310      	movs	r3, #16
 8001380:	e013      	b.n	80013aa <HAL_DMA_Abort_IT+0x1ae>
 8001382:	2301      	movs	r3, #1
 8001384:	e011      	b.n	80013aa <HAL_DMA_Abort_IT+0x1ae>
 8001386:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800138a:	e00e      	b.n	80013aa <HAL_DMA_Abort_IT+0x1ae>
 800138c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001390:	e00b      	b.n	80013aa <HAL_DMA_Abort_IT+0x1ae>
 8001392:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001396:	e008      	b.n	80013aa <HAL_DMA_Abort_IT+0x1ae>
 8001398:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139c:	e005      	b.n	80013aa <HAL_DMA_Abort_IT+0x1ae>
 800139e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a2:	e002      	b.n	80013aa <HAL_DMA_Abort_IT+0x1ae>
 80013a4:	2310      	movs	r3, #16
 80013a6:	e000      	b.n	80013aa <HAL_DMA_Abort_IT+0x1ae>
 80013a8:	2301      	movs	r3, #1
 80013aa:	4a17      	ldr	r2, [pc, #92]	@ (8001408 <HAL_DMA_Abort_IT+0x20c>)
 80013ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	4798      	blx	r3
    } 
  }
  return status;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40020080 	.word	0x40020080
 80013dc:	40020008 	.word	0x40020008
 80013e0:	4002001c 	.word	0x4002001c
 80013e4:	40020030 	.word	0x40020030
 80013e8:	40020044 	.word	0x40020044
 80013ec:	40020058 	.word	0x40020058
 80013f0:	4002006c 	.word	0x4002006c
 80013f4:	40020408 	.word	0x40020408
 80013f8:	4002041c 	.word	0x4002041c
 80013fc:	40020430 	.word	0x40020430
 8001400:	40020444 	.word	0x40020444
 8001404:	40020400 	.word	0x40020400
 8001408:	40020000 	.word	0x40020000

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b08b      	sub	sp, #44	@ 0x2c
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	e179      	b.n	8001714 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001420:	2201      	movs	r2, #1
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	429a      	cmp	r2, r3
 800143a:	f040 8168 	bne.w	800170e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4a96      	ldr	r2, [pc, #600]	@ (800169c <HAL_GPIO_Init+0x290>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d05e      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001448:	4a94      	ldr	r2, [pc, #592]	@ (800169c <HAL_GPIO_Init+0x290>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d875      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 800144e:	4a94      	ldr	r2, [pc, #592]	@ (80016a0 <HAL_GPIO_Init+0x294>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d058      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001454:	4a92      	ldr	r2, [pc, #584]	@ (80016a0 <HAL_GPIO_Init+0x294>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d86f      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 800145a:	4a92      	ldr	r2, [pc, #584]	@ (80016a4 <HAL_GPIO_Init+0x298>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d052      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001460:	4a90      	ldr	r2, [pc, #576]	@ (80016a4 <HAL_GPIO_Init+0x298>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d869      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 8001466:	4a90      	ldr	r2, [pc, #576]	@ (80016a8 <HAL_GPIO_Init+0x29c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d04c      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 800146c:	4a8e      	ldr	r2, [pc, #568]	@ (80016a8 <HAL_GPIO_Init+0x29c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d863      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 8001472:	4a8e      	ldr	r2, [pc, #568]	@ (80016ac <HAL_GPIO_Init+0x2a0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d046      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001478:	4a8c      	ldr	r2, [pc, #560]	@ (80016ac <HAL_GPIO_Init+0x2a0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d85d      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 800147e:	2b12      	cmp	r3, #18
 8001480:	d82a      	bhi.n	80014d8 <HAL_GPIO_Init+0xcc>
 8001482:	2b12      	cmp	r3, #18
 8001484:	d859      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 8001486:	a201      	add	r2, pc, #4	@ (adr r2, 800148c <HAL_GPIO_Init+0x80>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	08001507 	.word	0x08001507
 8001490:	080014e1 	.word	0x080014e1
 8001494:	080014f3 	.word	0x080014f3
 8001498:	08001535 	.word	0x08001535
 800149c:	0800153b 	.word	0x0800153b
 80014a0:	0800153b 	.word	0x0800153b
 80014a4:	0800153b 	.word	0x0800153b
 80014a8:	0800153b 	.word	0x0800153b
 80014ac:	0800153b 	.word	0x0800153b
 80014b0:	0800153b 	.word	0x0800153b
 80014b4:	0800153b 	.word	0x0800153b
 80014b8:	0800153b 	.word	0x0800153b
 80014bc:	0800153b 	.word	0x0800153b
 80014c0:	0800153b 	.word	0x0800153b
 80014c4:	0800153b 	.word	0x0800153b
 80014c8:	0800153b 	.word	0x0800153b
 80014cc:	0800153b 	.word	0x0800153b
 80014d0:	080014e9 	.word	0x080014e9
 80014d4:	080014fd 	.word	0x080014fd
 80014d8:	4a75      	ldr	r2, [pc, #468]	@ (80016b0 <HAL_GPIO_Init+0x2a4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014de:	e02c      	b.n	800153a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	623b      	str	r3, [r7, #32]
          break;
 80014e6:	e029      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	3304      	adds	r3, #4
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	e024      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	3308      	adds	r3, #8
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e01f      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	330c      	adds	r3, #12
 8001502:	623b      	str	r3, [r7, #32]
          break;
 8001504:	e01a      	b.n	800153c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800150e:	2304      	movs	r3, #4
 8001510:	623b      	str	r3, [r7, #32]
          break;
 8001512:	e013      	b.n	800153c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800151c:	2308      	movs	r3, #8
 800151e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	611a      	str	r2, [r3, #16]
          break;
 8001526:	e009      	b.n	800153c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001528:	2308      	movs	r3, #8
 800152a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	615a      	str	r2, [r3, #20]
          break;
 8001532:	e003      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e000      	b.n	800153c <HAL_GPIO_Init+0x130>
          break;
 800153a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2bff      	cmp	r3, #255	@ 0xff
 8001540:	d801      	bhi.n	8001546 <HAL_GPIO_Init+0x13a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	e001      	b.n	800154a <HAL_GPIO_Init+0x13e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3304      	adds	r3, #4
 800154a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2bff      	cmp	r3, #255	@ 0xff
 8001550:	d802      	bhi.n	8001558 <HAL_GPIO_Init+0x14c>
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	e002      	b.n	800155e <HAL_GPIO_Init+0x152>
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	3b08      	subs	r3, #8
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	210f      	movs	r1, #15
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	401a      	ands	r2, r3
 8001570:	6a39      	ldr	r1, [r7, #32]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	431a      	orrs	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80c1 	beq.w	800170e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800158c:	4b49      	ldr	r3, [pc, #292]	@ (80016b4 <HAL_GPIO_Init+0x2a8>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a48      	ldr	r2, [pc, #288]	@ (80016b4 <HAL_GPIO_Init+0x2a8>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b46      	ldr	r3, [pc, #280]	@ (80016b4 <HAL_GPIO_Init+0x2a8>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015a4:	4a44      	ldr	r2, [pc, #272]	@ (80016b8 <HAL_GPIO_Init+0x2ac>)
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4013      	ands	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a3c      	ldr	r2, [pc, #240]	@ (80016bc <HAL_GPIO_Init+0x2b0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d01f      	beq.n	8001610 <HAL_GPIO_Init+0x204>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a3b      	ldr	r2, [pc, #236]	@ (80016c0 <HAL_GPIO_Init+0x2b4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d019      	beq.n	800160c <HAL_GPIO_Init+0x200>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a3a      	ldr	r2, [pc, #232]	@ (80016c4 <HAL_GPIO_Init+0x2b8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d013      	beq.n	8001608 <HAL_GPIO_Init+0x1fc>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a39      	ldr	r2, [pc, #228]	@ (80016c8 <HAL_GPIO_Init+0x2bc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d00d      	beq.n	8001604 <HAL_GPIO_Init+0x1f8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a38      	ldr	r2, [pc, #224]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d007      	beq.n	8001600 <HAL_GPIO_Init+0x1f4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a37      	ldr	r2, [pc, #220]	@ (80016d0 <HAL_GPIO_Init+0x2c4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d101      	bne.n	80015fc <HAL_GPIO_Init+0x1f0>
 80015f8:	2305      	movs	r3, #5
 80015fa:	e00a      	b.n	8001612 <HAL_GPIO_Init+0x206>
 80015fc:	2306      	movs	r3, #6
 80015fe:	e008      	b.n	8001612 <HAL_GPIO_Init+0x206>
 8001600:	2304      	movs	r3, #4
 8001602:	e006      	b.n	8001612 <HAL_GPIO_Init+0x206>
 8001604:	2303      	movs	r3, #3
 8001606:	e004      	b.n	8001612 <HAL_GPIO_Init+0x206>
 8001608:	2302      	movs	r3, #2
 800160a:	e002      	b.n	8001612 <HAL_GPIO_Init+0x206>
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_GPIO_Init+0x206>
 8001610:	2300      	movs	r3, #0
 8001612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001614:	f002 0203 	and.w	r2, r2, #3
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	4093      	lsls	r3, r2
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001622:	4925      	ldr	r1, [pc, #148]	@ (80016b8 <HAL_GPIO_Init+0x2ac>)
 8001624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d006      	beq.n	800164a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800163c:	4b25      	ldr	r3, [pc, #148]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	4924      	ldr	r1, [pc, #144]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	608b      	str	r3, [r1, #8]
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800164a:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	43db      	mvns	r3, r3
 8001652:	4920      	ldr	r1, [pc, #128]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 8001654:	4013      	ands	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	491a      	ldr	r1, [pc, #104]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	60cb      	str	r3, [r1, #12]
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001672:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	43db      	mvns	r3, r3
 800167a:	4916      	ldr	r1, [pc, #88]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 800167c:	4013      	ands	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d025      	beq.n	80016d8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	4910      	ldr	r1, [pc, #64]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
 8001698:	e025      	b.n	80016e6 <HAL_GPIO_Init+0x2da>
 800169a:	bf00      	nop
 800169c:	10320000 	.word	0x10320000
 80016a0:	10310000 	.word	0x10310000
 80016a4:	10220000 	.word	0x10220000
 80016a8:	10210000 	.word	0x10210000
 80016ac:	10120000 	.word	0x10120000
 80016b0:	10110000 	.word	0x10110000
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010000 	.word	0x40010000
 80016bc:	40010800 	.word	0x40010800
 80016c0:	40010c00 	.word	0x40010c00
 80016c4:	40011000 	.word	0x40011000
 80016c8:	40011400 	.word	0x40011400
 80016cc:	40011800 	.word	0x40011800
 80016d0:	40011c00 	.word	0x40011c00
 80016d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016d8:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_GPIO_Init+0x324>)
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	43db      	mvns	r3, r3
 80016e0:	4913      	ldr	r1, [pc, #76]	@ (8001730 <HAL_GPIO_Init+0x324>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_GPIO_Init+0x324>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	490e      	ldr	r1, [pc, #56]	@ (8001730 <HAL_GPIO_Init+0x324>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
 80016fe:	e006      	b.n	800170e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_GPIO_Init+0x324>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	43db      	mvns	r3, r3
 8001708:	4909      	ldr	r1, [pc, #36]	@ (8001730 <HAL_GPIO_Init+0x324>)
 800170a:	4013      	ands	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	3301      	adds	r3, #1
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	f47f ae7e 	bne.w	8001420 <HAL_GPIO_Init+0x14>
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	372c      	adds	r7, #44	@ 0x2c
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001750:	e003      	b.n	800175a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	041a      	lsls	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	611a      	str	r2, [r3, #16]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e272      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8087 	beq.w	8001892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001784:	4b92      	ldr	r3, [pc, #584]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b04      	cmp	r3, #4
 800178e:	d00c      	beq.n	80017aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001790:	4b8f      	ldr	r3, [pc, #572]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b08      	cmp	r3, #8
 800179a:	d112      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
 800179c:	4b8c      	ldr	r3, [pc, #560]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a8:	d10b      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017aa:	4b89      	ldr	r3, [pc, #548]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d06c      	beq.n	8001890 <HAL_RCC_OscConfig+0x12c>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d168      	bne.n	8001890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e24c      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x76>
 80017cc:	4b80      	ldr	r3, [pc, #512]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a7f      	ldr	r2, [pc, #508]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e02e      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x98>
 80017e2:	4b7b      	ldr	r3, [pc, #492]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a7a      	ldr	r2, [pc, #488]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b78      	ldr	r3, [pc, #480]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a77      	ldr	r2, [pc, #476]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0xbc>
 8001806:	4b72      	ldr	r3, [pc, #456]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a71      	ldr	r2, [pc, #452]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6f      	ldr	r3, [pc, #444]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6e      	ldr	r2, [pc, #440]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 8001820:	4b6b      	ldr	r3, [pc, #428]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a6a      	ldr	r2, [pc, #424]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b68      	ldr	r3, [pc, #416]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a67      	ldr	r2, [pc, #412]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fb66 	bl	8000f10 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fb62 	bl	8000f10 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	@ 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e200      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b5d      	ldr	r3, [pc, #372]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xe4>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fb52 	bl	8000f10 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fb4e 	bl	8000f10 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	@ 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1ec      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	4b53      	ldr	r3, [pc, #332]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x10c>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d063      	beq.n	8001966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800189e:	4b4c      	ldr	r3, [pc, #304]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018aa:	4b49      	ldr	r3, [pc, #292]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d11c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x18c>
 80018b6:	4b46      	ldr	r3, [pc, #280]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d116      	bne.n	80018f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	4b43      	ldr	r3, [pc, #268]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x176>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1c0      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b3d      	ldr	r3, [pc, #244]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4939      	ldr	r1, [pc, #228]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	e03a      	b.n	8001966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	4b36      	ldr	r3, [pc, #216]	@ (80019d4 <HAL_RCC_OscConfig+0x270>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fb07 	bl	8000f10 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff fb03 	bl	8000f10 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1a1      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	4b2d      	ldr	r3, [pc, #180]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4927      	ldr	r1, [pc, #156]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193a:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <HAL_RCC_OscConfig+0x270>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fae6 	bl	8000f10 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff fae2 	bl	8000f10 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e180      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d03a      	beq.n	80019e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d019      	beq.n	80019ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197a:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff fac6 	bl	8000f10 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff fac2 	bl	8000f10 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e160      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 face 	bl	8001f48 <RCC_Delay>
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ae:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7ff faac 	bl	8000f10 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ba:	e00f      	b.n	80019dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019bc:	f7ff faa8 	bl	8000f10 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d908      	bls.n	80019dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e146      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	42420000 	.word	0x42420000
 80019d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	4b92      	ldr	r3, [pc, #584]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e9      	bne.n	80019bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80a6 	beq.w	8001b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10d      	bne.n	8001a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b88      	ldr	r3, [pc, #544]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a87      	ldr	r2, [pc, #540]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b85      	ldr	r3, [pc, #532]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a22:	4b82      	ldr	r3, [pc, #520]	@ (8001c2c <HAL_RCC_OscConfig+0x4c8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d118      	bne.n	8001a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c2c <HAL_RCC_OscConfig+0x4c8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7e      	ldr	r2, [pc, #504]	@ (8001c2c <HAL_RCC_OscConfig+0x4c8>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fa69 	bl	8000f10 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7ff fa65 	bl	8000f10 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b64      	cmp	r3, #100	@ 0x64
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e103      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	4b75      	ldr	r3, [pc, #468]	@ (8001c2c <HAL_RCC_OscConfig+0x4c8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x312>
 8001a68:	4b6f      	ldr	r3, [pc, #444]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6213      	str	r3, [r2, #32]
 8001a74:	e02d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x334>
 8001a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a69      	ldr	r2, [pc, #420]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6213      	str	r3, [r2, #32]
 8001a8a:	4b67      	ldr	r3, [pc, #412]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a66      	ldr	r2, [pc, #408]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	f023 0304 	bic.w	r3, r3, #4
 8001a94:	6213      	str	r3, [r2, #32]
 8001a96:	e01c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d10c      	bne.n	8001aba <HAL_RCC_OscConfig+0x356>
 8001aa0:	4b61      	ldr	r3, [pc, #388]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4a60      	ldr	r2, [pc, #384]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6213      	str	r3, [r2, #32]
 8001aac:	4b5e      	ldr	r3, [pc, #376]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6213      	str	r3, [r2, #32]
 8001ab8:	e00b      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001aba:	4b5b      	ldr	r3, [pc, #364]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a5a      	ldr	r2, [pc, #360]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	4b58      	ldr	r3, [pc, #352]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a57      	ldr	r2, [pc, #348]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d015      	beq.n	8001b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fa19 	bl	8000f10 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7ff fa15 	bl	8000f10 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0b1      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ee      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x37e>
 8001b04:	e014      	b.n	8001b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff fa03 	bl	8000f10 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff f9ff 	bl	8000f10 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e09b      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b24:	4b40      	ldr	r3, [pc, #256]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ee      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8087 	beq.w	8001c5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4c:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d061      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d146      	bne.n	8001bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b60:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <HAL_RCC_OscConfig+0x4cc>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff f9d3 	bl	8000f10 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff f9cf 	bl	8000f10 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e06d      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b94:	d108      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b96:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	4921      	ldr	r1, [pc, #132]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a19      	ldr	r1, [r3, #32]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	491b      	ldr	r1, [pc, #108]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <HAL_RCC_OscConfig+0x4cc>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff f9a3 	bl	8000f10 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff f99f 	bl	8000f10 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e03d      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x46a>
 8001bec:	e035      	b.n	8001c5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_RCC_OscConfig+0x4cc>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f98c 	bl	8000f10 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff f988 	bl	8000f10 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e026      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x498>
 8001c1a:	e01e      	b.n	8001c5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e019      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_RCC_OscConfig+0x500>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000

08001c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0d0      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d910      	bls.n	8001cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b67      	ldr	r3, [pc, #412]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 0207 	bic.w	r2, r3, #7
 8001c92:	4965      	ldr	r1, [pc, #404]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b63      	ldr	r3, [pc, #396]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0b8      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc4:	4b59      	ldr	r3, [pc, #356]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4a58      	ldr	r2, [pc, #352]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cdc:	4b53      	ldr	r3, [pc, #332]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a52      	ldr	r2, [pc, #328]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce8:	4b50      	ldr	r3, [pc, #320]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	494d      	ldr	r1, [pc, #308]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d040      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b47      	ldr	r3, [pc, #284]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d115      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e07f      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d26:	4b41      	ldr	r3, [pc, #260]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e073      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	4b3d      	ldr	r3, [pc, #244]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06b      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d46:	4b39      	ldr	r3, [pc, #228]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f023 0203 	bic.w	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4936      	ldr	r1, [pc, #216]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d58:	f7ff f8da 	bl	8000f10 <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7ff f8d6 	bl	8000f10 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e053      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	4b2d      	ldr	r3, [pc, #180]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 020c 	and.w	r2, r3, #12
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1eb      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d210      	bcs.n	8001db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4922      	ldr	r1, [pc, #136]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e032      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4916      	ldr	r1, [pc, #88]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d009      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de2:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	490e      	ldr	r1, [pc, #56]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df6:	f000 f821 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	490a      	ldr	r1, [pc, #40]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e08:	5ccb      	ldrb	r3, [r1, r3]
 8001e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0e:	4a09      	ldr	r2, [pc, #36]	@ (8001e34 <HAL_RCC_ClockConfig+0x1cc>)
 8001e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_RCC_ClockConfig+0x1d0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f838 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	08003da8 	.word	0x08003da8
 8001e34:	20000000 	.word	0x20000000
 8001e38:	20000004 	.word	0x20000004

08001e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d002      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x30>
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d003      	beq.n	8001e72 <HAL_RCC_GetSysClockFreq+0x36>
 8001e6a:	e027      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e6e:	613b      	str	r3, [r7, #16]
      break;
 8001e70:	e027      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0c9b      	lsrs	r3, r3, #18
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	4a17      	ldr	r2, [pc, #92]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e7c:	5cd3      	ldrb	r3, [r2, r3]
 8001e7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d010      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	0c5b      	lsrs	r3, r3, #17
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	4a11      	ldr	r2, [pc, #68]	@ (8001edc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e004      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	613b      	str	r3, [r7, #16]
      break;
 8001eba:	e002      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ebe:	613b      	str	r3, [r7, #16]
      break;
 8001ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec2:	693b      	ldr	r3, [r7, #16]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	007a1200 	.word	0x007a1200
 8001ed8:	08003dc0 	.word	0x08003dc0
 8001edc:	08003dd0 	.word	0x08003dd0
 8001ee0:	003d0900 	.word	0x003d0900

08001ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee8:	4b02      	ldr	r3, [pc, #8]	@ (8001ef4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	20000000 	.word	0x20000000

08001ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001efc:	f7ff fff2 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4903      	ldr	r1, [pc, #12]	@ (8001f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08003db8 	.word	0x08003db8

08001f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f24:	f7ff ffde 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0adb      	lsrs	r3, r3, #11
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4903      	ldr	r1, [pc, #12]	@ (8001f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08003db8 	.word	0x08003db8

08001f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f50:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <RCC_Delay+0x34>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <RCC_Delay+0x38>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0a5b      	lsrs	r3, r3, #9
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f64:	bf00      	nop
  }
  while (Delay --);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1e5a      	subs	r2, r3, #1
 8001f6a:	60fa      	str	r2, [r7, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f9      	bne.n	8001f64 <RCC_Delay+0x1c>
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	10624dd3 	.word	0x10624dd3

08001f84 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d004      	beq.n	8001fa0 <HAL_SRAM_Init+0x1c>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f9e:	d101      	bne.n	8001fa4 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e038      	b.n	8002016 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7fe feaf 	bl	8000d1c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4610      	mov	r0, r2
 8001fca:	f000 fe49 	bl	8002c60 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	f000 feab 	bl	8002d34 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6858      	ldr	r0, [r3, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	f000 fed0 	bl	8002d90 <FSMC_NORSRAM_Extended_Timing_Init>
                                          hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	6892      	ldr	r2, [r2, #8]
 8001ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	6892      	ldr	r2, [r2, #8]
 8002004:	f041 0101 	orr.w	r1, r1, #1
 8002008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e042      	b.n	80020b6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe fdd3 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2224      	movs	r2, #36	@ 0x24
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002060:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fd6e 	bl	8002b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002076:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002086:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002096:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2220      	movs	r2, #32
 80020aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b08a      	sub	sp, #40	@ 0x28
 80020c2:	af02      	add	r7, sp, #8
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b20      	cmp	r3, #32
 80020dc:	f040 8081 	bne.w	80021e2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_UART_Receive+0x2e>
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e079      	b.n	80021e4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2222      	movs	r2, #34	@ 0x22
 80020fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002104:	f7fe ff04 	bl	8000f10 <HAL_GetTick>
 8002108:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	88fa      	ldrh	r2, [r7, #6]
 800210e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	88fa      	ldrh	r2, [r7, #6]
 8002114:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800211e:	d108      	bne.n	8002132 <HAL_UART_Receive+0x74>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d104      	bne.n	8002132 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	e003      	b.n	800213a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800213a:	e047      	b.n	80021cc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2200      	movs	r2, #0
 8002144:	2120      	movs	r1, #32
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fb08 	bl	800275c <UART_WaitOnFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e042      	b.n	80021e4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10c      	bne.n	800217e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	b29b      	uxth	r3, r3
 800216c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002170:	b29a      	uxth	r2, r3
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	3302      	adds	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	e01f      	b.n	80021be <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002186:	d007      	beq.n	8002198 <HAL_UART_Receive+0xda>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <HAL_UART_Receive+0xe8>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d106      	bne.n	80021a6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e008      	b.n	80021b8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	3301      	adds	r3, #1
 80021bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1b2      	bne.n	800213c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
  }
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3720      	adds	r7, #32
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0ba      	sub	sp, #232	@ 0xe8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800221e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800222a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10f      	bne.n	8002252 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_UART_IRQHandler+0x66>
 800223e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fbbc 	bl	80029c8 <UART_Receive_IT>
      return;
 8002250:	e25b      	b.n	800270a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80de 	beq.w	8002418 <HAL_UART_IRQHandler+0x22c>
 800225c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d106      	bne.n	8002276 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800226c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80d1 	beq.w	8002418 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_UART_IRQHandler+0xae>
 8002282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800229a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_UART_IRQHandler+0xd2>
 80022a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	f043 0202 	orr.w	r2, r3, #2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_UART_IRQHandler+0xf6>
 80022ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	f043 0204 	orr.w	r2, r3, #4
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d011      	beq.n	8002312 <HAL_UART_IRQHandler+0x126>
 80022ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f043 0208 	orr.w	r2, r3, #8
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 81f2 	beq.w	8002700 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800231c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_UART_IRQHandler+0x14e>
 8002328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fb47 	bl	80029c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <HAL_UART_IRQHandler+0x17a>
 800235e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04f      	beq.n	8002406 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fa51 	bl	800280e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d041      	beq.n	80023fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3314      	adds	r3, #20
 8002380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002384:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002388:	e853 3f00 	ldrex	r3, [r3]
 800238c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3314      	adds	r3, #20
 80023a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80023a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80023aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80023b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80023b6:	e841 2300 	strex	r3, r2, [r1]
 80023ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80023be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1d9      	bne.n	800237a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d013      	beq.n	80023f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d2:	4a7e      	ldr	r2, [pc, #504]	@ (80025cc <HAL_UART_IRQHandler+0x3e0>)
 80023d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe ff0e 	bl	80011fc <HAL_DMA_Abort_IT>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d016      	beq.n	8002414 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023f0:	4610      	mov	r0, r2
 80023f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f4:	e00e      	b.n	8002414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f99c 	bl	8002734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023fc:	e00a      	b.n	8002414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f998 	bl	8002734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002404:	e006      	b.n	8002414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f994 	bl	8002734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002412:	e175      	b.n	8002700 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002414:	bf00      	nop
    return;
 8002416:	e173      	b.n	8002700 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	2b01      	cmp	r3, #1
 800241e:	f040 814f 	bne.w	80026c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8148 	beq.w	80026c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8141 	beq.w	80026c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80b6 	beq.w	80025d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002470:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 8145 	beq.w	8002704 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800247e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002482:	429a      	cmp	r2, r3
 8002484:	f080 813e 	bcs.w	8002704 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800248e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b20      	cmp	r3, #32
 8002498:	f000 8088 	beq.w	80025ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024aa:	e853 3f00 	ldrex	r3, [r3]
 80024ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80024b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	330c      	adds	r3, #12
 80024c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80024c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80024cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80024d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80024d8:	e841 2300 	strex	r3, r2, [r1]
 80024dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80024e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1d9      	bne.n	800249c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3314      	adds	r3, #20
 80024ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024f2:	e853 3f00 	ldrex	r3, [r3]
 80024f6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80024f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3314      	adds	r3, #20
 8002508:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800250c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002510:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002512:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002514:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002518:	e841 2300 	strex	r3, r2, [r1]
 800251c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800251e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1e1      	bne.n	80024e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3314      	adds	r3, #20
 800252a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800252e:	e853 3f00 	ldrex	r3, [r3]
 8002532:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800253a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3314      	adds	r3, #20
 8002544:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002548:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800254a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800254e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002550:	e841 2300 	strex	r3, r2, [r1]
 8002554:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002556:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e3      	bne.n	8002524 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	330c      	adds	r3, #12
 8002570:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002574:	e853 3f00 	ldrex	r3, [r3]
 8002578:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800257a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800257c:	f023 0310 	bic.w	r3, r3, #16
 8002580:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800258e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002590:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002592:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002594:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002596:	e841 2300 	strex	r3, r2, [r1]
 800259a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800259c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1e3      	bne.n	800256a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fded 	bl	8001186 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	b29b      	uxth	r3, r3
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f8bf 	bl	8002746 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025c8:	e09c      	b.n	8002704 <HAL_UART_IRQHandler+0x518>
 80025ca:	bf00      	nop
 80025cc:	080028d3 	.word	0x080028d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025d8:	b29b      	uxth	r3, r3
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 808e 	beq.w	8002708 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80025ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8089 	beq.w	8002708 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	330c      	adds	r3, #12
 80025fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002600:	e853 3f00 	ldrex	r3, [r3]
 8002604:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800260c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	330c      	adds	r3, #12
 8002616:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800261a:	647a      	str	r2, [r7, #68]	@ 0x44
 800261c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002620:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002622:	e841 2300 	strex	r3, r2, [r1]
 8002626:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1e3      	bne.n	80025f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3314      	adds	r3, #20
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	e853 3f00 	ldrex	r3, [r3]
 800263c:	623b      	str	r3, [r7, #32]
   return(result);
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3314      	adds	r3, #20
 800264e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002652:	633a      	str	r2, [r7, #48]	@ 0x30
 8002654:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800265a:	e841 2300 	strex	r3, r2, [r1]
 800265e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1e3      	bne.n	800262e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	330c      	adds	r3, #12
 800267a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	e853 3f00 	ldrex	r3, [r3]
 8002682:	60fb      	str	r3, [r7, #12]
   return(result);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0310 	bic.w	r3, r3, #16
 800268a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	330c      	adds	r3, #12
 8002694:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002698:	61fa      	str	r2, [r7, #28]
 800269a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269c:	69b9      	ldr	r1, [r7, #24]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	e841 2300 	strex	r3, r2, [r1]
 80026a4:	617b      	str	r3, [r7, #20]
   return(result);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e3      	bne.n	8002674 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f844 	bl	8002746 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026be:	e023      	b.n	8002708 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_UART_IRQHandler+0x4f4>
 80026cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f90e 	bl	80028fa <UART_Transmit_IT>
    return;
 80026de:	e014      	b.n	800270a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00e      	beq.n	800270a <HAL_UART_IRQHandler+0x51e>
 80026ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f94d 	bl	8002998 <UART_EndTransmit_IT>
    return;
 80026fe:	e004      	b.n	800270a <HAL_UART_IRQHandler+0x51e>
    return;
 8002700:	bf00      	nop
 8002702:	e002      	b.n	800270a <HAL_UART_IRQHandler+0x51e>
      return;
 8002704:	bf00      	nop
 8002706:	e000      	b.n	800270a <HAL_UART_IRQHandler+0x51e>
      return;
 8002708:	bf00      	nop
  }
}
 800270a:	37e8      	adds	r7, #232	@ 0xe8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800276c:	e03b      	b.n	80027e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002774:	d037      	beq.n	80027e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002776:	f7fe fbcb 	bl	8000f10 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	6a3a      	ldr	r2, [r7, #32]
 8002782:	429a      	cmp	r2, r3
 8002784:	d302      	bcc.n	800278c <UART_WaitOnFlagUntilTimeout+0x30>
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e03a      	b.n	8002806 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d023      	beq.n	80027e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b80      	cmp	r3, #128	@ 0x80
 80027a2:	d020      	beq.n	80027e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b40      	cmp	r3, #64	@ 0x40
 80027a8:	d01d      	beq.n	80027e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d116      	bne.n	80027e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f81d 	bl	800280e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2208      	movs	r2, #8
 80027d8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00f      	b.n	8002806 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4013      	ands	r3, r2
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	bf0c      	ite	eq
 80027f6:	2301      	moveq	r3, #1
 80027f8:	2300      	movne	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	429a      	cmp	r2, r3
 8002802:	d0b4      	beq.n	800276e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800280e:	b480      	push	{r7}
 8002810:	b095      	sub	sp, #84	@ 0x54
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	330c      	adds	r3, #12
 800281c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800282c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	330c      	adds	r3, #12
 8002834:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002836:	643a      	str	r2, [r7, #64]	@ 0x40
 8002838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800283c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800283e:	e841 2300 	strex	r3, r2, [r1]
 8002842:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1e5      	bne.n	8002816 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3314      	adds	r3, #20
 8002850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	e853 3f00 	ldrex	r3, [r3]
 8002858:	61fb      	str	r3, [r7, #28]
   return(result);
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3314      	adds	r3, #20
 8002868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800286a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800286c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e5      	bne.n	800284a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	2b01      	cmp	r3, #1
 8002884:	d119      	bne.n	80028ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	330c      	adds	r3, #12
 800288c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	e853 3f00 	ldrex	r3, [r3]
 8002894:	60bb      	str	r3, [r7, #8]
   return(result);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f023 0310 	bic.w	r3, r3, #16
 800289c:	647b      	str	r3, [r7, #68]	@ 0x44
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	330c      	adds	r3, #12
 80028a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028a6:	61ba      	str	r2, [r7, #24]
 80028a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	6979      	ldr	r1, [r7, #20]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	e841 2300 	strex	r3, r2, [r1]
 80028b2:	613b      	str	r3, [r7, #16]
   return(result);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e5      	bne.n	8002886 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028c8:	bf00      	nop
 80028ca:	3754      	adds	r7, #84	@ 0x54
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff ff21 	bl	8002734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b21      	cmp	r3, #33	@ 0x21
 800290c:	d13e      	bne.n	800298c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002916:	d114      	bne.n	8002942 <UART_Transmit_IT+0x48>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d110      	bne.n	8002942 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002934:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	1c9a      	adds	r2, r3, #2
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	621a      	str	r2, [r3, #32]
 8002940:	e008      	b.n	8002954 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	1c59      	adds	r1, r3, #1
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6211      	str	r1, [r2, #32]
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29b      	uxth	r3, r3
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4619      	mov	r1, r3
 8002962:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10f      	bne.n	8002988 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002976:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002986:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	e000      	b.n	800298e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800298c:	2302      	movs	r3, #2
  }
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fea9 	bl	8002710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08c      	sub	sp, #48	@ 0x30
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b22      	cmp	r3, #34	@ 0x22
 80029da:	f040 80ae 	bne.w	8002b3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029e6:	d117      	bne.n	8002a18 <UART_Receive_IT+0x50>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d113      	bne.n	8002a18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	1c9a      	adds	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a16:	e026      	b.n	8002a66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a2a:	d007      	beq.n	8002a3c <UART_Receive_IT+0x74>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <UART_Receive_IT+0x82>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d106      	bne.n	8002a4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	e008      	b.n	8002a5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4619      	mov	r1, r3
 8002a74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d15d      	bne.n	8002b36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0220 	bic.w	r2, r2, #32
 8002a88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695a      	ldr	r2, [r3, #20]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d135      	bne.n	8002b2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330c      	adds	r3, #12
 8002acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	e853 3f00 	ldrex	r3, [r3]
 8002ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f023 0310 	bic.w	r3, r3, #16
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	330c      	adds	r3, #12
 8002ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae6:	623a      	str	r2, [r7, #32]
 8002ae8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aea:	69f9      	ldr	r1, [r7, #28]
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	e841 2300 	strex	r3, r2, [r1]
 8002af2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e5      	bne.n	8002ac6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d10a      	bne.n	8002b1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b22:	4619      	mov	r1, r3
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fe0e 	bl	8002746 <HAL_UARTEx_RxEventCallback>
 8002b2a:	e002      	b.n	8002b32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff fdf8 	bl	8002722 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e002      	b.n	8002b3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3730      	adds	r7, #48	@ 0x30
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002b7e:	f023 030c 	bic.w	r3, r3, #12
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8002c58 <UART_SetConfig+0x114>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d103      	bne.n	8002bb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bac:	f7ff f9b8 	bl	8001f20 <HAL_RCC_GetPCLK2Freq>
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	e002      	b.n	8002bba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bb4:	f7ff f9a0 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002bb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	4a22      	ldr	r2, [pc, #136]	@ (8002c5c <UART_SetConfig+0x118>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	0119      	lsls	r1, r3, #4
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	009a      	lsls	r2, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c5c <UART_SetConfig+0x118>)
 8002bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2064      	movs	r0, #100	@ 0x64
 8002bfa:	fb00 f303 	mul.w	r3, r0, r3
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	3332      	adds	r3, #50	@ 0x32
 8002c04:	4a15      	ldr	r2, [pc, #84]	@ (8002c5c <UART_SetConfig+0x118>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c10:	4419      	add	r1, r3
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <UART_SetConfig+0x118>)
 8002c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2064      	movs	r0, #100	@ 0x64
 8002c32:	fb00 f303 	mul.w	r3, r0, r3
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	3332      	adds	r3, #50	@ 0x32
 8002c3c:	4a07      	ldr	r2, [pc, #28]	@ (8002c5c <UART_SetConfig+0x118>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	f003 020f 	and.w	r2, r3, #15
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	440a      	add	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40013800 	.word	0x40013800
 8002c5c:	51eb851f 	.word	0x51eb851f

08002c60 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	f023 0101 	bic.w	r1, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d102      	bne.n	8002c90 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002c8a:	2340      	movs	r3, #64	@ 0x40
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e001      	b.n	8002c94 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002ca0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002ca6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002cac:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002cb2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002cb8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002cbe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8002cc4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8002cca:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8002cd0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8002cee:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <FSMC_NORSRAM_Init+0xd0>)
 8002cf0:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cf8:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8002d00:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	ea02 0103 	and.w	r1, r2, r3
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4319      	orrs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	0008fb7f 	.word	0x0008fb7f

08002d34 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8002d4a:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8002d52:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8002d5a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8002d64:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	3b02      	subs	r3, #2
 8002d6c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8002d6e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 8002d7a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
	...

08002d90 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002da4:	d11d      	bne.n	8002de2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002dae:	4b13      	ldr	r3, [pc, #76]	@ (8002dfc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	6811      	ldr	r1, [r2, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	6852      	ldr	r2, [r2, #4]
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	4311      	orrs	r1, r2
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	6892      	ldr	r2, [r2, #8]
 8002dc2:	0212      	lsls	r2, r2, #8
 8002dc4:	4311      	orrs	r1, r2
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	6992      	ldr	r2, [r2, #24]
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	68d2      	ldr	r2, [r2, #12]
 8002dd0:	0412      	lsls	r2, r2, #16
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	ea43 0102 	orr.w	r1, r3, r2
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002de0:	e005      	b.n	8002dee <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8002dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	cff00000 	.word	0xcff00000

08002e00 <siprintf>:
 8002e00:	b40e      	push	{r1, r2, r3}
 8002e02:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e06:	b500      	push	{lr}
 8002e08:	b09c      	sub	sp, #112	@ 0x70
 8002e0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e0c:	9002      	str	r0, [sp, #8]
 8002e0e:	9006      	str	r0, [sp, #24]
 8002e10:	9107      	str	r1, [sp, #28]
 8002e12:	9104      	str	r1, [sp, #16]
 8002e14:	4808      	ldr	r0, [pc, #32]	@ (8002e38 <siprintf+0x38>)
 8002e16:	4909      	ldr	r1, [pc, #36]	@ (8002e3c <siprintf+0x3c>)
 8002e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e1c:	9105      	str	r1, [sp, #20]
 8002e1e:	6800      	ldr	r0, [r0, #0]
 8002e20:	a902      	add	r1, sp, #8
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	f000 f89c 	bl	8002f60 <_svfiprintf_r>
 8002e28:	2200      	movs	r2, #0
 8002e2a:	9b02      	ldr	r3, [sp, #8]
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	b01c      	add	sp, #112	@ 0x70
 8002e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e34:	b003      	add	sp, #12
 8002e36:	4770      	bx	lr
 8002e38:	2000000c 	.word	0x2000000c
 8002e3c:	ffff0208 	.word	0xffff0208

08002e40 <memset>:
 8002e40:	4603      	mov	r3, r0
 8002e42:	4402      	add	r2, r0
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d100      	bne.n	8002e4a <memset+0xa>
 8002e48:	4770      	bx	lr
 8002e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e4e:	e7f9      	b.n	8002e44 <memset+0x4>

08002e50 <__errno>:
 8002e50:	4b01      	ldr	r3, [pc, #4]	@ (8002e58 <__errno+0x8>)
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	2000000c 	.word	0x2000000c

08002e5c <__libc_init_array>:
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	2600      	movs	r6, #0
 8002e60:	4d0c      	ldr	r5, [pc, #48]	@ (8002e94 <__libc_init_array+0x38>)
 8002e62:	4c0d      	ldr	r4, [pc, #52]	@ (8002e98 <__libc_init_array+0x3c>)
 8002e64:	1b64      	subs	r4, r4, r5
 8002e66:	10a4      	asrs	r4, r4, #2
 8002e68:	42a6      	cmp	r6, r4
 8002e6a:	d109      	bne.n	8002e80 <__libc_init_array+0x24>
 8002e6c:	f000 fc78 	bl	8003760 <_init>
 8002e70:	2600      	movs	r6, #0
 8002e72:	4d0a      	ldr	r5, [pc, #40]	@ (8002e9c <__libc_init_array+0x40>)
 8002e74:	4c0a      	ldr	r4, [pc, #40]	@ (8002ea0 <__libc_init_array+0x44>)
 8002e76:	1b64      	subs	r4, r4, r5
 8002e78:	10a4      	asrs	r4, r4, #2
 8002e7a:	42a6      	cmp	r6, r4
 8002e7c:	d105      	bne.n	8002e8a <__libc_init_array+0x2e>
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
 8002e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e84:	4798      	blx	r3
 8002e86:	3601      	adds	r6, #1
 8002e88:	e7ee      	b.n	8002e68 <__libc_init_array+0xc>
 8002e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8e:	4798      	blx	r3
 8002e90:	3601      	adds	r6, #1
 8002e92:	e7f2      	b.n	8002e7a <__libc_init_array+0x1e>
 8002e94:	08003e08 	.word	0x08003e08
 8002e98:	08003e08 	.word	0x08003e08
 8002e9c:	08003e08 	.word	0x08003e08
 8002ea0:	08003e0c 	.word	0x08003e0c

08002ea4 <__retarget_lock_acquire_recursive>:
 8002ea4:	4770      	bx	lr

08002ea6 <__retarget_lock_release_recursive>:
 8002ea6:	4770      	bx	lr

08002ea8 <__ssputs_r>:
 8002ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eac:	461f      	mov	r7, r3
 8002eae:	688e      	ldr	r6, [r1, #8]
 8002eb0:	4682      	mov	sl, r0
 8002eb2:	42be      	cmp	r6, r7
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	4690      	mov	r8, r2
 8002eb8:	680b      	ldr	r3, [r1, #0]
 8002eba:	d82d      	bhi.n	8002f18 <__ssputs_r+0x70>
 8002ebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002ec0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002ec4:	d026      	beq.n	8002f14 <__ssputs_r+0x6c>
 8002ec6:	6965      	ldr	r5, [r4, #20]
 8002ec8:	6909      	ldr	r1, [r1, #16]
 8002eca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ece:	eba3 0901 	sub.w	r9, r3, r1
 8002ed2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ed6:	1c7b      	adds	r3, r7, #1
 8002ed8:	444b      	add	r3, r9
 8002eda:	106d      	asrs	r5, r5, #1
 8002edc:	429d      	cmp	r5, r3
 8002ede:	bf38      	it	cc
 8002ee0:	461d      	movcc	r5, r3
 8002ee2:	0553      	lsls	r3, r2, #21
 8002ee4:	d527      	bpl.n	8002f36 <__ssputs_r+0x8e>
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	f000 f958 	bl	800319c <_malloc_r>
 8002eec:	4606      	mov	r6, r0
 8002eee:	b360      	cbz	r0, 8002f4a <__ssputs_r+0xa2>
 8002ef0:	464a      	mov	r2, r9
 8002ef2:	6921      	ldr	r1, [r4, #16]
 8002ef4:	f000 fbd6 	bl	80036a4 <memcpy>
 8002ef8:	89a3      	ldrh	r3, [r4, #12]
 8002efa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f02:	81a3      	strh	r3, [r4, #12]
 8002f04:	6126      	str	r6, [r4, #16]
 8002f06:	444e      	add	r6, r9
 8002f08:	6026      	str	r6, [r4, #0]
 8002f0a:	463e      	mov	r6, r7
 8002f0c:	6165      	str	r5, [r4, #20]
 8002f0e:	eba5 0509 	sub.w	r5, r5, r9
 8002f12:	60a5      	str	r5, [r4, #8]
 8002f14:	42be      	cmp	r6, r7
 8002f16:	d900      	bls.n	8002f1a <__ssputs_r+0x72>
 8002f18:	463e      	mov	r6, r7
 8002f1a:	4632      	mov	r2, r6
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	6820      	ldr	r0, [r4, #0]
 8002f20:	f000 fb88 	bl	8003634 <memmove>
 8002f24:	2000      	movs	r0, #0
 8002f26:	68a3      	ldr	r3, [r4, #8]
 8002f28:	1b9b      	subs	r3, r3, r6
 8002f2a:	60a3      	str	r3, [r4, #8]
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	4433      	add	r3, r6
 8002f30:	6023      	str	r3, [r4, #0]
 8002f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f36:	462a      	mov	r2, r5
 8002f38:	f000 fb4e 	bl	80035d8 <_realloc_r>
 8002f3c:	4606      	mov	r6, r0
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d1e0      	bne.n	8002f04 <__ssputs_r+0x5c>
 8002f42:	4650      	mov	r0, sl
 8002f44:	6921      	ldr	r1, [r4, #16]
 8002f46:	f000 fbbb 	bl	80036c0 <_free_r>
 8002f4a:	230c      	movs	r3, #12
 8002f4c:	f8ca 3000 	str.w	r3, [sl]
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f5a:	81a3      	strh	r3, [r4, #12]
 8002f5c:	e7e9      	b.n	8002f32 <__ssputs_r+0x8a>
	...

08002f60 <_svfiprintf_r>:
 8002f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f64:	4698      	mov	r8, r3
 8002f66:	898b      	ldrh	r3, [r1, #12]
 8002f68:	4607      	mov	r7, r0
 8002f6a:	061b      	lsls	r3, r3, #24
 8002f6c:	460d      	mov	r5, r1
 8002f6e:	4614      	mov	r4, r2
 8002f70:	b09d      	sub	sp, #116	@ 0x74
 8002f72:	d510      	bpl.n	8002f96 <_svfiprintf_r+0x36>
 8002f74:	690b      	ldr	r3, [r1, #16]
 8002f76:	b973      	cbnz	r3, 8002f96 <_svfiprintf_r+0x36>
 8002f78:	2140      	movs	r1, #64	@ 0x40
 8002f7a:	f000 f90f 	bl	800319c <_malloc_r>
 8002f7e:	6028      	str	r0, [r5, #0]
 8002f80:	6128      	str	r0, [r5, #16]
 8002f82:	b930      	cbnz	r0, 8002f92 <_svfiprintf_r+0x32>
 8002f84:	230c      	movs	r3, #12
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f8c:	b01d      	add	sp, #116	@ 0x74
 8002f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f92:	2340      	movs	r3, #64	@ 0x40
 8002f94:	616b      	str	r3, [r5, #20]
 8002f96:	2300      	movs	r3, #0
 8002f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002fa0:	2330      	movs	r3, #48	@ 0x30
 8002fa2:	f04f 0901 	mov.w	r9, #1
 8002fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002faa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003144 <_svfiprintf_r+0x1e4>
 8002fae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002fb2:	4623      	mov	r3, r4
 8002fb4:	469a      	mov	sl, r3
 8002fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fba:	b10a      	cbz	r2, 8002fc0 <_svfiprintf_r+0x60>
 8002fbc:	2a25      	cmp	r2, #37	@ 0x25
 8002fbe:	d1f9      	bne.n	8002fb4 <_svfiprintf_r+0x54>
 8002fc0:	ebba 0b04 	subs.w	fp, sl, r4
 8002fc4:	d00b      	beq.n	8002fde <_svfiprintf_r+0x7e>
 8002fc6:	465b      	mov	r3, fp
 8002fc8:	4622      	mov	r2, r4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	4638      	mov	r0, r7
 8002fce:	f7ff ff6b 	bl	8002ea8 <__ssputs_r>
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	f000 80a7 	beq.w	8003126 <_svfiprintf_r+0x1c6>
 8002fd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002fda:	445a      	add	r2, fp
 8002fdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8002fde:	f89a 3000 	ldrb.w	r3, [sl]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 809f 	beq.w	8003126 <_svfiprintf_r+0x1c6>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ff2:	f10a 0a01 	add.w	sl, sl, #1
 8002ff6:	9304      	str	r3, [sp, #16]
 8002ff8:	9307      	str	r3, [sp, #28]
 8002ffa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ffe:	931a      	str	r3, [sp, #104]	@ 0x68
 8003000:	4654      	mov	r4, sl
 8003002:	2205      	movs	r2, #5
 8003004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003008:	484e      	ldr	r0, [pc, #312]	@ (8003144 <_svfiprintf_r+0x1e4>)
 800300a:	f000 fb3d 	bl	8003688 <memchr>
 800300e:	9a04      	ldr	r2, [sp, #16]
 8003010:	b9d8      	cbnz	r0, 800304a <_svfiprintf_r+0xea>
 8003012:	06d0      	lsls	r0, r2, #27
 8003014:	bf44      	itt	mi
 8003016:	2320      	movmi	r3, #32
 8003018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800301c:	0711      	lsls	r1, r2, #28
 800301e:	bf44      	itt	mi
 8003020:	232b      	movmi	r3, #43	@ 0x2b
 8003022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003026:	f89a 3000 	ldrb.w	r3, [sl]
 800302a:	2b2a      	cmp	r3, #42	@ 0x2a
 800302c:	d015      	beq.n	800305a <_svfiprintf_r+0xfa>
 800302e:	4654      	mov	r4, sl
 8003030:	2000      	movs	r0, #0
 8003032:	f04f 0c0a 	mov.w	ip, #10
 8003036:	9a07      	ldr	r2, [sp, #28]
 8003038:	4621      	mov	r1, r4
 800303a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800303e:	3b30      	subs	r3, #48	@ 0x30
 8003040:	2b09      	cmp	r3, #9
 8003042:	d94b      	bls.n	80030dc <_svfiprintf_r+0x17c>
 8003044:	b1b0      	cbz	r0, 8003074 <_svfiprintf_r+0x114>
 8003046:	9207      	str	r2, [sp, #28]
 8003048:	e014      	b.n	8003074 <_svfiprintf_r+0x114>
 800304a:	eba0 0308 	sub.w	r3, r0, r8
 800304e:	fa09 f303 	lsl.w	r3, r9, r3
 8003052:	4313      	orrs	r3, r2
 8003054:	46a2      	mov	sl, r4
 8003056:	9304      	str	r3, [sp, #16]
 8003058:	e7d2      	b.n	8003000 <_svfiprintf_r+0xa0>
 800305a:	9b03      	ldr	r3, [sp, #12]
 800305c:	1d19      	adds	r1, r3, #4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	9103      	str	r1, [sp, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	bfbb      	ittet	lt
 8003066:	425b      	neglt	r3, r3
 8003068:	f042 0202 	orrlt.w	r2, r2, #2
 800306c:	9307      	strge	r3, [sp, #28]
 800306e:	9307      	strlt	r3, [sp, #28]
 8003070:	bfb8      	it	lt
 8003072:	9204      	strlt	r2, [sp, #16]
 8003074:	7823      	ldrb	r3, [r4, #0]
 8003076:	2b2e      	cmp	r3, #46	@ 0x2e
 8003078:	d10a      	bne.n	8003090 <_svfiprintf_r+0x130>
 800307a:	7863      	ldrb	r3, [r4, #1]
 800307c:	2b2a      	cmp	r3, #42	@ 0x2a
 800307e:	d132      	bne.n	80030e6 <_svfiprintf_r+0x186>
 8003080:	9b03      	ldr	r3, [sp, #12]
 8003082:	3402      	adds	r4, #2
 8003084:	1d1a      	adds	r2, r3, #4
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	9203      	str	r2, [sp, #12]
 800308a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800308e:	9305      	str	r3, [sp, #20]
 8003090:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003148 <_svfiprintf_r+0x1e8>
 8003094:	2203      	movs	r2, #3
 8003096:	4650      	mov	r0, sl
 8003098:	7821      	ldrb	r1, [r4, #0]
 800309a:	f000 faf5 	bl	8003688 <memchr>
 800309e:	b138      	cbz	r0, 80030b0 <_svfiprintf_r+0x150>
 80030a0:	2240      	movs	r2, #64	@ 0x40
 80030a2:	9b04      	ldr	r3, [sp, #16]
 80030a4:	eba0 000a 	sub.w	r0, r0, sl
 80030a8:	4082      	lsls	r2, r0
 80030aa:	4313      	orrs	r3, r2
 80030ac:	3401      	adds	r4, #1
 80030ae:	9304      	str	r3, [sp, #16]
 80030b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030b4:	2206      	movs	r2, #6
 80030b6:	4825      	ldr	r0, [pc, #148]	@ (800314c <_svfiprintf_r+0x1ec>)
 80030b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80030bc:	f000 fae4 	bl	8003688 <memchr>
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d036      	beq.n	8003132 <_svfiprintf_r+0x1d2>
 80030c4:	4b22      	ldr	r3, [pc, #136]	@ (8003150 <_svfiprintf_r+0x1f0>)
 80030c6:	bb1b      	cbnz	r3, 8003110 <_svfiprintf_r+0x1b0>
 80030c8:	9b03      	ldr	r3, [sp, #12]
 80030ca:	3307      	adds	r3, #7
 80030cc:	f023 0307 	bic.w	r3, r3, #7
 80030d0:	3308      	adds	r3, #8
 80030d2:	9303      	str	r3, [sp, #12]
 80030d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030d6:	4433      	add	r3, r6
 80030d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80030da:	e76a      	b.n	8002fb2 <_svfiprintf_r+0x52>
 80030dc:	460c      	mov	r4, r1
 80030de:	2001      	movs	r0, #1
 80030e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80030e4:	e7a8      	b.n	8003038 <_svfiprintf_r+0xd8>
 80030e6:	2300      	movs	r3, #0
 80030e8:	f04f 0c0a 	mov.w	ip, #10
 80030ec:	4619      	mov	r1, r3
 80030ee:	3401      	adds	r4, #1
 80030f0:	9305      	str	r3, [sp, #20]
 80030f2:	4620      	mov	r0, r4
 80030f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030f8:	3a30      	subs	r2, #48	@ 0x30
 80030fa:	2a09      	cmp	r2, #9
 80030fc:	d903      	bls.n	8003106 <_svfiprintf_r+0x1a6>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0c6      	beq.n	8003090 <_svfiprintf_r+0x130>
 8003102:	9105      	str	r1, [sp, #20]
 8003104:	e7c4      	b.n	8003090 <_svfiprintf_r+0x130>
 8003106:	4604      	mov	r4, r0
 8003108:	2301      	movs	r3, #1
 800310a:	fb0c 2101 	mla	r1, ip, r1, r2
 800310e:	e7f0      	b.n	80030f2 <_svfiprintf_r+0x192>
 8003110:	ab03      	add	r3, sp, #12
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	462a      	mov	r2, r5
 8003116:	4638      	mov	r0, r7
 8003118:	4b0e      	ldr	r3, [pc, #56]	@ (8003154 <_svfiprintf_r+0x1f4>)
 800311a:	a904      	add	r1, sp, #16
 800311c:	f3af 8000 	nop.w
 8003120:	1c42      	adds	r2, r0, #1
 8003122:	4606      	mov	r6, r0
 8003124:	d1d6      	bne.n	80030d4 <_svfiprintf_r+0x174>
 8003126:	89ab      	ldrh	r3, [r5, #12]
 8003128:	065b      	lsls	r3, r3, #25
 800312a:	f53f af2d 	bmi.w	8002f88 <_svfiprintf_r+0x28>
 800312e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003130:	e72c      	b.n	8002f8c <_svfiprintf_r+0x2c>
 8003132:	ab03      	add	r3, sp, #12
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	462a      	mov	r2, r5
 8003138:	4638      	mov	r0, r7
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <_svfiprintf_r+0x1f4>)
 800313c:	a904      	add	r1, sp, #16
 800313e:	f000 f91f 	bl	8003380 <_printf_i>
 8003142:	e7ed      	b.n	8003120 <_svfiprintf_r+0x1c0>
 8003144:	08003dd2 	.word	0x08003dd2
 8003148:	08003dd8 	.word	0x08003dd8
 800314c:	08003ddc 	.word	0x08003ddc
 8003150:	00000000 	.word	0x00000000
 8003154:	08002ea9 	.word	0x08002ea9

08003158 <sbrk_aligned>:
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	4e0f      	ldr	r6, [pc, #60]	@ (8003198 <sbrk_aligned+0x40>)
 800315c:	460c      	mov	r4, r1
 800315e:	6831      	ldr	r1, [r6, #0]
 8003160:	4605      	mov	r5, r0
 8003162:	b911      	cbnz	r1, 800316a <sbrk_aligned+0x12>
 8003164:	f000 fa80 	bl	8003668 <_sbrk_r>
 8003168:	6030      	str	r0, [r6, #0]
 800316a:	4621      	mov	r1, r4
 800316c:	4628      	mov	r0, r5
 800316e:	f000 fa7b 	bl	8003668 <_sbrk_r>
 8003172:	1c43      	adds	r3, r0, #1
 8003174:	d103      	bne.n	800317e <sbrk_aligned+0x26>
 8003176:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800317a:	4620      	mov	r0, r4
 800317c:	bd70      	pop	{r4, r5, r6, pc}
 800317e:	1cc4      	adds	r4, r0, #3
 8003180:	f024 0403 	bic.w	r4, r4, #3
 8003184:	42a0      	cmp	r0, r4
 8003186:	d0f8      	beq.n	800317a <sbrk_aligned+0x22>
 8003188:	1a21      	subs	r1, r4, r0
 800318a:	4628      	mov	r0, r5
 800318c:	f000 fa6c 	bl	8003668 <_sbrk_r>
 8003190:	3001      	adds	r0, #1
 8003192:	d1f2      	bne.n	800317a <sbrk_aligned+0x22>
 8003194:	e7ef      	b.n	8003176 <sbrk_aligned+0x1e>
 8003196:	bf00      	nop
 8003198:	20000278 	.word	0x20000278

0800319c <_malloc_r>:
 800319c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031a0:	1ccd      	adds	r5, r1, #3
 80031a2:	f025 0503 	bic.w	r5, r5, #3
 80031a6:	3508      	adds	r5, #8
 80031a8:	2d0c      	cmp	r5, #12
 80031aa:	bf38      	it	cc
 80031ac:	250c      	movcc	r5, #12
 80031ae:	2d00      	cmp	r5, #0
 80031b0:	4606      	mov	r6, r0
 80031b2:	db01      	blt.n	80031b8 <_malloc_r+0x1c>
 80031b4:	42a9      	cmp	r1, r5
 80031b6:	d904      	bls.n	80031c2 <_malloc_r+0x26>
 80031b8:	230c      	movs	r3, #12
 80031ba:	6033      	str	r3, [r6, #0]
 80031bc:	2000      	movs	r0, #0
 80031be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003298 <_malloc_r+0xfc>
 80031c6:	f000 f9fb 	bl	80035c0 <__malloc_lock>
 80031ca:	f8d8 3000 	ldr.w	r3, [r8]
 80031ce:	461c      	mov	r4, r3
 80031d0:	bb44      	cbnz	r4, 8003224 <_malloc_r+0x88>
 80031d2:	4629      	mov	r1, r5
 80031d4:	4630      	mov	r0, r6
 80031d6:	f7ff ffbf 	bl	8003158 <sbrk_aligned>
 80031da:	1c43      	adds	r3, r0, #1
 80031dc:	4604      	mov	r4, r0
 80031de:	d158      	bne.n	8003292 <_malloc_r+0xf6>
 80031e0:	f8d8 4000 	ldr.w	r4, [r8]
 80031e4:	4627      	mov	r7, r4
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d143      	bne.n	8003272 <_malloc_r+0xd6>
 80031ea:	2c00      	cmp	r4, #0
 80031ec:	d04b      	beq.n	8003286 <_malloc_r+0xea>
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	4639      	mov	r1, r7
 80031f2:	4630      	mov	r0, r6
 80031f4:	eb04 0903 	add.w	r9, r4, r3
 80031f8:	f000 fa36 	bl	8003668 <_sbrk_r>
 80031fc:	4581      	cmp	r9, r0
 80031fe:	d142      	bne.n	8003286 <_malloc_r+0xea>
 8003200:	6821      	ldr	r1, [r4, #0]
 8003202:	4630      	mov	r0, r6
 8003204:	1a6d      	subs	r5, r5, r1
 8003206:	4629      	mov	r1, r5
 8003208:	f7ff ffa6 	bl	8003158 <sbrk_aligned>
 800320c:	3001      	adds	r0, #1
 800320e:	d03a      	beq.n	8003286 <_malloc_r+0xea>
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	442b      	add	r3, r5
 8003214:	6023      	str	r3, [r4, #0]
 8003216:	f8d8 3000 	ldr.w	r3, [r8]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	bb62      	cbnz	r2, 8003278 <_malloc_r+0xdc>
 800321e:	f8c8 7000 	str.w	r7, [r8]
 8003222:	e00f      	b.n	8003244 <_malloc_r+0xa8>
 8003224:	6822      	ldr	r2, [r4, #0]
 8003226:	1b52      	subs	r2, r2, r5
 8003228:	d420      	bmi.n	800326c <_malloc_r+0xd0>
 800322a:	2a0b      	cmp	r2, #11
 800322c:	d917      	bls.n	800325e <_malloc_r+0xc2>
 800322e:	1961      	adds	r1, r4, r5
 8003230:	42a3      	cmp	r3, r4
 8003232:	6025      	str	r5, [r4, #0]
 8003234:	bf18      	it	ne
 8003236:	6059      	strne	r1, [r3, #4]
 8003238:	6863      	ldr	r3, [r4, #4]
 800323a:	bf08      	it	eq
 800323c:	f8c8 1000 	streq.w	r1, [r8]
 8003240:	5162      	str	r2, [r4, r5]
 8003242:	604b      	str	r3, [r1, #4]
 8003244:	4630      	mov	r0, r6
 8003246:	f000 f9c1 	bl	80035cc <__malloc_unlock>
 800324a:	f104 000b 	add.w	r0, r4, #11
 800324e:	1d23      	adds	r3, r4, #4
 8003250:	f020 0007 	bic.w	r0, r0, #7
 8003254:	1ac2      	subs	r2, r0, r3
 8003256:	bf1c      	itt	ne
 8003258:	1a1b      	subne	r3, r3, r0
 800325a:	50a3      	strne	r3, [r4, r2]
 800325c:	e7af      	b.n	80031be <_malloc_r+0x22>
 800325e:	6862      	ldr	r2, [r4, #4]
 8003260:	42a3      	cmp	r3, r4
 8003262:	bf0c      	ite	eq
 8003264:	f8c8 2000 	streq.w	r2, [r8]
 8003268:	605a      	strne	r2, [r3, #4]
 800326a:	e7eb      	b.n	8003244 <_malloc_r+0xa8>
 800326c:	4623      	mov	r3, r4
 800326e:	6864      	ldr	r4, [r4, #4]
 8003270:	e7ae      	b.n	80031d0 <_malloc_r+0x34>
 8003272:	463c      	mov	r4, r7
 8003274:	687f      	ldr	r7, [r7, #4]
 8003276:	e7b6      	b.n	80031e6 <_malloc_r+0x4a>
 8003278:	461a      	mov	r2, r3
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	42a3      	cmp	r3, r4
 800327e:	d1fb      	bne.n	8003278 <_malloc_r+0xdc>
 8003280:	2300      	movs	r3, #0
 8003282:	6053      	str	r3, [r2, #4]
 8003284:	e7de      	b.n	8003244 <_malloc_r+0xa8>
 8003286:	230c      	movs	r3, #12
 8003288:	4630      	mov	r0, r6
 800328a:	6033      	str	r3, [r6, #0]
 800328c:	f000 f99e 	bl	80035cc <__malloc_unlock>
 8003290:	e794      	b.n	80031bc <_malloc_r+0x20>
 8003292:	6005      	str	r5, [r0, #0]
 8003294:	e7d6      	b.n	8003244 <_malloc_r+0xa8>
 8003296:	bf00      	nop
 8003298:	2000027c 	.word	0x2000027c

0800329c <_printf_common>:
 800329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a0:	4616      	mov	r6, r2
 80032a2:	4698      	mov	r8, r3
 80032a4:	688a      	ldr	r2, [r1, #8]
 80032a6:	690b      	ldr	r3, [r1, #16]
 80032a8:	4607      	mov	r7, r0
 80032aa:	4293      	cmp	r3, r2
 80032ac:	bfb8      	it	lt
 80032ae:	4613      	movlt	r3, r2
 80032b0:	6033      	str	r3, [r6, #0]
 80032b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80032b6:	460c      	mov	r4, r1
 80032b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80032bc:	b10a      	cbz	r2, 80032c2 <_printf_common+0x26>
 80032be:	3301      	adds	r3, #1
 80032c0:	6033      	str	r3, [r6, #0]
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	0699      	lsls	r1, r3, #26
 80032c6:	bf42      	ittt	mi
 80032c8:	6833      	ldrmi	r3, [r6, #0]
 80032ca:	3302      	addmi	r3, #2
 80032cc:	6033      	strmi	r3, [r6, #0]
 80032ce:	6825      	ldr	r5, [r4, #0]
 80032d0:	f015 0506 	ands.w	r5, r5, #6
 80032d4:	d106      	bne.n	80032e4 <_printf_common+0x48>
 80032d6:	f104 0a19 	add.w	sl, r4, #25
 80032da:	68e3      	ldr	r3, [r4, #12]
 80032dc:	6832      	ldr	r2, [r6, #0]
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	42ab      	cmp	r3, r5
 80032e2:	dc2b      	bgt.n	800333c <_printf_common+0xa0>
 80032e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80032e8:	6822      	ldr	r2, [r4, #0]
 80032ea:	3b00      	subs	r3, #0
 80032ec:	bf18      	it	ne
 80032ee:	2301      	movne	r3, #1
 80032f0:	0692      	lsls	r2, r2, #26
 80032f2:	d430      	bmi.n	8003356 <_printf_common+0xba>
 80032f4:	4641      	mov	r1, r8
 80032f6:	4638      	mov	r0, r7
 80032f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80032fc:	47c8      	blx	r9
 80032fe:	3001      	adds	r0, #1
 8003300:	d023      	beq.n	800334a <_printf_common+0xae>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	6922      	ldr	r2, [r4, #16]
 8003306:	f003 0306 	and.w	r3, r3, #6
 800330a:	2b04      	cmp	r3, #4
 800330c:	bf14      	ite	ne
 800330e:	2500      	movne	r5, #0
 8003310:	6833      	ldreq	r3, [r6, #0]
 8003312:	f04f 0600 	mov.w	r6, #0
 8003316:	bf08      	it	eq
 8003318:	68e5      	ldreq	r5, [r4, #12]
 800331a:	f104 041a 	add.w	r4, r4, #26
 800331e:	bf08      	it	eq
 8003320:	1aed      	subeq	r5, r5, r3
 8003322:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003326:	bf08      	it	eq
 8003328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800332c:	4293      	cmp	r3, r2
 800332e:	bfc4      	itt	gt
 8003330:	1a9b      	subgt	r3, r3, r2
 8003332:	18ed      	addgt	r5, r5, r3
 8003334:	42b5      	cmp	r5, r6
 8003336:	d11a      	bne.n	800336e <_printf_common+0xd2>
 8003338:	2000      	movs	r0, #0
 800333a:	e008      	b.n	800334e <_printf_common+0xb2>
 800333c:	2301      	movs	r3, #1
 800333e:	4652      	mov	r2, sl
 8003340:	4641      	mov	r1, r8
 8003342:	4638      	mov	r0, r7
 8003344:	47c8      	blx	r9
 8003346:	3001      	adds	r0, #1
 8003348:	d103      	bne.n	8003352 <_printf_common+0xb6>
 800334a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800334e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003352:	3501      	adds	r5, #1
 8003354:	e7c1      	b.n	80032da <_printf_common+0x3e>
 8003356:	2030      	movs	r0, #48	@ 0x30
 8003358:	18e1      	adds	r1, r4, r3
 800335a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003364:	4422      	add	r2, r4
 8003366:	3302      	adds	r3, #2
 8003368:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800336c:	e7c2      	b.n	80032f4 <_printf_common+0x58>
 800336e:	2301      	movs	r3, #1
 8003370:	4622      	mov	r2, r4
 8003372:	4641      	mov	r1, r8
 8003374:	4638      	mov	r0, r7
 8003376:	47c8      	blx	r9
 8003378:	3001      	adds	r0, #1
 800337a:	d0e6      	beq.n	800334a <_printf_common+0xae>
 800337c:	3601      	adds	r6, #1
 800337e:	e7d9      	b.n	8003334 <_printf_common+0x98>

08003380 <_printf_i>:
 8003380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003384:	7e0f      	ldrb	r7, [r1, #24]
 8003386:	4691      	mov	r9, r2
 8003388:	2f78      	cmp	r7, #120	@ 0x78
 800338a:	4680      	mov	r8, r0
 800338c:	460c      	mov	r4, r1
 800338e:	469a      	mov	sl, r3
 8003390:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003392:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003396:	d807      	bhi.n	80033a8 <_printf_i+0x28>
 8003398:	2f62      	cmp	r7, #98	@ 0x62
 800339a:	d80a      	bhi.n	80033b2 <_printf_i+0x32>
 800339c:	2f00      	cmp	r7, #0
 800339e:	f000 80d3 	beq.w	8003548 <_printf_i+0x1c8>
 80033a2:	2f58      	cmp	r7, #88	@ 0x58
 80033a4:	f000 80ba 	beq.w	800351c <_printf_i+0x19c>
 80033a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80033b0:	e03a      	b.n	8003428 <_printf_i+0xa8>
 80033b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80033b6:	2b15      	cmp	r3, #21
 80033b8:	d8f6      	bhi.n	80033a8 <_printf_i+0x28>
 80033ba:	a101      	add	r1, pc, #4	@ (adr r1, 80033c0 <_printf_i+0x40>)
 80033bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033c0:	08003419 	.word	0x08003419
 80033c4:	0800342d 	.word	0x0800342d
 80033c8:	080033a9 	.word	0x080033a9
 80033cc:	080033a9 	.word	0x080033a9
 80033d0:	080033a9 	.word	0x080033a9
 80033d4:	080033a9 	.word	0x080033a9
 80033d8:	0800342d 	.word	0x0800342d
 80033dc:	080033a9 	.word	0x080033a9
 80033e0:	080033a9 	.word	0x080033a9
 80033e4:	080033a9 	.word	0x080033a9
 80033e8:	080033a9 	.word	0x080033a9
 80033ec:	0800352f 	.word	0x0800352f
 80033f0:	08003457 	.word	0x08003457
 80033f4:	080034e9 	.word	0x080034e9
 80033f8:	080033a9 	.word	0x080033a9
 80033fc:	080033a9 	.word	0x080033a9
 8003400:	08003551 	.word	0x08003551
 8003404:	080033a9 	.word	0x080033a9
 8003408:	08003457 	.word	0x08003457
 800340c:	080033a9 	.word	0x080033a9
 8003410:	080033a9 	.word	0x080033a9
 8003414:	080034f1 	.word	0x080034f1
 8003418:	6833      	ldr	r3, [r6, #0]
 800341a:	1d1a      	adds	r2, r3, #4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6032      	str	r2, [r6, #0]
 8003420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003424:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003428:	2301      	movs	r3, #1
 800342a:	e09e      	b.n	800356a <_printf_i+0x1ea>
 800342c:	6833      	ldr	r3, [r6, #0]
 800342e:	6820      	ldr	r0, [r4, #0]
 8003430:	1d19      	adds	r1, r3, #4
 8003432:	6031      	str	r1, [r6, #0]
 8003434:	0606      	lsls	r6, r0, #24
 8003436:	d501      	bpl.n	800343c <_printf_i+0xbc>
 8003438:	681d      	ldr	r5, [r3, #0]
 800343a:	e003      	b.n	8003444 <_printf_i+0xc4>
 800343c:	0645      	lsls	r5, r0, #25
 800343e:	d5fb      	bpl.n	8003438 <_printf_i+0xb8>
 8003440:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003444:	2d00      	cmp	r5, #0
 8003446:	da03      	bge.n	8003450 <_printf_i+0xd0>
 8003448:	232d      	movs	r3, #45	@ 0x2d
 800344a:	426d      	negs	r5, r5
 800344c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003450:	230a      	movs	r3, #10
 8003452:	4859      	ldr	r0, [pc, #356]	@ (80035b8 <_printf_i+0x238>)
 8003454:	e011      	b.n	800347a <_printf_i+0xfa>
 8003456:	6821      	ldr	r1, [r4, #0]
 8003458:	6833      	ldr	r3, [r6, #0]
 800345a:	0608      	lsls	r0, r1, #24
 800345c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003460:	d402      	bmi.n	8003468 <_printf_i+0xe8>
 8003462:	0649      	lsls	r1, r1, #25
 8003464:	bf48      	it	mi
 8003466:	b2ad      	uxthmi	r5, r5
 8003468:	2f6f      	cmp	r7, #111	@ 0x6f
 800346a:	6033      	str	r3, [r6, #0]
 800346c:	bf14      	ite	ne
 800346e:	230a      	movne	r3, #10
 8003470:	2308      	moveq	r3, #8
 8003472:	4851      	ldr	r0, [pc, #324]	@ (80035b8 <_printf_i+0x238>)
 8003474:	2100      	movs	r1, #0
 8003476:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800347a:	6866      	ldr	r6, [r4, #4]
 800347c:	2e00      	cmp	r6, #0
 800347e:	bfa8      	it	ge
 8003480:	6821      	ldrge	r1, [r4, #0]
 8003482:	60a6      	str	r6, [r4, #8]
 8003484:	bfa4      	itt	ge
 8003486:	f021 0104 	bicge.w	r1, r1, #4
 800348a:	6021      	strge	r1, [r4, #0]
 800348c:	b90d      	cbnz	r5, 8003492 <_printf_i+0x112>
 800348e:	2e00      	cmp	r6, #0
 8003490:	d04b      	beq.n	800352a <_printf_i+0x1aa>
 8003492:	4616      	mov	r6, r2
 8003494:	fbb5 f1f3 	udiv	r1, r5, r3
 8003498:	fb03 5711 	mls	r7, r3, r1, r5
 800349c:	5dc7      	ldrb	r7, [r0, r7]
 800349e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034a2:	462f      	mov	r7, r5
 80034a4:	42bb      	cmp	r3, r7
 80034a6:	460d      	mov	r5, r1
 80034a8:	d9f4      	bls.n	8003494 <_printf_i+0x114>
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d10b      	bne.n	80034c6 <_printf_i+0x146>
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	07df      	lsls	r7, r3, #31
 80034b2:	d508      	bpl.n	80034c6 <_printf_i+0x146>
 80034b4:	6923      	ldr	r3, [r4, #16]
 80034b6:	6861      	ldr	r1, [r4, #4]
 80034b8:	4299      	cmp	r1, r3
 80034ba:	bfde      	ittt	le
 80034bc:	2330      	movle	r3, #48	@ 0x30
 80034be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034c2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80034c6:	1b92      	subs	r2, r2, r6
 80034c8:	6122      	str	r2, [r4, #16]
 80034ca:	464b      	mov	r3, r9
 80034cc:	4621      	mov	r1, r4
 80034ce:	4640      	mov	r0, r8
 80034d0:	f8cd a000 	str.w	sl, [sp]
 80034d4:	aa03      	add	r2, sp, #12
 80034d6:	f7ff fee1 	bl	800329c <_printf_common>
 80034da:	3001      	adds	r0, #1
 80034dc:	d14a      	bne.n	8003574 <_printf_i+0x1f4>
 80034de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034e2:	b004      	add	sp, #16
 80034e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	f043 0320 	orr.w	r3, r3, #32
 80034ee:	6023      	str	r3, [r4, #0]
 80034f0:	2778      	movs	r7, #120	@ 0x78
 80034f2:	4832      	ldr	r0, [pc, #200]	@ (80035bc <_printf_i+0x23c>)
 80034f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	6831      	ldr	r1, [r6, #0]
 80034fc:	061f      	lsls	r7, r3, #24
 80034fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8003502:	d402      	bmi.n	800350a <_printf_i+0x18a>
 8003504:	065f      	lsls	r7, r3, #25
 8003506:	bf48      	it	mi
 8003508:	b2ad      	uxthmi	r5, r5
 800350a:	6031      	str	r1, [r6, #0]
 800350c:	07d9      	lsls	r1, r3, #31
 800350e:	bf44      	itt	mi
 8003510:	f043 0320 	orrmi.w	r3, r3, #32
 8003514:	6023      	strmi	r3, [r4, #0]
 8003516:	b11d      	cbz	r5, 8003520 <_printf_i+0x1a0>
 8003518:	2310      	movs	r3, #16
 800351a:	e7ab      	b.n	8003474 <_printf_i+0xf4>
 800351c:	4826      	ldr	r0, [pc, #152]	@ (80035b8 <_printf_i+0x238>)
 800351e:	e7e9      	b.n	80034f4 <_printf_i+0x174>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	f023 0320 	bic.w	r3, r3, #32
 8003526:	6023      	str	r3, [r4, #0]
 8003528:	e7f6      	b.n	8003518 <_printf_i+0x198>
 800352a:	4616      	mov	r6, r2
 800352c:	e7bd      	b.n	80034aa <_printf_i+0x12a>
 800352e:	6833      	ldr	r3, [r6, #0]
 8003530:	6825      	ldr	r5, [r4, #0]
 8003532:	1d18      	adds	r0, r3, #4
 8003534:	6961      	ldr	r1, [r4, #20]
 8003536:	6030      	str	r0, [r6, #0]
 8003538:	062e      	lsls	r6, r5, #24
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	d501      	bpl.n	8003542 <_printf_i+0x1c2>
 800353e:	6019      	str	r1, [r3, #0]
 8003540:	e002      	b.n	8003548 <_printf_i+0x1c8>
 8003542:	0668      	lsls	r0, r5, #25
 8003544:	d5fb      	bpl.n	800353e <_printf_i+0x1be>
 8003546:	8019      	strh	r1, [r3, #0]
 8003548:	2300      	movs	r3, #0
 800354a:	4616      	mov	r6, r2
 800354c:	6123      	str	r3, [r4, #16]
 800354e:	e7bc      	b.n	80034ca <_printf_i+0x14a>
 8003550:	6833      	ldr	r3, [r6, #0]
 8003552:	2100      	movs	r1, #0
 8003554:	1d1a      	adds	r2, r3, #4
 8003556:	6032      	str	r2, [r6, #0]
 8003558:	681e      	ldr	r6, [r3, #0]
 800355a:	6862      	ldr	r2, [r4, #4]
 800355c:	4630      	mov	r0, r6
 800355e:	f000 f893 	bl	8003688 <memchr>
 8003562:	b108      	cbz	r0, 8003568 <_printf_i+0x1e8>
 8003564:	1b80      	subs	r0, r0, r6
 8003566:	6060      	str	r0, [r4, #4]
 8003568:	6863      	ldr	r3, [r4, #4]
 800356a:	6123      	str	r3, [r4, #16]
 800356c:	2300      	movs	r3, #0
 800356e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003572:	e7aa      	b.n	80034ca <_printf_i+0x14a>
 8003574:	4632      	mov	r2, r6
 8003576:	4649      	mov	r1, r9
 8003578:	4640      	mov	r0, r8
 800357a:	6923      	ldr	r3, [r4, #16]
 800357c:	47d0      	blx	sl
 800357e:	3001      	adds	r0, #1
 8003580:	d0ad      	beq.n	80034de <_printf_i+0x15e>
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	079b      	lsls	r3, r3, #30
 8003586:	d413      	bmi.n	80035b0 <_printf_i+0x230>
 8003588:	68e0      	ldr	r0, [r4, #12]
 800358a:	9b03      	ldr	r3, [sp, #12]
 800358c:	4298      	cmp	r0, r3
 800358e:	bfb8      	it	lt
 8003590:	4618      	movlt	r0, r3
 8003592:	e7a6      	b.n	80034e2 <_printf_i+0x162>
 8003594:	2301      	movs	r3, #1
 8003596:	4632      	mov	r2, r6
 8003598:	4649      	mov	r1, r9
 800359a:	4640      	mov	r0, r8
 800359c:	47d0      	blx	sl
 800359e:	3001      	adds	r0, #1
 80035a0:	d09d      	beq.n	80034de <_printf_i+0x15e>
 80035a2:	3501      	adds	r5, #1
 80035a4:	68e3      	ldr	r3, [r4, #12]
 80035a6:	9903      	ldr	r1, [sp, #12]
 80035a8:	1a5b      	subs	r3, r3, r1
 80035aa:	42ab      	cmp	r3, r5
 80035ac:	dcf2      	bgt.n	8003594 <_printf_i+0x214>
 80035ae:	e7eb      	b.n	8003588 <_printf_i+0x208>
 80035b0:	2500      	movs	r5, #0
 80035b2:	f104 0619 	add.w	r6, r4, #25
 80035b6:	e7f5      	b.n	80035a4 <_printf_i+0x224>
 80035b8:	08003de3 	.word	0x08003de3
 80035bc:	08003df4 	.word	0x08003df4

080035c0 <__malloc_lock>:
 80035c0:	4801      	ldr	r0, [pc, #4]	@ (80035c8 <__malloc_lock+0x8>)
 80035c2:	f7ff bc6f 	b.w	8002ea4 <__retarget_lock_acquire_recursive>
 80035c6:	bf00      	nop
 80035c8:	20000274 	.word	0x20000274

080035cc <__malloc_unlock>:
 80035cc:	4801      	ldr	r0, [pc, #4]	@ (80035d4 <__malloc_unlock+0x8>)
 80035ce:	f7ff bc6a 	b.w	8002ea6 <__retarget_lock_release_recursive>
 80035d2:	bf00      	nop
 80035d4:	20000274 	.word	0x20000274

080035d8 <_realloc_r>:
 80035d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035dc:	4680      	mov	r8, r0
 80035de:	4615      	mov	r5, r2
 80035e0:	460c      	mov	r4, r1
 80035e2:	b921      	cbnz	r1, 80035ee <_realloc_r+0x16>
 80035e4:	4611      	mov	r1, r2
 80035e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035ea:	f7ff bdd7 	b.w	800319c <_malloc_r>
 80035ee:	b92a      	cbnz	r2, 80035fc <_realloc_r+0x24>
 80035f0:	f000 f866 	bl	80036c0 <_free_r>
 80035f4:	2400      	movs	r4, #0
 80035f6:	4620      	mov	r0, r4
 80035f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035fc:	f000 f8a8 	bl	8003750 <_malloc_usable_size_r>
 8003600:	4285      	cmp	r5, r0
 8003602:	4606      	mov	r6, r0
 8003604:	d802      	bhi.n	800360c <_realloc_r+0x34>
 8003606:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800360a:	d8f4      	bhi.n	80035f6 <_realloc_r+0x1e>
 800360c:	4629      	mov	r1, r5
 800360e:	4640      	mov	r0, r8
 8003610:	f7ff fdc4 	bl	800319c <_malloc_r>
 8003614:	4607      	mov	r7, r0
 8003616:	2800      	cmp	r0, #0
 8003618:	d0ec      	beq.n	80035f4 <_realloc_r+0x1c>
 800361a:	42b5      	cmp	r5, r6
 800361c:	462a      	mov	r2, r5
 800361e:	4621      	mov	r1, r4
 8003620:	bf28      	it	cs
 8003622:	4632      	movcs	r2, r6
 8003624:	f000 f83e 	bl	80036a4 <memcpy>
 8003628:	4621      	mov	r1, r4
 800362a:	4640      	mov	r0, r8
 800362c:	f000 f848 	bl	80036c0 <_free_r>
 8003630:	463c      	mov	r4, r7
 8003632:	e7e0      	b.n	80035f6 <_realloc_r+0x1e>

08003634 <memmove>:
 8003634:	4288      	cmp	r0, r1
 8003636:	b510      	push	{r4, lr}
 8003638:	eb01 0402 	add.w	r4, r1, r2
 800363c:	d902      	bls.n	8003644 <memmove+0x10>
 800363e:	4284      	cmp	r4, r0
 8003640:	4623      	mov	r3, r4
 8003642:	d807      	bhi.n	8003654 <memmove+0x20>
 8003644:	1e43      	subs	r3, r0, #1
 8003646:	42a1      	cmp	r1, r4
 8003648:	d008      	beq.n	800365c <memmove+0x28>
 800364a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800364e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003652:	e7f8      	b.n	8003646 <memmove+0x12>
 8003654:	4601      	mov	r1, r0
 8003656:	4402      	add	r2, r0
 8003658:	428a      	cmp	r2, r1
 800365a:	d100      	bne.n	800365e <memmove+0x2a>
 800365c:	bd10      	pop	{r4, pc}
 800365e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003666:	e7f7      	b.n	8003658 <memmove+0x24>

08003668 <_sbrk_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	2300      	movs	r3, #0
 800366c:	4d05      	ldr	r5, [pc, #20]	@ (8003684 <_sbrk_r+0x1c>)
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	602b      	str	r3, [r5, #0]
 8003674:	f7fd fb92 	bl	8000d9c <_sbrk>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	d102      	bne.n	8003682 <_sbrk_r+0x1a>
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	b103      	cbz	r3, 8003682 <_sbrk_r+0x1a>
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	20000280 	.word	0x20000280

08003688 <memchr>:
 8003688:	4603      	mov	r3, r0
 800368a:	b510      	push	{r4, lr}
 800368c:	b2c9      	uxtb	r1, r1
 800368e:	4402      	add	r2, r0
 8003690:	4293      	cmp	r3, r2
 8003692:	4618      	mov	r0, r3
 8003694:	d101      	bne.n	800369a <memchr+0x12>
 8003696:	2000      	movs	r0, #0
 8003698:	e003      	b.n	80036a2 <memchr+0x1a>
 800369a:	7804      	ldrb	r4, [r0, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	428c      	cmp	r4, r1
 80036a0:	d1f6      	bne.n	8003690 <memchr+0x8>
 80036a2:	bd10      	pop	{r4, pc}

080036a4 <memcpy>:
 80036a4:	440a      	add	r2, r1
 80036a6:	4291      	cmp	r1, r2
 80036a8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80036ac:	d100      	bne.n	80036b0 <memcpy+0xc>
 80036ae:	4770      	bx	lr
 80036b0:	b510      	push	{r4, lr}
 80036b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036b6:	4291      	cmp	r1, r2
 80036b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036bc:	d1f9      	bne.n	80036b2 <memcpy+0xe>
 80036be:	bd10      	pop	{r4, pc}

080036c0 <_free_r>:
 80036c0:	b538      	push	{r3, r4, r5, lr}
 80036c2:	4605      	mov	r5, r0
 80036c4:	2900      	cmp	r1, #0
 80036c6:	d040      	beq.n	800374a <_free_r+0x8a>
 80036c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036cc:	1f0c      	subs	r4, r1, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bfb8      	it	lt
 80036d2:	18e4      	addlt	r4, r4, r3
 80036d4:	f7ff ff74 	bl	80035c0 <__malloc_lock>
 80036d8:	4a1c      	ldr	r2, [pc, #112]	@ (800374c <_free_r+0x8c>)
 80036da:	6813      	ldr	r3, [r2, #0]
 80036dc:	b933      	cbnz	r3, 80036ec <_free_r+0x2c>
 80036de:	6063      	str	r3, [r4, #4]
 80036e0:	6014      	str	r4, [r2, #0]
 80036e2:	4628      	mov	r0, r5
 80036e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036e8:	f7ff bf70 	b.w	80035cc <__malloc_unlock>
 80036ec:	42a3      	cmp	r3, r4
 80036ee:	d908      	bls.n	8003702 <_free_r+0x42>
 80036f0:	6820      	ldr	r0, [r4, #0]
 80036f2:	1821      	adds	r1, r4, r0
 80036f4:	428b      	cmp	r3, r1
 80036f6:	bf01      	itttt	eq
 80036f8:	6819      	ldreq	r1, [r3, #0]
 80036fa:	685b      	ldreq	r3, [r3, #4]
 80036fc:	1809      	addeq	r1, r1, r0
 80036fe:	6021      	streq	r1, [r4, #0]
 8003700:	e7ed      	b.n	80036de <_free_r+0x1e>
 8003702:	461a      	mov	r2, r3
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	b10b      	cbz	r3, 800370c <_free_r+0x4c>
 8003708:	42a3      	cmp	r3, r4
 800370a:	d9fa      	bls.n	8003702 <_free_r+0x42>
 800370c:	6811      	ldr	r1, [r2, #0]
 800370e:	1850      	adds	r0, r2, r1
 8003710:	42a0      	cmp	r0, r4
 8003712:	d10b      	bne.n	800372c <_free_r+0x6c>
 8003714:	6820      	ldr	r0, [r4, #0]
 8003716:	4401      	add	r1, r0
 8003718:	1850      	adds	r0, r2, r1
 800371a:	4283      	cmp	r3, r0
 800371c:	6011      	str	r1, [r2, #0]
 800371e:	d1e0      	bne.n	80036e2 <_free_r+0x22>
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4408      	add	r0, r1
 8003726:	6010      	str	r0, [r2, #0]
 8003728:	6053      	str	r3, [r2, #4]
 800372a:	e7da      	b.n	80036e2 <_free_r+0x22>
 800372c:	d902      	bls.n	8003734 <_free_r+0x74>
 800372e:	230c      	movs	r3, #12
 8003730:	602b      	str	r3, [r5, #0]
 8003732:	e7d6      	b.n	80036e2 <_free_r+0x22>
 8003734:	6820      	ldr	r0, [r4, #0]
 8003736:	1821      	adds	r1, r4, r0
 8003738:	428b      	cmp	r3, r1
 800373a:	bf01      	itttt	eq
 800373c:	6819      	ldreq	r1, [r3, #0]
 800373e:	685b      	ldreq	r3, [r3, #4]
 8003740:	1809      	addeq	r1, r1, r0
 8003742:	6021      	streq	r1, [r4, #0]
 8003744:	6063      	str	r3, [r4, #4]
 8003746:	6054      	str	r4, [r2, #4]
 8003748:	e7cb      	b.n	80036e2 <_free_r+0x22>
 800374a:	bd38      	pop	{r3, r4, r5, pc}
 800374c:	2000027c 	.word	0x2000027c

08003750 <_malloc_usable_size_r>:
 8003750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003754:	1f18      	subs	r0, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	bfbc      	itt	lt
 800375a:	580b      	ldrlt	r3, [r1, r0]
 800375c:	18c0      	addlt	r0, r0, r3
 800375e:	4770      	bx	lr

08003760 <_init>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr

0800376c <_fini>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	bf00      	nop
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr
