
BT touch controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006818  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  080069fc  080069fc  000079fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007114  08007114  00009090  2**0
                  CONTENTS
  4 .ARM          00000008  08007114  08007114  00008114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800711c  0800711c  00009090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800711c  0800711c  0000811c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007120  08007120  00008120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08007124  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000090  080071b4  00009090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080071b4  00009324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c593  00000000  00000000  000090b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d3  00000000  00000000  0001564c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00017c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000884  00000000  00000000  00018748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a919  00000000  00000000  00018fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9cb  00000000  00000000  000338e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099c41  00000000  00000000  000422b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbef1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003418  00000000  00000000  000dbf34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000df34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000090 	.word	0x20000090
 8000200:	00000000 	.word	0x00000000
 8000204:	080069e4 	.word	0x080069e4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000094 	.word	0x20000094
 8000220:	080069e4 	.word	0x080069e4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	@ 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_dmul>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ba:	bf1d      	ittte	ne
 80005bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c0:	ea94 0f0c 	teqne	r4, ip
 80005c4:	ea95 0f0c 	teqne	r5, ip
 80005c8:	f000 f8de 	bleq	8000788 <__aeabi_dmul+0x1dc>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea81 0603 	eor.w	r6, r1, r3
 80005d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005de:	bf18      	it	ne
 80005e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005ec:	d038      	beq.n	8000660 <__aeabi_dmul+0xb4>
 80005ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000602:	f04f 0600 	mov.w	r6, #0
 8000606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060a:	f09c 0f00 	teq	ip, #0
 800060e:	bf18      	it	ne
 8000610:	f04e 0e01 	orrne.w	lr, lr, #1
 8000614:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000618:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800061c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000620:	d204      	bcs.n	800062c <__aeabi_dmul+0x80>
 8000622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000626:	416d      	adcs	r5, r5
 8000628:	eb46 0606 	adc.w	r6, r6, r6
 800062c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800063c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000640:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000644:	bf88      	it	hi
 8000646:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064a:	d81e      	bhi.n	800068a <__aeabi_dmul+0xde>
 800064c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000664:	ea46 0101 	orr.w	r1, r6, r1
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	ea81 0103 	eor.w	r1, r1, r3
 8000670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000674:	bfc2      	ittt	gt
 8000676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067e:	bd70      	popgt	{r4, r5, r6, pc}
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f04f 0e00 	mov.w	lr, #0
 8000688:	3c01      	subs	r4, #1
 800068a:	f300 80ab 	bgt.w	80007e4 <__aeabi_dmul+0x238>
 800068e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000692:	bfde      	ittt	le
 8000694:	2000      	movle	r0, #0
 8000696:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069a:	bd70      	pople	{r4, r5, r6, pc}
 800069c:	f1c4 0400 	rsb	r4, r4, #0
 80006a0:	3c20      	subs	r4, #32
 80006a2:	da35      	bge.n	8000710 <__aeabi_dmul+0x164>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc1b      	bgt.n	80006e0 <__aeabi_dmul+0x134>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f305 	lsl.w	r3, r0, r5
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	fa21 f604 	lsr.w	r6, r1, r4
 80006d0:	eb42 0106 	adc.w	r1, r2, r6
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 040c 	rsb	r4, r4, #12
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ec:	fa20 f005 	lsr.w	r0, r0, r5
 80006f0:	fa01 f204 	lsl.w	r2, r1, r4
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	f141 0100 	adc.w	r1, r1, #0
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f205 	lsl.w	r2, r0, r5
 8000718:	ea4e 0e02 	orr.w	lr, lr, r2
 800071c:	fa20 f304 	lsr.w	r3, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea43 0302 	orr.w	r3, r3, r2
 8000728:	fa21 f004 	lsr.w	r0, r1, r4
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000730:	fa21 f204 	lsr.w	r2, r1, r4
 8000734:	ea20 0002 	bic.w	r0, r0, r2
 8000738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f094 0f00 	teq	r4, #0
 800074c:	d10f      	bne.n	800076e <__aeabi_dmul+0x1c2>
 800074e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000752:	0040      	lsls	r0, r0, #1
 8000754:	eb41 0101 	adc.w	r1, r1, r1
 8000758:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800075c:	bf08      	it	eq
 800075e:	3c01      	subeq	r4, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1a6>
 8000762:	ea41 0106 	orr.w	r1, r1, r6
 8000766:	f095 0f00 	teq	r5, #0
 800076a:	bf18      	it	ne
 800076c:	4770      	bxne	lr
 800076e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	eb43 0303 	adc.w	r3, r3, r3
 8000778:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800077c:	bf08      	it	eq
 800077e:	3d01      	subeq	r5, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1c6>
 8000782:	ea43 0306 	orr.w	r3, r3, r6
 8000786:	4770      	bx	lr
 8000788:	ea94 0f0c 	teq	r4, ip
 800078c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000790:	bf18      	it	ne
 8000792:	ea95 0f0c 	teqne	r5, ip
 8000796:	d00c      	beq.n	80007b2 <__aeabi_dmul+0x206>
 8000798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079c:	bf18      	it	ne
 800079e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a2:	d1d1      	bne.n	8000748 <__aeabi_dmul+0x19c>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b6:	bf06      	itte	eq
 80007b8:	4610      	moveq	r0, r2
 80007ba:	4619      	moveq	r1, r3
 80007bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c0:	d019      	beq.n	80007f6 <__aeabi_dmul+0x24a>
 80007c2:	ea94 0f0c 	teq	r4, ip
 80007c6:	d102      	bne.n	80007ce <__aeabi_dmul+0x222>
 80007c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007cc:	d113      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007ce:	ea95 0f0c 	teq	r5, ip
 80007d2:	d105      	bne.n	80007e0 <__aeabi_dmul+0x234>
 80007d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d8:	bf1c      	itt	ne
 80007da:	4610      	movne	r0, r2
 80007dc:	4619      	movne	r1, r3
 80007de:	d10a      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ec:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fe:	bd70      	pop	{r4, r5, r6, pc}

08000800 <__aeabi_ddiv>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000806:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080e:	bf1d      	ittte	ne
 8000810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000814:	ea94 0f0c 	teqne	r4, ip
 8000818:	ea95 0f0c 	teqne	r5, ip
 800081c:	f000 f8a7 	bleq	800096e <__aeabi_ddiv+0x16e>
 8000820:	eba4 0405 	sub.w	r4, r4, r5
 8000824:	ea81 0e03 	eor.w	lr, r1, r3
 8000828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800082c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000830:	f000 8088 	beq.w	8000944 <__aeabi_ddiv+0x144>
 8000834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000838:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800083c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800084c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000854:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000858:	429d      	cmp	r5, r3
 800085a:	bf08      	it	eq
 800085c:	4296      	cmpeq	r6, r2
 800085e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000862:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000866:	d202      	bcs.n	800086e <__aeabi_ddiv+0x6e>
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	1ab6      	subs	r6, r6, r2
 8000870:	eb65 0503 	sbc.w	r5, r5, r3
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 000c 	orrcs.w	r0, r0, ip
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e0:	d018      	beq.n	8000914 <__aeabi_ddiv+0x114>
 80008e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fe:	d1c0      	bne.n	8000882 <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000904:	d10b      	bne.n	800091e <__aeabi_ddiv+0x11e>
 8000906:	ea41 0100 	orr.w	r1, r1, r0
 800090a:	f04f 0000 	mov.w	r0, #0
 800090e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000912:	e7b6      	b.n	8000882 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000918:	bf04      	itt	eq
 800091a:	4301      	orreq	r1, r0
 800091c:	2000      	moveq	r0, #0
 800091e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000922:	bf88      	it	hi
 8000924:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000928:	f63f aeaf 	bhi.w	800068a <__aeabi_dmul+0xde>
 800092c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000930:	bf04      	itt	eq
 8000932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093a:	f150 0000 	adcs.w	r0, r0, #0
 800093e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800094c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	e690      	b.n	800068a <__aeabi_dmul+0xde>
 8000968:	ea45 0e06 	orr.w	lr, r5, r6
 800096c:	e68d      	b.n	800068a <__aeabi_dmul+0xde>
 800096e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000972:	ea94 0f0c 	teq	r4, ip
 8000976:	bf08      	it	eq
 8000978:	ea95 0f0c 	teqeq	r5, ip
 800097c:	f43f af3b 	beq.w	80007f6 <__aeabi_dmul+0x24a>
 8000980:	ea94 0f0c 	teq	r4, ip
 8000984:	d10a      	bne.n	800099c <__aeabi_ddiv+0x19c>
 8000986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098a:	f47f af34 	bne.w	80007f6 <__aeabi_dmul+0x24a>
 800098e:	ea95 0f0c 	teq	r5, ip
 8000992:	f47f af25 	bne.w	80007e0 <__aeabi_dmul+0x234>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e72c      	b.n	80007f6 <__aeabi_dmul+0x24a>
 800099c:	ea95 0f0c 	teq	r5, ip
 80009a0:	d106      	bne.n	80009b0 <__aeabi_ddiv+0x1b0>
 80009a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a6:	f43f aefd 	beq.w	80007a4 <__aeabi_dmul+0x1f8>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e722      	b.n	80007f6 <__aeabi_dmul+0x24a>
 80009b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ba:	f47f aec5 	bne.w	8000748 <__aeabi_dmul+0x19c>
 80009be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c2:	f47f af0d 	bne.w	80007e0 <__aeabi_dmul+0x234>
 80009c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ca:	f47f aeeb 	bne.w	80007a4 <__aeabi_dmul+0x1f8>
 80009ce:	e712      	b.n	80007f6 <__aeabi_dmul+0x24a>

080009d0 <__gedf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d4:	e006      	b.n	80009e4 <__cmpdf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__ledf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpdf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpdf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fa:	d01b      	beq.n	8000a34 <__cmpdf2+0x54>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a02:	bf0c      	ite	eq
 8000a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a08:	ea91 0f03 	teqne	r1, r3
 8000a0c:	bf02      	ittt	eq
 8000a0e:	ea90 0f02 	teqeq	r0, r2
 8000a12:	2000      	moveq	r0, #0
 8000a14:	4770      	bxeq	lr
 8000a16:	f110 0f00 	cmn.w	r0, #0
 8000a1a:	ea91 0f03 	teq	r1, r3
 8000a1e:	bf58      	it	pl
 8000a20:	4299      	cmppl	r1, r3
 8000a22:	bf08      	it	eq
 8000a24:	4290      	cmpeq	r0, r2
 8000a26:	bf2c      	ite	cs
 8000a28:	17d8      	asrcs	r0, r3, #31
 8000a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2e:	f040 0001 	orr.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__cmpdf2+0x64>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d107      	bne.n	8000a54 <__cmpdf2+0x74>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d1d6      	bne.n	80009fc <__cmpdf2+0x1c>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d0d3      	beq.n	80009fc <__cmpdf2+0x1c>
 8000a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_cdrcmple>:
 8000a5c:	4684      	mov	ip, r0
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4662      	mov	r2, ip
 8000a62:	468c      	mov	ip, r1
 8000a64:	4619      	mov	r1, r3
 8000a66:	4663      	mov	r3, ip
 8000a68:	e000      	b.n	8000a6c <__aeabi_cdcmpeq>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdcmpeq>:
 8000a6c:	b501      	push	{r0, lr}
 8000a6e:	f7ff ffb7 	bl	80009e0 <__cmpdf2>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	bf48      	it	mi
 8000a76:	f110 0f00 	cmnmi.w	r0, #0
 8000a7a:	bd01      	pop	{r0, pc}

08000a7c <__aeabi_dcmpeq>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff fff4 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a84:	bf0c      	ite	eq
 8000a86:	2001      	moveq	r0, #1
 8000a88:	2000      	movne	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmplt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffea 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmple>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffe0 	bl	8000a6c <__aeabi_cdcmpeq>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpge>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffce 	bl	8000a5c <__aeabi_cdrcmple>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpgt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffc4 	bl	8000a5c <__aeabi_cdrcmple>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_frsub>:
 8000b20:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b24:	e002      	b.n	8000b2c <__addsf3>
 8000b26:	bf00      	nop

08000b28 <__aeabi_fsub>:
 8000b28:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b2c <__addsf3>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	bf1f      	itttt	ne
 8000b30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b34:	ea92 0f03 	teqne	r2, r3
 8000b38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b40:	d06a      	beq.n	8000c18 <__addsf3+0xec>
 8000b42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4a:	bfc1      	itttt	gt
 8000b4c:	18d2      	addgt	r2, r2, r3
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	4048      	eorgt	r0, r1
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	bf88      	it	hi
 8000b5c:	4770      	bxhi	lr
 8000b5e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b66:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b72:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b76:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4249      	negne	r1, r1
 8000b7e:	ea92 0f03 	teq	r2, r3
 8000b82:	d03f      	beq.n	8000c04 <__addsf3+0xd8>
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	fa41 fc03 	asr.w	ip, r1, r3
 8000b8c:	eb10 000c 	adds.w	r0, r0, ip
 8000b90:	f1c3 0320 	rsb	r3, r3, #32
 8000b94:	fa01 f103 	lsl.w	r1, r1, r3
 8000b98:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b9c:	d502      	bpl.n	8000ba4 <__addsf3+0x78>
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba8:	d313      	bcc.n	8000bd2 <__addsf3+0xa6>
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bae:	d306      	bcc.n	8000bbe <__addsf3+0x92>
 8000bb0:	0840      	lsrs	r0, r0, #1
 8000bb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb6:	f102 0201 	add.w	r2, r2, #1
 8000bba:	2afe      	cmp	r2, #254	@ 0xfe
 8000bbc:	d251      	bcs.n	8000c62 <__addsf3+0x136>
 8000bbe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	ea40 0003 	orr.w	r0, r0, r3
 8000bd0:	4770      	bx	lr
 8000bd2:	0049      	lsls	r1, r1, #1
 8000bd4:	eb40 0000 	adc.w	r0, r0, r0
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	bf28      	it	cs
 8000bdc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be0:	d2ed      	bcs.n	8000bbe <__addsf3+0x92>
 8000be2:	fab0 fc80 	clz	ip, r0
 8000be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bea:	ebb2 020c 	subs.w	r2, r2, ip
 8000bee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf2:	bfaa      	itet	ge
 8000bf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf8:	4252      	neglt	r2, r2
 8000bfa:	4318      	orrge	r0, r3
 8000bfc:	bfbc      	itt	lt
 8000bfe:	40d0      	lsrlt	r0, r2
 8000c00:	4318      	orrlt	r0, r3
 8000c02:	4770      	bx	lr
 8000c04:	f092 0f00 	teq	r2, #0
 8000c08:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c0c:	bf06      	itte	eq
 8000c0e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c12:	3201      	addeq	r2, #1
 8000c14:	3b01      	subne	r3, #1
 8000c16:	e7b5      	b.n	8000b84 <__addsf3+0x58>
 8000c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	bf18      	it	ne
 8000c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c26:	d021      	beq.n	8000c6c <__addsf3+0x140>
 8000c28:	ea92 0f03 	teq	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__addsf3+0x10c>
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	bf08      	it	eq
 8000c34:	4608      	moveq	r0, r1
 8000c36:	4770      	bx	lr
 8000c38:	ea90 0f01 	teq	r0, r1
 8000c3c:	bf1c      	itt	ne
 8000c3e:	2000      	movne	r0, #0
 8000c40:	4770      	bxne	lr
 8000c42:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c46:	d104      	bne.n	8000c52 <__addsf3+0x126>
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c56:	bf3c      	itt	cc
 8000c58:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c5c:	4770      	bxcc	lr
 8000c5e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c62:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c6a:	4770      	bx	lr
 8000c6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c70:	bf16      	itet	ne
 8000c72:	4608      	movne	r0, r1
 8000c74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c78:	4601      	movne	r1, r0
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	bf06      	itte	eq
 8000c7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c82:	ea90 0f01 	teqeq	r0, r1
 8000c86:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_ui2f>:
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e004      	b.n	8000c9c <__aeabi_i2f+0x8>
 8000c92:	bf00      	nop

08000c94 <__aeabi_i2f>:
 8000c94:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c98:	bf48      	it	mi
 8000c9a:	4240      	negmi	r0, r0
 8000c9c:	ea5f 0c00 	movs.w	ip, r0
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca8:	4601      	mov	r1, r0
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	e01c      	b.n	8000cea <__aeabi_l2f+0x2a>

08000cb0 <__aeabi_ul2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e00a      	b.n	8000cd4 <__aeabi_l2f+0x14>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_l2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_l2f+0x14>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	ea5f 0c01 	movs.w	ip, r1
 8000cd8:	bf02      	ittt	eq
 8000cda:	4684      	moveq	ip, r0
 8000cdc:	4601      	moveq	r1, r0
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ce4:	bf08      	it	eq
 8000ce6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cee:	fabc f28c 	clz	r2, ip
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf8:	db10      	blt.n	8000d1c <__aeabi_l2f+0x5c>
 8000cfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	f020 0001 	biceq.w	r0, r0, #1
 8000d1a:	4770      	bx	lr
 8000d1c:	f102 0220 	add.w	r2, r2, #32
 8000d20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_fmul>:
 8000d3c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d44:	bf1e      	ittt	ne
 8000d46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4a:	ea92 0f0c 	teqne	r2, ip
 8000d4e:	ea93 0f0c 	teqne	r3, ip
 8000d52:	d06f      	beq.n	8000e34 <__aeabi_fmul+0xf8>
 8000d54:	441a      	add	r2, r3
 8000d56:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5a:	0240      	lsls	r0, r0, #9
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d62:	d01e      	beq.n	8000da2 <__aeabi_fmul+0x66>
 8000d64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d68:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d6c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d70:	fba0 3101 	umull	r3, r1, r0, r1
 8000d74:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d78:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d7c:	bf3e      	ittt	cc
 8000d7e:	0049      	lslcc	r1, r1, #1
 8000d80:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d84:	005b      	lslcc	r3, r3, #1
 8000d86:	ea40 0001 	orr.w	r0, r0, r1
 8000d8a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d8e:	2afd      	cmp	r2, #253	@ 0xfd
 8000d90:	d81d      	bhi.n	8000dce <__aeabi_fmul+0x92>
 8000d92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9a:	bf08      	it	eq
 8000d9c:	f020 0001 	biceq.w	r0, r0, #1
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000daa:	bf08      	it	eq
 8000dac:	0249      	lsleq	r1, r1, #9
 8000dae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000db6:	3a7f      	subs	r2, #127	@ 0x7f
 8000db8:	bfc2      	ittt	gt
 8000dba:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dbe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc2:	4770      	bxgt	lr
 8000dc4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	dc5d      	bgt.n	8000e8c <__aeabi_fmul+0x150>
 8000dd0:	f112 0f19 	cmn.w	r2, #25
 8000dd4:	bfdc      	itt	le
 8000dd6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dda:	4770      	bxle	lr
 8000ddc:	f1c2 0200 	rsb	r2, r2, #0
 8000de0:	0041      	lsls	r1, r0, #1
 8000de2:	fa21 f102 	lsr.w	r1, r1, r2
 8000de6:	f1c2 0220 	rsb	r2, r2, #32
 8000dea:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dee:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df2:	f140 0000 	adc.w	r0, r0, #0
 8000df6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfa:	bf08      	it	eq
 8000dfc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e00:	4770      	bx	lr
 8000e02:	f092 0f00 	teq	r2, #0
 8000e06:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0040      	lsleq	r0, r0, #1
 8000e0e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e12:	3a01      	subeq	r2, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xce>
 8000e16:	ea40 000c 	orr.w	r0, r0, ip
 8000e1a:	f093 0f00 	teq	r3, #0
 8000e1e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0049      	lsleq	r1, r1, #1
 8000e26:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e2a:	3b01      	subeq	r3, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xe6>
 8000e2e:	ea41 010c 	orr.w	r1, r1, ip
 8000e32:	e78f      	b.n	8000d54 <__aeabi_fmul+0x18>
 8000e34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	bf18      	it	ne
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d00a      	beq.n	8000e5a <__aeabi_fmul+0x11e>
 8000e44:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e48:	bf18      	it	ne
 8000e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e4e:	d1d8      	bne.n	8000e02 <__aeabi_fmul+0xc6>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e58:	4770      	bx	lr
 8000e5a:	f090 0f00 	teq	r0, #0
 8000e5e:	bf17      	itett	ne
 8000e60:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e64:	4608      	moveq	r0, r1
 8000e66:	f091 0f00 	teqne	r1, #0
 8000e6a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e6e:	d014      	beq.n	8000e9a <__aeabi_fmul+0x15e>
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d101      	bne.n	8000e7a <__aeabi_fmul+0x13e>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d10f      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e7a:	ea93 0f0c 	teq	r3, ip
 8000e7e:	d103      	bne.n	8000e88 <__aeabi_fmul+0x14c>
 8000e80:	024b      	lsls	r3, r1, #9
 8000e82:	bf18      	it	ne
 8000e84:	4608      	movne	r0, r1
 8000e86:	d108      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e98:	4770      	bx	lr
 8000e9a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fdiv>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d069      	beq.n	8000f90 <__aeabi_fdiv+0xec>
 8000ebc:	eba2 0203 	sub.w	r2, r2, r3
 8000ec0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec4:	0249      	lsls	r1, r1, #9
 8000ec6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eca:	d037      	beq.n	8000f3c <__aeabi_fdiv+0x98>
 8000ecc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000edc:	428b      	cmp	r3, r1
 8000ede:	bf38      	it	cc
 8000ee0:	005b      	lslcc	r3, r3, #1
 8000ee2:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ee6:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eea:	428b      	cmp	r3, r1
 8000eec:	bf24      	itt	cs
 8000eee:	1a5b      	subcs	r3, r3, r1
 8000ef0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef8:	bf24      	itt	cs
 8000efa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000efe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f02:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f06:	bf24      	itt	cs
 8000f08:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	bf18      	it	ne
 8000f22:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f26:	d1e0      	bne.n	8000eea <__aeabi_fdiv+0x46>
 8000f28:	2afd      	cmp	r2, #253	@ 0xfd
 8000f2a:	f63f af50 	bhi.w	8000dce <__aeabi_fmul+0x92>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f34:	bf08      	it	eq
 8000f36:	f020 0001 	biceq.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f40:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f44:	327f      	adds	r2, #127	@ 0x7f
 8000f46:	bfc2      	ittt	gt
 8000f48:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f4c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f50:	4770      	bxgt	lr
 8000f52:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	e737      	b.n	8000dce <__aeabi_fmul+0x92>
 8000f5e:	f092 0f00 	teq	r2, #0
 8000f62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0040      	lsleq	r0, r0, #1
 8000f6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f6e:	3a01      	subeq	r2, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xc2>
 8000f72:	ea40 000c 	orr.w	r0, r0, ip
 8000f76:	f093 0f00 	teq	r3, #0
 8000f7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0049      	lsleq	r1, r1, #1
 8000f82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f86:	3b01      	subeq	r3, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xda>
 8000f8a:	ea41 010c 	orr.w	r1, r1, ip
 8000f8e:	e795      	b.n	8000ebc <__aeabi_fdiv+0x18>
 8000f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f94:	ea92 0f0c 	teq	r2, ip
 8000f98:	d108      	bne.n	8000fac <__aeabi_fdiv+0x108>
 8000f9a:	0242      	lsls	r2, r0, #9
 8000f9c:	f47f af7d 	bne.w	8000e9a <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	f47f af70 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e776      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	d104      	bne.n	8000fbc <__aeabi_fdiv+0x118>
 8000fb2:	024b      	lsls	r3, r1, #9
 8000fb4:	f43f af4c 	beq.w	8000e50 <__aeabi_fmul+0x114>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e76e      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	d1ca      	bne.n	8000f5e <__aeabi_fdiv+0xba>
 8000fc8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fcc:	f47f af5c 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fd0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fd4:	f47f af3c 	bne.w	8000e50 <__aeabi_fmul+0x114>
 8000fd8:	e75f      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fda:	bf00      	nop

08000fdc <__aeabi_f2iz>:
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fe4:	d30f      	bcc.n	8001006 <__aeabi_f2iz+0x2a>
 8000fe6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fee:	d90d      	bls.n	800100c <__aeabi_f2iz+0x30>
 8000ff0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ff8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ffc:	fa23 f002 	lsr.w	r0, r3, r2
 8001000:	bf18      	it	ne
 8001002:	4240      	negne	r0, r0
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2iz+0x3a>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d105      	bne.n	8001022 <__aeabi_f2iz+0x46>
 8001016:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800101a:	bf08      	it	eq
 800101c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001020:	4770      	bx	lr
 8001022:	f04f 0000 	mov.w	r0, #0
 8001026:	4770      	bx	lr

08001028 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	e002      	b.n	8001038 <Delay+0x10>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3b01      	subs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f9      	bne.n	8001032 <Delay+0xa>
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <LCD_INIT>:

void LCD_INIT ( void )
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001050:	2001      	movs	r0, #1
 8001052:	f000 f829 	bl	80010a8 <LCD_BackLed_Control>
	LCD_Rst();
 8001056:	f000 f80f 	bl	8001078 <LCD_Rst>
	LCD_REG_Config();
 800105a:	f000 f85f 	bl	800111c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800105e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001068:	22f0      	movs	r2, #240	@ 0xf0
 800106a:	2100      	movs	r1, #0
 800106c:	2000      	movs	r0, #0
 800106e:	f000 f9e6 	bl	800143e <LCD_Clear>
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2102      	movs	r1, #2
 8001080:	4807      	ldr	r0, [pc, #28]	@ (80010a0 <LCD_Rst+0x28>)
 8001082:	f003 fa5c 	bl	800453e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001086:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <LCD_Rst+0x2c>)
 8001088:	f7ff ffce 	bl	8001028 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	2102      	movs	r1, #2
 8001090:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <LCD_Rst+0x28>)
 8001092:	f003 fa54 	bl	800453e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001096:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <LCD_Rst+0x2c>)
 8001098:	f7ff ffc6 	bl	8001028 <Delay>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40011800 	.word	0x40011800
 80010a4:	0002bffc 	.word	0x0002bffc

080010a8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010be:	4807      	ldr	r0, [pc, #28]	@ (80010dc <LCD_BackLed_Control+0x34>)
 80010c0:	f003 fa3d 	bl	800453e <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80010c4:	e005      	b.n	80010d2 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010cc:	4803      	ldr	r0, [pc, #12]	@ (80010dc <LCD_BackLed_Control+0x34>)
 80010ce:	f003 fa36 	bl	800453e <HAL_GPIO_WritePin>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40011400 	.word	0x40011400

080010e0 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80010ea:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	8013      	strh	r3, [r2, #0]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001106:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <LCD_Write_Data+0x1c>)
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	8013      	strh	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	60020000 	.word	0x60020000

0800111c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001120:	20cf      	movs	r0, #207	@ 0xcf
 8001122:	f7ff ffdd 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff ffe8 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800112c:	2081      	movs	r0, #129	@ 0x81
 800112e:	f7ff ffe5 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001132:	2030      	movs	r0, #48	@ 0x30
 8001134:	f7ff ffe2 	bl	80010fc <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001138:	20ed      	movs	r0, #237	@ 0xed
 800113a:	f7ff ffd1 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800113e:	2064      	movs	r0, #100	@ 0x64
 8001140:	f7ff ffdc 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001144:	2003      	movs	r0, #3
 8001146:	f7ff ffd9 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800114a:	2012      	movs	r0, #18
 800114c:	f7ff ffd6 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001150:	2081      	movs	r0, #129	@ 0x81
 8001152:	f7ff ffd3 	bl	80010fc <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001156:	20e8      	movs	r0, #232	@ 0xe8
 8001158:	f7ff ffc2 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800115c:	2085      	movs	r0, #133	@ 0x85
 800115e:	f7ff ffcd 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001162:	2010      	movs	r0, #16
 8001164:	f7ff ffca 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001168:	2078      	movs	r0, #120	@ 0x78
 800116a:	f7ff ffc7 	bl	80010fc <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800116e:	20cb      	movs	r0, #203	@ 0xcb
 8001170:	f7ff ffb6 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001174:	2039      	movs	r0, #57	@ 0x39
 8001176:	f7ff ffc1 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800117a:	202c      	movs	r0, #44	@ 0x2c
 800117c:	f7ff ffbe 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff ffbb 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001186:	2034      	movs	r0, #52	@ 0x34
 8001188:	f7ff ffb8 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800118c:	2002      	movs	r0, #2
 800118e:	f7ff ffb5 	bl	80010fc <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001192:	20f7      	movs	r0, #247	@ 0xf7
 8001194:	f7ff ffa4 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001198:	2020      	movs	r0, #32
 800119a:	f7ff ffaf 	bl	80010fc <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800119e:	20ea      	movs	r0, #234	@ 0xea
 80011a0:	f7ff ff9e 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff ffa9 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff ffa6 	bl	80010fc <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80011b0:	20b1      	movs	r0, #177	@ 0xb1
 80011b2:	f7ff ff95 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff ffa0 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80011bc:	201b      	movs	r0, #27
 80011be:	f7ff ff9d 	bl	80010fc <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80011c2:	20b6      	movs	r0, #182	@ 0xb6
 80011c4:	f7ff ff8c 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80011c8:	200a      	movs	r0, #10
 80011ca:	f7ff ff97 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80011ce:	20a2      	movs	r0, #162	@ 0xa2
 80011d0:	f7ff ff94 	bl	80010fc <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80011d4:	20c0      	movs	r0, #192	@ 0xc0
 80011d6:	f7ff ff83 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80011da:	2035      	movs	r0, #53	@ 0x35
 80011dc:	f7ff ff8e 	bl	80010fc <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80011e0:	20c1      	movs	r0, #193	@ 0xc1
 80011e2:	f7ff ff7d 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80011e6:	2011      	movs	r0, #17
 80011e8:	f7ff ff88 	bl	80010fc <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80011ec:	20c5      	movs	r0, #197	@ 0xc5
 80011ee:	f7ff ff77 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80011f2:	2045      	movs	r0, #69	@ 0x45
 80011f4:	f7ff ff82 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80011f8:	2045      	movs	r0, #69	@ 0x45
 80011fa:	f7ff ff7f 	bl	80010fc <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80011fe:	20c7      	movs	r0, #199	@ 0xc7
 8001200:	f7ff ff6e 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001204:	20a2      	movs	r0, #162	@ 0xa2
 8001206:	f7ff ff79 	bl	80010fc <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800120a:	20f2      	movs	r0, #242	@ 0xf2
 800120c:	f7ff ff68 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ff73 	bl	80010fc <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001216:	2026      	movs	r0, #38	@ 0x26
 8001218:	f7ff ff62 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff ff6d 	bl	80010fc <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001222:	20e0      	movs	r0, #224	@ 0xe0
 8001224:	f7ff ff5c 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001228:	200f      	movs	r0, #15
 800122a:	f7ff ff67 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800122e:	2026      	movs	r0, #38	@ 0x26
 8001230:	f7ff ff64 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001234:	2024      	movs	r0, #36	@ 0x24
 8001236:	f7ff ff61 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800123a:	200b      	movs	r0, #11
 800123c:	f7ff ff5e 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001240:	200e      	movs	r0, #14
 8001242:	f7ff ff5b 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001246:	2009      	movs	r0, #9
 8001248:	f7ff ff58 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800124c:	2054      	movs	r0, #84	@ 0x54
 800124e:	f7ff ff55 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001252:	20a8      	movs	r0, #168	@ 0xa8
 8001254:	f7ff ff52 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001258:	2046      	movs	r0, #70	@ 0x46
 800125a:	f7ff ff4f 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800125e:	200c      	movs	r0, #12
 8001260:	f7ff ff4c 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001264:	2017      	movs	r0, #23
 8001266:	f7ff ff49 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800126a:	2009      	movs	r0, #9
 800126c:	f7ff ff46 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001270:	200f      	movs	r0, #15
 8001272:	f7ff ff43 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001276:	2007      	movs	r0, #7
 8001278:	f7ff ff40 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff ff3d 	bl	80010fc <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001282:	20e1      	movs	r0, #225	@ 0xe1
 8001284:	f7ff ff2c 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff ff37 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800128e:	2019      	movs	r0, #25
 8001290:	f7ff ff34 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001294:	201b      	movs	r0, #27
 8001296:	f7ff ff31 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800129a:	2004      	movs	r0, #4
 800129c:	f7ff ff2e 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80012a0:	2010      	movs	r0, #16
 80012a2:	f7ff ff2b 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80012a6:	2007      	movs	r0, #7
 80012a8:	f7ff ff28 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80012ac:	202a      	movs	r0, #42	@ 0x2a
 80012ae:	f7ff ff25 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80012b2:	2047      	movs	r0, #71	@ 0x47
 80012b4:	f7ff ff22 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80012b8:	2039      	movs	r0, #57	@ 0x39
 80012ba:	f7ff ff1f 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80012be:	2003      	movs	r0, #3
 80012c0:	f7ff ff1c 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80012c4:	2006      	movs	r0, #6
 80012c6:	f7ff ff19 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80012ca:	2006      	movs	r0, #6
 80012cc:	f7ff ff16 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80012d0:	2030      	movs	r0, #48	@ 0x30
 80012d2:	f7ff ff13 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80012d6:	2038      	movs	r0, #56	@ 0x38
 80012d8:	f7ff ff10 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80012dc:	200f      	movs	r0, #15
 80012de:	f7ff ff0d 	bl	80010fc <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80012e2:	2036      	movs	r0, #54	@ 0x36
 80012e4:	f7ff fefc 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80012e8:	20c8      	movs	r0, #200	@ 0xc8
 80012ea:	f7ff ff07 	bl	80010fc <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80012ee:	202a      	movs	r0, #42	@ 0x2a
 80012f0:	f7ff fef6 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff ff01 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fefe 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff fefb 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001306:	20ef      	movs	r0, #239	@ 0xef
 8001308:	f7ff fef8 	bl	80010fc <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800130c:	202b      	movs	r0, #43	@ 0x2b
 800130e:	f7ff fee7 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fef2 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff feef 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800131e:	2001      	movs	r0, #1
 8001320:	f7ff feec 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001324:	203f      	movs	r0, #63	@ 0x3f
 8001326:	f7ff fee9 	bl	80010fc <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800132a:	203a      	movs	r0, #58	@ 0x3a
 800132c:	f7ff fed8 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001330:	2055      	movs	r0, #85	@ 0x55
 8001332:	f7ff fee3 	bl	80010fc <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001336:	2011      	movs	r0, #17
 8001338:	f7ff fed2 	bl	80010e0 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <LCD_REG_Config+0x230>)
 800133e:	f7ff fe73 	bl	8001028 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001342:	2029      	movs	r0, #41	@ 0x29
 8001344:	f7ff fecc 	bl	80010e0 <LCD_Write_Cmd>
	
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	0002bffc 	.word	0x0002bffc

08001350 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4604      	mov	r4, r0
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	461a      	mov	r2, r3
 800135e:	4623      	mov	r3, r4
 8001360:	80fb      	strh	r3, [r7, #6]
 8001362:	4603      	mov	r3, r0
 8001364:	80bb      	strh	r3, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	807b      	strh	r3, [r7, #2]
 800136a:	4613      	mov	r3, r2
 800136c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800136e:	202a      	movs	r0, #42	@ 0x2a
 8001370:	f7ff feb6 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b29b      	uxth	r3, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff febe 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	b29b      	uxth	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff feb8 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800138c:	88fa      	ldrh	r2, [r7, #6]
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	4413      	add	r3, r2
 8001392:	3b01      	subs	r3, #1
 8001394:	121b      	asrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff feaf 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800139e:	88fa      	ldrh	r2, [r7, #6]
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	4413      	add	r3, r2
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	3b01      	subs	r3, #1
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fea4 	bl	80010fc <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80013b4:	202b      	movs	r0, #43	@ 0x2b
 80013b6:	f7ff fe93 	bl	80010e0 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80013ba:	88bb      	ldrh	r3, [r7, #4]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fe9b 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80013c6:	88bb      	ldrh	r3, [r7, #4]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fe95 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80013d2:	88ba      	ldrh	r2, [r7, #4]
 80013d4:	883b      	ldrh	r3, [r7, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	3b01      	subs	r3, #1
 80013da:	121b      	asrs	r3, r3, #8
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fe8c 	bl	80010fc <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80013e4:	88ba      	ldrh	r2, [r7, #4]
 80013e6:	883b      	ldrh	r3, [r7, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fe81 	bl	80010fc <LCD_Write_Data>
	
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd90      	pop	{r4, r7, pc}

08001402 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001412:	202c      	movs	r0, #44	@ 0x2c
 8001414:	f7ff fe64 	bl	80010e0 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e006      	b.n	800142c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fe6b 	bl	80010fc <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3301      	adds	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	d3f4      	bcc.n	800141e <LCD_FillColor+0x1c>
		
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800143e:	b590      	push	{r4, r7, lr}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	4604      	mov	r4, r0
 8001446:	4608      	mov	r0, r1
 8001448:	4611      	mov	r1, r2
 800144a:	461a      	mov	r2, r3
 800144c:	4623      	mov	r3, r4
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4603      	mov	r3, r0
 8001452:	80bb      	strh	r3, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800145c:	883b      	ldrh	r3, [r7, #0]
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	88b9      	ldrh	r1, [r7, #4]
 8001462:	88f8      	ldrh	r0, [r7, #6]
 8001464:	f7ff ff74 	bl	8001350 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001468:	887b      	ldrh	r3, [r7, #2]
 800146a:	883a      	ldrh	r2, [r7, #0]
 800146c:	fb02 f303 	mul.w	r3, r2, r3
 8001470:	461a      	mov	r2, r3
 8001472:	8b3b      	ldrh	r3, [r7, #24]
 8001474:	4619      	mov	r1, r3
 8001476:	4610      	mov	r0, r2
 8001478:	f7ff ffc3 	bl	8001402 <LCD_FillColor>
	
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}

08001484 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
 800148e:	460b      	mov	r3, r1
 8001490:	80bb      	strh	r3, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	3b20      	subs	r3, #32
 800149a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800149c:	88b9      	ldrh	r1, [r7, #4]
 800149e:	88f8      	ldrh	r0, [r7, #6]
 80014a0:	2310      	movs	r3, #16
 80014a2:	2208      	movs	r2, #8
 80014a4:	f7ff ff54 	bl	8001350 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80014a8:	202c      	movs	r0, #44	@ 0x2c
 80014aa:	f7ff fe19 	bl	80010e0 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80014ae:	2300      	movs	r3, #0
 80014b0:	73bb      	strb	r3, [r7, #14]
 80014b2:	e023      	b.n	80014fc <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80014b4:	7b3a      	ldrb	r2, [r7, #12]
 80014b6:	7bbb      	ldrb	r3, [r7, #14]
 80014b8:	4914      	ldr	r1, [pc, #80]	@ (800150c <LCD_DrawChar+0x88>)
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	440a      	add	r2, r1
 80014be:	4413      	add	r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80014c4:	2300      	movs	r3, #0
 80014c6:	737b      	strb	r3, [r7, #13]
 80014c8:	e012      	b.n	80014f0 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80014d4:	201f      	movs	r0, #31
 80014d6:	f7ff fe11 	bl	80010fc <LCD_Write_Data>
 80014da:	e003      	b.n	80014e4 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80014dc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014e0:	f7ff fe0c 	bl	80010fc <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	085b      	lsrs	r3, r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80014ea:	7b7b      	ldrb	r3, [r7, #13]
 80014ec:	3301      	adds	r3, #1
 80014ee:	737b      	strb	r3, [r7, #13]
 80014f0:	7b7b      	ldrb	r3, [r7, #13]
 80014f2:	2b07      	cmp	r3, #7
 80014f4:	d9e9      	bls.n	80014ca <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80014f6:	7bbb      	ldrb	r3, [r7, #14]
 80014f8:	3301      	adds	r3, #1
 80014fa:	73bb      	strb	r3, [r7, #14]
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	2b0f      	cmp	r3, #15
 8001500:	d9d8      	bls.n	80014b4 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	08006ab0 	.word	0x08006ab0

08001510 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	603a      	str	r2, [r7, #0]
 800151a:	80fb      	strh	r3, [r7, #6]
 800151c:	460b      	mov	r3, r1
 800151e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001520:	e01c      	b.n	800155c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	2be8      	cmp	r3, #232	@ 0xe8
 8001526:	d904      	bls.n	8001532 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001528:	2300      	movs	r3, #0
 800152a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800152c:	88bb      	ldrh	r3, [r7, #4]
 800152e:	3310      	adds	r3, #16
 8001530:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001532:	88bb      	ldrh	r3, [r7, #4]
 8001534:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8001538:	d903      	bls.n	8001542 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800153a:	2300      	movs	r3, #0
 800153c:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800153e:	2300      	movs	r3, #0
 8001540:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	88b9      	ldrh	r1, [r7, #4]
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff9a 	bl	8001484 <LCD_DrawChar>
		
		pStr ++;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	3308      	adds	r3, #8
 800155a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1de      	bne.n	8001522 <LCD_DrawString+0x12>
		
	}
	
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <LCD_DrawChar_Color>:
{	

}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	4604      	mov	r4, r0
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4623      	mov	r3, r4
 8001580:	80fb      	strh	r3, [r7, #6]
 8001582:	4603      	mov	r3, r0
 8001584:	80bb      	strh	r3, [r7, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	70fb      	strb	r3, [r7, #3]
 800158a:	4613      	mov	r3, r2
 800158c:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	3b20      	subs	r3, #32
 8001592:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001594:	88b9      	ldrh	r1, [r7, #4]
 8001596:	88f8      	ldrh	r0, [r7, #6]
 8001598:	2310      	movs	r3, #16
 800159a:	2208      	movs	r2, #8
 800159c:	f7ff fed8 	bl	8001350 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80015a0:	202c      	movs	r0, #44	@ 0x2c
 80015a2:	f7ff fd9d 	bl	80010e0 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80015a6:	2300      	movs	r3, #0
 80015a8:	73bb      	strb	r3, [r7, #14]
 80015aa:	e024      	b.n	80015f6 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80015ac:	7b3a      	ldrb	r2, [r7, #12]
 80015ae:	7bbb      	ldrb	r3, [r7, #14]
 80015b0:	4915      	ldr	r1, [pc, #84]	@ (8001608 <LCD_DrawChar_Color+0x98>)
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	440a      	add	r2, r1
 80015b6:	4413      	add	r3, r2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80015bc:	2300      	movs	r3, #0
 80015be:	737b      	strb	r3, [r7, #13]
 80015c0:	e013      	b.n	80015ea <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d004      	beq.n	80015d6 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80015cc:	8c3b      	ldrh	r3, [r7, #32]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fd94 	bl	80010fc <LCD_Write_Data>
 80015d4:	e003      	b.n	80015de <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 80015d6:	883b      	ldrh	r3, [r7, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fd8f 	bl	80010fc <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	085b      	lsrs	r3, r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80015e4:	7b7b      	ldrb	r3, [r7, #13]
 80015e6:	3301      	adds	r3, #1
 80015e8:	737b      	strb	r3, [r7, #13]
 80015ea:	7b7b      	ldrb	r3, [r7, #13]
 80015ec:	2b07      	cmp	r3, #7
 80015ee:	d9e8      	bls.n	80015c2 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80015f0:	7bbb      	ldrb	r3, [r7, #14]
 80015f2:	3301      	adds	r3, #1
 80015f4:	73bb      	strb	r3, [r7, #14]
 80015f6:	7bbb      	ldrb	r3, [r7, #14]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d9d7      	bls.n	80015ac <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}
 8001606:	bf00      	nop
 8001608:	08006ab0 	.word	0x08006ab0

0800160c <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af02      	add	r7, sp, #8
 8001612:	4603      	mov	r3, r0
 8001614:	460a      	mov	r2, r1
 8001616:	80fb      	strh	r3, [r7, #6]
 8001618:	4613      	mov	r3, r2
 800161a:	80bb      	strh	r3, [r7, #4]
  LCD_Clear ( usX - 10, usY, 20, 1, RED);
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	3b0a      	subs	r3, #10
 8001620:	b298      	uxth	r0, r3
 8001622:	88b9      	ldrh	r1, [r7, #4]
 8001624:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2301      	movs	r3, #1
 800162c:	2214      	movs	r2, #20
 800162e:	f7ff ff06 	bl	800143e <LCD_Clear>
  LCD_Clear ( usX, usY - 10, 1, 20, RED);
 8001632:	88bb      	ldrh	r3, [r7, #4]
 8001634:	3b0a      	subs	r3, #10
 8001636:	b299      	uxth	r1, r3
 8001638:	88f8      	ldrh	r0, [r7, #6]
 800163a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2314      	movs	r3, #20
 8001642:	2201      	movs	r2, #1
 8001644:	f7ff fefb 	bl	800143e <LCD_Clear>
	
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b087      	sub	sp, #28
 8001654:	af02      	add	r7, sp, #8
 8001656:	60ba      	str	r2, [r7, #8]
 8001658:	461a      	mov	r2, r3
 800165a:	4603      	mov	r3, r0
 800165c:	81fb      	strh	r3, [r7, #14]
 800165e:	460b      	mov	r3, r1
 8001660:	81bb      	strh	r3, [r7, #12]
 8001662:	4613      	mov	r3, r2
 8001664:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001666:	e01f      	b.n	80016a8 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	2be8      	cmp	r3, #232	@ 0xe8
 800166c:	d904      	bls.n	8001678 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800166e:	2300      	movs	r3, #0
 8001670:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8001672:	89bb      	ldrh	r3, [r7, #12]
 8001674:	3310      	adds	r3, #16
 8001676:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001678:	89bb      	ldrh	r3, [r7, #12]
 800167a:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 800167e:	d903      	bls.n	8001688 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001680:	2300      	movs	r3, #0
 8001682:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8001684:	2300      	movs	r3, #0
 8001686:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	88fc      	ldrh	r4, [r7, #6]
 800168e:	89b9      	ldrh	r1, [r7, #12]
 8001690:	89f8      	ldrh	r0, [r7, #14]
 8001692:	8c3b      	ldrh	r3, [r7, #32]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	4623      	mov	r3, r4
 8001698:	f7ff ff6a 	bl	8001570 <LCD_DrawChar_Color>
		
		pStr ++;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	3301      	adds	r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	3308      	adds	r3, #8
 80016a6:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1db      	bne.n	8001668 <LCD_DrawString_Color+0x18>
		
	}
	
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd90      	pop	{r4, r7, pc}
	...

080016bc <calibrate_axis>:

    int16_t joystick_x;     // X value
    int16_t joystick_y;     // Y value

/* Function to map ADC value to -5 to +5 scale with dead zone */
int16_t calibrate_axis(uint32_t raw, uint32_t center, uint32_t min_val, uint32_t max_val) {
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	603b      	str	r3, [r7, #0]
    if (raw > (center - DEAD_ZONE) && raw < (center + DEAD_ZONE)) {
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3b32      	subs	r3, #50	@ 0x32
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d906      	bls.n	80016e2 <calibrate_axis+0x26>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	3332      	adds	r3, #50	@ 0x32
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d201      	bcs.n	80016e2 <calibrate_axis+0x26>
        return 0;  // Within dead zone, return center position
 80016de:	2300      	movs	r3, #0
 80016e0:	e04c      	b.n	800177c <calibrate_axis+0xc0>
    }
    
    if (raw < center) {
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d224      	bcs.n	8001734 <calibrate_axis+0x78>
        // Map values below center to -5 to 0
        if (raw < min_val) raw = min_val;
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d201      	bcs.n	80016f6 <calibrate_axis+0x3a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60fb      	str	r3, [r7, #12]
        return (int16_t)(-5.0f * (center - raw) / (center - min_val));
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fac5 	bl	8000c8c <__aeabi_ui2f>
 8001702:	4603      	mov	r3, r0
 8001704:	491f      	ldr	r1, [pc, #124]	@ (8001784 <calibrate_axis+0xc8>)
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fb18 	bl	8000d3c <__aeabi_fmul>
 800170c:	4603      	mov	r3, r0
 800170e:	461c      	mov	r4, r3
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fab8 	bl	8000c8c <__aeabi_ui2f>
 800171c:	4603      	mov	r3, r0
 800171e:	4619      	mov	r1, r3
 8001720:	4620      	mov	r0, r4
 8001722:	f7ff fbbf 	bl	8000ea4 <__aeabi_fdiv>
 8001726:	4603      	mov	r3, r0
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fc57 	bl	8000fdc <__aeabi_f2iz>
 800172e:	4603      	mov	r3, r0
 8001730:	b21b      	sxth	r3, r3
 8001732:	e023      	b.n	800177c <calibrate_axis+0xc0>
    } else {
        // Map values above center to 0 to +5
        if (raw > max_val) raw = max_val;
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d901      	bls.n	8001740 <calibrate_axis+0x84>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	60fb      	str	r3, [r7, #12]
        return (int16_t)(5.0f * (raw - center) / (max_val - center));
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff faa0 	bl	8000c8c <__aeabi_ui2f>
 800174c:	4603      	mov	r3, r0
 800174e:	490e      	ldr	r1, [pc, #56]	@ (8001788 <calibrate_axis+0xcc>)
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff faf3 	bl	8000d3c <__aeabi_fmul>
 8001756:	4603      	mov	r3, r0
 8001758:	461c      	mov	r4, r3
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fa93 	bl	8000c8c <__aeabi_ui2f>
 8001766:	4603      	mov	r3, r0
 8001768:	4619      	mov	r1, r3
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff fb9a 	bl	8000ea4 <__aeabi_fdiv>
 8001770:	4603      	mov	r3, r0
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fc32 	bl	8000fdc <__aeabi_f2iz>
 8001778:	4603      	mov	r3, r0
 800177a:	b21b      	sxth	r3, r3
    }
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	c0a00000 	.word	0xc0a00000
 8001788:	40a00000 	.word	0x40a00000

0800178c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	@ 0x28
 8001790:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001792:	f001 fd67 	bl	8003264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001796:	f000 fa9f 	bl	8001cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179a:	f000 fb9f 	bl	8001edc <MX_GPIO_Init>
  MX_FSMC_Init();
 800179e:	f000 fc59 	bl	8002054 <MX_FSMC_Init>
  MX_ADC1_Init();
 80017a2:	f000 faf5 	bl	8001d90 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017a6:	f000 fb31 	bl	8001e0c <MX_ADC2_Init>
  MX_USART2_UART_Init();
 80017aa:	f000 fb6d 	bl	8001e88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	
	macXPT2046_CS_DISABLE();
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017b4:	48be      	ldr	r0, [pc, #760]	@ (8001ab0 <main+0x324>)
 80017b6:	f002 fec2 	bl	800453e <HAL_GPIO_WritePin>
	
	LCD_INIT();
 80017ba:	f7ff fc46 	bl	800104a <LCD_INIT>

   // Initialize and calibrate both ADCs
  HAL_ADCEx_Calibration_Start(&hadc1);
 80017be:	48bd      	ldr	r0, [pc, #756]	@ (8001ab4 <main+0x328>)
 80017c0:	f002 fa14 	bl	8003bec <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 80017c4:	48bc      	ldr	r0, [pc, #752]	@ (8001ab8 <main+0x32c>)
 80017c6:	f002 fa11 	bl	8003bec <HAL_ADCEx_Calibration_Start>

  // Configure ADC1 for Channel 12
  hadc1.Init.ScanConvMode = DISABLE;  // Single channel mode
 80017ca:	4bba      	ldr	r3, [pc, #744]	@ (8001ab4 <main+0x328>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017d0:	4bb8      	ldr	r3, [pc, #736]	@ (8001ab4 <main+0x328>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017d6:	4bb7      	ldr	r3, [pc, #732]	@ (8001ab4 <main+0x328>)
 80017d8:	2201      	movs	r2, #1
 80017da:	611a      	str	r2, [r3, #16]
  HAL_ADC_Init(&hadc1);
 80017dc:	48b5      	ldr	r0, [pc, #724]	@ (8001ab4 <main+0x328>)
 80017de:	f001 fdc7 	bl	8003370 <HAL_ADC_Init>

  // Configure ADC2 for Channel 13
  hadc2.Init.ScanConvMode = DISABLE;  // Single channel mode
 80017e2:	4bb5      	ldr	r3, [pc, #724]	@ (8001ab8 <main+0x32c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80017e8:	4bb3      	ldr	r3, [pc, #716]	@ (8001ab8 <main+0x32c>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	731a      	strb	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80017ee:	4bb2      	ldr	r3, [pc, #712]	@ (8001ab8 <main+0x32c>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	611a      	str	r2, [r3, #16]
  HAL_ADC_Init(&hadc2);
 80017f4:	48b0      	ldr	r0, [pc, #704]	@ (8001ab8 <main+0x32c>)
 80017f6:	f001 fdbb 	bl	8003370 <HAL_ADC_Init>

  // Configure Channel 12 on ADC1
  ADC_ChannelConfTypeDef sConfig = {0};
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
  sConfig.Channel = ADC_CHANNEL_12;
 8001804:	230c      	movs	r3, #12
 8001806:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001808:	2301      	movs	r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800180c:	2307      	movs	r3, #7
 800180e:	60fb      	str	r3, [r7, #12]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	4619      	mov	r1, r3
 8001814:	48a7      	ldr	r0, [pc, #668]	@ (8001ab4 <main+0x328>)
 8001816:	f002 f855 	bl	80038c4 <HAL_ADC_ConfigChannel>

  // Configure Channel 13 on ADC2
  sConfig.Channel = ADC_CHANNEL_13;
 800181a:	230d      	movs	r3, #13
 800181c:	607b      	str	r3, [r7, #4]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	48a5      	ldr	r0, [pc, #660]	@ (8001ab8 <main+0x32c>)
 8001824:	f002 f84e 	bl	80038c4 <HAL_ADC_ConfigChannel>

  // Start both ADCs
  HAL_ADC_Start(&hadc1);
 8001828:	48a2      	ldr	r0, [pc, #648]	@ (8001ab4 <main+0x328>)
 800182a:	f001 fe8b 	bl	8003544 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800182e:	48a2      	ldr	r0, [pc, #648]	@ (8001ab8 <main+0x32c>)
 8001830:	f001 fe88 	bl	8003544 <HAL_ADC_Start>

  LCD_DrawString(100, 35, "X       Y");
 8001834:	4aa1      	ldr	r2, [pc, #644]	@ (8001abc <main+0x330>)
 8001836:	2123      	movs	r1, #35	@ 0x23
 8001838:	2064      	movs	r0, #100	@ 0x64
 800183a:	f7ff fe69 	bl	8001510 <LCD_DrawString>
  LCD_DrawString(10, 60, "Joystick:");
 800183e:	4aa0      	ldr	r2, [pc, #640]	@ (8001ac0 <main+0x334>)
 8001840:	213c      	movs	r1, #60	@ 0x3c
 8001842:	200a      	movs	r0, #10
 8001844:	f7ff fe64 	bl	8001510 <LCD_DrawString>




  HAL_UARTEx_ReceiveToIdle_IT(&huart2,Data,3); 			  									// BT
 8001848:	2203      	movs	r2, #3
 800184a:	499e      	ldr	r1, [pc, #632]	@ (8001ac4 <main+0x338>)
 800184c:	489e      	ldr	r0, [pc, #632]	@ (8001ac8 <main+0x33c>)
 800184e:	f003 fd77 	bl	8005340 <HAL_UARTEx_ReceiveToIdle_IT>





	LCD_Clear (50, 80, 140, 70, RED);
 8001852:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2346      	movs	r3, #70	@ 0x46
 800185a:	228c      	movs	r2, #140	@ 0x8c
 800185c:	2150      	movs	r1, #80	@ 0x50
 800185e:	2032      	movs	r0, #50	@ 0x32
 8001860:	f7ff fded 	bl	800143e <LCD_Clear>
	LCD_DrawString(68, 100, "TOUCHPAD Init");
 8001864:	4a99      	ldr	r2, [pc, #612]	@ (8001acc <main+0x340>)
 8001866:	2164      	movs	r1, #100	@ 0x64
 8001868:	2044      	movs	r0, #68	@ 0x44
 800186a:	f7ff fe51 	bl	8001510 <LCD_DrawString>
	HAL_Delay(2000);
 800186e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001872:	f001 fd59 	bl	8003328 <HAL_Delay>

	while( ! XPT2046_Touch_Calibrate () );   
 8001876:	bf00      	nop
 8001878:	f001 f9ca 	bl	8002c10 <XPT2046_Touch_Calibrate>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0fa      	beq.n	8001878 <main+0xec>

	LCD_Clear ( 0, 0, 240, 320, GREY );
 8001882:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800188c:	22f0      	movs	r2, #240	@ 0xf0
 800188e:	2100      	movs	r1, #0
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff fdd4 	bl	800143e <LCD_Clear>
	// LCD_Clear ( 90,  230,  60, 60, BLUE );

  // Draw 4 buttons at the bottom
  LCD_Clear(20, 232, 50, 50, BLUE);    // Button 1
 8001896:	231f      	movs	r3, #31
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2332      	movs	r3, #50	@ 0x32
 800189c:	2232      	movs	r2, #50	@ 0x32
 800189e:	21e8      	movs	r1, #232	@ 0xe8
 80018a0:	2014      	movs	r0, #20
 80018a2:	f7ff fdcc 	bl	800143e <LCD_Clear>
  LCD_Clear(75, 232, 50, 50, GREEN);   // Button 2
 80018a6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2332      	movs	r3, #50	@ 0x32
 80018ae:	2232      	movs	r2, #50	@ 0x32
 80018b0:	21e8      	movs	r1, #232	@ 0xe8
 80018b2:	204b      	movs	r0, #75	@ 0x4b
 80018b4:	f7ff fdc3 	bl	800143e <LCD_Clear>
  LCD_Clear(130, 232, 50, 50, YELLOW); // Button 3
 80018b8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2332      	movs	r3, #50	@ 0x32
 80018c0:	2232      	movs	r2, #50	@ 0x32
 80018c2:	21e8      	movs	r1, #232	@ 0xe8
 80018c4:	2082      	movs	r0, #130	@ 0x82
 80018c6:	f7ff fdba 	bl	800143e <LCD_Clear>
  LCD_Clear(185, 232, 50, 50, RED);    // Button 4 (reset)
 80018ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2332      	movs	r3, #50	@ 0x32
 80018d2:	2232      	movs	r2, #50	@ 0x32
 80018d4:	21e8      	movs	r1, #232	@ 0xe8
 80018d6:	20b9      	movs	r0, #185	@ 0xb9
 80018d8:	f7ff fdb1 	bl	800143e <LCD_Clear>

  // Optionally, add labels
  LCD_DrawString(35, 255, "B1");
 80018dc:	4a7c      	ldr	r2, [pc, #496]	@ (8001ad0 <main+0x344>)
 80018de:	21ff      	movs	r1, #255	@ 0xff
 80018e0:	2023      	movs	r0, #35	@ 0x23
 80018e2:	f7ff fe15 	bl	8001510 <LCD_DrawString>
  LCD_DrawString(90, 255, "B2");
 80018e6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ad4 <main+0x348>)
 80018e8:	21ff      	movs	r1, #255	@ 0xff
 80018ea:	205a      	movs	r0, #90	@ 0x5a
 80018ec:	f7ff fe10 	bl	8001510 <LCD_DrawString>
  LCD_DrawString(145, 255, "B3");
 80018f0:	4a79      	ldr	r2, [pc, #484]	@ (8001ad8 <main+0x34c>)
 80018f2:	21ff      	movs	r1, #255	@ 0xff
 80018f4:	2091      	movs	r0, #145	@ 0x91
 80018f6:	f7ff fe0b 	bl	8001510 <LCD_DrawString>
  LCD_DrawString(200, 255, "RST");
 80018fa:	4a78      	ldr	r2, [pc, #480]	@ (8001adc <main+0x350>)
 80018fc:	21ff      	movs	r1, #255	@ 0xff
 80018fe:	20c8      	movs	r0, #200	@ 0xc8
 8001900:	f7ff fe06 	bl	8001510 <LCD_DrawString>
  /* USER CODE BEGIN WHILE */
	
	
  while (1)
  {
    if ( ucXPT2046_TouchFlag == 1 )	         
 8001904:	4b76      	ldr	r3, [pc, #472]	@ (8001ae0 <main+0x354>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d104      	bne.n	8001918 <main+0x18c>
    {
			Check_touchkey();			
 800190e:	f000 fc05 	bl	800211c <Check_touchkey>
      ucXPT2046_TouchFlag = 0;		            
 8001912:	4b73      	ldr	r3, [pc, #460]	@ (8001ae0 <main+0x354>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
    }					
		HAL_Delay(50);		
 8001918:	2032      	movs	r0, #50	@ 0x32
 800191a:	f001 fd05 	bl	8003328 <HAL_Delay>
		
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    uint32_t x_sum = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    uint32_t y_sum = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]

    // Take multiple samples and average them
    for(int i = 0; i < ADC_SAMPLES; i++) {
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e01b      	b.n	8001964 <main+0x1d8>
        // Read X axis (ADC1 Channel 12)
        HAL_ADC_PollForConversion(&hadc1, 100);
 800192c:	2164      	movs	r1, #100	@ 0x64
 800192e:	4861      	ldr	r0, [pc, #388]	@ (8001ab4 <main+0x328>)
 8001930:	f001 feb6 	bl	80036a0 <HAL_ADC_PollForConversion>
        x_sum += HAL_ADC_GetValue(&hadc1);
 8001934:	485f      	ldr	r0, [pc, #380]	@ (8001ab4 <main+0x328>)
 8001936:	f001 ffb9 	bl	80038ac <HAL_ADC_GetValue>
 800193a:	4602      	mov	r2, r0
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	4413      	add	r3, r2
 8001940:	61fb      	str	r3, [r7, #28]

        // Read Y axis (ADC2 Channel 13)
        HAL_ADC_PollForConversion(&hadc2, 100);
 8001942:	2164      	movs	r1, #100	@ 0x64
 8001944:	485c      	ldr	r0, [pc, #368]	@ (8001ab8 <main+0x32c>)
 8001946:	f001 feab 	bl	80036a0 <HAL_ADC_PollForConversion>
        y_sum += HAL_ADC_GetValue(&hadc2);
 800194a:	485b      	ldr	r0, [pc, #364]	@ (8001ab8 <main+0x32c>)
 800194c:	f001 ffae 	bl	80038ac <HAL_ADC_GetValue>
 8001950:	4602      	mov	r2, r0
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4413      	add	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        
        HAL_Delay(1);
 8001958:	2001      	movs	r0, #1
 800195a:	f001 fce5 	bl	8003328 <HAL_Delay>
    for(int i = 0; i < ADC_SAMPLES; i++) {
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b07      	cmp	r3, #7
 8001968:	dde0      	ble.n	800192c <main+0x1a0>
    }

    // Calculate averages
    adc_value[0] = x_sum / ADC_SAMPLES;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	08db      	lsrs	r3, r3, #3
 800196e:	4a5d      	ldr	r2, [pc, #372]	@ (8001ae4 <main+0x358>)
 8001970:	6013      	str	r3, [r2, #0]
    adc_value[1] = y_sum / ADC_SAMPLES;
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	4a5b      	ldr	r2, [pc, #364]	@ (8001ae4 <main+0x358>)
 8001978:	6053      	str	r3, [r2, #4]

    // Calibrate values to -10 to +10 scale
    cal_value[0] = calibrate_axis(adc_value[0], X_CENTER, X_MIN, X_MAX);
 800197a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ae4 <main+0x358>)
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	f640 73fa 	movw	r3, #4090	@ 0xffa
 8001982:	2201      	movs	r2, #1
 8001984:	f240 71ed 	movw	r1, #2029	@ 0x7ed
 8001988:	f7ff fe98 	bl	80016bc <calibrate_axis>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	4b55      	ldr	r3, [pc, #340]	@ (8001ae8 <main+0x35c>)
 8001992:	801a      	strh	r2, [r3, #0]
    cal_value[1] = calibrate_axis(adc_value[1], Y_CENTER, Y_MIN, Y_MAX);
 8001994:	4b53      	ldr	r3, [pc, #332]	@ (8001ae4 <main+0x358>)
 8001996:	6858      	ldr	r0, [r3, #4]
 8001998:	f640 73c8 	movw	r3, #4040	@ 0xfc8
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 61fb 	mov.w	r1, #2008	@ 0x7d8
 80019a2:	f7ff fe8b 	bl	80016bc <calibrate_axis>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae8 <main+0x35c>)
 80019ac:	805a      	strh	r2, [r3, #2]

    // Display raw X value
    sprintf(buff, "%04lu", adc_value[0]);
 80019ae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae4 <main+0x358>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	494d      	ldr	r1, [pc, #308]	@ (8001aec <main+0x360>)
 80019b6:	484e      	ldr	r0, [pc, #312]	@ (8001af0 <main+0x364>)
 80019b8:	f004 fb64 	bl	8006084 <siprintf>
    LCD_DrawString(100, 80, buff);
 80019bc:	4a4c      	ldr	r2, [pc, #304]	@ (8001af0 <main+0x364>)
 80019be:	2150      	movs	r1, #80	@ 0x50
 80019c0:	2064      	movs	r0, #100	@ 0x64
 80019c2:	f7ff fda5 	bl	8001510 <LCD_DrawString>

    // Display raw Y value
    sprintf(buff, "%04lu", adc_value[1]);
 80019c6:	4b47      	ldr	r3, [pc, #284]	@ (8001ae4 <main+0x358>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	461a      	mov	r2, r3
 80019cc:	4947      	ldr	r1, [pc, #284]	@ (8001aec <main+0x360>)
 80019ce:	4848      	ldr	r0, [pc, #288]	@ (8001af0 <main+0x364>)
 80019d0:	f004 fb58 	bl	8006084 <siprintf>
    LCD_DrawString(160, 80, buff);
 80019d4:	4a46      	ldr	r2, [pc, #280]	@ (8001af0 <main+0x364>)
 80019d6:	2150      	movs	r1, #80	@ 0x50
 80019d8:	20a0      	movs	r0, #160	@ 0xa0
 80019da:	f7ff fd99 	bl	8001510 <LCD_DrawString>

    // Display calibrated X value
    sprintf(buff, "%3d", cal_value[0]);
 80019de:	4b42      	ldr	r3, [pc, #264]	@ (8001ae8 <main+0x35c>)
 80019e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4943      	ldr	r1, [pc, #268]	@ (8001af4 <main+0x368>)
 80019e8:	4841      	ldr	r0, [pc, #260]	@ (8001af0 <main+0x364>)
 80019ea:	f004 fb4b 	bl	8006084 <siprintf>
    LCD_DrawString(100, 100, buff);
 80019ee:	4a40      	ldr	r2, [pc, #256]	@ (8001af0 <main+0x364>)
 80019f0:	2164      	movs	r1, #100	@ 0x64
 80019f2:	2064      	movs	r0, #100	@ 0x64
 80019f4:	f7ff fd8c 	bl	8001510 <LCD_DrawString>

    // Display calibrated Y value
    sprintf(buff, "%3d", cal_value[1]);
 80019f8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae8 <main+0x35c>)
 80019fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019fe:	461a      	mov	r2, r3
 8001a00:	493c      	ldr	r1, [pc, #240]	@ (8001af4 <main+0x368>)
 8001a02:	483b      	ldr	r0, [pc, #236]	@ (8001af0 <main+0x364>)
 8001a04:	f004 fb3e 	bl	8006084 <siprintf>
    LCD_DrawString(160, 100, buff);
 8001a08:	4a39      	ldr	r2, [pc, #228]	@ (8001af0 <main+0x364>)
 8001a0a:	2164      	movs	r1, #100	@ 0x64
 8001a0c:	20a0      	movs	r0, #160	@ 0xa0
 8001a0e:	f7ff fd7f 	bl	8001510 <LCD_DrawString>

    // Read B1 button state (pressed = 0, not pressed = 1)
    uint8_t pressed = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET);
 8001a12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a16:	4838      	ldr	r0, [pc, #224]	@ (8001af8 <main+0x36c>)
 8001a18:	f002 fd7a 	bl	8004510 <HAL_GPIO_ReadPin>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	74fb      	strb	r3, [r7, #19]

    if (pressed) {
 8001a2a:	7cfb      	ldrb	r3, [r7, #19]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80c5 	beq.w	8001bbc <main+0x430>
        // Remap for B9 pressed
        switch (cal_value[0]) {
 8001a32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <main+0x35c>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	3305      	adds	r3, #5
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d86a      	bhi.n	8001b14 <main+0x388>
 8001a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a44 <main+0x2b8>)
 8001a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a44:	08001a71 	.word	0x08001a71
 8001a48:	08001a79 	.word	0x08001a79
 8001a4c:	08001a81 	.word	0x08001a81
 8001a50:	08001a89 	.word	0x08001a89
 8001a54:	08001a91 	.word	0x08001a91
 8001a58:	08001a99 	.word	0x08001a99
 8001a5c:	08001aa1 	.word	0x08001aa1
 8001a60:	08001aa9 	.word	0x08001aa9
 8001a64:	08001afd 	.word	0x08001afd
 8001a68:	08001b05 	.word	0x08001b05
 8001a6c:	08001b0d 	.word	0x08001b0d
            case -5: Data[0] = 35; break;
 8001a70:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <main+0x338>)
 8001a72:	2223      	movs	r2, #35	@ 0x23
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	e051      	b.n	8001b1c <main+0x390>
            case -4: Data[0] = 34; break;
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <main+0x338>)
 8001a7a:	2222      	movs	r2, #34	@ 0x22
 8001a7c:	701a      	strb	r2, [r3, #0]
 8001a7e:	e04d      	b.n	8001b1c <main+0x390>
            case -3: Data[0] = 33; break;
 8001a80:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <main+0x338>)
 8001a82:	2221      	movs	r2, #33	@ 0x21
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e049      	b.n	8001b1c <main+0x390>
            case -2: Data[0] = 32; break;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <main+0x338>)
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	e045      	b.n	8001b1c <main+0x390>
            case -1: Data[0] = 31; break;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <main+0x338>)
 8001a92:	221f      	movs	r2, #31
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e041      	b.n	8001b1c <main+0x390>
            case 0:  Data[0] = 20; break;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <main+0x338>)
 8001a9a:	2214      	movs	r2, #20
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	e03d      	b.n	8001b1c <main+0x390>
            case 1:  Data[0] = 21; break;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <main+0x338>)
 8001aa2:	2215      	movs	r2, #21
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	e039      	b.n	8001b1c <main+0x390>
            case 2:  Data[0] = 22; break;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <main+0x338>)
 8001aaa:	2216      	movs	r2, #22
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	e035      	b.n	8001b1c <main+0x390>
 8001ab0:	40011400 	.word	0x40011400
 8001ab4:	200000ac 	.word	0x200000ac
 8001ab8:	200000dc 	.word	0x200000dc
 8001abc:	080069fc 	.word	0x080069fc
 8001ac0:	08006a08 	.word	0x08006a08
 8001ac4:	200001c8 	.word	0x200001c8
 8001ac8:	2000010c 	.word	0x2000010c
 8001acc:	08006a14 	.word	0x08006a14
 8001ad0:	08006a24 	.word	0x08006a24
 8001ad4:	08006a28 	.word	0x08006a28
 8001ad8:	08006a2c 	.word	0x08006a2c
 8001adc:	08006a30 	.word	0x08006a30
 8001ae0:	200001d4 	.word	0x200001d4
 8001ae4:	2000019c 	.word	0x2000019c
 8001ae8:	200001a4 	.word	0x200001a4
 8001aec:	08006a34 	.word	0x08006a34
 8001af0:	200001a8 	.word	0x200001a8
 8001af4:	08006a3c 	.word	0x08006a3c
 8001af8:	40010c00 	.word	0x40010c00
            case 3:  Data[0] = 23; break;
 8001afc:	4b6f      	ldr	r3, [pc, #444]	@ (8001cbc <main+0x530>)
 8001afe:	2217      	movs	r2, #23
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e00b      	b.n	8001b1c <main+0x390>
            case 4:  Data[0] = 24; break;
 8001b04:	4b6d      	ldr	r3, [pc, #436]	@ (8001cbc <main+0x530>)
 8001b06:	2218      	movs	r2, #24
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	e007      	b.n	8001b1c <main+0x390>
            case 5:  Data[0] = 25; break;
 8001b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001cbc <main+0x530>)
 8001b0e:	2219      	movs	r2, #25
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	e003      	b.n	8001b1c <main+0x390>
            default: Data[0] = 0; break; // fallback
 8001b14:	4b69      	ldr	r3, [pc, #420]	@ (8001cbc <main+0x530>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	bf00      	nop
        }
        switch (cal_value[1]) {
 8001b1c:	4b68      	ldr	r3, [pc, #416]	@ (8001cc0 <main+0x534>)
 8001b1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b22:	3305      	adds	r3, #5
 8001b24:	2b0a      	cmp	r3, #10
 8001b26:	d845      	bhi.n	8001bb4 <main+0x428>
 8001b28:	a201      	add	r2, pc, #4	@ (adr r2, 8001b30 <main+0x3a4>)
 8001b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2e:	bf00      	nop
 8001b30:	08001b5d 	.word	0x08001b5d
 8001b34:	08001b65 	.word	0x08001b65
 8001b38:	08001b6d 	.word	0x08001b6d
 8001b3c:	08001b75 	.word	0x08001b75
 8001b40:	08001b7d 	.word	0x08001b7d
 8001b44:	08001b85 	.word	0x08001b85
 8001b48:	08001b8d 	.word	0x08001b8d
 8001b4c:	08001b95 	.word	0x08001b95
 8001b50:	08001b9d 	.word	0x08001b9d
 8001b54:	08001ba5 	.word	0x08001ba5
 8001b58:	08001bad 	.word	0x08001bad
            case -5: Data[1] = 35; break;
 8001b5c:	4b57      	ldr	r3, [pc, #348]	@ (8001cbc <main+0x530>)
 8001b5e:	2223      	movs	r2, #35	@ 0x23
 8001b60:	705a      	strb	r2, [r3, #1]
 8001b62:	e088      	b.n	8001c76 <main+0x4ea>
            case -4: Data[1] = 34; break;
 8001b64:	4b55      	ldr	r3, [pc, #340]	@ (8001cbc <main+0x530>)
 8001b66:	2222      	movs	r2, #34	@ 0x22
 8001b68:	705a      	strb	r2, [r3, #1]
 8001b6a:	e084      	b.n	8001c76 <main+0x4ea>
            case -3: Data[1] = 33; break;
 8001b6c:	4b53      	ldr	r3, [pc, #332]	@ (8001cbc <main+0x530>)
 8001b6e:	2221      	movs	r2, #33	@ 0x21
 8001b70:	705a      	strb	r2, [r3, #1]
 8001b72:	e080      	b.n	8001c76 <main+0x4ea>
            case -2: Data[1] = 32; break;
 8001b74:	4b51      	ldr	r3, [pc, #324]	@ (8001cbc <main+0x530>)
 8001b76:	2220      	movs	r2, #32
 8001b78:	705a      	strb	r2, [r3, #1]
 8001b7a:	e07c      	b.n	8001c76 <main+0x4ea>
            case -1: Data[1] = 31; break;
 8001b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001cbc <main+0x530>)
 8001b7e:	221f      	movs	r2, #31
 8001b80:	705a      	strb	r2, [r3, #1]
 8001b82:	e078      	b.n	8001c76 <main+0x4ea>
            case 0:  Data[1] = 20; break;
 8001b84:	4b4d      	ldr	r3, [pc, #308]	@ (8001cbc <main+0x530>)
 8001b86:	2214      	movs	r2, #20
 8001b88:	705a      	strb	r2, [r3, #1]
 8001b8a:	e074      	b.n	8001c76 <main+0x4ea>
            case 1:  Data[1] = 21; break;
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001cbc <main+0x530>)
 8001b8e:	2215      	movs	r2, #21
 8001b90:	705a      	strb	r2, [r3, #1]
 8001b92:	e070      	b.n	8001c76 <main+0x4ea>
            case 2:  Data[1] = 22; break;
 8001b94:	4b49      	ldr	r3, [pc, #292]	@ (8001cbc <main+0x530>)
 8001b96:	2216      	movs	r2, #22
 8001b98:	705a      	strb	r2, [r3, #1]
 8001b9a:	e06c      	b.n	8001c76 <main+0x4ea>
            case 3:  Data[1] = 23; break;
 8001b9c:	4b47      	ldr	r3, [pc, #284]	@ (8001cbc <main+0x530>)
 8001b9e:	2217      	movs	r2, #23
 8001ba0:	705a      	strb	r2, [r3, #1]
 8001ba2:	e068      	b.n	8001c76 <main+0x4ea>
            case 4:  Data[1] = 24; break;
 8001ba4:	4b45      	ldr	r3, [pc, #276]	@ (8001cbc <main+0x530>)
 8001ba6:	2218      	movs	r2, #24
 8001ba8:	705a      	strb	r2, [r3, #1]
 8001baa:	e064      	b.n	8001c76 <main+0x4ea>
            case 5:  Data[1] = 25; break;
 8001bac:	4b43      	ldr	r3, [pc, #268]	@ (8001cbc <main+0x530>)
 8001bae:	2219      	movs	r2, #25
 8001bb0:	705a      	strb	r2, [r3, #1]
 8001bb2:	e060      	b.n	8001c76 <main+0x4ea>
            default: Data[1] = 0; break; // fallback
 8001bb4:	4b41      	ldr	r3, [pc, #260]	@ (8001cbc <main+0x530>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	705a      	strb	r2, [r3, #1]
 8001bba:	e05c      	b.n	8001c76 <main+0x4ea>
        }
    } else {
        // Original mapping for B9 not pressed
        switch (cal_value[0]) {
 8001bbc:	4b40      	ldr	r3, [pc, #256]	@ (8001cc0 <main+0x534>)
 8001bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc2:	3305      	adds	r3, #5
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d821      	bhi.n	8001c0c <main+0x480>
 8001bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd0 <main+0x444>)
 8001bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bce:	bf00      	nop
 8001bd0:	08001be5 	.word	0x08001be5
 8001bd4:	08001bed 	.word	0x08001bed
 8001bd8:	08001bf5 	.word	0x08001bf5
 8001bdc:	08001bfd 	.word	0x08001bfd
 8001be0:	08001c05 	.word	0x08001c05
            case -5: Data[0] = 15; break;
 8001be4:	4b35      	ldr	r3, [pc, #212]	@ (8001cbc <main+0x530>)
 8001be6:	220f      	movs	r2, #15
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	e016      	b.n	8001c1a <main+0x48e>
            case -4: Data[0] = 14; break;
 8001bec:	4b33      	ldr	r3, [pc, #204]	@ (8001cbc <main+0x530>)
 8001bee:	220e      	movs	r2, #14
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e012      	b.n	8001c1a <main+0x48e>
            case -3: Data[0] = 13; break;
 8001bf4:	4b31      	ldr	r3, [pc, #196]	@ (8001cbc <main+0x530>)
 8001bf6:	220d      	movs	r2, #13
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	e00e      	b.n	8001c1a <main+0x48e>
            case -2: Data[0] = 12; break;
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001cbc <main+0x530>)
 8001bfe:	220c      	movs	r2, #12
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	e00a      	b.n	8001c1a <main+0x48e>
            case -1: Data[0] = 11; break;
 8001c04:	4b2d      	ldr	r3, [pc, #180]	@ (8001cbc <main+0x530>)
 8001c06:	220b      	movs	r2, #11
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	e006      	b.n	8001c1a <main+0x48e>
            default: Data[0] = (uint8_t)cal_value[0]; break;  // 0 to 5
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc0 <main+0x534>)
 8001c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b29      	ldr	r3, [pc, #164]	@ (8001cbc <main+0x530>)
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	bf00      	nop
        }
        switch (cal_value[1]) {
 8001c1a:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <main+0x534>)
 8001c1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c20:	3305      	adds	r3, #5
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d820      	bhi.n	8001c68 <main+0x4dc>
 8001c26:	a201      	add	r2, pc, #4	@ (adr r2, 8001c2c <main+0x4a0>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001c41 	.word	0x08001c41
 8001c30:	08001c49 	.word	0x08001c49
 8001c34:	08001c51 	.word	0x08001c51
 8001c38:	08001c59 	.word	0x08001c59
 8001c3c:	08001c61 	.word	0x08001c61
            case -5: Data[1] = 15; break;
 8001c40:	4b1e      	ldr	r3, [pc, #120]	@ (8001cbc <main+0x530>)
 8001c42:	220f      	movs	r2, #15
 8001c44:	705a      	strb	r2, [r3, #1]
 8001c46:	e016      	b.n	8001c76 <main+0x4ea>
            case -4: Data[1] = 14; break;
 8001c48:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <main+0x530>)
 8001c4a:	220e      	movs	r2, #14
 8001c4c:	705a      	strb	r2, [r3, #1]
 8001c4e:	e012      	b.n	8001c76 <main+0x4ea>
            case -3: Data[1] = 13; break;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <main+0x530>)
 8001c52:	220d      	movs	r2, #13
 8001c54:	705a      	strb	r2, [r3, #1]
 8001c56:	e00e      	b.n	8001c76 <main+0x4ea>
            case -2: Data[1] = 12; break;
 8001c58:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <main+0x530>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	705a      	strb	r2, [r3, #1]
 8001c5e:	e00a      	b.n	8001c76 <main+0x4ea>
            case -1: Data[1] = 11; break;
 8001c60:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <main+0x530>)
 8001c62:	220b      	movs	r2, #11
 8001c64:	705a      	strb	r2, [r3, #1]
 8001c66:	e006      	b.n	8001c76 <main+0x4ea>
            default: Data[1] = (uint8_t)cal_value[1]; break;  // 0 to 5
 8001c68:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <main+0x534>)
 8001c6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <main+0x530>)
 8001c72:	705a      	strb	r2, [r3, #1]
 8001c74:	bf00      	nop
        }
    }

    HAL_UART_Transmit(&huart2, Data, 3, 100);
 8001c76:	2364      	movs	r3, #100	@ 0x64
 8001c78:	2203      	movs	r2, #3
 8001c7a:	4910      	ldr	r1, [pc, #64]	@ (8001cbc <main+0x530>)
 8001c7c:	4811      	ldr	r0, [pc, #68]	@ (8001cc4 <main+0x538>)
 8001c7e:	f003 fad4 	bl	800522a <HAL_UART_Transmit>

    sprintf(buff, "Raw: %3d %3d %3d", Data[0], Data[1], Data[2]);
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <main+0x530>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <main+0x530>)
 8001c8a:	785b      	ldrb	r3, [r3, #1]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <main+0x530>)
 8001c90:	789b      	ldrb	r3, [r3, #2]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	460b      	mov	r3, r1
 8001c96:	490c      	ldr	r1, [pc, #48]	@ (8001cc8 <main+0x53c>)
 8001c98:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <main+0x540>)
 8001c9a:	f004 f9f3 	bl	8006084 <siprintf>
    LCD_DrawString(10, 120, buff);
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <main+0x540>)
 8001ca0:	2178      	movs	r1, #120	@ 0x78
 8001ca2:	200a      	movs	r0, #10
 8001ca4:	f7ff fc34 	bl	8001510 <LCD_DrawString>
    */



    // Start next conversions
    HAL_ADC_Start(&hadc1);
 8001ca8:	4809      	ldr	r0, [pc, #36]	@ (8001cd0 <main+0x544>)
 8001caa:	f001 fc4b 	bl	8003544 <HAL_ADC_Start>
    HAL_ADC_Start(&hadc2);
 8001cae:	4809      	ldr	r0, [pc, #36]	@ (8001cd4 <main+0x548>)
 8001cb0:	f001 fc48 	bl	8003544 <HAL_ADC_Start>
    
    HAL_Delay(50);
 8001cb4:	2032      	movs	r0, #50	@ 0x32
 8001cb6:	f001 fb37 	bl	8003328 <HAL_Delay>
  {
 8001cba:	e623      	b.n	8001904 <main+0x178>
 8001cbc:	200001c8 	.word	0x200001c8
 8001cc0:	200001a4 	.word	0x200001a4
 8001cc4:	2000010c 	.word	0x2000010c
 8001cc8:	08006a40 	.word	0x08006a40
 8001ccc:	200001a8 	.word	0x200001a8
 8001cd0:	200000ac 	.word	0x200000ac
 8001cd4:	200000dc 	.word	0x200000dc

08001cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b096      	sub	sp, #88	@ 0x58
 8001cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cde:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ce2:	2228      	movs	r2, #40	@ 0x28
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 f9ec 	bl	80060c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d26:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 fc3f 	bl	80045b4 <HAL_RCC_OscConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001d3c:	f000 fa30 	bl	80021a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d40:	230f      	movs	r3, #15
 8001d42:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d44:	2302      	movs	r3, #2
 8001d46:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 feab 	bl	8004ab8 <HAL_RCC_ClockConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d68:	f000 fa1a 	bl	80021a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 f82c 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d82:	f000 fa0d 	bl	80021a0 <Error_Handler>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3758      	adds	r7, #88	@ 0x58
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001da0:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <MX_ADC1_Init+0x74>)
 8001da2:	4a19      	ldr	r2, [pc, #100]	@ (8001e08 <MX_ADC1_Init+0x78>)
 8001da4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001da6:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <MX_ADC1_Init+0x74>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dac:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <MX_ADC1_Init+0x74>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <MX_ADC1_Init+0x74>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <MX_ADC1_Init+0x74>)
 8001dba:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001dbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dc0:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <MX_ADC1_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <MX_ADC1_Init+0x74>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dcc:	480d      	ldr	r0, [pc, #52]	@ (8001e04 <MX_ADC1_Init+0x74>)
 8001dce:	f001 facf 	bl	8003370 <HAL_ADC_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001dd8:	f000 f9e2 	bl	80021a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001ddc:	230c      	movs	r3, #12
 8001dde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <MX_ADC1_Init+0x74>)
 8001dee:	f001 fd69 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001df8:	f000 f9d2 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200000ac 	.word	0x200000ac
 8001e08:	40012400 	.word	0x40012400

08001e0c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001e1c:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <MX_ADC2_Init+0x74>)
 8001e1e:	4a19      	ldr	r2, [pc, #100]	@ (8001e84 <MX_ADC2_Init+0x78>)
 8001e20:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e22:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <MX_ADC2_Init+0x74>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e28:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <MX_ADC2_Init+0x74>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e2e:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <MX_ADC2_Init+0x74>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e34:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <MX_ADC2_Init+0x74>)
 8001e36:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001e3a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <MX_ADC2_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001e42:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <MX_ADC2_Init+0x74>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e48:	480d      	ldr	r0, [pc, #52]	@ (8001e80 <MX_ADC2_Init+0x74>)
 8001e4a:	f001 fa91 	bl	8003370 <HAL_ADC_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001e54:	f000 f9a4 	bl	80021a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001e58:	230d      	movs	r3, #13
 8001e5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	@ (8001e80 <MX_ADC2_Init+0x74>)
 8001e6a:	f001 fd2b 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001e74:	f000 f994 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200000dc 	.word	0x200000dc
 8001e84:	40012800 	.word	0x40012800

08001e88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001e8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <MX_USART2_UART_Init+0x50>)
 8001e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e92:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001e94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eac:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001eae:	220c      	movs	r2, #12
 8001eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ebe:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001ec0:	f003 f963 	bl	800518a <HAL_UART_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eca:	f000 f969 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000010c 	.word	0x2000010c
 8001ed8:	40004400 	.word	0x40004400

08001edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	@ 0x28
 8001ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	f107 0318 	add.w	r3, r7, #24
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ef0:	4b53      	ldr	r3, [pc, #332]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b50      	ldr	r3, [pc, #320]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f08:	4b4d      	ldr	r3, [pc, #308]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a4c      	ldr	r2, [pc, #304]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001f0e:	f043 0310 	orr.w	r3, r3, #16
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b4a      	ldr	r3, [pc, #296]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f20:	4b47      	ldr	r3, [pc, #284]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a46      	ldr	r2, [pc, #280]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b44      	ldr	r3, [pc, #272]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f38:	4b41      	ldr	r3, [pc, #260]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a40      	ldr	r2, [pc, #256]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001f3e:	f043 0308 	orr.w	r3, r3, #8
 8001f42:	6193      	str	r3, [r2, #24]
 8001f44:	4b3e      	ldr	r3, [pc, #248]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f50:	4b3b      	ldr	r3, [pc, #236]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a3a      	ldr	r2, [pc, #232]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001f56:	f043 0320 	orr.w	r3, r3, #32
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b38      	ldr	r3, [pc, #224]	@ (8002040 <MX_GPIO_Init+0x164>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2107      	movs	r1, #7
 8001f6c:	4835      	ldr	r0, [pc, #212]	@ (8002044 <MX_GPIO_Init+0x168>)
 8001f6e:	f002 fae6 	bl	800453e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	2123      	movs	r1, #35	@ 0x23
 8001f76:	4834      	ldr	r0, [pc, #208]	@ (8002048 <MX_GPIO_Init+0x16c>)
 8001f78:	f002 fae1 	bl	800453e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001f82:	4832      	ldr	r0, [pc, #200]	@ (800204c <MX_GPIO_Init+0x170>)
 8001f84:	f002 fadb 	bl	800453e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f98:	f107 0318 	add.w	r3, r7, #24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4829      	ldr	r0, [pc, #164]	@ (8002044 <MX_GPIO_Init+0x168>)
 8001fa0:	f002 f922 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fb0:	f107 0318 	add.w	r3, r7, #24
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4823      	ldr	r0, [pc, #140]	@ (8002044 <MX_GPIO_Init+0x168>)
 8001fb8:	f002 f916 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fbc:	2310      	movs	r3, #16
 8001fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fc0:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <MX_GPIO_Init+0x174>)
 8001fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fc8:	f107 0318 	add.w	r3, r7, #24
 8001fcc:	4619      	mov	r1, r3
 8001fce:	481d      	ldr	r0, [pc, #116]	@ (8002044 <MX_GPIO_Init+0x168>)
 8001fd0:	f002 f90a 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001fd4:	2323      	movs	r3, #35	@ 0x23
 8001fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe4:	f107 0318 	add.w	r3, r7, #24
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4817      	ldr	r0, [pc, #92]	@ (8002048 <MX_GPIO_Init+0x16c>)
 8001fec:	f002 f8fc 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ff0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002002:	f107 0318 	add.w	r3, r7, #24
 8002006:	4619      	mov	r1, r3
 8002008:	4810      	ldr	r0, [pc, #64]	@ (800204c <MX_GPIO_Init+0x170>)
 800200a:	f002 f8ed 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800200e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002018:	2301      	movs	r3, #1
 800201a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 0318 	add.w	r3, r7, #24
 8002020:	4619      	mov	r1, r3
 8002022:	4809      	ldr	r0, [pc, #36]	@ (8002048 <MX_GPIO_Init+0x16c>)
 8002024:	f002 f8e0 	bl	80041e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	200a      	movs	r0, #10
 800202e:	f001 ff62 	bl	8003ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002032:	200a      	movs	r0, #10
 8002034:	f001 ff7b 	bl	8003f2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002038:	bf00      	nop
 800203a:	3728      	adds	r7, #40	@ 0x28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	40011800 	.word	0x40011800
 8002048:	40010c00 	.word	0x40010c00
 800204c:	40011400 	.word	0x40011400
 8002050:	10210000 	.word	0x10210000

08002054 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
 8002068:	615a      	str	r2, [r3, #20]
 800206a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800206c:	4b28      	ldr	r3, [pc, #160]	@ (8002110 <MX_FSMC_Init+0xbc>)
 800206e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8002072:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002074:	4b26      	ldr	r3, [pc, #152]	@ (8002110 <MX_FSMC_Init+0xbc>)
 8002076:	4a27      	ldr	r2, [pc, #156]	@ (8002114 <MX_FSMC_Init+0xc0>)
 8002078:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800207a:	4b25      	ldr	r3, [pc, #148]	@ (8002110 <MX_FSMC_Init+0xbc>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002080:	4b23      	ldr	r3, [pc, #140]	@ (8002110 <MX_FSMC_Init+0xbc>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002086:	4b22      	ldr	r3, [pc, #136]	@ (8002110 <MX_FSMC_Init+0xbc>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800208c:	4b20      	ldr	r3, [pc, #128]	@ (8002110 <MX_FSMC_Init+0xbc>)
 800208e:	2210      	movs	r2, #16
 8002090:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002092:	4b1f      	ldr	r3, [pc, #124]	@ (8002110 <MX_FSMC_Init+0xbc>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002098:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <MX_FSMC_Init+0xbc>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800209e:	4b1c      	ldr	r3, [pc, #112]	@ (8002110 <MX_FSMC_Init+0xbc>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80020a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <MX_FSMC_Init+0xbc>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80020aa:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <MX_FSMC_Init+0xbc>)
 80020ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80020b2:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <MX_FSMC_Init+0xbc>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80020b8:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <MX_FSMC_Init+0xbc>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80020be:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <MX_FSMC_Init+0xbc>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <MX_FSMC_Init+0xbc>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80020ca:	230f      	movs	r3, #15
 80020cc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80020ce:	230f      	movs	r3, #15
 80020d0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80020d2:	23ff      	movs	r3, #255	@ 0xff
 80020d4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80020d6:	230f      	movs	r3, #15
 80020d8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80020da:	2310      	movs	r3, #16
 80020dc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80020de:	2311      	movs	r3, #17
 80020e0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2200      	movs	r2, #0
 80020ea:	4619      	mov	r1, r3
 80020ec:	4808      	ldr	r0, [pc, #32]	@ (8002110 <MX_FSMC_Init+0xbc>)
 80020ee:	f002 ffff 	bl	80050f0 <HAL_SRAM_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80020f8:	f000 f852 	bl	80021a0 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <MX_FSMC_Init+0xc4>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <MX_FSMC_Init+0xc4>)
 8002102:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002106:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000154 	.word	0x20000154
 8002114:	a0000104 	.word	0xa0000104
 8002118:	40010000 	.word	0x40010000

0800211c <Check_touchkey>:

/* USER CODE BEGIN 4 */

void Check_touchkey(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
    strType_XPT2046_Coordinate strDisplayCoordinate;

    if (XPT2046_Get_TouchedPoint(&strDisplayCoordinate, &strXPT2046_TouchPara))
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	491c      	ldr	r1, [pc, #112]	@ (8002198 <Check_touchkey+0x7c>)
 8002126:	4618      	mov	r0, r3
 8002128:	f000 ffee 	bl	8003108 <XPT2046_Get_TouchedPoint>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d02e      	beq.n	8002190 <Check_touchkey+0x74>
    {
        // Define 4 button areas horizontally in the region y: 232-282
        if ((strDisplayCoordinate.y > 232) && (strDisplayCoordinate.y < 282))
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	2be8      	cmp	r3, #232	@ 0xe8
 8002136:	d92b      	bls.n	8002190 <Check_touchkey+0x74>
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 800213e:	d227      	bcs.n	8002190 <Check_touchkey+0x74>
        {
            if ((strDisplayCoordinate.x > 20) && (strDisplayCoordinate.x < 70))
 8002140:	88bb      	ldrh	r3, [r7, #4]
 8002142:	2b14      	cmp	r3, #20
 8002144:	d906      	bls.n	8002154 <Check_touchkey+0x38>
 8002146:	88bb      	ldrh	r3, [r7, #4]
 8002148:	2b45      	cmp	r3, #69	@ 0x45
 800214a:	d803      	bhi.n	8002154 <Check_touchkey+0x38>
            {
                // Button 1
                Data[2] = 1;
 800214c:	4b13      	ldr	r3, [pc, #76]	@ (800219c <Check_touchkey+0x80>)
 800214e:	2201      	movs	r2, #1
 8002150:	709a      	strb	r2, [r3, #2]
 8002152:	e01d      	b.n	8002190 <Check_touchkey+0x74>
            }
            else if ((strDisplayCoordinate.x > 75) && (strDisplayCoordinate.x < 125))
 8002154:	88bb      	ldrh	r3, [r7, #4]
 8002156:	2b4b      	cmp	r3, #75	@ 0x4b
 8002158:	d906      	bls.n	8002168 <Check_touchkey+0x4c>
 800215a:	88bb      	ldrh	r3, [r7, #4]
 800215c:	2b7c      	cmp	r3, #124	@ 0x7c
 800215e:	d803      	bhi.n	8002168 <Check_touchkey+0x4c>
            {
                // Button 2
                Data[2] = 2;
 8002160:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <Check_touchkey+0x80>)
 8002162:	2202      	movs	r2, #2
 8002164:	709a      	strb	r2, [r3, #2]
 8002166:	e013      	b.n	8002190 <Check_touchkey+0x74>
            }
            else if ((strDisplayCoordinate.x > 130) && (strDisplayCoordinate.x < 180))
 8002168:	88bb      	ldrh	r3, [r7, #4]
 800216a:	2b82      	cmp	r3, #130	@ 0x82
 800216c:	d906      	bls.n	800217c <Check_touchkey+0x60>
 800216e:	88bb      	ldrh	r3, [r7, #4]
 8002170:	2bb3      	cmp	r3, #179	@ 0xb3
 8002172:	d803      	bhi.n	800217c <Check_touchkey+0x60>
            {
                // Button 3
                Data[2] = 3;
 8002174:	4b09      	ldr	r3, [pc, #36]	@ (800219c <Check_touchkey+0x80>)
 8002176:	2203      	movs	r2, #3
 8002178:	709a      	strb	r2, [r3, #2]
 800217a:	e009      	b.n	8002190 <Check_touchkey+0x74>
            }
            else if ((strDisplayCoordinate.x > 185) && (strDisplayCoordinate.x < 235))
 800217c:	88bb      	ldrh	r3, [r7, #4]
 800217e:	2bb9      	cmp	r3, #185	@ 0xb9
 8002180:	d906      	bls.n	8002190 <Check_touchkey+0x74>
 8002182:	88bb      	ldrh	r3, [r7, #4]
 8002184:	2bea      	cmp	r3, #234	@ 0xea
 8002186:	d803      	bhi.n	8002190 <Check_touchkey+0x74>
            {
                // Button 4 (reset)
                Data[2] = 0;
 8002188:	4b04      	ldr	r3, [pc, #16]	@ (800219c <Check_touchkey+0x80>)
 800218a:	2200      	movs	r2, #0
 800218c:	709a      	strb	r2, [r3, #2]
            }
        }
    }
}
 800218e:	e7ff      	b.n	8002190 <Check_touchkey+0x74>
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000008 	.word	0x20000008
 800219c:	200001c8 	.word	0x200001c8

080021a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021b2:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <HAL_MspInit+0x5c>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	4a14      	ldr	r2, [pc, #80]	@ (8002208 <HAL_MspInit+0x5c>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6193      	str	r3, [r2, #24]
 80021be:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_MspInit+0x5c>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <HAL_MspInit+0x5c>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002208 <HAL_MspInit+0x5c>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d4:	61d3      	str	r3, [r2, #28]
 80021d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <HAL_MspInit+0x5c>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021e2:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <HAL_MspInit+0x60>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	4a04      	ldr	r2, [pc, #16]	@ (800220c <HAL_MspInit+0x60>)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40021000 	.word	0x40021000
 800220c:	40010000 	.word	0x40010000

08002210 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	@ 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0318 	add.w	r3, r7, #24
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a28      	ldr	r2, [pc, #160]	@ (80022cc <HAL_ADC_MspInit+0xbc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d122      	bne.n	8002276 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002230:	4b27      	ldr	r3, [pc, #156]	@ (80022d0 <HAL_ADC_MspInit+0xc0>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a26      	ldr	r2, [pc, #152]	@ (80022d0 <HAL_ADC_MspInit+0xc0>)
 8002236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b24      	ldr	r3, [pc, #144]	@ (80022d0 <HAL_ADC_MspInit+0xc0>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002248:	4b21      	ldr	r3, [pc, #132]	@ (80022d0 <HAL_ADC_MspInit+0xc0>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a20      	ldr	r2, [pc, #128]	@ (80022d0 <HAL_ADC_MspInit+0xc0>)
 800224e:	f043 0310 	orr.w	r3, r3, #16
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <HAL_ADC_MspInit+0xc0>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002260:	2304      	movs	r3, #4
 8002262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002264:	2303      	movs	r3, #3
 8002266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002268:	f107 0318 	add.w	r3, r7, #24
 800226c:	4619      	mov	r1, r3
 800226e:	4819      	ldr	r0, [pc, #100]	@ (80022d4 <HAL_ADC_MspInit+0xc4>)
 8002270:	f001 ffba 	bl	80041e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002274:	e026      	b.n	80022c4 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a17      	ldr	r2, [pc, #92]	@ (80022d8 <HAL_ADC_MspInit+0xc8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d121      	bne.n	80022c4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <HAL_ADC_MspInit+0xc0>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <HAL_ADC_MspInit+0xc0>)
 8002286:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800228a:	6193      	str	r3, [r2, #24]
 800228c:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <HAL_ADC_MspInit+0xc0>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002298:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <HAL_ADC_MspInit+0xc0>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a0c      	ldr	r2, [pc, #48]	@ (80022d0 <HAL_ADC_MspInit+0xc0>)
 800229e:	f043 0310 	orr.w	r3, r3, #16
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <HAL_ADC_MspInit+0xc0>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022b0:	2308      	movs	r3, #8
 80022b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022b4:	2303      	movs	r3, #3
 80022b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b8:	f107 0318 	add.w	r3, r7, #24
 80022bc:	4619      	mov	r1, r3
 80022be:	4805      	ldr	r0, [pc, #20]	@ (80022d4 <HAL_ADC_MspInit+0xc4>)
 80022c0:	f001 ff92 	bl	80041e8 <HAL_GPIO_Init>
}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	@ 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40012400 	.word	0x40012400
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40011000 	.word	0x40011000
 80022d8:	40012800 	.word	0x40012800

080022dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002374 <HAL_UART_MspInit+0x98>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d137      	bne.n	800236c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002378 <HAL_UART_MspInit+0x9c>)
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	4a1d      	ldr	r2, [pc, #116]	@ (8002378 <HAL_UART_MspInit+0x9c>)
 8002302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002306:	61d3      	str	r3, [r2, #28]
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_UART_MspInit+0x9c>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <HAL_UART_MspInit+0x9c>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a17      	ldr	r2, [pc, #92]	@ (8002378 <HAL_UART_MspInit+0x9c>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_UART_MspInit+0x9c>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800232c:	2304      	movs	r3, #4
 800232e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002334:	2303      	movs	r3, #3
 8002336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	4619      	mov	r1, r3
 800233e:	480f      	ldr	r0, [pc, #60]	@ (800237c <HAL_UART_MspInit+0xa0>)
 8002340:	f001 ff52 	bl	80041e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002344:	2308      	movs	r3, #8
 8002346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f107 0310 	add.w	r3, r7, #16
 8002354:	4619      	mov	r1, r3
 8002356:	4809      	ldr	r0, [pc, #36]	@ (800237c <HAL_UART_MspInit+0xa0>)
 8002358:	f001 ff46 	bl	80041e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2100      	movs	r1, #0
 8002360:	2026      	movs	r0, #38	@ 0x26
 8002362:	f001 fdc8 	bl	8003ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002366:	2026      	movs	r0, #38	@ 0x26
 8002368:	f001 fde1 	bl	8003f2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800236c:	bf00      	nop
 800236e:	3720      	adds	r7, #32
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40004400 	.word	0x40004400
 8002378:	40021000 	.word	0x40021000
 800237c:	40010800 	.word	0x40010800

08002380 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002386:	f107 0308 	add.w	r3, r7, #8
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002394:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <HAL_FSMC_MspInit+0x78>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d129      	bne.n	80023f0 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 800239c:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <HAL_FSMC_MspInit+0x78>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <HAL_FSMC_MspInit+0x7c>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	4a15      	ldr	r2, [pc, #84]	@ (80023fc <HAL_FSMC_MspInit+0x7c>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ac:	6153      	str	r3, [r2, #20]
 80023ae:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <HAL_FSMC_MspInit+0x7c>)
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80023ba:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80023be:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	4619      	mov	r1, r3
 80023ce:	480c      	ldr	r0, [pc, #48]	@ (8002400 <HAL_FSMC_MspInit+0x80>)
 80023d0:	f001 ff0a 	bl	80041e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80023d4:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 80023d8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023de:	2303      	movs	r3, #3
 80023e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	4619      	mov	r1, r3
 80023e8:	4806      	ldr	r0, [pc, #24]	@ (8002404 <HAL_FSMC_MspInit+0x84>)
 80023ea:	f001 fefd 	bl	80041e8 <HAL_GPIO_Init>
 80023ee:	e000      	b.n	80023f2 <HAL_FSMC_MspInit+0x72>
    return;
 80023f0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200001cc 	.word	0x200001cc
 80023fc:	40021000 	.word	0x40021000
 8002400:	40011800 	.word	0x40011800
 8002404:	40011400 	.word	0x40011400

08002408 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002410:	f7ff ffb6 	bl	8002380 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <HardFault_Handler+0x4>

08002430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <MemManage_Handler+0x4>

08002438 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <UsageFault_Handler+0x4>

08002448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002470:	f000 ff3e 	bl	80032f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}

08002478 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800247c:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <EXTI4_IRQHandler+0x2c>)
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8002488:	4b07      	ldr	r3, [pc, #28]	@ (80024a8 <EXTI4_IRQHandler+0x30>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <EXTI4_IRQHandler+0x2c>)
 8002490:	2210      	movs	r2, #16
 8002492:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8002494:	2010      	movs	r0, #16
 8002496:	f002 f883 	bl	80045a0 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800249a:	2010      	movs	r0, #16
 800249c:	f002 f868 	bl	8004570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40010400 	.word	0x40010400
 80024a8:	200001d4 	.word	0x200001d4

080024ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024b0:	4802      	ldr	r0, [pc, #8]	@ (80024bc <USART2_IRQHandler+0x10>)
 80024b2:	f002 ffa3 	bl	80053fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000010c 	.word	0x2000010c

080024c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c8:	4a14      	ldr	r2, [pc, #80]	@ (800251c <_sbrk+0x5c>)
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <_sbrk+0x60>)
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d4:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <_sbrk+0x64>)
 80024de:	4a12      	ldr	r2, [pc, #72]	@ (8002528 <_sbrk+0x68>)
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024e2:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <_sbrk+0x64>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d207      	bcs.n	8002500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f0:	f003 fdf0 	bl	80060d4 <__errno>
 80024f4:	4603      	mov	r3, r0
 80024f6:	220c      	movs	r2, #12
 80024f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024fe:	e009      	b.n	8002514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002500:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002506:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <_sbrk+0x64>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	4a05      	ldr	r2, [pc, #20]	@ (8002524 <_sbrk+0x64>)
 8002510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20010000 	.word	0x20010000
 8002520:	00000400 	.word	0x00000400
 8002524:	200001d0 	.word	0x200001d0
 8002528:	20000328 	.word	0x20000328

0800252c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e00a      	b.n	800255c <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 8002546:	230c      	movs	r3, #12
 8002548:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 800254a:	bf00      	nop
 800254c:	7afb      	ldrb	r3, [r7, #11]
 800254e:	1e5a      	subs	r2, r3, #1
 8002550:	72fa      	strb	r2, [r7, #11]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1fa      	bne.n	800254c <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3301      	adds	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	d3f0      	bcc.n	8002546 <XPT2046_DelayUS+0xe>

	}
	
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 800257a:	2200      	movs	r2, #0
 800257c:	2104      	movs	r1, #4
 800257e:	481d      	ldr	r0, [pc, #116]	@ (80025f4 <XPT2046_WriteCMD+0x84>)
 8002580:	f001 ffdd 	bl	800453e <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 8002584:	2200      	movs	r2, #0
 8002586:	2101      	movs	r1, #1
 8002588:	481a      	ldr	r0, [pc, #104]	@ (80025f4 <XPT2046_WriteCMD+0x84>)
 800258a:	f001 ffd8 	bl	800453e <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e027      	b.n	80025e4 <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002594:	79fa      	ldrb	r2, [r7, #7]
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	f1c3 0307 	rsb	r3, r3, #7
 800259c:	fa42 f303 	asr.w	r3, r2, r3
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <XPT2046_WriteCMD+0x44>
 80025a8:	2201      	movs	r2, #1
 80025aa:	2104      	movs	r1, #4
 80025ac:	4811      	ldr	r0, [pc, #68]	@ (80025f4 <XPT2046_WriteCMD+0x84>)
 80025ae:	f001 ffc6 	bl	800453e <HAL_GPIO_WritePin>
 80025b2:	e004      	b.n	80025be <XPT2046_WriteCMD+0x4e>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2104      	movs	r1, #4
 80025b8:	480e      	ldr	r0, [pc, #56]	@ (80025f4 <XPT2046_WriteCMD+0x84>)
 80025ba:	f001 ffc0 	bl	800453e <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 80025be:	2005      	movs	r0, #5
 80025c0:	f7ff ffba 	bl	8002538 <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 80025c4:	2201      	movs	r2, #1
 80025c6:	2101      	movs	r1, #1
 80025c8:	480a      	ldr	r0, [pc, #40]	@ (80025f4 <XPT2046_WriteCMD+0x84>)
 80025ca:	f001 ffb8 	bl	800453e <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 80025ce:	2005      	movs	r0, #5
 80025d0:	f7ff ffb2 	bl	8002538 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 80025d4:	2200      	movs	r2, #0
 80025d6:	2101      	movs	r1, #1
 80025d8:	4806      	ldr	r0, [pc, #24]	@ (80025f4 <XPT2046_WriteCMD+0x84>)
 80025da:	f001 ffb0 	bl	800453e <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	3301      	adds	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	2b07      	cmp	r3, #7
 80025e8:	d9d4      	bls.n	8002594 <XPT2046_WriteCMD+0x24>
	}
	
}
 80025ea:	bf00      	nop
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40011800 	.word	0x40011800

080025f8 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 80025fe:	2300      	movs	r3, #0
 8002600:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 8002602:	2200      	movs	r2, #0
 8002604:	2104      	movs	r1, #4
 8002606:	4819      	ldr	r0, [pc, #100]	@ (800266c <XPT2046_ReadCMD+0x74>)
 8002608:	f001 ff99 	bl	800453e <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 800260c:	2201      	movs	r2, #1
 800260e:	2101      	movs	r1, #1
 8002610:	4816      	ldr	r0, [pc, #88]	@ (800266c <XPT2046_ReadCMD+0x74>)
 8002612:	f001 ff94 	bl	800453e <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 8002616:	2300      	movs	r3, #0
 8002618:	71fb      	strb	r3, [r7, #7]
 800261a:	e01e      	b.n	800265a <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 800261c:	2200      	movs	r2, #0
 800261e:	2101      	movs	r1, #1
 8002620:	4812      	ldr	r0, [pc, #72]	@ (800266c <XPT2046_ReadCMD+0x74>)
 8002622:	f001 ff8c 	bl	800453e <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 8002626:	2108      	movs	r1, #8
 8002628:	4810      	ldr	r0, [pc, #64]	@ (800266c <XPT2046_ReadCMD+0x74>)
 800262a:	f001 ff71 	bl	8004510 <HAL_GPIO_ReadPin>
 800262e:	4603      	mov	r3, r0
 8002630:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	f1c3 030b 	rsb	r3, r3, #11
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	b21a      	sxth	r2, r3
 8002640:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002644:	4313      	orrs	r3, r2
 8002646:	b21b      	sxth	r3, r3
 8002648:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 800264a:	2201      	movs	r2, #1
 800264c:	2101      	movs	r1, #1
 800264e:	4807      	ldr	r0, [pc, #28]	@ (800266c <XPT2046_ReadCMD+0x74>)
 8002650:	f001 ff75 	bl	800453e <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	3301      	adds	r3, #1
 8002658:	71fb      	strb	r3, [r7, #7]
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b0b      	cmp	r3, #11
 800265e:	d9dd      	bls.n	800261c <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 8002660:	88bb      	ldrh	r3, [r7, #4]

}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40011800 	.word	0x40011800

08002670 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff77 	bl	8002570 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 8002682:	f7ff ffb9 	bl	80025f8 <XPT2046_ReadCMD>
 8002686:	4603      	mov	r3, r0
	
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 800269a:	2090      	movs	r0, #144	@ 0x90
 800269c:	f7ff ffe8 	bl	8002670 <XPT2046_ReadAdc>
 80026a0:	4603      	mov	r3, r0
 80026a2:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 80026a4:	2001      	movs	r0, #1
 80026a6:	f7ff ff47 	bl	8002538 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 80026aa:	20d0      	movs	r0, #208	@ 0xd0
 80026ac:	f7ff ffe0 	bl	8002670 <XPT2046_ReadAdc>
 80026b0:	4603      	mov	r3, r0
 80026b2:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	89fa      	ldrh	r2, [r7, #14]
 80026b8:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	89ba      	ldrh	r2, [r7, #12]
 80026be:	801a      	strh	r2, [r3, #0]
	
	
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b092      	sub	sp, #72	@ 0x48
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 80026d6:	f107 0308 	add.w	r3, r7, #8
 80026da:	2228      	movs	r2, #40	@ 0x28
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fcf0 	bl	80060c4 <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 80026e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80026e8:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ffce 	bl	8002690 <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 80026f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80026f8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	3348      	adds	r3, #72	@ 0x48
 8002700:	443b      	add	r3, r7
 8002702:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 8002706:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800270a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 800270e:	330a      	adds	r3, #10
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	3348      	adds	r3, #72	@ 0x48
 8002714:	443b      	add	r3, r7
 8002716:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 800271a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800271e:	3301      	adds	r3, #1
 8002720:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 8002724:	2110      	movs	r1, #16
 8002726:	4871      	ldr	r0, [pc, #452]	@ (80028ec <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8002728:	f001 fef2 	bl	8004510 <HAL_GPIO_ReadPin>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <XPT2046_ReadAdc_Smooth_XY+0x72>
 8002732:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002736:	2b09      	cmp	r3, #9
 8002738:	d9d4      	bls.n	80026e4 <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 800273a:	2110      	movs	r1, #16
 800273c:	486b      	ldr	r0, [pc, #428]	@ (80028ec <XPT2046_ReadAdc_Smooth_XY+0x224>)
 800273e:	f001 fee7 	bl	8004510 <HAL_GPIO_ReadPin>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 8002748:	4b69      	ldr	r3, [pc, #420]	@ (80028f0 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 800274e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002752:	2b0a      	cmp	r3, #10
 8002754:	f040 80c4 	bne.w	80028e0 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8002758:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800275c:	643b      	str	r3, [r7, #64]	@ 0x40
 800275e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002760:	63fb      	str	r3, [r7, #60]	@ 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 8002762:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800276a:	637b      	str	r3, [r7, #52]	@ 0x34
		
		for ( i = 1; i < 10; i ++ )
 800276c:	2301      	movs	r3, #1
 800276e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002772:	e02b      	b.n	80027cc <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 8002774:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	3348      	adds	r3, #72	@ 0x48
 800277c:	443b      	add	r3, r7
 800277e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002782:	461a      	mov	r2, r3
 8002784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002786:	4293      	cmp	r3, r2
 8002788:	dd08      	ble.n	800279c <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 800278a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	3348      	adds	r3, #72	@ 0x48
 8002792:	443b      	add	r3, r7
 8002794:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002798:	643b      	str	r3, [r7, #64]	@ 0x40
 800279a:	e012      	b.n	80027c2 <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 800279c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	3348      	adds	r3, #72	@ 0x48
 80027a4:	443b      	add	r3, r7
 80027a6:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80027aa:	461a      	mov	r2, r3
 80027ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ae:	4293      	cmp	r3, r2
 80027b0:	da07      	bge.n	80027c2 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 80027b2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	3348      	adds	r3, #72	@ 0x48
 80027ba:	443b      	add	r3, r7
 80027bc:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80027c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		for ( i = 1; i < 10; i ++ )
 80027c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80027c6:	3301      	adds	r3, #1
 80027c8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80027cc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80027d0:	2b09      	cmp	r3, #9
 80027d2:	d9cf      	bls.n	8002774 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80027da:	e02f      	b.n	800283c <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 80027dc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80027e0:	330a      	adds	r3, #10
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	3348      	adds	r3, #72	@ 0x48
 80027e6:	443b      	add	r3, r7
 80027e8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80027ec:	461a      	mov	r2, r3
 80027ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f0:	4293      	cmp	r3, r2
 80027f2:	dd09      	ble.n	8002808 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 80027f4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80027f8:	330a      	adds	r3, #10
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	3348      	adds	r3, #72	@ 0x48
 80027fe:	443b      	add	r3, r7
 8002800:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002804:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002806:	e014      	b.n	8002832 <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 8002808:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800280c:	330a      	adds	r3, #10
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	3348      	adds	r3, #72	@ 0x48
 8002812:	443b      	add	r3, r7
 8002814:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002818:	461a      	mov	r2, r3
 800281a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800281c:	4293      	cmp	r3, r2
 800281e:	da08      	bge.n	8002832 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 8002820:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002824:	330a      	adds	r3, #10
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	3348      	adds	r3, #72	@ 0x48
 800282a:	443b      	add	r3, r7
 800282c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002830:	637b      	str	r3, [r7, #52]	@ 0x34
		for ( i = 1; i < 10; i ++ )
 8002832:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002836:	3301      	adds	r3, #1
 8002838:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800283c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002840:	2b09      	cmp	r3, #9
 8002842:	d9cb      	bls.n	80027dc <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8002844:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002848:	461a      	mov	r2, r3
 800284a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800284e:	4413      	add	r3, r2
 8002850:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002854:	4413      	add	r3, r2
 8002856:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800285a:	4413      	add	r3, r2
 800285c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002860:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8002862:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8002866:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8002868:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800286c:	4413      	add	r3, r2
 800286e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002872:	4413      	add	r3, r2
 8002874:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002878:	4413      	add	r3, r2
 800287a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800287e:	441a      	add	r2, r3
 8002880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8002890:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002894:	461a      	mov	r2, r3
 8002896:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800289a:	4413      	add	r3, r2
 800289c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80028a0:	4413      	add	r3, r2
 80028a2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80028a6:	4413      	add	r3, r2
 80028a8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80028ac:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 80028ae:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 80028b2:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 80028b4:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 80028b8:	4413      	add	r3, r2
 80028ba:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80028be:	4413      	add	r3, r2
 80028c0:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 80028c4:	4413      	add	r3, r2
 80028c6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 80028ca:	441a      	add	r2, r3
 80028cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ce:	1ad2      	subs	r2, r2, r3
 80028d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 80028e0:	2300      	movs	r3, #0
	
	
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3748      	adds	r7, #72	@ 0x48
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40011800 	.word	0x40011800
 80028f0:	200001d4 	.word	0x200001d4

080028f4 <XPT2046_Calculate_CalibrationFactor>:
#endif



static uint8_t XPT2046_Calculate_CalibrationFactor ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_Coordinate * pScreenSample, strType_XPT2046_Calibration * pCalibrationFactor )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8002900:	2301      	movs	r3, #1
 8002902:	75fb      	strb	r3, [r7, #23]


	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	3308      	adds	r3, #8
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	3204      	adds	r2, #4
 8002916:	8852      	ldrh	r2, [r2, #2]
 8002918:	4611      	mov	r1, r2
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	3208      	adds	r2, #8
 800291e:	8852      	ldrh	r2, [r2, #2]
 8002920:	1a8a      	subs	r2, r1, r2
 8002922:	fb03 f202 	mul.w	r2, r3, r2
									                 ( ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	3304      	adds	r3, #4
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	4619      	mov	r1, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3308      	adds	r3, #8
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	1acb      	subs	r3, r1, r3
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	8849      	ldrh	r1, [r1, #2]
 800293a:	4608      	mov	r0, r1
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	3108      	adds	r1, #8
 8002940:	8849      	ldrh	r1, [r1, #2]
 8002942:	1a41      	subs	r1, r0, r1
 8002944:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fdc4 	bl	80004d8 <__aeabi_i2d>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	
	
	if (  pCalibrationFactor -> Divider == 0  )
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	f7fe f888 	bl	8000a7c <__aeabi_dcmpeq>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
 8002976:	e145      	b.n	8002c04 <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3308      	adds	r3, #8
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	3204      	adds	r2, #4
 800298a:	8852      	ldrh	r2, [r2, #2]
 800298c:	4611      	mov	r1, r2
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	3208      	adds	r2, #8
 8002992:	8852      	ldrh	r2, [r2, #2]
 8002994:	1a8a      	subs	r2, r1, r2
 8002996:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) );
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3304      	adds	r3, #4
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3308      	adds	r3, #8
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	1acb      	subs	r3, r1, r3
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	8849      	ldrh	r1, [r1, #2]
 80029ae:	4608      	mov	r0, r1
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	3108      	adds	r1, #8
 80029b4:	8849      	ldrh	r1, [r1, #2]
 80029b6:	1a41      	subs	r1, r0, r1
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fd8a 	bl	80004d8 <__aeabi_i2d>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	e9c1 2300 	strd	r2, r3, [r1]
		
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	3308      	adds	r3, #8
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	3204      	adds	r2, #4
 80029e0:	8812      	ldrh	r2, [r2, #0]
 80029e2:	4611      	mov	r1, r2
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	3208      	adds	r2, #8
 80029e8:	8812      	ldrh	r2, [r2, #0]
 80029ea:	1a8a      	subs	r2, r1, r2
 80029ec:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) );
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3308      	adds	r3, #8
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	1acb      	subs	r3, r1, r3
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	3104      	adds	r1, #4
 8002a02:	8809      	ldrh	r1, [r1, #0]
 8002a04:	4608      	mov	r0, r1
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	3108      	adds	r1, #8
 8002a0a:	8809      	ldrh	r1, [r1, #0]
 8002a0c:	1a41      	subs	r1, r0, r1
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fd5f 	bl	80004d8 <__aeabi_i2d>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	e9c1 2302 	strd	r2, r3, [r1, #8]
		
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	3308      	adds	r3, #8
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	fb03 f202 	mul.w	r2, r3, r2
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3308      	adds	r3, #8
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	8852      	ldrh	r2, [r2, #2]
 8002a4e:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	4619      	mov	r1, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	fb03 f101 	mul.w	r1, r3, r1
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3308      	adds	r3, #8
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	fb00 f303 	mul.w	r3, r0, r3
 8002a72:	1acb      	subs	r3, r1, r3
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	3104      	adds	r1, #4
 8002a78:	8849      	ldrh	r1, [r1, #2]
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8002a7e:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .x - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .x ) * pScreenSample [ 2 ] .y ;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	3304      	adds	r3, #4
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	4619      	mov	r1, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	fb03 f101 	mul.w	r1, r3, r1
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	fb00 f303 	mul.w	r3, r0, r3
 8002aa0:	1acb      	subs	r3, r1, r3
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	3108      	adds	r1, #8
 8002aa6:	8849      	ldrh	r1, [r1, #2]
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 8002aac:	4413      	add	r3, r2
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fd fd12 	bl	80004d8 <__aeabi_i2d>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	885b      	ldrh	r3, [r3, #2]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	885b      	ldrh	r3, [r3, #2]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	3204      	adds	r2, #4
 8002ad0:	8852      	ldrh	r2, [r2, #2]
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	3208      	adds	r2, #8
 8002ad8:	8852      	ldrh	r2, [r2, #2]
 8002ada:	1a8a      	subs	r2, r1, r2
 8002adc:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	885b      	ldrh	r3, [r3, #2]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3308      	adds	r3, #8
 8002aec:	885b      	ldrh	r3, [r3, #2]
 8002aee:	1acb      	subs	r3, r1, r3
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	8849      	ldrh	r1, [r1, #2]
 8002af4:	4608      	mov	r0, r1
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	3108      	adds	r1, #8
 8002afa:	8849      	ldrh	r1, [r1, #2]
 8002afc:	1a41      	subs	r1, r0, r1
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fce7 	bl	80004d8 <__aeabi_i2d>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	e9c1 2306 	strd	r2, r3, [r1, #24]
		
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	3204      	adds	r2, #4
 8002b26:	8852      	ldrh	r2, [r2, #2]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	8852      	ldrh	r2, [r2, #2]
 8002b30:	1a8a      	subs	r2, r1, r2
 8002b32:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) ) ;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	885b      	ldrh	r3, [r3, #2]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3308      	adds	r3, #8
 8002b40:	885b      	ldrh	r3, [r3, #2]
 8002b42:	1acb      	subs	r3, r1, r3
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	3104      	adds	r1, #4
 8002b48:	8809      	ldrh	r1, [r1, #0]
 8002b4a:	4608      	mov	r0, r1
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	3108      	adds	r1, #8
 8002b50:	8809      	ldrh	r1, [r1, #0]
 8002b52:	1a41      	subs	r1, r0, r1
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fcbc 	bl	80004d8 <__aeabi_i2d>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	e9c1 2308 	strd	r2, r3, [r1, #32]
		

		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3304      	adds	r3, #4
 8002b76:	885b      	ldrh	r3, [r3, #2]
 8002b78:	fb03 f202 	mul.w	r2, r3, r2
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	4619      	mov	r1, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3308      	adds	r3, #8
 8002b88:	885b      	ldrh	r3, [r3, #2]
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	8852      	ldrh	r2, [r2, #2]
 8002b94:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3308      	adds	r3, #8
 8002ba2:	885b      	ldrh	r3, [r3, #2]
 8002ba4:	fb03 f101 	mul.w	r1, r3, r1
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	3308      	adds	r3, #8
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	885b      	ldrh	r3, [r3, #2]
 8002bb4:	fb00 f303 	mul.w	r3, r0, r3
 8002bb8:	1acb      	subs	r3, r1, r3
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	3104      	adds	r1, #4
 8002bbe:	8849      	ldrh	r1, [r1, #2]
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8002bc4:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .y - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .y ) * pScreenSample [ 2 ] .y;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	885b      	ldrh	r3, [r3, #2]
 8002bd2:	fb03 f101 	mul.w	r1, r3, r1
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3304      	adds	r3, #4
 8002be0:	885b      	ldrh	r3, [r3, #2]
 8002be2:	fb00 f303 	mul.w	r3, r0, r3
 8002be6:	1acb      	subs	r3, r1, r3
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	3108      	adds	r1, #8
 8002bec:	8849      	ldrh	r1, [r1, #2]
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8002bf2:	4413      	add	r3, r2
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd fc6f 	bl	80004d8 <__aeabi_i2d>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
			
	}
	
	
	return ucRet;
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
	
	
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <XPT2046_Touch_Calibrate>:



uint8_t XPT2046_Touch_Calibrate ( void )
{
 8002c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c14:	b0a0      	sub	sp, #128	@ 0x80
 8002c16:	af02      	add	r7, sp, #8
		uint8_t i;
		
		char cStr [ 10 ];
		
    uint16_t usScreenWidth, usScreenHeigth;
		uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		
	  char * pStr = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	66bb      	str	r3, [r7, #104]	@ 0x68
	  
	  strType_XPT2046_Calibration CalibrationFactor;
    		

		#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	    usScreenWidth = LCD_Default_Max_Width;
 8002c34:	23f0      	movs	r3, #240	@ 0xf0
 8002c36:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	    usScreenHeigth = LCD_Default_Max_Heigth;
 8002c3a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002c3e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	
	  #endif
		
		

		strCrossCoordinate [ 0 ] .x = usScreenWidth >> 2;
 8002c42:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002c46:	089b      	lsrs	r3, r3, #2
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		strCrossCoordinate [ 0 ] .y = usScreenHeigth >> 2;
 8002c4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		
		strCrossCoordinate [ 1 ] .x = strCrossCoordinate [ 0 ] .x;
 8002c5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002c5e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		strCrossCoordinate [ 1 ] .y = ( usScreenHeigth * 3 ) >> 2;
 8002c62:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	109b      	asrs	r3, r3, #2
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		
		strCrossCoordinate [ 2 ] .x = ( usScreenWidth * 3 ) >> 2;
 8002c74:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	109b      	asrs	r3, r3, #2
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		strCrossCoordinate [ 2 ] .y = strCrossCoordinate [ 1 ] .y;
 8002c86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002c8a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		
		strCrossCoordinate [ 3 ] .x = strCrossCoordinate [ 2 ] .x;
 8002c8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c92:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		strCrossCoordinate [ 3 ] .y = strCrossCoordinate [ 0 ] .y;		
 8002c96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c9a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	  	
			
		for ( i = 0; i < 4; i ++ )
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002ca4:	e066      	b.n	8002d74 <XPT2046_Touch_Calibrate+0x164>
		{ 
			LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );       
 8002ca6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002caa:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8002cae:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002cb2:	9100      	str	r1, [sp, #0]
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fe fbc1 	bl	800143e <LCD_Clear>
			
			pStr = "Touch Calibrate ......";			
 8002cbc:	4b87      	ldr	r3, [pc, #540]	@ (8002edc <XPT2046_Touch_Calibrate+0x2cc>)
 8002cbe:	66bb      	str	r3, [r7, #104]	@ 0x68
      LCD_DrawString_Color ( ( usScreenWidth - ( strlen ( pStr ) - 7 ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );			
 8002cc0:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 8002cc4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002cc6:	f7fd faad 	bl	8000224 <strlen>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	3b07      	subs	r3, #7
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	1ae3      	subs	r3, r4, r3
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	b298      	uxth	r0, r3
 8002cd6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	b299      	uxth	r1, r3
 8002cde:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ce8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002cea:	f7fe fcb1 	bl	8001650 <LCD_DrawString_Color>
		
			sprintf ( cStr, "%d", i + 1 );
 8002cee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002cf8:	4979      	ldr	r1, [pc, #484]	@ (8002ee0 <XPT2046_Touch_Calibrate+0x2d0>)
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 f9c2 	bl	8006084 <siprintf>
			LCD_DrawString_Color ( usScreenWidth >> 1, ( usScreenHeigth >> 1 ) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED );
 8002d00:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	b298      	uxth	r0, r3
 8002d08:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002d0c:	085b      	lsrs	r3, r3, #1
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b10      	subs	r3, #16
 8002d12:	b299      	uxth	r1, r3
 8002d14:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002d18:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d22:	f7fe fc95 	bl	8001650 <LCD_DrawString_Color>
		
			XPT2046_DelayUS ( 100000 );		                                                   
 8002d26:	486f      	ldr	r0, [pc, #444]	@ (8002ee4 <XPT2046_Touch_Calibrate+0x2d4>)
 8002d28:	f7ff fc06 	bl	8002538 <XPT2046_DelayUS>
			
			LCD_DrawCross ( strCrossCoordinate [ i ] .x, strCrossCoordinate [ i ] .y );  
 8002d2c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	3378      	adds	r3, #120	@ 0x78
 8002d34:	443b      	add	r3, r7
 8002d36:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002d3a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	3378      	adds	r3, #120	@ 0x78
 8002d42:	443b      	add	r3, r7
 8002d44:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	f7fe fc5e 	bl	800160c <LCD_DrawCross>

			while ( ! XPT2046_ReadAdc_Smooth_XY ( & strScreenSample [ i ] ) );         
 8002d50:	bf00      	nop
 8002d52:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002d56:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fcb2 	bl	80026c8 <XPT2046_ReadAdc_Smooth_XY>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f3      	beq.n	8002d52 <XPT2046_Touch_Calibrate+0x142>
		for ( i = 0; i < 4; i ++ )
 8002d6a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d74:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d994      	bls.n	8002ca6 <XPT2046_Touch_Calibrate+0x96>

		}
		
		
		XPT2046_Calculate_CalibrationFactor ( strCrossCoordinate, strScreenSample, & CalibrationFactor ) ;  	 
 8002d7c:	463a      	mov	r2, r7
 8002d7e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002d82:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fdb4 	bl	80028f4 <XPT2046_Calculate_CalibrationFactor>
		
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8002d8c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	f7fd fe70 	bl	8000a7c <__aeabi_dcmpeq>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 8155 	bne.w	800304e <XPT2046_Touch_Calibrate+0x43e>
		
			
		usTest_x = ( ( CalibrationFactor .An * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .Bn * strScreenSample [ 3 ] .y ) + CalibrationFactor .Cn ) / CalibrationFactor .Divider;		
 8002da4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002da8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd fb93 	bl	80004d8 <__aeabi_i2d>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4620      	mov	r0, r4
 8002db8:	4629      	mov	r1, r5
 8002dba:	f7fd fbf7 	bl	80005ac <__aeabi_dmul>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4690      	mov	r8, r2
 8002dc4:	4699      	mov	r9, r3
 8002dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fb82 	bl	80004d8 <__aeabi_i2d>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4620      	mov	r0, r4
 8002dda:	4629      	mov	r1, r5
 8002ddc:	f7fd fbe6 	bl	80005ac <__aeabi_dmul>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4640      	mov	r0, r8
 8002de6:	4649      	mov	r1, r9
 8002de8:	f7fd fa2a 	bl	8000240 <__adddf3>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002df8:	f7fd fa22 	bl	8000240 <__adddf3>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e08:	f7fd fcfa 	bl	8000800 <__aeabi_ddiv>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	f7fd fe64 	bl	8000ae0 <__aeabi_d2uiz>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
		usTest_y = ( ( CalibrationFactor .Dn * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .En * strScreenSample [ 3 ] .y ) + CalibrationFactor .Fn ) / CalibrationFactor .Divider;   
 8002e1e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002e22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fb56 	bl	80004d8 <__aeabi_i2d>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4620      	mov	r0, r4
 8002e32:	4629      	mov	r1, r5
 8002e34:	f7fd fbba 	bl	80005ac <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4690      	mov	r8, r2
 8002e3e:	4699      	mov	r9, r3
 8002e40:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fb45 	bl	80004d8 <__aeabi_i2d>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4620      	mov	r0, r4
 8002e54:	4629      	mov	r1, r5
 8002e56:	f7fd fba9 	bl	80005ac <__aeabi_dmul>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4640      	mov	r0, r8
 8002e60:	4649      	mov	r1, r9
 8002e62:	f7fd f9ed 	bl	8000240 <__adddf3>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e72:	f7fd f9e5 	bl	8000240 <__adddf3>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e82:	f7fd fcbd 	bl	8000800 <__aeabi_ddiv>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f7fd fe27 	bl	8000ae0 <__aeabi_d2uiz>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
		
		usGap_x = ( usTest_x > strCrossCoordinate [ 3 ] .x ) ? ( usTest_x - strCrossCoordinate [ 3 ] .x ) : ( strCrossCoordinate [ 3 ] .x - usTest_x );  
 8002e98:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002e9c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d906      	bls.n	8002eb2 <XPT2046_Touch_Calibrate+0x2a2>
 8002ea4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002ea8:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	e005      	b.n	8002ebe <XPT2046_Touch_Calibrate+0x2ae>
 8002eb2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8002eb6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		usGap_y = ( usTest_y > strCrossCoordinate [ 3 ] .y ) ? ( usTest_y - strCrossCoordinate [ 3 ] .y ) : ( strCrossCoordinate [ 3 ] .y - usTest_y );  
 8002ec2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002ec6:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d90c      	bls.n	8002ee8 <XPT2046_Touch_Calibrate+0x2d8>
 8002ece:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002ed2:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	e00b      	b.n	8002ef4 <XPT2046_Touch_Calibrate+0x2e4>
 8002edc:	08006a54 	.word	0x08006a54
 8002ee0:	08006a6c 	.word	0x08006a6c
 8002ee4:	000186a0 	.word	0x000186a0
 8002ee8:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8002eec:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 8002ef8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8002efc:	2b0a      	cmp	r3, #10
 8002efe:	f200 80a8 	bhi.w	8003052 <XPT2046_Touch_Calibrate+0x442>
 8002f02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002f06:	2b0a      	cmp	r3, #10
 8002f08:	f200 80a3 	bhi.w	8003052 <XPT2046_Touch_Calibrate+0x442>
		

		strXPT2046_TouchPara .dX_X = ( CalibrationFactor .An * 1.0 ) / CalibrationFactor .Divider;
 8002f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002f14:	f7fd fc74 	bl	8000800 <__aeabi_ddiv>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4970      	ldr	r1, [pc, #448]	@ (80030e0 <XPT2046_Touch_Calibrate+0x4d0>)
 8002f1e:	e9c1 2300 	strd	r2, r3, [r1]
		strXPT2046_TouchPara .dX_Y = ( CalibrationFactor .Bn * 1.0 ) / CalibrationFactor .Divider;
 8002f22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002f2a:	f7fd fc69 	bl	8000800 <__aeabi_ddiv>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	496b      	ldr	r1, [pc, #428]	@ (80030e0 <XPT2046_Touch_Calibrate+0x4d0>)
 8002f34:	e9c1 2302 	strd	r2, r3, [r1, #8]
		strXPT2046_TouchPara .dX   = ( CalibrationFactor .Cn * 1.0 ) / CalibrationFactor .Divider;
 8002f38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002f40:	f7fd fc5e 	bl	8000800 <__aeabi_ddiv>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4965      	ldr	r1, [pc, #404]	@ (80030e0 <XPT2046_Touch_Calibrate+0x4d0>)
 8002f4a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		strXPT2046_TouchPara .dY_X = ( CalibrationFactor .Dn * 1.0 ) / CalibrationFactor .Divider;
 8002f4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002f56:	f7fd fc53 	bl	8000800 <__aeabi_ddiv>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4960      	ldr	r1, [pc, #384]	@ (80030e0 <XPT2046_Touch_Calibrate+0x4d0>)
 8002f60:	e9c1 2306 	strd	r2, r3, [r1, #24]
		strXPT2046_TouchPara .dY_Y = ( CalibrationFactor .En * 1.0 ) / CalibrationFactor .Divider;
 8002f64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002f6c:	f7fd fc48 	bl	8000800 <__aeabi_ddiv>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	495a      	ldr	r1, [pc, #360]	@ (80030e0 <XPT2046_Touch_Calibrate+0x4d0>)
 8002f76:	e9c1 2308 	strd	r2, r3, [r1, #32]
		strXPT2046_TouchPara .dY   = ( CalibrationFactor .Fn * 1.0 ) / CalibrationFactor .Divider;
 8002f7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002f82:	f7fd fc3d 	bl	8000800 <__aeabi_ddiv>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4955      	ldr	r1, [pc, #340]	@ (80030e0 <XPT2046_Touch_Calibrate+0x4d0>)
 8002f8c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	

	#endif
	
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 8002f90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002f94:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8002f98:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002f9c:	9100      	str	r1, [sp, #0]
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7fe fa4c 	bl	800143e <LCD_Clear>
	
	pStr = "Calibrate Succed";			
 8002fa6:	4b4f      	ldr	r3, [pc, #316]	@ (80030e4 <XPT2046_Touch_Calibrate+0x4d4>)
 8002fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 8002faa:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 8002fae:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002fb0:	f7fd f938 	bl	8000224 <strlen>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	1ae3      	subs	r3, r4, r3
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	b298      	uxth	r0, r3
 8002fbe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	b299      	uxth	r1, r3
 8002fc6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fd0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002fd2:	f7fe fb3d 	bl	8001650 <LCD_DrawString_Color>

  XPT2046_DelayUS ( 200000 );
 8002fd6:	4844      	ldr	r0, [pc, #272]	@ (80030e8 <XPT2046_Touch_Calibrate+0x4d8>)
 8002fd8:	f7ff faae 	bl	8002538 <XPT2046_DelayUS>

	// Draw 4 buttons at the bottom
	LCD_Clear(20, 232, 50, 50, BLUE);    // Button 1
 8002fdc:	231f      	movs	r3, #31
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	2332      	movs	r3, #50	@ 0x32
 8002fe2:	2232      	movs	r2, #50	@ 0x32
 8002fe4:	21e8      	movs	r1, #232	@ 0xe8
 8002fe6:	2014      	movs	r0, #20
 8002fe8:	f7fe fa29 	bl	800143e <LCD_Clear>
	LCD_Clear(75, 232, 50, 50, GREEN);   // Button 2
 8002fec:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2332      	movs	r3, #50	@ 0x32
 8002ff4:	2232      	movs	r2, #50	@ 0x32
 8002ff6:	21e8      	movs	r1, #232	@ 0xe8
 8002ff8:	204b      	movs	r0, #75	@ 0x4b
 8002ffa:	f7fe fa20 	bl	800143e <LCD_Clear>
	LCD_Clear(130, 232, 50, 50, YELLOW); // Button 3
 8002ffe:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	2332      	movs	r3, #50	@ 0x32
 8003006:	2232      	movs	r2, #50	@ 0x32
 8003008:	21e8      	movs	r1, #232	@ 0xe8
 800300a:	2082      	movs	r0, #130	@ 0x82
 800300c:	f7fe fa17 	bl	800143e <LCD_Clear>
	LCD_Clear(185, 232, 50, 50, RED);    // Button 4 (reset)
 8003010:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	2332      	movs	r3, #50	@ 0x32
 8003018:	2232      	movs	r2, #50	@ 0x32
 800301a:	21e8      	movs	r1, #232	@ 0xe8
 800301c:	20b9      	movs	r0, #185	@ 0xb9
 800301e:	f7fe fa0e 	bl	800143e <LCD_Clear>

	// Optionally, add labels
	LCD_DrawString(35, 255, "B1");
 8003022:	4a32      	ldr	r2, [pc, #200]	@ (80030ec <XPT2046_Touch_Calibrate+0x4dc>)
 8003024:	21ff      	movs	r1, #255	@ 0xff
 8003026:	2023      	movs	r0, #35	@ 0x23
 8003028:	f7fe fa72 	bl	8001510 <LCD_DrawString>
	LCD_DrawString(90, 255, "B2");
 800302c:	4a30      	ldr	r2, [pc, #192]	@ (80030f0 <XPT2046_Touch_Calibrate+0x4e0>)
 800302e:	21ff      	movs	r1, #255	@ 0xff
 8003030:	205a      	movs	r0, #90	@ 0x5a
 8003032:	f7fe fa6d 	bl	8001510 <LCD_DrawString>
	LCD_DrawString(145, 255, "B3");
 8003036:	4a2f      	ldr	r2, [pc, #188]	@ (80030f4 <XPT2046_Touch_Calibrate+0x4e4>)
 8003038:	21ff      	movs	r1, #255	@ 0xff
 800303a:	2091      	movs	r0, #145	@ 0x91
 800303c:	f7fe fa68 	bl	8001510 <LCD_DrawString>
	LCD_DrawString(200, 255, "RST");
 8003040:	4a2d      	ldr	r2, [pc, #180]	@ (80030f8 <XPT2046_Touch_Calibrate+0x4e8>)
 8003042:	21ff      	movs	r1, #255	@ 0xff
 8003044:	20c8      	movs	r0, #200	@ 0xc8
 8003046:	f7fe fa63 	bl	8001510 <LCD_DrawString>

	return 1;    
 800304a:	2301      	movs	r3, #1
 800304c:	e043      	b.n	80030d6 <XPT2046_Touch_Calibrate+0x4c6>
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 800304e:	bf00      	nop
 8003050:	e000      	b.n	8003054 <XPT2046_Touch_Calibrate+0x444>
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 8003052:	bf00      	nop
	

	Failure:
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND ); 
 8003054:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003058:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800305c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003060:	9100      	str	r1, [sp, #0]
 8003062:	2100      	movs	r1, #0
 8003064:	2000      	movs	r0, #0
 8003066:	f7fe f9ea 	bl	800143e <LCD_Clear>
	
	pStr = "Calibrate fail";			
 800306a:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <XPT2046_Touch_Calibrate+0x4ec>)
 800306c:	66bb      	str	r3, [r7, #104]	@ 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 800306e:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 8003072:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003074:	f7fd f8d6 	bl	8000224 <strlen>
 8003078:	4603      	mov	r3, r0
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	1ae3      	subs	r3, r4, r3
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	b298      	uxth	r0, r3
 8003082:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	b299      	uxth	r1, r3
 800308a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003094:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003096:	f7fe fadb 	bl	8001650 <LCD_DrawString_Color>

	pStr = "try again";			
 800309a:	4b19      	ldr	r3, [pc, #100]	@ (8003100 <XPT2046_Touch_Calibrate+0x4f0>)
 800309c:	66bb      	str	r3, [r7, #104]	@ 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, ( usScreenHeigth >> 1 ) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED );				
 800309e:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 80030a2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80030a4:	f7fd f8be 	bl	8000224 <strlen>
 80030a8:	4603      	mov	r3, r0
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	1ae3      	subs	r3, r4, r3
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	b298      	uxth	r0, r3
 80030b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3310      	adds	r3, #16
 80030bc:	b299      	uxth	r1, r3
 80030be:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80030ca:	f7fe fac1 	bl	8001650 <LCD_DrawString_Color>

	XPT2046_DelayUS ( 1000000 );		
 80030ce:	480d      	ldr	r0, [pc, #52]	@ (8003104 <XPT2046_Touch_Calibrate+0x4f4>)
 80030d0:	f7ff fa32 	bl	8002538 <XPT2046_DelayUS>
	
	return 0; 
 80030d4:	2300      	movs	r3, #0
		
		
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3778      	adds	r7, #120	@ 0x78
 80030da:	46bd      	mov	sp, r7
 80030dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030e0:	20000008 	.word	0x20000008
 80030e4:	08006a70 	.word	0x08006a70
 80030e8:	00030d40 	.word	0x00030d40
 80030ec:	08006a84 	.word	0x08006a84
 80030f0:	08006a88 	.word	0x08006a88
 80030f4:	08006a8c 	.word	0x08006a8c
 80030f8:	08006a90 	.word	0x08006a90
 80030fc:	08006a94 	.word	0x08006a94
 8003100:	08006aa4 	.word	0x08006aa4
 8003104:	000f4240 	.word	0x000f4240

08003108 <XPT2046_Get_TouchedPoint>:

   

uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 8003108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 8003118:	f107 0308 	add.w	r3, r7, #8
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fad3 	bl	80026c8 <XPT2046_ReadAdc_Smooth_XY>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d06e      	beq.n	8003206 <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800312e:	893b      	ldrh	r3, [r7, #8]
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd f9d1 	bl	80004d8 <__aeabi_i2d>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4620      	mov	r0, r4
 800313c:	4629      	mov	r1, r5
 800313e:	f7fd fa35 	bl	80005ac <__aeabi_dmul>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4690      	mov	r8, r2
 8003148:	4699      	mov	r9, r3
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003150:	897b      	ldrh	r3, [r7, #10]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd f9c0 	bl	80004d8 <__aeabi_i2d>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4620      	mov	r0, r4
 800315e:	4629      	mov	r1, r5
 8003160:	f7fd fa24 	bl	80005ac <__aeabi_dmul>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4640      	mov	r0, r8
 800316a:	4649      	mov	r1, r9
 800316c:	f7fd f868 	bl	8000240 <__adddf3>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800317e:	f7fd f85f 	bl	8000240 <__adddf3>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	f7fd fca9 	bl	8000ae0 <__aeabi_d2uiz>
 800318e:	4603      	mov	r3, r0
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800319c:	893b      	ldrh	r3, [r7, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd f99a 	bl	80004d8 <__aeabi_i2d>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4620      	mov	r0, r4
 80031aa:	4629      	mov	r1, r5
 80031ac:	f7fd f9fe 	bl	80005ac <__aeabi_dmul>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4690      	mov	r8, r2
 80031b6:	4699      	mov	r9, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80031be:	897b      	ldrh	r3, [r7, #10]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd f989 	bl	80004d8 <__aeabi_i2d>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4620      	mov	r0, r4
 80031cc:	4629      	mov	r1, r5
 80031ce:	f7fd f9ed 	bl	80005ac <__aeabi_dmul>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4640      	mov	r0, r8
 80031d8:	4649      	mov	r1, r9
 80031da:	f7fd f831 	bl	8000240 <__adddf3>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80031ec:	f7fd f828 	bl	8000240 <__adddf3>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7fd fc72 	bl	8000ae0 <__aeabi_d2uiz>
 80031fc:	4603      	mov	r3, r0
 80031fe:	b29a      	uxth	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	805a      	strh	r2, [r3, #2]
 8003204:	e001      	b.n	800320a <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003218 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003218:	f7ff f988 	bl	800252c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800321c:	480b      	ldr	r0, [pc, #44]	@ (800324c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800321e:	490c      	ldr	r1, [pc, #48]	@ (8003250 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003220:	4a0c      	ldr	r2, [pc, #48]	@ (8003254 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003224:	e002      	b.n	800322c <LoopCopyDataInit>

08003226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322a:	3304      	adds	r3, #4

0800322c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800322c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800322e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003230:	d3f9      	bcc.n	8003226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003232:	4a09      	ldr	r2, [pc, #36]	@ (8003258 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003234:	4c09      	ldr	r4, [pc, #36]	@ (800325c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003238:	e001      	b.n	800323e <LoopFillZerobss>

0800323a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800323a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800323c:	3204      	adds	r2, #4

0800323e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800323e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003240:	d3fb      	bcc.n	800323a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003242:	f002 ff4d 	bl	80060e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003246:	f7fe faa1 	bl	800178c <main>
  bx lr
 800324a:	4770      	bx	lr
  ldr r0, =_sdata
 800324c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003250:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003254:	08007124 	.word	0x08007124
  ldr r2, =_sbss
 8003258:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800325c:	20000324 	.word	0x20000324

08003260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003260:	e7fe      	b.n	8003260 <ADC1_2_IRQHandler>
	...

08003264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003268:	4b08      	ldr	r3, [pc, #32]	@ (800328c <HAL_Init+0x28>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a07      	ldr	r2, [pc, #28]	@ (800328c <HAL_Init+0x28>)
 800326e:	f043 0310 	orr.w	r3, r3, #16
 8003272:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003274:	2003      	movs	r0, #3
 8003276:	f000 fe33 	bl	8003ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800327a:	2000      	movs	r0, #0
 800327c:	f000 f808 	bl	8003290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003280:	f7fe ff94 	bl	80021ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40022000 	.word	0x40022000

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003298:	4b12      	ldr	r3, [pc, #72]	@ (80032e4 <HAL_InitTick+0x54>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <HAL_InitTick+0x58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fe4b 	bl	8003f4a <HAL_SYSTICK_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d80a      	bhi.n	80032da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c4:	2200      	movs	r2, #0
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032cc:	f000 fe13 	bl	8003ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d0:	4a06      	ldr	r2, [pc, #24]	@ (80032ec <HAL_InitTick+0x5c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000000 	.word	0x20000000
 80032e8:	2000003c 	.word	0x2000003c
 80032ec:	20000038 	.word	0x20000038

080032f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b05      	ldr	r3, [pc, #20]	@ (800330c <HAL_IncTick+0x1c>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <HAL_IncTick+0x20>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	4a03      	ldr	r2, [pc, #12]	@ (8003310 <HAL_IncTick+0x20>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	2000003c 	.word	0x2000003c
 8003310:	200001d8 	.word	0x200001d8

08003314 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return uwTick;
 8003318:	4b02      	ldr	r3, [pc, #8]	@ (8003324 <HAL_GetTick+0x10>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	200001d8 	.word	0x200001d8

08003328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003330:	f7ff fff0 	bl	8003314 <HAL_GetTick>
 8003334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003340:	d005      	beq.n	800334e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003342:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <HAL_Delay+0x44>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4413      	add	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800334e:	bf00      	nop
 8003350:	f7ff ffe0 	bl	8003314 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	429a      	cmp	r2, r3
 800335e:	d8f7      	bhi.n	8003350 <HAL_Delay+0x28>
  {
  }
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000003c 	.word	0x2000003c

08003370 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e0ce      	b.n	8003530 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fe ff2e 	bl	8002210 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fbd7 	bl	8003b68 <ADC_ConversionStop_Disable>
 80033ba:	4603      	mov	r3, r0
 80033bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 80a9 	bne.w	800351e <HAL_ADC_Init+0x1ae>
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 80a5 	bne.w	800351e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033dc:	f023 0302 	bic.w	r3, r3, #2
 80033e0:	f043 0202 	orr.w	r2, r3, #2
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4951      	ldr	r1, [pc, #324]	@ (8003538 <HAL_ADC_Init+0x1c8>)
 80033f2:	428b      	cmp	r3, r1
 80033f4:	d10a      	bne.n	800340c <HAL_ADC_Init+0x9c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80033fe:	d002      	beq.n	8003406 <HAL_ADC_Init+0x96>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	e004      	b.n	8003410 <HAL_ADC_Init+0xa0>
 8003406:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800340a:	e001      	b.n	8003410 <HAL_ADC_Init+0xa0>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003410:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	7b1b      	ldrb	r3, [r3, #12]
 8003416:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003418:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	4313      	orrs	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003428:	d003      	beq.n	8003432 <HAL_ADC_Init+0xc2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d102      	bne.n	8003438 <HAL_ADC_Init+0xc8>
 8003432:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003436:	e000      	b.n	800343a <HAL_ADC_Init+0xca>
 8003438:	2300      	movs	r3, #0
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	7d1b      	ldrb	r3, [r3, #20]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d119      	bne.n	800347c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7b1b      	ldrb	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d109      	bne.n	8003464 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	3b01      	subs	r3, #1
 8003456:	035a      	lsls	r2, r3, #13
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	e00b      	b.n	800347c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	f043 0201 	orr.w	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	4b29      	ldr	r3, [pc, #164]	@ (800353c <HAL_ADC_Init+0x1cc>)
 8003498:	4013      	ands	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ac:	d003      	beq.n	80034b6 <HAL_ADC_Init+0x146>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d104      	bne.n	80034c0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	051b      	lsls	r3, r3, #20
 80034be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	4b19      	ldr	r3, [pc, #100]	@ (8003540 <HAL_ADC_Init+0x1d0>)
 80034dc:	4013      	ands	r3, r2
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d10b      	bne.n	80034fc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	f043 0201 	orr.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034fa:	e018      	b.n	800352e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003500:	f023 0312 	bic.w	r3, r3, #18
 8003504:	f043 0210 	orr.w	r2, r3, #16
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003510:	f043 0201 	orr.w	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800351c:	e007      	b.n	800352e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003522:	f043 0210 	orr.w	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800352e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40013c00 	.word	0x40013c00
 800353c:	ffe1f7fd 	.word	0xffe1f7fd
 8003540:	ff1f0efe 	.word	0xff1f0efe

08003544 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_ADC_Start+0x1a>
 800355a:	2302      	movs	r3, #2
 800355c:	e098      	b.n	8003690 <HAL_ADC_Start+0x14c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 faa4 	bl	8003ab4 <ADC_Enable>
 800356c:	4603      	mov	r3, r0
 800356e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 8087 	bne.w	8003686 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a41      	ldr	r2, [pc, #260]	@ (8003698 <HAL_ADC_Start+0x154>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d105      	bne.n	80035a2 <HAL_ADC_Start+0x5e>
 8003596:	4b41      	ldr	r3, [pc, #260]	@ (800369c <HAL_ADC_Start+0x158>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d115      	bne.n	80035ce <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d026      	beq.n	800360a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035cc:	e01d      	b.n	800360a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a2f      	ldr	r2, [pc, #188]	@ (800369c <HAL_ADC_Start+0x158>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_ADC_Start+0xaa>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003698 <HAL_ADC_Start+0x154>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10d      	bne.n	800360a <HAL_ADC_Start+0xc6>
 80035ee:	4b2b      	ldr	r3, [pc, #172]	@ (800369c <HAL_ADC_Start+0x158>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003602:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361a:	f023 0206 	bic.w	r2, r3, #6
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003622:	e002      	b.n	800362a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f06f 0202 	mvn.w	r2, #2
 800363a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003646:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800364a:	d113      	bne.n	8003674 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003650:	4a11      	ldr	r2, [pc, #68]	@ (8003698 <HAL_ADC_Start+0x154>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d105      	bne.n	8003662 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003656:	4b11      	ldr	r3, [pc, #68]	@ (800369c <HAL_ADC_Start+0x158>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800365e:	2b00      	cmp	r3, #0
 8003660:	d108      	bne.n	8003674 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	e00c      	b.n	800368e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	e003      	b.n	800368e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40012800 	.word	0x40012800
 800369c:	40012400 	.word	0x40012400

080036a0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80036a0:	b590      	push	{r4, r7, lr}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80036b6:	f7ff fe2d 	bl	8003314 <HAL_GetTick>
 80036ba:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0d3      	b.n	800388a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d131      	bne.n	8003754 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d12a      	bne.n	8003754 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80036fe:	e021      	b.n	8003744 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003706:	d01d      	beq.n	8003744 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <HAL_ADC_PollForConversion+0x7e>
 800370e:	f7ff fe01 	bl	8003314 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d212      	bcs.n	8003744 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10b      	bne.n	8003744 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	f043 0204 	orr.w	r2, r3, #4
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0a2      	b.n	800388a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0d6      	beq.n	8003700 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003752:	e070      	b.n	8003836 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003754:	4b4f      	ldr	r3, [pc, #316]	@ (8003894 <HAL_ADC_PollForConversion+0x1f4>)
 8003756:	681c      	ldr	r4, [r3, #0]
 8003758:	2002      	movs	r0, #2
 800375a:	f001 fbf1 	bl	8004f40 <HAL_RCCEx_GetPeriphCLKFreq>
 800375e:	4603      	mov	r3, r0
 8003760:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6919      	ldr	r1, [r3, #16]
 800376a:	4b4b      	ldr	r3, [pc, #300]	@ (8003898 <HAL_ADC_PollForConversion+0x1f8>)
 800376c:	400b      	ands	r3, r1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d118      	bne.n	80037a4 <HAL_ADC_PollForConversion+0x104>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68d9      	ldr	r1, [r3, #12]
 8003778:	4b48      	ldr	r3, [pc, #288]	@ (800389c <HAL_ADC_PollForConversion+0x1fc>)
 800377a:	400b      	ands	r3, r1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d111      	bne.n	80037a4 <HAL_ADC_PollForConversion+0x104>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6919      	ldr	r1, [r3, #16]
 8003786:	4b46      	ldr	r3, [pc, #280]	@ (80038a0 <HAL_ADC_PollForConversion+0x200>)
 8003788:	400b      	ands	r3, r1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d108      	bne.n	80037a0 <HAL_ADC_PollForConversion+0x100>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68d9      	ldr	r1, [r3, #12]
 8003794:	4b43      	ldr	r3, [pc, #268]	@ (80038a4 <HAL_ADC_PollForConversion+0x204>)
 8003796:	400b      	ands	r3, r1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_ADC_PollForConversion+0x100>
 800379c:	2314      	movs	r3, #20
 800379e:	e020      	b.n	80037e2 <HAL_ADC_PollForConversion+0x142>
 80037a0:	2329      	movs	r3, #41	@ 0x29
 80037a2:	e01e      	b.n	80037e2 <HAL_ADC_PollForConversion+0x142>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6919      	ldr	r1, [r3, #16]
 80037aa:	4b3d      	ldr	r3, [pc, #244]	@ (80038a0 <HAL_ADC_PollForConversion+0x200>)
 80037ac:	400b      	ands	r3, r1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_ADC_PollForConversion+0x120>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68d9      	ldr	r1, [r3, #12]
 80037b8:	4b3a      	ldr	r3, [pc, #232]	@ (80038a4 <HAL_ADC_PollForConversion+0x204>)
 80037ba:	400b      	ands	r3, r1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00d      	beq.n	80037dc <HAL_ADC_PollForConversion+0x13c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6919      	ldr	r1, [r3, #16]
 80037c6:	4b38      	ldr	r3, [pc, #224]	@ (80038a8 <HAL_ADC_PollForConversion+0x208>)
 80037c8:	400b      	ands	r3, r1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d108      	bne.n	80037e0 <HAL_ADC_PollForConversion+0x140>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68d9      	ldr	r1, [r3, #12]
 80037d4:	4b34      	ldr	r3, [pc, #208]	@ (80038a8 <HAL_ADC_PollForConversion+0x208>)
 80037d6:	400b      	ands	r3, r1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_PollForConversion+0x140>
 80037dc:	2354      	movs	r3, #84	@ 0x54
 80037de:	e000      	b.n	80037e2 <HAL_ADC_PollForConversion+0x142>
 80037e0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80037e2:	fb02 f303 	mul.w	r3, r2, r3
 80037e6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80037e8:	e021      	b.n	800382e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037f0:	d01a      	beq.n	8003828 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_ADC_PollForConversion+0x168>
 80037f8:	f7ff fd8c 	bl	8003314 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d20f      	bcs.n	8003828 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	429a      	cmp	r2, r3
 800380e:	d90b      	bls.n	8003828 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003814:	f043 0204 	orr.w	r2, r3, #4
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e030      	b.n	800388a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3301      	adds	r3, #1
 800382c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	429a      	cmp	r2, r3
 8003834:	d8d9      	bhi.n	80037ea <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f06f 0212 	mvn.w	r2, #18
 800383e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003844:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003856:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800385a:	d115      	bne.n	8003888 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003860:	2b00      	cmp	r3, #0
 8003862:	d111      	bne.n	8003888 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	f043 0201 	orr.w	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	bd90      	pop	{r4, r7, pc}
 8003892:	bf00      	nop
 8003894:	20000000 	.word	0x20000000
 8003898:	24924924 	.word	0x24924924
 800389c:	00924924 	.word	0x00924924
 80038a0:	12492492 	.word	0x12492492
 80038a4:	00492492 	.word	0x00492492
 80038a8:	00249249 	.word	0x00249249

080038ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x20>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e0dc      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x1da>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	d81c      	bhi.n	800392e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	3b05      	subs	r3, #5
 8003906:	221f      	movs	r2, #31
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	4019      	ands	r1, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	3b05      	subs	r3, #5
 8003920:	fa00 f203 	lsl.w	r2, r0, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	635a      	str	r2, [r3, #52]	@ 0x34
 800392c:	e03c      	b.n	80039a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d81c      	bhi.n	8003970 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	3b23      	subs	r3, #35	@ 0x23
 8003948:	221f      	movs	r2, #31
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	4019      	ands	r1, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	3b23      	subs	r3, #35	@ 0x23
 8003962:	fa00 f203 	lsl.w	r2, r0, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30
 800396e:	e01b      	b.n	80039a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	3b41      	subs	r3, #65	@ 0x41
 8003982:	221f      	movs	r2, #31
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	4019      	ands	r1, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	3b41      	subs	r3, #65	@ 0x41
 800399c:	fa00 f203 	lsl.w	r2, r0, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b09      	cmp	r3, #9
 80039ae:	d91c      	bls.n	80039ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68d9      	ldr	r1, [r3, #12]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	3b1e      	subs	r3, #30
 80039c2:	2207      	movs	r2, #7
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	4019      	ands	r1, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6898      	ldr	r0, [r3, #8]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	3b1e      	subs	r3, #30
 80039dc:	fa00 f203 	lsl.w	r2, r0, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	e019      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6919      	ldr	r1, [r3, #16]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4413      	add	r3, r2
 80039fa:	2207      	movs	r2, #7
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	4019      	ands	r1, r3
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6898      	ldr	r0, [r3, #8]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	fa00 f203 	lsl.w	r2, r0, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d003      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a2a:	2b11      	cmp	r3, #17
 8003a2c:	d132      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d125      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d126      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003a54:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b10      	cmp	r3, #16
 8003a5c:	d11a      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a5e:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <HAL_ADC_ConfigChannel+0x1e8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a13      	ldr	r2, [pc, #76]	@ (8003ab0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	0c9a      	lsrs	r2, r3, #18
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a74:	e002      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f9      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x1b2>
 8003a82:	e007      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	40012400 	.word	0x40012400
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	431bde83 	.word	0x431bde83

08003ab4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d040      	beq.n	8003b54 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8003b60 <ADC_Enable+0xac>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b64 <ADC_Enable+0xb0>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	0c9b      	lsrs	r3, r3, #18
 8003aee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003af0:	e002      	b.n	8003af8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f9      	bne.n	8003af2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003afe:	f7ff fc09 	bl	8003314 <HAL_GetTick>
 8003b02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b04:	e01f      	b.n	8003b46 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b06:	f7ff fc05 	bl	8003314 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d918      	bls.n	8003b46 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d011      	beq.n	8003b46 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b26:	f043 0210 	orr.w	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e007      	b.n	8003b56 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d1d8      	bne.n	8003b06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000000 	.word	0x20000000
 8003b64:	431bde83 	.word	0x431bde83

08003b68 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d12e      	bne.n	8003be0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b92:	f7ff fbbf 	bl	8003314 <HAL_GetTick>
 8003b96:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b98:	e01b      	b.n	8003bd2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b9a:	f7ff fbbb 	bl	8003314 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d914      	bls.n	8003bd2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d10d      	bne.n	8003bd2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	f043 0210 	orr.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e007      	b.n	8003be2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d0dc      	beq.n	8003b9a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_ADCEx_Calibration_Start+0x1e>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e097      	b.n	8003d3a <HAL_ADCEx_Calibration_Start+0x14e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff ffa8 	bl	8003b68 <ADC_ConversionStop_Disable>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff ff49 	bl	8003ab4 <ADC_Enable>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 8081 	bne.w	8003d30 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c36:	f023 0302 	bic.w	r3, r3, #2
 8003c3a:	f043 0202 	orr.w	r2, r3, #2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c42:	4b40      	ldr	r3, [pc, #256]	@ (8003d44 <HAL_ADCEx_Calibration_Start+0x158>)
 8003c44:	681c      	ldr	r4, [r3, #0]
 8003c46:	2002      	movs	r0, #2
 8003c48:	f001 f97a 	bl	8004f40 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003c52:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003c54:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003c56:	e002      	b.n	8003c5e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f9      	bne.n	8003c58 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0208 	orr.w	r2, r2, #8
 8003c72:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003c74:	f7ff fb4e 	bl	8003314 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c7a:	e01b      	b.n	8003cb4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003c7c:	f7ff fb4a 	bl	8003314 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b0a      	cmp	r3, #10
 8003c88:	d914      	bls.n	8003cb4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00d      	beq.n	8003cb4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9c:	f023 0312 	bic.w	r3, r3, #18
 8003ca0:	f043 0210 	orr.w	r2, r3, #16
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e042      	b.n	8003d3a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1dc      	bne.n	8003c7c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0204 	orr.w	r2, r2, #4
 8003cd0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003cd2:	f7ff fb1f 	bl	8003314 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003cd8:	e01b      	b.n	8003d12 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003cda:	f7ff fb1b 	bl	8003314 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b0a      	cmp	r3, #10
 8003ce6:	d914      	bls.n	8003d12 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfa:	f023 0312 	bic.w	r3, r3, #18
 8003cfe:	f043 0210 	orr.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e013      	b.n	8003d3a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1dc      	bne.n	8003cda <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	f023 0303 	bic.w	r3, r3, #3
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd90      	pop	{r4, r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000000 	.word	0x20000000

08003d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d58:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <__NVIC_SetPriorityGrouping+0x44>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d64:	4013      	ands	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d7a:	4a04      	ldr	r2, [pc, #16]	@ (8003d8c <__NVIC_SetPriorityGrouping+0x44>)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	60d3      	str	r3, [r2, #12]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d94:	4b04      	ldr	r3, [pc, #16]	@ (8003da8 <__NVIC_GetPriorityGrouping+0x18>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	f003 0307 	and.w	r3, r3, #7
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	db0b      	blt.n	8003dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	f003 021f 	and.w	r2, r3, #31
 8003dc4:	4906      	ldr	r1, [pc, #24]	@ (8003de0 <__NVIC_EnableIRQ+0x34>)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	2001      	movs	r0, #1
 8003dce:	fa00 f202 	lsl.w	r2, r0, r2
 8003dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr
 8003de0:	e000e100 	.word	0xe000e100

08003de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	6039      	str	r1, [r7, #0]
 8003dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	db0a      	blt.n	8003e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	490c      	ldr	r1, [pc, #48]	@ (8003e30 <__NVIC_SetPriority+0x4c>)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	0112      	lsls	r2, r2, #4
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	440b      	add	r3, r1
 8003e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e0c:	e00a      	b.n	8003e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4908      	ldr	r1, [pc, #32]	@ (8003e34 <__NVIC_SetPriority+0x50>)
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	3b04      	subs	r3, #4
 8003e1c:	0112      	lsls	r2, r2, #4
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	440b      	add	r3, r1
 8003e22:	761a      	strb	r2, [r3, #24]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000e100 	.word	0xe000e100
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	@ 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f1c3 0307 	rsb	r3, r3, #7
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	bf28      	it	cs
 8003e56:	2304      	movcs	r3, #4
 8003e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2b06      	cmp	r3, #6
 8003e60:	d902      	bls.n	8003e68 <NVIC_EncodePriority+0x30>
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3b03      	subs	r3, #3
 8003e66:	e000      	b.n	8003e6a <NVIC_EncodePriority+0x32>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8a:	43d9      	mvns	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	4313      	orrs	r3, r2
         );
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3724      	adds	r7, #36	@ 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eac:	d301      	bcc.n	8003eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e00f      	b.n	8003ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003edc <SysTick_Config+0x40>)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eba:	210f      	movs	r1, #15
 8003ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ec0:	f7ff ff90 	bl	8003de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec4:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <SysTick_Config+0x40>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eca:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <SysTick_Config+0x40>)
 8003ecc:	2207      	movs	r2, #7
 8003ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	e000e010 	.word	0xe000e010

08003ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ff2d 	bl	8003d48 <__NVIC_SetPriorityGrouping>
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	4603      	mov	r3, r0
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f08:	f7ff ff42 	bl	8003d90 <__NVIC_GetPriorityGrouping>
 8003f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	6978      	ldr	r0, [r7, #20]
 8003f14:	f7ff ff90 	bl	8003e38 <NVIC_EncodePriority>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ff5f 	bl	8003de4 <__NVIC_SetPriority>
}
 8003f26:	bf00      	nop
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4603      	mov	r3, r0
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff ff35 	bl	8003dac <__NVIC_EnableIRQ>
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ffa2 	bl	8003e9c <SysTick_Config>
 8003f58:	4603      	mov	r3, r0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d008      	beq.n	8003f8c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e020      	b.n	8003fce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 020e 	bic.w	r2, r2, #14
 8003f9a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0201 	bic.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d005      	beq.n	8003ffc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
 8003ffa:	e0d6      	b.n	80041aa <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 020e 	bic.w	r2, r2, #14
 800400a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	4b64      	ldr	r3, [pc, #400]	@ (80041b4 <HAL_DMA_Abort_IT+0x1dc>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d958      	bls.n	80040da <HAL_DMA_Abort_IT+0x102>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a62      	ldr	r2, [pc, #392]	@ (80041b8 <HAL_DMA_Abort_IT+0x1e0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d04f      	beq.n	80040d2 <HAL_DMA_Abort_IT+0xfa>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a61      	ldr	r2, [pc, #388]	@ (80041bc <HAL_DMA_Abort_IT+0x1e4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d048      	beq.n	80040ce <HAL_DMA_Abort_IT+0xf6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a5f      	ldr	r2, [pc, #380]	@ (80041c0 <HAL_DMA_Abort_IT+0x1e8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d040      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xf0>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a5e      	ldr	r2, [pc, #376]	@ (80041c4 <HAL_DMA_Abort_IT+0x1ec>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d038      	beq.n	80040c2 <HAL_DMA_Abort_IT+0xea>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a5c      	ldr	r2, [pc, #368]	@ (80041c8 <HAL_DMA_Abort_IT+0x1f0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d030      	beq.n	80040bc <HAL_DMA_Abort_IT+0xe4>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a5b      	ldr	r2, [pc, #364]	@ (80041cc <HAL_DMA_Abort_IT+0x1f4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d028      	beq.n	80040b6 <HAL_DMA_Abort_IT+0xde>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a52      	ldr	r2, [pc, #328]	@ (80041b4 <HAL_DMA_Abort_IT+0x1dc>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d020      	beq.n	80040b0 <HAL_DMA_Abort_IT+0xd8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a57      	ldr	r2, [pc, #348]	@ (80041d0 <HAL_DMA_Abort_IT+0x1f8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d019      	beq.n	80040ac <HAL_DMA_Abort_IT+0xd4>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a55      	ldr	r2, [pc, #340]	@ (80041d4 <HAL_DMA_Abort_IT+0x1fc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d012      	beq.n	80040a8 <HAL_DMA_Abort_IT+0xd0>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a54      	ldr	r2, [pc, #336]	@ (80041d8 <HAL_DMA_Abort_IT+0x200>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00a      	beq.n	80040a2 <HAL_DMA_Abort_IT+0xca>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a52      	ldr	r2, [pc, #328]	@ (80041dc <HAL_DMA_Abort_IT+0x204>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d102      	bne.n	800409c <HAL_DMA_Abort_IT+0xc4>
 8004096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800409a:	e01b      	b.n	80040d4 <HAL_DMA_Abort_IT+0xfc>
 800409c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80040a0:	e018      	b.n	80040d4 <HAL_DMA_Abort_IT+0xfc>
 80040a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040a6:	e015      	b.n	80040d4 <HAL_DMA_Abort_IT+0xfc>
 80040a8:	2310      	movs	r3, #16
 80040aa:	e013      	b.n	80040d4 <HAL_DMA_Abort_IT+0xfc>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e011      	b.n	80040d4 <HAL_DMA_Abort_IT+0xfc>
 80040b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040b4:	e00e      	b.n	80040d4 <HAL_DMA_Abort_IT+0xfc>
 80040b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80040ba:	e00b      	b.n	80040d4 <HAL_DMA_Abort_IT+0xfc>
 80040bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80040c0:	e008      	b.n	80040d4 <HAL_DMA_Abort_IT+0xfc>
 80040c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040c6:	e005      	b.n	80040d4 <HAL_DMA_Abort_IT+0xfc>
 80040c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040cc:	e002      	b.n	80040d4 <HAL_DMA_Abort_IT+0xfc>
 80040ce:	2310      	movs	r3, #16
 80040d0:	e000      	b.n	80040d4 <HAL_DMA_Abort_IT+0xfc>
 80040d2:	2301      	movs	r3, #1
 80040d4:	4a42      	ldr	r2, [pc, #264]	@ (80041e0 <HAL_DMA_Abort_IT+0x208>)
 80040d6:	6053      	str	r3, [r2, #4]
 80040d8:	e057      	b.n	800418a <HAL_DMA_Abort_IT+0x1b2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a36      	ldr	r2, [pc, #216]	@ (80041b8 <HAL_DMA_Abort_IT+0x1e0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d04f      	beq.n	8004184 <HAL_DMA_Abort_IT+0x1ac>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a34      	ldr	r2, [pc, #208]	@ (80041bc <HAL_DMA_Abort_IT+0x1e4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d048      	beq.n	8004180 <HAL_DMA_Abort_IT+0x1a8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a33      	ldr	r2, [pc, #204]	@ (80041c0 <HAL_DMA_Abort_IT+0x1e8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d040      	beq.n	800417a <HAL_DMA_Abort_IT+0x1a2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a31      	ldr	r2, [pc, #196]	@ (80041c4 <HAL_DMA_Abort_IT+0x1ec>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d038      	beq.n	8004174 <HAL_DMA_Abort_IT+0x19c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a30      	ldr	r2, [pc, #192]	@ (80041c8 <HAL_DMA_Abort_IT+0x1f0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d030      	beq.n	800416e <HAL_DMA_Abort_IT+0x196>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a2e      	ldr	r2, [pc, #184]	@ (80041cc <HAL_DMA_Abort_IT+0x1f4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d028      	beq.n	8004168 <HAL_DMA_Abort_IT+0x190>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a26      	ldr	r2, [pc, #152]	@ (80041b4 <HAL_DMA_Abort_IT+0x1dc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d020      	beq.n	8004162 <HAL_DMA_Abort_IT+0x18a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2a      	ldr	r2, [pc, #168]	@ (80041d0 <HAL_DMA_Abort_IT+0x1f8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d019      	beq.n	800415e <HAL_DMA_Abort_IT+0x186>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a29      	ldr	r2, [pc, #164]	@ (80041d4 <HAL_DMA_Abort_IT+0x1fc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d012      	beq.n	800415a <HAL_DMA_Abort_IT+0x182>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a27      	ldr	r2, [pc, #156]	@ (80041d8 <HAL_DMA_Abort_IT+0x200>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00a      	beq.n	8004154 <HAL_DMA_Abort_IT+0x17c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a26      	ldr	r2, [pc, #152]	@ (80041dc <HAL_DMA_Abort_IT+0x204>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d102      	bne.n	800414e <HAL_DMA_Abort_IT+0x176>
 8004148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800414c:	e01b      	b.n	8004186 <HAL_DMA_Abort_IT+0x1ae>
 800414e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004152:	e018      	b.n	8004186 <HAL_DMA_Abort_IT+0x1ae>
 8004154:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004158:	e015      	b.n	8004186 <HAL_DMA_Abort_IT+0x1ae>
 800415a:	2310      	movs	r3, #16
 800415c:	e013      	b.n	8004186 <HAL_DMA_Abort_IT+0x1ae>
 800415e:	2301      	movs	r3, #1
 8004160:	e011      	b.n	8004186 <HAL_DMA_Abort_IT+0x1ae>
 8004162:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004166:	e00e      	b.n	8004186 <HAL_DMA_Abort_IT+0x1ae>
 8004168:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800416c:	e00b      	b.n	8004186 <HAL_DMA_Abort_IT+0x1ae>
 800416e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004172:	e008      	b.n	8004186 <HAL_DMA_Abort_IT+0x1ae>
 8004174:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004178:	e005      	b.n	8004186 <HAL_DMA_Abort_IT+0x1ae>
 800417a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800417e:	e002      	b.n	8004186 <HAL_DMA_Abort_IT+0x1ae>
 8004180:	2310      	movs	r3, #16
 8004182:	e000      	b.n	8004186 <HAL_DMA_Abort_IT+0x1ae>
 8004184:	2301      	movs	r3, #1
 8004186:	4a17      	ldr	r2, [pc, #92]	@ (80041e4 <HAL_DMA_Abort_IT+0x20c>)
 8004188:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4798      	blx	r3
    } 
  }
  return status;
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40020080 	.word	0x40020080
 80041b8:	40020008 	.word	0x40020008
 80041bc:	4002001c 	.word	0x4002001c
 80041c0:	40020030 	.word	0x40020030
 80041c4:	40020044 	.word	0x40020044
 80041c8:	40020058 	.word	0x40020058
 80041cc:	4002006c 	.word	0x4002006c
 80041d0:	40020408 	.word	0x40020408
 80041d4:	4002041c 	.word	0x4002041c
 80041d8:	40020430 	.word	0x40020430
 80041dc:	40020444 	.word	0x40020444
 80041e0:	40020400 	.word	0x40020400
 80041e4:	40020000 	.word	0x40020000

080041e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b08b      	sub	sp, #44	@ 0x2c
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041f2:	2300      	movs	r3, #0
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80041f6:	2300      	movs	r3, #0
 80041f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041fa:	e179      	b.n	80044f0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80041fc:	2201      	movs	r2, #1
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	429a      	cmp	r2, r3
 8004216:	f040 8168 	bne.w	80044ea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4a96      	ldr	r2, [pc, #600]	@ (8004478 <HAL_GPIO_Init+0x290>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d05e      	beq.n	80042e2 <HAL_GPIO_Init+0xfa>
 8004224:	4a94      	ldr	r2, [pc, #592]	@ (8004478 <HAL_GPIO_Init+0x290>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d875      	bhi.n	8004316 <HAL_GPIO_Init+0x12e>
 800422a:	4a94      	ldr	r2, [pc, #592]	@ (800447c <HAL_GPIO_Init+0x294>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d058      	beq.n	80042e2 <HAL_GPIO_Init+0xfa>
 8004230:	4a92      	ldr	r2, [pc, #584]	@ (800447c <HAL_GPIO_Init+0x294>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d86f      	bhi.n	8004316 <HAL_GPIO_Init+0x12e>
 8004236:	4a92      	ldr	r2, [pc, #584]	@ (8004480 <HAL_GPIO_Init+0x298>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d052      	beq.n	80042e2 <HAL_GPIO_Init+0xfa>
 800423c:	4a90      	ldr	r2, [pc, #576]	@ (8004480 <HAL_GPIO_Init+0x298>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d869      	bhi.n	8004316 <HAL_GPIO_Init+0x12e>
 8004242:	4a90      	ldr	r2, [pc, #576]	@ (8004484 <HAL_GPIO_Init+0x29c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d04c      	beq.n	80042e2 <HAL_GPIO_Init+0xfa>
 8004248:	4a8e      	ldr	r2, [pc, #568]	@ (8004484 <HAL_GPIO_Init+0x29c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d863      	bhi.n	8004316 <HAL_GPIO_Init+0x12e>
 800424e:	4a8e      	ldr	r2, [pc, #568]	@ (8004488 <HAL_GPIO_Init+0x2a0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d046      	beq.n	80042e2 <HAL_GPIO_Init+0xfa>
 8004254:	4a8c      	ldr	r2, [pc, #560]	@ (8004488 <HAL_GPIO_Init+0x2a0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d85d      	bhi.n	8004316 <HAL_GPIO_Init+0x12e>
 800425a:	2b12      	cmp	r3, #18
 800425c:	d82a      	bhi.n	80042b4 <HAL_GPIO_Init+0xcc>
 800425e:	2b12      	cmp	r3, #18
 8004260:	d859      	bhi.n	8004316 <HAL_GPIO_Init+0x12e>
 8004262:	a201      	add	r2, pc, #4	@ (adr r2, 8004268 <HAL_GPIO_Init+0x80>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	080042e3 	.word	0x080042e3
 800426c:	080042bd 	.word	0x080042bd
 8004270:	080042cf 	.word	0x080042cf
 8004274:	08004311 	.word	0x08004311
 8004278:	08004317 	.word	0x08004317
 800427c:	08004317 	.word	0x08004317
 8004280:	08004317 	.word	0x08004317
 8004284:	08004317 	.word	0x08004317
 8004288:	08004317 	.word	0x08004317
 800428c:	08004317 	.word	0x08004317
 8004290:	08004317 	.word	0x08004317
 8004294:	08004317 	.word	0x08004317
 8004298:	08004317 	.word	0x08004317
 800429c:	08004317 	.word	0x08004317
 80042a0:	08004317 	.word	0x08004317
 80042a4:	08004317 	.word	0x08004317
 80042a8:	08004317 	.word	0x08004317
 80042ac:	080042c5 	.word	0x080042c5
 80042b0:	080042d9 	.word	0x080042d9
 80042b4:	4a75      	ldr	r2, [pc, #468]	@ (800448c <HAL_GPIO_Init+0x2a4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80042ba:	e02c      	b.n	8004316 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	623b      	str	r3, [r7, #32]
          break;
 80042c2:	e029      	b.n	8004318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	3304      	adds	r3, #4
 80042ca:	623b      	str	r3, [r7, #32]
          break;
 80042cc:	e024      	b.n	8004318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	3308      	adds	r3, #8
 80042d4:	623b      	str	r3, [r7, #32]
          break;
 80042d6:	e01f      	b.n	8004318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	330c      	adds	r3, #12
 80042de:	623b      	str	r3, [r7, #32]
          break;
 80042e0:	e01a      	b.n	8004318 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80042ea:	2304      	movs	r3, #4
 80042ec:	623b      	str	r3, [r7, #32]
          break;
 80042ee:	e013      	b.n	8004318 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d105      	bne.n	8004304 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042f8:	2308      	movs	r3, #8
 80042fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	611a      	str	r2, [r3, #16]
          break;
 8004302:	e009      	b.n	8004318 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004304:	2308      	movs	r3, #8
 8004306:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	615a      	str	r2, [r3, #20]
          break;
 800430e:	e003      	b.n	8004318 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004310:	2300      	movs	r3, #0
 8004312:	623b      	str	r3, [r7, #32]
          break;
 8004314:	e000      	b.n	8004318 <HAL_GPIO_Init+0x130>
          break;
 8004316:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2bff      	cmp	r3, #255	@ 0xff
 800431c:	d801      	bhi.n	8004322 <HAL_GPIO_Init+0x13a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	e001      	b.n	8004326 <HAL_GPIO_Init+0x13e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2bff      	cmp	r3, #255	@ 0xff
 800432c:	d802      	bhi.n	8004334 <HAL_GPIO_Init+0x14c>
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	e002      	b.n	800433a <HAL_GPIO_Init+0x152>
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	3b08      	subs	r3, #8
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	210f      	movs	r1, #15
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	fa01 f303 	lsl.w	r3, r1, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	401a      	ands	r2, r3
 800434c:	6a39      	ldr	r1, [r7, #32]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	fa01 f303 	lsl.w	r3, r1, r3
 8004354:	431a      	orrs	r2, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80c1 	beq.w	80044ea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004368:	4b49      	ldr	r3, [pc, #292]	@ (8004490 <HAL_GPIO_Init+0x2a8>)
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	4a48      	ldr	r2, [pc, #288]	@ (8004490 <HAL_GPIO_Init+0x2a8>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6193      	str	r3, [r2, #24]
 8004374:	4b46      	ldr	r3, [pc, #280]	@ (8004490 <HAL_GPIO_Init+0x2a8>)
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004380:	4a44      	ldr	r2, [pc, #272]	@ (8004494 <HAL_GPIO_Init+0x2ac>)
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	089b      	lsrs	r3, r3, #2
 8004386:	3302      	adds	r3, #2
 8004388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	220f      	movs	r2, #15
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4013      	ands	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a3c      	ldr	r2, [pc, #240]	@ (8004498 <HAL_GPIO_Init+0x2b0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d01f      	beq.n	80043ec <HAL_GPIO_Init+0x204>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3b      	ldr	r2, [pc, #236]	@ (800449c <HAL_GPIO_Init+0x2b4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d019      	beq.n	80043e8 <HAL_GPIO_Init+0x200>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a3a      	ldr	r2, [pc, #232]	@ (80044a0 <HAL_GPIO_Init+0x2b8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d013      	beq.n	80043e4 <HAL_GPIO_Init+0x1fc>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a39      	ldr	r2, [pc, #228]	@ (80044a4 <HAL_GPIO_Init+0x2bc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00d      	beq.n	80043e0 <HAL_GPIO_Init+0x1f8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a38      	ldr	r2, [pc, #224]	@ (80044a8 <HAL_GPIO_Init+0x2c0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d007      	beq.n	80043dc <HAL_GPIO_Init+0x1f4>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a37      	ldr	r2, [pc, #220]	@ (80044ac <HAL_GPIO_Init+0x2c4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d101      	bne.n	80043d8 <HAL_GPIO_Init+0x1f0>
 80043d4:	2305      	movs	r3, #5
 80043d6:	e00a      	b.n	80043ee <HAL_GPIO_Init+0x206>
 80043d8:	2306      	movs	r3, #6
 80043da:	e008      	b.n	80043ee <HAL_GPIO_Init+0x206>
 80043dc:	2304      	movs	r3, #4
 80043de:	e006      	b.n	80043ee <HAL_GPIO_Init+0x206>
 80043e0:	2303      	movs	r3, #3
 80043e2:	e004      	b.n	80043ee <HAL_GPIO_Init+0x206>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e002      	b.n	80043ee <HAL_GPIO_Init+0x206>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <HAL_GPIO_Init+0x206>
 80043ec:	2300      	movs	r3, #0
 80043ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f0:	f002 0203 	and.w	r2, r2, #3
 80043f4:	0092      	lsls	r2, r2, #2
 80043f6:	4093      	lsls	r3, r2
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80043fe:	4925      	ldr	r1, [pc, #148]	@ (8004494 <HAL_GPIO_Init+0x2ac>)
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	089b      	lsrs	r3, r3, #2
 8004404:	3302      	adds	r3, #2
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d006      	beq.n	8004426 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004418:	4b25      	ldr	r3, [pc, #148]	@ (80044b0 <HAL_GPIO_Init+0x2c8>)
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	4924      	ldr	r1, [pc, #144]	@ (80044b0 <HAL_GPIO_Init+0x2c8>)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	4313      	orrs	r3, r2
 8004422:	608b      	str	r3, [r1, #8]
 8004424:	e006      	b.n	8004434 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004426:	4b22      	ldr	r3, [pc, #136]	@ (80044b0 <HAL_GPIO_Init+0x2c8>)
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	43db      	mvns	r3, r3
 800442e:	4920      	ldr	r1, [pc, #128]	@ (80044b0 <HAL_GPIO_Init+0x2c8>)
 8004430:	4013      	ands	r3, r2
 8004432:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004440:	4b1b      	ldr	r3, [pc, #108]	@ (80044b0 <HAL_GPIO_Init+0x2c8>)
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	491a      	ldr	r1, [pc, #104]	@ (80044b0 <HAL_GPIO_Init+0x2c8>)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	4313      	orrs	r3, r2
 800444a:	60cb      	str	r3, [r1, #12]
 800444c:	e006      	b.n	800445c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800444e:	4b18      	ldr	r3, [pc, #96]	@ (80044b0 <HAL_GPIO_Init+0x2c8>)
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	43db      	mvns	r3, r3
 8004456:	4916      	ldr	r1, [pc, #88]	@ (80044b0 <HAL_GPIO_Init+0x2c8>)
 8004458:	4013      	ands	r3, r2
 800445a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d025      	beq.n	80044b4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004468:	4b11      	ldr	r3, [pc, #68]	@ (80044b0 <HAL_GPIO_Init+0x2c8>)
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	4910      	ldr	r1, [pc, #64]	@ (80044b0 <HAL_GPIO_Init+0x2c8>)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	4313      	orrs	r3, r2
 8004472:	604b      	str	r3, [r1, #4]
 8004474:	e025      	b.n	80044c2 <HAL_GPIO_Init+0x2da>
 8004476:	bf00      	nop
 8004478:	10320000 	.word	0x10320000
 800447c:	10310000 	.word	0x10310000
 8004480:	10220000 	.word	0x10220000
 8004484:	10210000 	.word	0x10210000
 8004488:	10120000 	.word	0x10120000
 800448c:	10110000 	.word	0x10110000
 8004490:	40021000 	.word	0x40021000
 8004494:	40010000 	.word	0x40010000
 8004498:	40010800 	.word	0x40010800
 800449c:	40010c00 	.word	0x40010c00
 80044a0:	40011000 	.word	0x40011000
 80044a4:	40011400 	.word	0x40011400
 80044a8:	40011800 	.word	0x40011800
 80044ac:	40011c00 	.word	0x40011c00
 80044b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80044b4:	4b15      	ldr	r3, [pc, #84]	@ (800450c <HAL_GPIO_Init+0x324>)
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	43db      	mvns	r3, r3
 80044bc:	4913      	ldr	r1, [pc, #76]	@ (800450c <HAL_GPIO_Init+0x324>)
 80044be:	4013      	ands	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d006      	beq.n	80044dc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80044ce:	4b0f      	ldr	r3, [pc, #60]	@ (800450c <HAL_GPIO_Init+0x324>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	490e      	ldr	r1, [pc, #56]	@ (800450c <HAL_GPIO_Init+0x324>)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
 80044da:	e006      	b.n	80044ea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80044dc:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <HAL_GPIO_Init+0x324>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	43db      	mvns	r3, r3
 80044e4:	4909      	ldr	r1, [pc, #36]	@ (800450c <HAL_GPIO_Init+0x324>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	3301      	adds	r3, #1
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	fa22 f303 	lsr.w	r3, r2, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f47f ae7e 	bne.w	80041fc <HAL_GPIO_Init+0x14>
  }
}
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	372c      	adds	r7, #44	@ 0x2c
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	40010400 	.word	0x40010400

08004510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
 800452c:	e001      	b.n	8004532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	807b      	strh	r3, [r7, #2]
 800454a:	4613      	mov	r3, r2
 800454c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800454e:	787b      	ldrb	r3, [r7, #1]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004554:	887a      	ldrh	r2, [r7, #2]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800455a:	e003      	b.n	8004564 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	041a      	lsls	r2, r3, #16
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	611a      	str	r2, [r3, #16]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
	...

08004570 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800457a:	4b08      	ldr	r3, [pc, #32]	@ (800459c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d006      	beq.n	8004594 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004586:	4a05      	ldr	r2, [pc, #20]	@ (800459c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004588:	88fb      	ldrh	r3, [r7, #6]
 800458a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f806 	bl	80045a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40010400 	.word	0x40010400

080045a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr

080045b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e272      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8087 	beq.w	80046e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045d4:	4b92      	ldr	r3, [pc, #584]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d00c      	beq.n	80045fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d112      	bne.n	8004612 <HAL_RCC_OscConfig+0x5e>
 80045ec:	4b8c      	ldr	r3, [pc, #560]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f8:	d10b      	bne.n	8004612 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fa:	4b89      	ldr	r3, [pc, #548]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d06c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x12c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d168      	bne.n	80046e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e24c      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800461a:	d106      	bne.n	800462a <HAL_RCC_OscConfig+0x76>
 800461c:	4b80      	ldr	r3, [pc, #512]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a7f      	ldr	r2, [pc, #508]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	e02e      	b.n	8004688 <HAL_RCC_OscConfig+0xd4>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x98>
 8004632:	4b7b      	ldr	r3, [pc, #492]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a7a      	ldr	r2, [pc, #488]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	4b78      	ldr	r3, [pc, #480]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a77      	ldr	r2, [pc, #476]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004644:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e01d      	b.n	8004688 <HAL_RCC_OscConfig+0xd4>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004654:	d10c      	bne.n	8004670 <HAL_RCC_OscConfig+0xbc>
 8004656:	4b72      	ldr	r3, [pc, #456]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a71      	ldr	r2, [pc, #452]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 800465c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	4b6f      	ldr	r3, [pc, #444]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a6e      	ldr	r2, [pc, #440]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	e00b      	b.n	8004688 <HAL_RCC_OscConfig+0xd4>
 8004670:	4b6b      	ldr	r3, [pc, #428]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a6a      	ldr	r2, [pc, #424]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	4b68      	ldr	r3, [pc, #416]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a67      	ldr	r2, [pc, #412]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004686:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d013      	beq.n	80046b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7fe fe40 	bl	8003314 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004698:	f7fe fe3c 	bl	8003314 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	@ 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e200      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0xe4>
 80046b6:	e014      	b.n	80046e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fe fe2c 	bl	8003314 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c0:	f7fe fe28 	bl	8003314 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b64      	cmp	r3, #100	@ 0x64
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e1ec      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d2:	4b53      	ldr	r3, [pc, #332]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x10c>
 80046de:	e000      	b.n	80046e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d063      	beq.n	80047b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ee:	4b4c      	ldr	r3, [pc, #304]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046fa:	4b49      	ldr	r3, [pc, #292]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b08      	cmp	r3, #8
 8004704:	d11c      	bne.n	8004740 <HAL_RCC_OscConfig+0x18c>
 8004706:	4b46      	ldr	r3, [pc, #280]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d116      	bne.n	8004740 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004712:	4b43      	ldr	r3, [pc, #268]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_RCC_OscConfig+0x176>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d001      	beq.n	800472a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e1c0      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472a:	4b3d      	ldr	r3, [pc, #244]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4939      	ldr	r1, [pc, #228]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473e:	e03a      	b.n	80047b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d020      	beq.n	800478a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004748:	4b36      	ldr	r3, [pc, #216]	@ (8004824 <HAL_RCC_OscConfig+0x270>)
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474e:	f7fe fde1 	bl	8003314 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004756:	f7fe fddd 	bl	8003314 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e1a1      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004768:	4b2d      	ldr	r3, [pc, #180]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004774:	4b2a      	ldr	r3, [pc, #168]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4927      	ldr	r1, [pc, #156]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	600b      	str	r3, [r1, #0]
 8004788:	e015      	b.n	80047b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800478a:	4b26      	ldr	r3, [pc, #152]	@ (8004824 <HAL_RCC_OscConfig+0x270>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fe fdc0 	bl	8003314 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004798:	f7fe fdbc 	bl	8003314 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e180      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d03a      	beq.n	8004838 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d019      	beq.n	80047fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ca:	4b17      	ldr	r3, [pc, #92]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d0:	f7fe fda0 	bl	8003314 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d8:	f7fe fd9c 	bl	8003314 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e160      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047f6:	2001      	movs	r0, #1
 80047f8:	f000 face 	bl	8004d98 <RCC_Delay>
 80047fc:	e01c      	b.n	8004838 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004804:	f7fe fd86 	bl	8003314 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800480a:	e00f      	b.n	800482c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800480c:	f7fe fd82 	bl	8003314 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d908      	bls.n	800482c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e146      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000
 8004824:	42420000 	.word	0x42420000
 8004828:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800482c:	4b92      	ldr	r3, [pc, #584]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e9      	bne.n	800480c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80a6 	beq.w	8004992 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484a:	4b8b      	ldr	r3, [pc, #556]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10d      	bne.n	8004872 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004856:	4b88      	ldr	r3, [pc, #544]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	4a87      	ldr	r2, [pc, #540]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800485c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004860:	61d3      	str	r3, [r2, #28]
 8004862:	4b85      	ldr	r3, [pc, #532]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800486e:	2301      	movs	r3, #1
 8004870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004872:	4b82      	ldr	r3, [pc, #520]	@ (8004a7c <HAL_RCC_OscConfig+0x4c8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487a:	2b00      	cmp	r3, #0
 800487c:	d118      	bne.n	80048b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800487e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a7c <HAL_RCC_OscConfig+0x4c8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a7e      	ldr	r2, [pc, #504]	@ (8004a7c <HAL_RCC_OscConfig+0x4c8>)
 8004884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488a:	f7fe fd43 	bl	8003314 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004892:	f7fe fd3f 	bl	8003314 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b64      	cmp	r3, #100	@ 0x64
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e103      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a4:	4b75      	ldr	r3, [pc, #468]	@ (8004a7c <HAL_RCC_OscConfig+0x4c8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f0      	beq.n	8004892 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d106      	bne.n	80048c6 <HAL_RCC_OscConfig+0x312>
 80048b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	6213      	str	r3, [r2, #32]
 80048c4:	e02d      	b.n	8004922 <HAL_RCC_OscConfig+0x36e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x334>
 80048ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	4a69      	ldr	r2, [pc, #420]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	6213      	str	r3, [r2, #32]
 80048da:	4b67      	ldr	r3, [pc, #412]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	4a66      	ldr	r2, [pc, #408]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048e0:	f023 0304 	bic.w	r3, r3, #4
 80048e4:	6213      	str	r3, [r2, #32]
 80048e6:	e01c      	b.n	8004922 <HAL_RCC_OscConfig+0x36e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	d10c      	bne.n	800490a <HAL_RCC_OscConfig+0x356>
 80048f0:	4b61      	ldr	r3, [pc, #388]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	4a60      	ldr	r2, [pc, #384]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	f043 0304 	orr.w	r3, r3, #4
 80048fa:	6213      	str	r3, [r2, #32]
 80048fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	4a5d      	ldr	r2, [pc, #372]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	6213      	str	r3, [r2, #32]
 8004908:	e00b      	b.n	8004922 <HAL_RCC_OscConfig+0x36e>
 800490a:	4b5b      	ldr	r3, [pc, #364]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	4a5a      	ldr	r2, [pc, #360]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6213      	str	r3, [r2, #32]
 8004916:	4b58      	ldr	r3, [pc, #352]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	4a57      	ldr	r2, [pc, #348]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800491c:	f023 0304 	bic.w	r3, r3, #4
 8004920:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d015      	beq.n	8004956 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492a:	f7fe fcf3 	bl	8003314 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004930:	e00a      	b.n	8004948 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004932:	f7fe fcef 	bl	8003314 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e0b1      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004948:	4b4b      	ldr	r3, [pc, #300]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0ee      	beq.n	8004932 <HAL_RCC_OscConfig+0x37e>
 8004954:	e014      	b.n	8004980 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004956:	f7fe fcdd 	bl	8003314 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800495c:	e00a      	b.n	8004974 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495e:	f7fe fcd9 	bl	8003314 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800496c:	4293      	cmp	r3, r2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e09b      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004974:	4b40      	ldr	r3, [pc, #256]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1ee      	bne.n	800495e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004980:	7dfb      	ldrb	r3, [r7, #23]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d105      	bne.n	8004992 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004986:	4b3c      	ldr	r3, [pc, #240]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	4a3b      	ldr	r2, [pc, #236]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800498c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004990:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 8087 	beq.w	8004aaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800499c:	4b36      	ldr	r3, [pc, #216]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 030c 	and.w	r3, r3, #12
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d061      	beq.n	8004a6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d146      	bne.n	8004a3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b0:	4b33      	ldr	r3, [pc, #204]	@ (8004a80 <HAL_RCC_OscConfig+0x4cc>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b6:	f7fe fcad 	bl	8003314 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049be:	f7fe fca9 	bl	8003314 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e06d      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049d0:	4b29      	ldr	r3, [pc, #164]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e4:	d108      	bne.n	80049f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049e6:	4b24      	ldr	r3, [pc, #144]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4921      	ldr	r1, [pc, #132]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a19      	ldr	r1, [r3, #32]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	491b      	ldr	r1, [pc, #108]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a10:	4b1b      	ldr	r3, [pc, #108]	@ (8004a80 <HAL_RCC_OscConfig+0x4cc>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a16:	f7fe fc7d 	bl	8003314 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1e:	f7fe fc79 	bl	8003314 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e03d      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a30:	4b11      	ldr	r3, [pc, #68]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x46a>
 8004a3c:	e035      	b.n	8004aaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3e:	4b10      	ldr	r3, [pc, #64]	@ (8004a80 <HAL_RCC_OscConfig+0x4cc>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a44:	f7fe fc66 	bl	8003314 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fe fc62 	bl	8003314 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e026      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a5e:	4b06      	ldr	r3, [pc, #24]	@ (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x498>
 8004a6a:	e01e      	b.n	8004aaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d107      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e019      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40007000 	.word	0x40007000
 8004a80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a84:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab4 <HAL_RCC_OscConfig+0x500>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d001      	beq.n	8004aaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40021000 	.word	0x40021000

08004ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0d0      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004acc:	4b6a      	ldr	r3, [pc, #424]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d910      	bls.n	8004afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b67      	ldr	r3, [pc, #412]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 0207 	bic.w	r2, r3, #7
 8004ae2:	4965      	ldr	r1, [pc, #404]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b63      	ldr	r3, [pc, #396]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0b8      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d020      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b14:	4b59      	ldr	r3, [pc, #356]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4a58      	ldr	r2, [pc, #352]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b2c:	4b53      	ldr	r3, [pc, #332]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4a52      	ldr	r2, [pc, #328]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b38:	4b50      	ldr	r3, [pc, #320]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	494d      	ldr	r1, [pc, #308]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d040      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	4b47      	ldr	r3, [pc, #284]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d115      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e07f      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d107      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b76:	4b41      	ldr	r3, [pc, #260]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d109      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e073      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b86:	4b3d      	ldr	r3, [pc, #244]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e06b      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b96:	4b39      	ldr	r3, [pc, #228]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f023 0203 	bic.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4936      	ldr	r1, [pc, #216]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba8:	f7fe fbb4 	bl	8003314 <HAL_GetTick>
 8004bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb0:	f7fe fbb0 	bl	8003314 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e053      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 020c 	and.w	r2, r3, #12
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d1eb      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd8:	4b27      	ldr	r3, [pc, #156]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d210      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be6:	4b24      	ldr	r3, [pc, #144]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 0207 	bic.w	r2, r3, #7
 8004bee:	4922      	ldr	r1, [pc, #136]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b20      	ldr	r3, [pc, #128]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e032      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c14:	4b19      	ldr	r3, [pc, #100]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4916      	ldr	r1, [pc, #88]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c32:	4b12      	ldr	r3, [pc, #72]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	490e      	ldr	r1, [pc, #56]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c46:	f000 f821 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	490a      	ldr	r1, [pc, #40]	@ (8004c80 <HAL_RCC_ClockConfig+0x1c8>)
 8004c58:	5ccb      	ldrb	r3, [r1, r3]
 8004c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5e:	4a09      	ldr	r2, [pc, #36]	@ (8004c84 <HAL_RCC_ClockConfig+0x1cc>)
 8004c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c62:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <HAL_RCC_ClockConfig+0x1d0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fb12 	bl	8003290 <HAL_InitTick>

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40022000 	.word	0x40022000
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	080070a0 	.word	0x080070a0
 8004c84:	20000000 	.word	0x20000000
 8004c88:	20000038 	.word	0x20000038

08004c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d002      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0x30>
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d003      	beq.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x36>
 8004cba:	e027      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cbc:	4b19      	ldr	r3, [pc, #100]	@ (8004d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cbe:	613b      	str	r3, [r7, #16]
      break;
 8004cc0:	e027      	b.n	8004d12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	0c9b      	lsrs	r3, r3, #18
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	4a17      	ldr	r2, [pc, #92]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ccc:	5cd3      	ldrb	r3, [r2, r3]
 8004cce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d010      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cda:	4b11      	ldr	r3, [pc, #68]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	0c5b      	lsrs	r3, r3, #17
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	4a11      	ldr	r2, [pc, #68]	@ (8004d2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ce6:	5cd3      	ldrb	r3, [r2, r3]
 8004ce8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a0d      	ldr	r2, [pc, #52]	@ (8004d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cee:	fb03 f202 	mul.w	r2, r3, r2
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e004      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d00:	fb02 f303 	mul.w	r3, r2, r3
 8004d04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	613b      	str	r3, [r7, #16]
      break;
 8004d0a:	e002      	b.n	8004d12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d0c:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d0e:	613b      	str	r3, [r7, #16]
      break;
 8004d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d12:	693b      	ldr	r3, [r7, #16]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40021000 	.word	0x40021000
 8004d24:	007a1200 	.word	0x007a1200
 8004d28:	080070b8 	.word	0x080070b8
 8004d2c:	080070c8 	.word	0x080070c8
 8004d30:	003d0900 	.word	0x003d0900

08004d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d38:	4b02      	ldr	r3, [pc, #8]	@ (8004d44 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr
 8004d44:	20000000 	.word	0x20000000

08004d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d4c:	f7ff fff2 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 8004d50:	4602      	mov	r2, r0
 8004d52:	4b05      	ldr	r3, [pc, #20]	@ (8004d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	4903      	ldr	r1, [pc, #12]	@ (8004d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d5e:	5ccb      	ldrb	r3, [r1, r3]
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	080070b0 	.word	0x080070b0

08004d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d74:	f7ff ffde 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	4b05      	ldr	r3, [pc, #20]	@ (8004d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	0adb      	lsrs	r3, r3, #11
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	4903      	ldr	r1, [pc, #12]	@ (8004d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d86:	5ccb      	ldrb	r3, [r1, r3]
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40021000 	.word	0x40021000
 8004d94:	080070b0 	.word	0x080070b0

08004d98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004da0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dcc <RCC_Delay+0x34>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0a      	ldr	r2, [pc, #40]	@ (8004dd0 <RCC_Delay+0x38>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	0a5b      	lsrs	r3, r3, #9
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004db4:	bf00      	nop
  }
  while (Delay --);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1e5a      	subs	r2, r3, #1
 8004dba:	60fa      	str	r2, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1f9      	bne.n	8004db4 <RCC_Delay+0x1c>
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	20000000 	.word	0x20000000
 8004dd0:	10624dd3 	.word	0x10624dd3

08004dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d07d      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004df0:	2300      	movs	r3, #0
 8004df2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df4:	4b4f      	ldr	r3, [pc, #316]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10d      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e00:	4b4c      	ldr	r3, [pc, #304]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	4a4b      	ldr	r2, [pc, #300]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e0a:	61d3      	str	r3, [r2, #28]
 8004e0c:	4b49      	ldr	r3, [pc, #292]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1c:	4b46      	ldr	r3, [pc, #280]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d118      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e28:	4b43      	ldr	r3, [pc, #268]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a42      	ldr	r2, [pc, #264]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e34:	f7fe fa6e 	bl	8003314 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3a:	e008      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3c:	f7fe fa6a 	bl	8003314 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b64      	cmp	r3, #100	@ 0x64
 8004e48:	d901      	bls.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e06d      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e5a:	4b36      	ldr	r3, [pc, #216]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d02e      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d027      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e78:	4b2e      	ldr	r3, [pc, #184]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e82:	4b2e      	ldr	r3, [pc, #184]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e88:	4b2c      	ldr	r3, [pc, #176]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e8e:	4a29      	ldr	r2, [pc, #164]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d014      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9e:	f7fe fa39 	bl	8003314 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea4:	e00a      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea6:	f7fe fa35 	bl	8003314 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e036      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0ee      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4917      	ldr	r1, [pc, #92]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d105      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee0:	4b14      	ldr	r3, [pc, #80]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	4a13      	ldr	r2, [pc, #76]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	490b      	ldr	r1, [pc, #44]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f16:	4b07      	ldr	r3, [pc, #28]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	4904      	ldr	r1, [pc, #16]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40007000 	.word	0x40007000
 8004f3c:	42420440 	.word	0x42420440

08004f40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	2300      	movs	r3, #0
 8004f52:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	2b0f      	cmp	r3, #15
 8004f62:	f200 80af 	bhi.w	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8004f66:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08005043 	.word	0x08005043
 8004f70:	080050a9 	.word	0x080050a9
 8004f74:	080050c5 	.word	0x080050c5
 8004f78:	08005033 	.word	0x08005033
 8004f7c:	080050c5 	.word	0x080050c5
 8004f80:	080050c5 	.word	0x080050c5
 8004f84:	080050c5 	.word	0x080050c5
 8004f88:	0800503b 	.word	0x0800503b
 8004f8c:	080050c5 	.word	0x080050c5
 8004f90:	080050c5 	.word	0x080050c5
 8004f94:	080050c5 	.word	0x080050c5
 8004f98:	080050c5 	.word	0x080050c5
 8004f9c:	080050c5 	.word	0x080050c5
 8004fa0:	080050c5 	.word	0x080050c5
 8004fa4:	080050c5 	.word	0x080050c5
 8004fa8:	08004fad 	.word	0x08004fad
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004fac:	4b4a      	ldr	r3, [pc, #296]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004fb2:	4b49      	ldr	r3, [pc, #292]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8084 	beq.w	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	0c9b      	lsrs	r3, r3, #18
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	4a44      	ldr	r2, [pc, #272]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8004fca:	5cd3      	ldrb	r3, [r2, r3]
 8004fcc:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d015      	beq.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	0c5b      	lsrs	r3, r3, #17
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	4a3f      	ldr	r2, [pc, #252]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8004fe4:	5cd3      	ldrb	r3, [r2, r3]
 8004fe6:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00d      	beq.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	fb02 f303 	mul.w	r3, r2, r3
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	e004      	b.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4a38      	ldr	r2, [pc, #224]	@ (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8005008:	fb02 f303 	mul.w	r3, r2, r3
 800500c:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800500e:	4b32      	ldr	r3, [pc, #200]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800501a:	d102      	bne.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005020:	e052      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	4a31      	ldr	r2, [pc, #196]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8005028:	fba2 2303 	umull	r2, r3, r2, r3
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	61bb      	str	r3, [r7, #24]
      break;
 8005030:	e04a      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005032:	f7ff fe2b 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8005036:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005038:	e049      	b.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800503a:	f7ff fe27 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 800503e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005040:	e045      	b.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005042:	4b25      	ldr	r3, [pc, #148]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800504e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005052:	d108      	bne.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 800505e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	e01f      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800506c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005070:	d109      	bne.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005072:	4b19      	ldr	r3, [pc, #100]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 800507e:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	e00f      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800508c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005090:	d11c      	bne.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8005092:	4b11      	ldr	r3, [pc, #68]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800509e:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80050a2:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80050a4:	e012      	b.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80050a6:	e011      	b.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80050a8:	f7ff fe62 	bl	8004d70 <HAL_RCC_GetPCLK2Freq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b0a      	ldr	r3, [pc, #40]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	0b9b      	lsrs	r3, r3, #14
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	3301      	adds	r3, #1
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	61bb      	str	r3, [r7, #24]
      break;
 80050c2:	e004      	b.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80050c4:	bf00      	nop
 80050c6:	e002      	b.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80050c8:	bf00      	nop
 80050ca:	e000      	b.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80050cc:	bf00      	nop
    }
  }
  return (frequency);
 80050ce:	69bb      	ldr	r3, [r7, #24]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40021000 	.word	0x40021000
 80050dc:	080070cc 	.word	0x080070cc
 80050e0:	080070dc 	.word	0x080070dc
 80050e4:	007a1200 	.word	0x007a1200
 80050e8:	003d0900 	.word	0x003d0900
 80050ec:	aaaaaaab 	.word	0xaaaaaaab

080050f0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d004      	beq.n	800510c <HAL_SRAM_Init+0x1c>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800510a:	d101      	bne.n	8005110 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e038      	b.n	8005182 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7fd f96f 	bl	8002408 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3308      	adds	r3, #8
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f000 fed5 	bl	8005ee4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	461a      	mov	r2, r3
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	f000 ff37 	bl	8005fb8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6858      	ldr	r0, [r3, #4]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	f000 ff5c 	bl	8006014 <FSMC_NORSRAM_Extended_Timing_Init>
                                          hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	6892      	ldr	r2, [r2, #8]
 8005164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	6892      	ldr	r2, [r2, #8]
 8005170:	f041 0101 	orr.w	r1, r1, #1
 8005174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e042      	b.n	8005222 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d106      	bne.n	80051b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fd f893 	bl	80022dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2224      	movs	r2, #36	@ 0x24
 80051ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fdfa 	bl	8005dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695a      	ldr	r2, [r3, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005202:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b08a      	sub	sp, #40	@ 0x28
 800522e:	af02      	add	r7, sp, #8
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b20      	cmp	r3, #32
 8005248:	d175      	bne.n	8005336 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <HAL_UART_Transmit+0x2c>
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e06e      	b.n	8005338 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2221      	movs	r2, #33	@ 0x21
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005268:	f7fe f854 	bl	8003314 <HAL_GetTick>
 800526c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005282:	d108      	bne.n	8005296 <HAL_UART_Transmit+0x6c>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	e003      	b.n	800529e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800529a:	2300      	movs	r3, #0
 800529c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800529e:	e02e      	b.n	80052fe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2200      	movs	r2, #0
 80052a8:	2180      	movs	r1, #128	@ 0x80
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fb5e 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e03a      	b.n	8005338 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10b      	bne.n	80052e0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	3302      	adds	r3, #2
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	e007      	b.n	80052f0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	781a      	ldrb	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3301      	adds	r3, #1
 80052ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1cb      	bne.n	80052a0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2200      	movs	r2, #0
 8005310:	2140      	movs	r1, #64	@ 0x40
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 fb2a 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e006      	b.n	8005338 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e000      	b.n	8005338 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005336:	2302      	movs	r3, #2
  }
}
 8005338:	4618      	mov	r0, r3
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08c      	sub	sp, #48	@ 0x30
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b20      	cmp	r3, #32
 8005358:	d14a      	bne.n	80053f0 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e043      	b.n	80053f2 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	461a      	mov	r2, r3
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 fb4e 	bl	8005a1e <UART_Start_Receive_IT>
 8005382:	4603      	mov	r3, r0
 8005384:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800538c:	2b00      	cmp	r3, #0
 800538e:	d12c      	bne.n	80053ea <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005394:	2b01      	cmp	r3, #1
 8005396:	d125      	bne.n	80053e4 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005398:	2300      	movs	r3, #0
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	617b      	str	r3, [r7, #20]
   return(result);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f043 0310 	orr.w	r3, r3, #16
 80053c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80053d0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6a39      	ldr	r1, [r7, #32]
 80053d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	61fb      	str	r3, [r7, #28]
   return(result);
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e5      	bne.n	80053ae <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80053e2:	e002      	b.n	80053ea <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80053ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053ee:	e000      	b.n	80053f2 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80053f0:	2302      	movs	r3, #2
  }
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3730      	adds	r7, #48	@ 0x30
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b0ba      	sub	sp, #232	@ 0xe8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005422:	2300      	movs	r3, #0
 8005424:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005428:	2300      	movs	r3, #0
 800542a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800543a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10f      	bne.n	8005462 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_UART_IRQHandler+0x66>
 800544e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fbf5 	bl	8005c4a <UART_Receive_IT>
      return;
 8005460:	e25b      	b.n	800591a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005462:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80de 	beq.w	8005628 <HAL_UART_IRQHandler+0x22c>
 800546c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d106      	bne.n	8005486 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800547c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 80d1 	beq.w	8005628 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <HAL_UART_IRQHandler+0xae>
 8005492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a2:	f043 0201 	orr.w	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <HAL_UART_IRQHandler+0xd2>
 80054b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c6:	f043 0202 	orr.w	r2, r3, #2
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <HAL_UART_IRQHandler+0xf6>
 80054da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	f043 0204 	orr.w	r2, r3, #4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d011      	beq.n	8005522 <HAL_UART_IRQHandler+0x126>
 80054fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	d105      	bne.n	8005516 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800550a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551a:	f043 0208 	orr.w	r2, r3, #8
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 81f2 	beq.w	8005910 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800552c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_UART_IRQHandler+0x14e>
 8005538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fb80 	bl	8005c4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf14      	ite	ne
 8005558:	2301      	movne	r3, #1
 800555a:	2300      	moveq	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <HAL_UART_IRQHandler+0x17a>
 800556e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d04f      	beq.n	8005616 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fa8a 	bl	8005a90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d041      	beq.n	800560e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3314      	adds	r3, #20
 8005590:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80055a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3314      	adds	r3, #20
 80055b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1d9      	bne.n	800558a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d013      	beq.n	8005606 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e2:	4a7e      	ldr	r2, [pc, #504]	@ (80057dc <HAL_UART_IRQHandler+0x3e0>)
 80055e4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe fcf4 	bl	8003fd8 <HAL_DMA_Abort_IT>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005600:	4610      	mov	r0, r2
 8005602:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005604:	e00e      	b.n	8005624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f99c 	bl	8005944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560c:	e00a      	b.n	8005624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f998 	bl	8005944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	e006      	b.n	8005624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f994 	bl	8005944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005622:	e175      	b.n	8005910 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005624:	bf00      	nop
    return;
 8005626:	e173      	b.n	8005910 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562c:	2b01      	cmp	r3, #1
 800562e:	f040 814f 	bne.w	80058d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 8148 	beq.w	80058d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 8141 	beq.w	80058d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 80b6 	beq.w	80057e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005680:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8145 	beq.w	8005914 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800568e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005692:	429a      	cmp	r2, r3
 8005694:	f080 813e 	bcs.w	8005914 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800569e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	f000 8088 	beq.w	80057bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056d8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1d9      	bne.n	80056ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005708:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800570a:	f023 0301 	bic.w	r3, r3, #1
 800570e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3314      	adds	r3, #20
 8005718:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800571c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005720:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005724:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800572e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e1      	bne.n	80056f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3314      	adds	r3, #20
 800573a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005744:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005746:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800574a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3314      	adds	r3, #20
 8005754:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005758:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800575a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800575e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005766:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e3      	bne.n	8005734 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800578a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800578c:	f023 0310 	bic.w	r3, r3, #16
 8005790:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800579e:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057a0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e3      	bne.n	800577a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe fbd3 	bl	8003f62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	4619      	mov	r1, r3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f8bf 	bl	8005956 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057d8:	e09c      	b.n	8005914 <HAL_UART_IRQHandler+0x518>
 80057da:	bf00      	nop
 80057dc:	08005b55 	.word	0x08005b55
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 808e 	beq.w	8005918 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8089 	beq.w	8005918 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800581c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	330c      	adds	r3, #12
 8005826:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800582a:	647a      	str	r2, [r7, #68]	@ 0x44
 800582c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005830:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e3      	bne.n	8005806 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3314      	adds	r3, #20
 8005844:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	623b      	str	r3, [r7, #32]
   return(result);
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3314      	adds	r3, #20
 800585e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005862:	633a      	str	r2, [r7, #48]	@ 0x30
 8005864:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e3      	bne.n	800583e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	60fb      	str	r3, [r7, #12]
   return(result);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0310 	bic.w	r3, r3, #16
 800589a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	330c      	adds	r3, #12
 80058a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80058a8:	61fa      	str	r2, [r7, #28]
 80058aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	69b9      	ldr	r1, [r7, #24]
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	617b      	str	r3, [r7, #20]
   return(result);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e3      	bne.n	8005884 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f844 	bl	8005956 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058ce:	e023      	b.n	8005918 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d009      	beq.n	80058f0 <HAL_UART_IRQHandler+0x4f4>
 80058dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f947 	bl	8005b7c <UART_Transmit_IT>
    return;
 80058ee:	e014      	b.n	800591a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00e      	beq.n	800591a <HAL_UART_IRQHandler+0x51e>
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f986 	bl	8005c1a <UART_EndTransmit_IT>
    return;
 800590e:	e004      	b.n	800591a <HAL_UART_IRQHandler+0x51e>
    return;
 8005910:	bf00      	nop
 8005912:	e002      	b.n	800591a <HAL_UART_IRQHandler+0x51e>
      return;
 8005914:	bf00      	nop
 8005916:	e000      	b.n	800591a <HAL_UART_IRQHandler+0x51e>
      return;
 8005918:	bf00      	nop
  }
}
 800591a:	37e8      	adds	r7, #232	@ 0xe8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr

08005944 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr

08005956 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	460b      	mov	r3, r1
 8005960:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr

0800596c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597c:	e03b      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005984:	d037      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005986:	f7fd fcc5 	bl	8003314 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	6a3a      	ldr	r2, [r7, #32]
 8005992:	429a      	cmp	r2, r3
 8005994:	d302      	bcc.n	800599c <UART_WaitOnFlagUntilTimeout+0x30>
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e03a      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d023      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b80      	cmp	r3, #128	@ 0x80
 80059b2:	d020      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b40      	cmp	r3, #64	@ 0x40
 80059b8:	d01d      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d116      	bne.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f856 	bl	8005a90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2208      	movs	r2, #8
 80059e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e00f      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4013      	ands	r3, r2
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	bf0c      	ite	eq
 8005a06:	2301      	moveq	r3, #1
 8005a08:	2300      	movne	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d0b4      	beq.n	800597e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	88fa      	ldrh	r2, [r7, #6]
 8005a36:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2222      	movs	r2, #34	@ 0x22
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695a      	ldr	r2, [r3, #20]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0220 	orr.w	r2, r2, #32
 8005a82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr

08005a90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b095      	sub	sp, #84	@ 0x54
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ab8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005abe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e5      	bne.n	8005a98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3314      	adds	r3, #20
 8005ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3314      	adds	r3, #20
 8005aea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d119      	bne.n	8005b3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f023 0310 	bic.w	r3, r3, #16
 8005b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	330c      	adds	r3, #12
 8005b26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b28:	61ba      	str	r2, [r7, #24]
 8005b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6979      	ldr	r1, [r7, #20]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	613b      	str	r3, [r7, #16]
   return(result);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e5      	bne.n	8005b08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b4a:	bf00      	nop
 8005b4c:	3754      	adds	r7, #84	@ 0x54
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f7ff fee8 	bl	8005944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b74:	bf00      	nop
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b21      	cmp	r3, #33	@ 0x21
 8005b8e:	d13e      	bne.n	8005c0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b98:	d114      	bne.n	8005bc4 <UART_Transmit_IT+0x48>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d110      	bne.n	8005bc4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	1c9a      	adds	r2, r3, #2
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	621a      	str	r2, [r3, #32]
 8005bc2:	e008      	b.n	8005bd6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	1c59      	adds	r1, r3, #1
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6211      	str	r1, [r2, #32]
 8005bce:	781a      	ldrb	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	4619      	mov	r1, r3
 8005be4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10f      	bne.n	8005c0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bf8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e000      	b.n	8005c10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c0e:	2302      	movs	r3, #2
  }
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr

08005c1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fe70 	bl	8005920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b08c      	sub	sp, #48	@ 0x30
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b22      	cmp	r3, #34	@ 0x22
 8005c5c:	f040 80ae 	bne.w	8005dbc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c68:	d117      	bne.n	8005c9a <UART_Receive_IT+0x50>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d113      	bne.n	8005c9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c92:	1c9a      	adds	r2, r3, #2
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c98:	e026      	b.n	8005ce8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cac:	d007      	beq.n	8005cbe <UART_Receive_IT+0x74>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <UART_Receive_IT+0x82>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	e008      	b.n	8005cde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d15d      	bne.n	8005db8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0220 	bic.w	r2, r2, #32
 8005d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695a      	ldr	r2, [r3, #20]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0201 	bic.w	r2, r2, #1
 8005d2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d135      	bne.n	8005dae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	613b      	str	r3, [r7, #16]
   return(result);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f023 0310 	bic.w	r3, r3, #16
 8005d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	330c      	adds	r3, #12
 8005d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d68:	623a      	str	r2, [r7, #32]
 8005d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	69f9      	ldr	r1, [r7, #28]
 8005d6e:	6a3a      	ldr	r2, [r7, #32]
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e5      	bne.n	8005d48 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b10      	cmp	r3, #16
 8005d88:	d10a      	bne.n	8005da0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff fdd5 	bl	8005956 <HAL_UARTEx_RxEventCallback>
 8005dac:	e002      	b.n	8005db4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff fdbf 	bl	8005932 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e002      	b.n	8005dbe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	e000      	b.n	8005dbe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005dbc:	2302      	movs	r3, #2
  }
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3730      	adds	r7, #48	@ 0x30
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005e02:	f023 030c 	bic.w	r3, r3, #12
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6812      	ldr	r2, [r2, #0]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8005edc <UART_SetConfig+0x114>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d103      	bne.n	8005e38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e30:	f7fe ff9e 	bl	8004d70 <HAL_RCC_GetPCLK2Freq>
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	e002      	b.n	8005e3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e38:	f7fe ff86 	bl	8004d48 <HAL_RCC_GetPCLK1Freq>
 8005e3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009a      	lsls	r2, r3, #2
 8005e48:	441a      	add	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e54:	4a22      	ldr	r2, [pc, #136]	@ (8005ee0 <UART_SetConfig+0x118>)
 8005e56:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	0119      	lsls	r1, r3, #4
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	009a      	lsls	r2, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e74:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee0 <UART_SetConfig+0x118>)
 8005e76:	fba3 0302 	umull	r0, r3, r3, r2
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	2064      	movs	r0, #100	@ 0x64
 8005e7e:	fb00 f303 	mul.w	r3, r0, r3
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	3332      	adds	r3, #50	@ 0x32
 8005e88:	4a15      	ldr	r2, [pc, #84]	@ (8005ee0 <UART_SetConfig+0x118>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e94:	4419      	add	r1, r3
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009a      	lsls	r2, r3, #2
 8005ea0:	441a      	add	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eac:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee0 <UART_SetConfig+0x118>)
 8005eae:	fba3 0302 	umull	r0, r3, r3, r2
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	2064      	movs	r0, #100	@ 0x64
 8005eb6:	fb00 f303 	mul.w	r3, r0, r3
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	3332      	adds	r3, #50	@ 0x32
 8005ec0:	4a07      	ldr	r2, [pc, #28]	@ (8005ee0 <UART_SetConfig+0x118>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	f003 020f 	and.w	r2, r3, #15
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ed4:	bf00      	nop
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40013800 	.word	0x40013800
 8005ee0:	51eb851f 	.word	0x51eb851f

08005ee4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	f023 0101 	bic.w	r1, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d102      	bne.n	8005f14 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005f0e:	2340      	movs	r3, #64	@ 0x40
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	e001      	b.n	8005f18 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005f24:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005f2a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005f30:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005f36:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005f3c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005f42:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8005f48:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8005f4e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005f54:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8005f72:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <FSMC_NORSRAM_Init+0xd0>)
 8005f74:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f7c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005f84:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	43db      	mvns	r3, r3
 8005f94:	ea02 0103 	and.w	r1, r2, r3
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4319      	orrs	r1, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	0008fb7f 	.word	0x0008fb7f

08005fb8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8005fce:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8005fd6:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8005fde:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8005fe8:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	3b02      	subs	r3, #2
 8005ff0:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8005ff2:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 8005ffe:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr
	...

08006014 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006028:	d11d      	bne.n	8006066 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006032:	4b13      	ldr	r3, [pc, #76]	@ (8006080 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006034:	4013      	ands	r3, r2
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	6811      	ldr	r1, [r2, #0]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	6852      	ldr	r2, [r2, #4]
 800603e:	0112      	lsls	r2, r2, #4
 8006040:	4311      	orrs	r1, r2
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	6892      	ldr	r2, [r2, #8]
 8006046:	0212      	lsls	r2, r2, #8
 8006048:	4311      	orrs	r1, r2
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	6992      	ldr	r2, [r2, #24]
 800604e:	4311      	orrs	r1, r2
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	68d2      	ldr	r2, [r2, #12]
 8006054:	0412      	lsls	r2, r2, #16
 8006056:	430a      	orrs	r2, r1
 8006058:	ea43 0102 	orr.w	r1, r3, r2
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006064:	e005      	b.n	8006072 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800606e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	cff00000 	.word	0xcff00000

08006084 <siprintf>:
 8006084:	b40e      	push	{r1, r2, r3}
 8006086:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800608a:	b500      	push	{lr}
 800608c:	b09c      	sub	sp, #112	@ 0x70
 800608e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006090:	9002      	str	r0, [sp, #8]
 8006092:	9006      	str	r0, [sp, #24]
 8006094:	9107      	str	r1, [sp, #28]
 8006096:	9104      	str	r1, [sp, #16]
 8006098:	4808      	ldr	r0, [pc, #32]	@ (80060bc <siprintf+0x38>)
 800609a:	4909      	ldr	r1, [pc, #36]	@ (80060c0 <siprintf+0x3c>)
 800609c:	f853 2b04 	ldr.w	r2, [r3], #4
 80060a0:	9105      	str	r1, [sp, #20]
 80060a2:	6800      	ldr	r0, [r0, #0]
 80060a4:	a902      	add	r1, sp, #8
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	f000 f89c 	bl	80061e4 <_svfiprintf_r>
 80060ac:	2200      	movs	r2, #0
 80060ae:	9b02      	ldr	r3, [sp, #8]
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	b01c      	add	sp, #112	@ 0x70
 80060b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060b8:	b003      	add	sp, #12
 80060ba:	4770      	bx	lr
 80060bc:	20000040 	.word	0x20000040
 80060c0:	ffff0208 	.word	0xffff0208

080060c4 <memset>:
 80060c4:	4603      	mov	r3, r0
 80060c6:	4402      	add	r2, r0
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d100      	bne.n	80060ce <memset+0xa>
 80060cc:	4770      	bx	lr
 80060ce:	f803 1b01 	strb.w	r1, [r3], #1
 80060d2:	e7f9      	b.n	80060c8 <memset+0x4>

080060d4 <__errno>:
 80060d4:	4b01      	ldr	r3, [pc, #4]	@ (80060dc <__errno+0x8>)
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000040 	.word	0x20000040

080060e0 <__libc_init_array>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	2600      	movs	r6, #0
 80060e4:	4d0c      	ldr	r5, [pc, #48]	@ (8006118 <__libc_init_array+0x38>)
 80060e6:	4c0d      	ldr	r4, [pc, #52]	@ (800611c <__libc_init_array+0x3c>)
 80060e8:	1b64      	subs	r4, r4, r5
 80060ea:	10a4      	asrs	r4, r4, #2
 80060ec:	42a6      	cmp	r6, r4
 80060ee:	d109      	bne.n	8006104 <__libc_init_array+0x24>
 80060f0:	f000 fc78 	bl	80069e4 <_init>
 80060f4:	2600      	movs	r6, #0
 80060f6:	4d0a      	ldr	r5, [pc, #40]	@ (8006120 <__libc_init_array+0x40>)
 80060f8:	4c0a      	ldr	r4, [pc, #40]	@ (8006124 <__libc_init_array+0x44>)
 80060fa:	1b64      	subs	r4, r4, r5
 80060fc:	10a4      	asrs	r4, r4, #2
 80060fe:	42a6      	cmp	r6, r4
 8006100:	d105      	bne.n	800610e <__libc_init_array+0x2e>
 8006102:	bd70      	pop	{r4, r5, r6, pc}
 8006104:	f855 3b04 	ldr.w	r3, [r5], #4
 8006108:	4798      	blx	r3
 800610a:	3601      	adds	r6, #1
 800610c:	e7ee      	b.n	80060ec <__libc_init_array+0xc>
 800610e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006112:	4798      	blx	r3
 8006114:	3601      	adds	r6, #1
 8006116:	e7f2      	b.n	80060fe <__libc_init_array+0x1e>
 8006118:	0800711c 	.word	0x0800711c
 800611c:	0800711c 	.word	0x0800711c
 8006120:	0800711c 	.word	0x0800711c
 8006124:	08007120 	.word	0x08007120

08006128 <__retarget_lock_acquire_recursive>:
 8006128:	4770      	bx	lr

0800612a <__retarget_lock_release_recursive>:
 800612a:	4770      	bx	lr

0800612c <__ssputs_r>:
 800612c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	461f      	mov	r7, r3
 8006132:	688e      	ldr	r6, [r1, #8]
 8006134:	4682      	mov	sl, r0
 8006136:	42be      	cmp	r6, r7
 8006138:	460c      	mov	r4, r1
 800613a:	4690      	mov	r8, r2
 800613c:	680b      	ldr	r3, [r1, #0]
 800613e:	d82d      	bhi.n	800619c <__ssputs_r+0x70>
 8006140:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006144:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006148:	d026      	beq.n	8006198 <__ssputs_r+0x6c>
 800614a:	6965      	ldr	r5, [r4, #20]
 800614c:	6909      	ldr	r1, [r1, #16]
 800614e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006152:	eba3 0901 	sub.w	r9, r3, r1
 8006156:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800615a:	1c7b      	adds	r3, r7, #1
 800615c:	444b      	add	r3, r9
 800615e:	106d      	asrs	r5, r5, #1
 8006160:	429d      	cmp	r5, r3
 8006162:	bf38      	it	cc
 8006164:	461d      	movcc	r5, r3
 8006166:	0553      	lsls	r3, r2, #21
 8006168:	d527      	bpl.n	80061ba <__ssputs_r+0x8e>
 800616a:	4629      	mov	r1, r5
 800616c:	f000 f958 	bl	8006420 <_malloc_r>
 8006170:	4606      	mov	r6, r0
 8006172:	b360      	cbz	r0, 80061ce <__ssputs_r+0xa2>
 8006174:	464a      	mov	r2, r9
 8006176:	6921      	ldr	r1, [r4, #16]
 8006178:	f000 fbd6 	bl	8006928 <memcpy>
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006186:	81a3      	strh	r3, [r4, #12]
 8006188:	6126      	str	r6, [r4, #16]
 800618a:	444e      	add	r6, r9
 800618c:	6026      	str	r6, [r4, #0]
 800618e:	463e      	mov	r6, r7
 8006190:	6165      	str	r5, [r4, #20]
 8006192:	eba5 0509 	sub.w	r5, r5, r9
 8006196:	60a5      	str	r5, [r4, #8]
 8006198:	42be      	cmp	r6, r7
 800619a:	d900      	bls.n	800619e <__ssputs_r+0x72>
 800619c:	463e      	mov	r6, r7
 800619e:	4632      	mov	r2, r6
 80061a0:	4641      	mov	r1, r8
 80061a2:	6820      	ldr	r0, [r4, #0]
 80061a4:	f000 fb88 	bl	80068b8 <memmove>
 80061a8:	2000      	movs	r0, #0
 80061aa:	68a3      	ldr	r3, [r4, #8]
 80061ac:	1b9b      	subs	r3, r3, r6
 80061ae:	60a3      	str	r3, [r4, #8]
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	4433      	add	r3, r6
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ba:	462a      	mov	r2, r5
 80061bc:	f000 fb4e 	bl	800685c <_realloc_r>
 80061c0:	4606      	mov	r6, r0
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d1e0      	bne.n	8006188 <__ssputs_r+0x5c>
 80061c6:	4650      	mov	r0, sl
 80061c8:	6921      	ldr	r1, [r4, #16]
 80061ca:	f000 fbbb 	bl	8006944 <_free_r>
 80061ce:	230c      	movs	r3, #12
 80061d0:	f8ca 3000 	str.w	r3, [sl]
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061de:	81a3      	strh	r3, [r4, #12]
 80061e0:	e7e9      	b.n	80061b6 <__ssputs_r+0x8a>
	...

080061e4 <_svfiprintf_r>:
 80061e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e8:	4698      	mov	r8, r3
 80061ea:	898b      	ldrh	r3, [r1, #12]
 80061ec:	4607      	mov	r7, r0
 80061ee:	061b      	lsls	r3, r3, #24
 80061f0:	460d      	mov	r5, r1
 80061f2:	4614      	mov	r4, r2
 80061f4:	b09d      	sub	sp, #116	@ 0x74
 80061f6:	d510      	bpl.n	800621a <_svfiprintf_r+0x36>
 80061f8:	690b      	ldr	r3, [r1, #16]
 80061fa:	b973      	cbnz	r3, 800621a <_svfiprintf_r+0x36>
 80061fc:	2140      	movs	r1, #64	@ 0x40
 80061fe:	f000 f90f 	bl	8006420 <_malloc_r>
 8006202:	6028      	str	r0, [r5, #0]
 8006204:	6128      	str	r0, [r5, #16]
 8006206:	b930      	cbnz	r0, 8006216 <_svfiprintf_r+0x32>
 8006208:	230c      	movs	r3, #12
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006210:	b01d      	add	sp, #116	@ 0x74
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	2340      	movs	r3, #64	@ 0x40
 8006218:	616b      	str	r3, [r5, #20]
 800621a:	2300      	movs	r3, #0
 800621c:	9309      	str	r3, [sp, #36]	@ 0x24
 800621e:	2320      	movs	r3, #32
 8006220:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006224:	2330      	movs	r3, #48	@ 0x30
 8006226:	f04f 0901 	mov.w	r9, #1
 800622a:	f8cd 800c 	str.w	r8, [sp, #12]
 800622e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80063c8 <_svfiprintf_r+0x1e4>
 8006232:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006236:	4623      	mov	r3, r4
 8006238:	469a      	mov	sl, r3
 800623a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800623e:	b10a      	cbz	r2, 8006244 <_svfiprintf_r+0x60>
 8006240:	2a25      	cmp	r2, #37	@ 0x25
 8006242:	d1f9      	bne.n	8006238 <_svfiprintf_r+0x54>
 8006244:	ebba 0b04 	subs.w	fp, sl, r4
 8006248:	d00b      	beq.n	8006262 <_svfiprintf_r+0x7e>
 800624a:	465b      	mov	r3, fp
 800624c:	4622      	mov	r2, r4
 800624e:	4629      	mov	r1, r5
 8006250:	4638      	mov	r0, r7
 8006252:	f7ff ff6b 	bl	800612c <__ssputs_r>
 8006256:	3001      	adds	r0, #1
 8006258:	f000 80a7 	beq.w	80063aa <_svfiprintf_r+0x1c6>
 800625c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800625e:	445a      	add	r2, fp
 8006260:	9209      	str	r2, [sp, #36]	@ 0x24
 8006262:	f89a 3000 	ldrb.w	r3, [sl]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 809f 	beq.w	80063aa <_svfiprintf_r+0x1c6>
 800626c:	2300      	movs	r3, #0
 800626e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006276:	f10a 0a01 	add.w	sl, sl, #1
 800627a:	9304      	str	r3, [sp, #16]
 800627c:	9307      	str	r3, [sp, #28]
 800627e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006282:	931a      	str	r3, [sp, #104]	@ 0x68
 8006284:	4654      	mov	r4, sl
 8006286:	2205      	movs	r2, #5
 8006288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628c:	484e      	ldr	r0, [pc, #312]	@ (80063c8 <_svfiprintf_r+0x1e4>)
 800628e:	f000 fb3d 	bl	800690c <memchr>
 8006292:	9a04      	ldr	r2, [sp, #16]
 8006294:	b9d8      	cbnz	r0, 80062ce <_svfiprintf_r+0xea>
 8006296:	06d0      	lsls	r0, r2, #27
 8006298:	bf44      	itt	mi
 800629a:	2320      	movmi	r3, #32
 800629c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062a0:	0711      	lsls	r1, r2, #28
 80062a2:	bf44      	itt	mi
 80062a4:	232b      	movmi	r3, #43	@ 0x2b
 80062a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062aa:	f89a 3000 	ldrb.w	r3, [sl]
 80062ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80062b0:	d015      	beq.n	80062de <_svfiprintf_r+0xfa>
 80062b2:	4654      	mov	r4, sl
 80062b4:	2000      	movs	r0, #0
 80062b6:	f04f 0c0a 	mov.w	ip, #10
 80062ba:	9a07      	ldr	r2, [sp, #28]
 80062bc:	4621      	mov	r1, r4
 80062be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062c2:	3b30      	subs	r3, #48	@ 0x30
 80062c4:	2b09      	cmp	r3, #9
 80062c6:	d94b      	bls.n	8006360 <_svfiprintf_r+0x17c>
 80062c8:	b1b0      	cbz	r0, 80062f8 <_svfiprintf_r+0x114>
 80062ca:	9207      	str	r2, [sp, #28]
 80062cc:	e014      	b.n	80062f8 <_svfiprintf_r+0x114>
 80062ce:	eba0 0308 	sub.w	r3, r0, r8
 80062d2:	fa09 f303 	lsl.w	r3, r9, r3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	46a2      	mov	sl, r4
 80062da:	9304      	str	r3, [sp, #16]
 80062dc:	e7d2      	b.n	8006284 <_svfiprintf_r+0xa0>
 80062de:	9b03      	ldr	r3, [sp, #12]
 80062e0:	1d19      	adds	r1, r3, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	9103      	str	r1, [sp, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	bfbb      	ittet	lt
 80062ea:	425b      	neglt	r3, r3
 80062ec:	f042 0202 	orrlt.w	r2, r2, #2
 80062f0:	9307      	strge	r3, [sp, #28]
 80062f2:	9307      	strlt	r3, [sp, #28]
 80062f4:	bfb8      	it	lt
 80062f6:	9204      	strlt	r2, [sp, #16]
 80062f8:	7823      	ldrb	r3, [r4, #0]
 80062fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80062fc:	d10a      	bne.n	8006314 <_svfiprintf_r+0x130>
 80062fe:	7863      	ldrb	r3, [r4, #1]
 8006300:	2b2a      	cmp	r3, #42	@ 0x2a
 8006302:	d132      	bne.n	800636a <_svfiprintf_r+0x186>
 8006304:	9b03      	ldr	r3, [sp, #12]
 8006306:	3402      	adds	r4, #2
 8006308:	1d1a      	adds	r2, r3, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	9203      	str	r2, [sp, #12]
 800630e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006312:	9305      	str	r3, [sp, #20]
 8006314:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80063cc <_svfiprintf_r+0x1e8>
 8006318:	2203      	movs	r2, #3
 800631a:	4650      	mov	r0, sl
 800631c:	7821      	ldrb	r1, [r4, #0]
 800631e:	f000 faf5 	bl	800690c <memchr>
 8006322:	b138      	cbz	r0, 8006334 <_svfiprintf_r+0x150>
 8006324:	2240      	movs	r2, #64	@ 0x40
 8006326:	9b04      	ldr	r3, [sp, #16]
 8006328:	eba0 000a 	sub.w	r0, r0, sl
 800632c:	4082      	lsls	r2, r0
 800632e:	4313      	orrs	r3, r2
 8006330:	3401      	adds	r4, #1
 8006332:	9304      	str	r3, [sp, #16]
 8006334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006338:	2206      	movs	r2, #6
 800633a:	4825      	ldr	r0, [pc, #148]	@ (80063d0 <_svfiprintf_r+0x1ec>)
 800633c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006340:	f000 fae4 	bl	800690c <memchr>
 8006344:	2800      	cmp	r0, #0
 8006346:	d036      	beq.n	80063b6 <_svfiprintf_r+0x1d2>
 8006348:	4b22      	ldr	r3, [pc, #136]	@ (80063d4 <_svfiprintf_r+0x1f0>)
 800634a:	bb1b      	cbnz	r3, 8006394 <_svfiprintf_r+0x1b0>
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	3307      	adds	r3, #7
 8006350:	f023 0307 	bic.w	r3, r3, #7
 8006354:	3308      	adds	r3, #8
 8006356:	9303      	str	r3, [sp, #12]
 8006358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800635a:	4433      	add	r3, r6
 800635c:	9309      	str	r3, [sp, #36]	@ 0x24
 800635e:	e76a      	b.n	8006236 <_svfiprintf_r+0x52>
 8006360:	460c      	mov	r4, r1
 8006362:	2001      	movs	r0, #1
 8006364:	fb0c 3202 	mla	r2, ip, r2, r3
 8006368:	e7a8      	b.n	80062bc <_svfiprintf_r+0xd8>
 800636a:	2300      	movs	r3, #0
 800636c:	f04f 0c0a 	mov.w	ip, #10
 8006370:	4619      	mov	r1, r3
 8006372:	3401      	adds	r4, #1
 8006374:	9305      	str	r3, [sp, #20]
 8006376:	4620      	mov	r0, r4
 8006378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800637c:	3a30      	subs	r2, #48	@ 0x30
 800637e:	2a09      	cmp	r2, #9
 8006380:	d903      	bls.n	800638a <_svfiprintf_r+0x1a6>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0c6      	beq.n	8006314 <_svfiprintf_r+0x130>
 8006386:	9105      	str	r1, [sp, #20]
 8006388:	e7c4      	b.n	8006314 <_svfiprintf_r+0x130>
 800638a:	4604      	mov	r4, r0
 800638c:	2301      	movs	r3, #1
 800638e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006392:	e7f0      	b.n	8006376 <_svfiprintf_r+0x192>
 8006394:	ab03      	add	r3, sp, #12
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	462a      	mov	r2, r5
 800639a:	4638      	mov	r0, r7
 800639c:	4b0e      	ldr	r3, [pc, #56]	@ (80063d8 <_svfiprintf_r+0x1f4>)
 800639e:	a904      	add	r1, sp, #16
 80063a0:	f3af 8000 	nop.w
 80063a4:	1c42      	adds	r2, r0, #1
 80063a6:	4606      	mov	r6, r0
 80063a8:	d1d6      	bne.n	8006358 <_svfiprintf_r+0x174>
 80063aa:	89ab      	ldrh	r3, [r5, #12]
 80063ac:	065b      	lsls	r3, r3, #25
 80063ae:	f53f af2d 	bmi.w	800620c <_svfiprintf_r+0x28>
 80063b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063b4:	e72c      	b.n	8006210 <_svfiprintf_r+0x2c>
 80063b6:	ab03      	add	r3, sp, #12
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	462a      	mov	r2, r5
 80063bc:	4638      	mov	r0, r7
 80063be:	4b06      	ldr	r3, [pc, #24]	@ (80063d8 <_svfiprintf_r+0x1f4>)
 80063c0:	a904      	add	r1, sp, #16
 80063c2:	f000 f91f 	bl	8006604 <_printf_i>
 80063c6:	e7ed      	b.n	80063a4 <_svfiprintf_r+0x1c0>
 80063c8:	080070de 	.word	0x080070de
 80063cc:	080070e4 	.word	0x080070e4
 80063d0:	080070e8 	.word	0x080070e8
 80063d4:	00000000 	.word	0x00000000
 80063d8:	0800612d 	.word	0x0800612d

080063dc <sbrk_aligned>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	4e0f      	ldr	r6, [pc, #60]	@ (800641c <sbrk_aligned+0x40>)
 80063e0:	460c      	mov	r4, r1
 80063e2:	6831      	ldr	r1, [r6, #0]
 80063e4:	4605      	mov	r5, r0
 80063e6:	b911      	cbnz	r1, 80063ee <sbrk_aligned+0x12>
 80063e8:	f000 fa80 	bl	80068ec <_sbrk_r>
 80063ec:	6030      	str	r0, [r6, #0]
 80063ee:	4621      	mov	r1, r4
 80063f0:	4628      	mov	r0, r5
 80063f2:	f000 fa7b 	bl	80068ec <_sbrk_r>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	d103      	bne.n	8006402 <sbrk_aligned+0x26>
 80063fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80063fe:	4620      	mov	r0, r4
 8006400:	bd70      	pop	{r4, r5, r6, pc}
 8006402:	1cc4      	adds	r4, r0, #3
 8006404:	f024 0403 	bic.w	r4, r4, #3
 8006408:	42a0      	cmp	r0, r4
 800640a:	d0f8      	beq.n	80063fe <sbrk_aligned+0x22>
 800640c:	1a21      	subs	r1, r4, r0
 800640e:	4628      	mov	r0, r5
 8006410:	f000 fa6c 	bl	80068ec <_sbrk_r>
 8006414:	3001      	adds	r0, #1
 8006416:	d1f2      	bne.n	80063fe <sbrk_aligned+0x22>
 8006418:	e7ef      	b.n	80063fa <sbrk_aligned+0x1e>
 800641a:	bf00      	nop
 800641c:	20000318 	.word	0x20000318

08006420 <_malloc_r>:
 8006420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006424:	1ccd      	adds	r5, r1, #3
 8006426:	f025 0503 	bic.w	r5, r5, #3
 800642a:	3508      	adds	r5, #8
 800642c:	2d0c      	cmp	r5, #12
 800642e:	bf38      	it	cc
 8006430:	250c      	movcc	r5, #12
 8006432:	2d00      	cmp	r5, #0
 8006434:	4606      	mov	r6, r0
 8006436:	db01      	blt.n	800643c <_malloc_r+0x1c>
 8006438:	42a9      	cmp	r1, r5
 800643a:	d904      	bls.n	8006446 <_malloc_r+0x26>
 800643c:	230c      	movs	r3, #12
 800643e:	6033      	str	r3, [r6, #0]
 8006440:	2000      	movs	r0, #0
 8006442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800651c <_malloc_r+0xfc>
 800644a:	f000 f9fb 	bl	8006844 <__malloc_lock>
 800644e:	f8d8 3000 	ldr.w	r3, [r8]
 8006452:	461c      	mov	r4, r3
 8006454:	bb44      	cbnz	r4, 80064a8 <_malloc_r+0x88>
 8006456:	4629      	mov	r1, r5
 8006458:	4630      	mov	r0, r6
 800645a:	f7ff ffbf 	bl	80063dc <sbrk_aligned>
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	4604      	mov	r4, r0
 8006462:	d158      	bne.n	8006516 <_malloc_r+0xf6>
 8006464:	f8d8 4000 	ldr.w	r4, [r8]
 8006468:	4627      	mov	r7, r4
 800646a:	2f00      	cmp	r7, #0
 800646c:	d143      	bne.n	80064f6 <_malloc_r+0xd6>
 800646e:	2c00      	cmp	r4, #0
 8006470:	d04b      	beq.n	800650a <_malloc_r+0xea>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	4639      	mov	r1, r7
 8006476:	4630      	mov	r0, r6
 8006478:	eb04 0903 	add.w	r9, r4, r3
 800647c:	f000 fa36 	bl	80068ec <_sbrk_r>
 8006480:	4581      	cmp	r9, r0
 8006482:	d142      	bne.n	800650a <_malloc_r+0xea>
 8006484:	6821      	ldr	r1, [r4, #0]
 8006486:	4630      	mov	r0, r6
 8006488:	1a6d      	subs	r5, r5, r1
 800648a:	4629      	mov	r1, r5
 800648c:	f7ff ffa6 	bl	80063dc <sbrk_aligned>
 8006490:	3001      	adds	r0, #1
 8006492:	d03a      	beq.n	800650a <_malloc_r+0xea>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	442b      	add	r3, r5
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	f8d8 3000 	ldr.w	r3, [r8]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	bb62      	cbnz	r2, 80064fc <_malloc_r+0xdc>
 80064a2:	f8c8 7000 	str.w	r7, [r8]
 80064a6:	e00f      	b.n	80064c8 <_malloc_r+0xa8>
 80064a8:	6822      	ldr	r2, [r4, #0]
 80064aa:	1b52      	subs	r2, r2, r5
 80064ac:	d420      	bmi.n	80064f0 <_malloc_r+0xd0>
 80064ae:	2a0b      	cmp	r2, #11
 80064b0:	d917      	bls.n	80064e2 <_malloc_r+0xc2>
 80064b2:	1961      	adds	r1, r4, r5
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	6025      	str	r5, [r4, #0]
 80064b8:	bf18      	it	ne
 80064ba:	6059      	strne	r1, [r3, #4]
 80064bc:	6863      	ldr	r3, [r4, #4]
 80064be:	bf08      	it	eq
 80064c0:	f8c8 1000 	streq.w	r1, [r8]
 80064c4:	5162      	str	r2, [r4, r5]
 80064c6:	604b      	str	r3, [r1, #4]
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f9c1 	bl	8006850 <__malloc_unlock>
 80064ce:	f104 000b 	add.w	r0, r4, #11
 80064d2:	1d23      	adds	r3, r4, #4
 80064d4:	f020 0007 	bic.w	r0, r0, #7
 80064d8:	1ac2      	subs	r2, r0, r3
 80064da:	bf1c      	itt	ne
 80064dc:	1a1b      	subne	r3, r3, r0
 80064de:	50a3      	strne	r3, [r4, r2]
 80064e0:	e7af      	b.n	8006442 <_malloc_r+0x22>
 80064e2:	6862      	ldr	r2, [r4, #4]
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	bf0c      	ite	eq
 80064e8:	f8c8 2000 	streq.w	r2, [r8]
 80064ec:	605a      	strne	r2, [r3, #4]
 80064ee:	e7eb      	b.n	80064c8 <_malloc_r+0xa8>
 80064f0:	4623      	mov	r3, r4
 80064f2:	6864      	ldr	r4, [r4, #4]
 80064f4:	e7ae      	b.n	8006454 <_malloc_r+0x34>
 80064f6:	463c      	mov	r4, r7
 80064f8:	687f      	ldr	r7, [r7, #4]
 80064fa:	e7b6      	b.n	800646a <_malloc_r+0x4a>
 80064fc:	461a      	mov	r2, r3
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	42a3      	cmp	r3, r4
 8006502:	d1fb      	bne.n	80064fc <_malloc_r+0xdc>
 8006504:	2300      	movs	r3, #0
 8006506:	6053      	str	r3, [r2, #4]
 8006508:	e7de      	b.n	80064c8 <_malloc_r+0xa8>
 800650a:	230c      	movs	r3, #12
 800650c:	4630      	mov	r0, r6
 800650e:	6033      	str	r3, [r6, #0]
 8006510:	f000 f99e 	bl	8006850 <__malloc_unlock>
 8006514:	e794      	b.n	8006440 <_malloc_r+0x20>
 8006516:	6005      	str	r5, [r0, #0]
 8006518:	e7d6      	b.n	80064c8 <_malloc_r+0xa8>
 800651a:	bf00      	nop
 800651c:	2000031c 	.word	0x2000031c

08006520 <_printf_common>:
 8006520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006524:	4616      	mov	r6, r2
 8006526:	4698      	mov	r8, r3
 8006528:	688a      	ldr	r2, [r1, #8]
 800652a:	690b      	ldr	r3, [r1, #16]
 800652c:	4607      	mov	r7, r0
 800652e:	4293      	cmp	r3, r2
 8006530:	bfb8      	it	lt
 8006532:	4613      	movlt	r3, r2
 8006534:	6033      	str	r3, [r6, #0]
 8006536:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800653a:	460c      	mov	r4, r1
 800653c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006540:	b10a      	cbz	r2, 8006546 <_printf_common+0x26>
 8006542:	3301      	adds	r3, #1
 8006544:	6033      	str	r3, [r6, #0]
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	0699      	lsls	r1, r3, #26
 800654a:	bf42      	ittt	mi
 800654c:	6833      	ldrmi	r3, [r6, #0]
 800654e:	3302      	addmi	r3, #2
 8006550:	6033      	strmi	r3, [r6, #0]
 8006552:	6825      	ldr	r5, [r4, #0]
 8006554:	f015 0506 	ands.w	r5, r5, #6
 8006558:	d106      	bne.n	8006568 <_printf_common+0x48>
 800655a:	f104 0a19 	add.w	sl, r4, #25
 800655e:	68e3      	ldr	r3, [r4, #12]
 8006560:	6832      	ldr	r2, [r6, #0]
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	42ab      	cmp	r3, r5
 8006566:	dc2b      	bgt.n	80065c0 <_printf_common+0xa0>
 8006568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800656c:	6822      	ldr	r2, [r4, #0]
 800656e:	3b00      	subs	r3, #0
 8006570:	bf18      	it	ne
 8006572:	2301      	movne	r3, #1
 8006574:	0692      	lsls	r2, r2, #26
 8006576:	d430      	bmi.n	80065da <_printf_common+0xba>
 8006578:	4641      	mov	r1, r8
 800657a:	4638      	mov	r0, r7
 800657c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006580:	47c8      	blx	r9
 8006582:	3001      	adds	r0, #1
 8006584:	d023      	beq.n	80065ce <_printf_common+0xae>
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	6922      	ldr	r2, [r4, #16]
 800658a:	f003 0306 	and.w	r3, r3, #6
 800658e:	2b04      	cmp	r3, #4
 8006590:	bf14      	ite	ne
 8006592:	2500      	movne	r5, #0
 8006594:	6833      	ldreq	r3, [r6, #0]
 8006596:	f04f 0600 	mov.w	r6, #0
 800659a:	bf08      	it	eq
 800659c:	68e5      	ldreq	r5, [r4, #12]
 800659e:	f104 041a 	add.w	r4, r4, #26
 80065a2:	bf08      	it	eq
 80065a4:	1aed      	subeq	r5, r5, r3
 80065a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80065aa:	bf08      	it	eq
 80065ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b0:	4293      	cmp	r3, r2
 80065b2:	bfc4      	itt	gt
 80065b4:	1a9b      	subgt	r3, r3, r2
 80065b6:	18ed      	addgt	r5, r5, r3
 80065b8:	42b5      	cmp	r5, r6
 80065ba:	d11a      	bne.n	80065f2 <_printf_common+0xd2>
 80065bc:	2000      	movs	r0, #0
 80065be:	e008      	b.n	80065d2 <_printf_common+0xb2>
 80065c0:	2301      	movs	r3, #1
 80065c2:	4652      	mov	r2, sl
 80065c4:	4641      	mov	r1, r8
 80065c6:	4638      	mov	r0, r7
 80065c8:	47c8      	blx	r9
 80065ca:	3001      	adds	r0, #1
 80065cc:	d103      	bne.n	80065d6 <_printf_common+0xb6>
 80065ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d6:	3501      	adds	r5, #1
 80065d8:	e7c1      	b.n	800655e <_printf_common+0x3e>
 80065da:	2030      	movs	r0, #48	@ 0x30
 80065dc:	18e1      	adds	r1, r4, r3
 80065de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065e8:	4422      	add	r2, r4
 80065ea:	3302      	adds	r3, #2
 80065ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065f0:	e7c2      	b.n	8006578 <_printf_common+0x58>
 80065f2:	2301      	movs	r3, #1
 80065f4:	4622      	mov	r2, r4
 80065f6:	4641      	mov	r1, r8
 80065f8:	4638      	mov	r0, r7
 80065fa:	47c8      	blx	r9
 80065fc:	3001      	adds	r0, #1
 80065fe:	d0e6      	beq.n	80065ce <_printf_common+0xae>
 8006600:	3601      	adds	r6, #1
 8006602:	e7d9      	b.n	80065b8 <_printf_common+0x98>

08006604 <_printf_i>:
 8006604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	7e0f      	ldrb	r7, [r1, #24]
 800660a:	4691      	mov	r9, r2
 800660c:	2f78      	cmp	r7, #120	@ 0x78
 800660e:	4680      	mov	r8, r0
 8006610:	460c      	mov	r4, r1
 8006612:	469a      	mov	sl, r3
 8006614:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006616:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800661a:	d807      	bhi.n	800662c <_printf_i+0x28>
 800661c:	2f62      	cmp	r7, #98	@ 0x62
 800661e:	d80a      	bhi.n	8006636 <_printf_i+0x32>
 8006620:	2f00      	cmp	r7, #0
 8006622:	f000 80d3 	beq.w	80067cc <_printf_i+0x1c8>
 8006626:	2f58      	cmp	r7, #88	@ 0x58
 8006628:	f000 80ba 	beq.w	80067a0 <_printf_i+0x19c>
 800662c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006630:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006634:	e03a      	b.n	80066ac <_printf_i+0xa8>
 8006636:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800663a:	2b15      	cmp	r3, #21
 800663c:	d8f6      	bhi.n	800662c <_printf_i+0x28>
 800663e:	a101      	add	r1, pc, #4	@ (adr r1, 8006644 <_printf_i+0x40>)
 8006640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006644:	0800669d 	.word	0x0800669d
 8006648:	080066b1 	.word	0x080066b1
 800664c:	0800662d 	.word	0x0800662d
 8006650:	0800662d 	.word	0x0800662d
 8006654:	0800662d 	.word	0x0800662d
 8006658:	0800662d 	.word	0x0800662d
 800665c:	080066b1 	.word	0x080066b1
 8006660:	0800662d 	.word	0x0800662d
 8006664:	0800662d 	.word	0x0800662d
 8006668:	0800662d 	.word	0x0800662d
 800666c:	0800662d 	.word	0x0800662d
 8006670:	080067b3 	.word	0x080067b3
 8006674:	080066db 	.word	0x080066db
 8006678:	0800676d 	.word	0x0800676d
 800667c:	0800662d 	.word	0x0800662d
 8006680:	0800662d 	.word	0x0800662d
 8006684:	080067d5 	.word	0x080067d5
 8006688:	0800662d 	.word	0x0800662d
 800668c:	080066db 	.word	0x080066db
 8006690:	0800662d 	.word	0x0800662d
 8006694:	0800662d 	.word	0x0800662d
 8006698:	08006775 	.word	0x08006775
 800669c:	6833      	ldr	r3, [r6, #0]
 800669e:	1d1a      	adds	r2, r3, #4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6032      	str	r2, [r6, #0]
 80066a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066ac:	2301      	movs	r3, #1
 80066ae:	e09e      	b.n	80067ee <_printf_i+0x1ea>
 80066b0:	6833      	ldr	r3, [r6, #0]
 80066b2:	6820      	ldr	r0, [r4, #0]
 80066b4:	1d19      	adds	r1, r3, #4
 80066b6:	6031      	str	r1, [r6, #0]
 80066b8:	0606      	lsls	r6, r0, #24
 80066ba:	d501      	bpl.n	80066c0 <_printf_i+0xbc>
 80066bc:	681d      	ldr	r5, [r3, #0]
 80066be:	e003      	b.n	80066c8 <_printf_i+0xc4>
 80066c0:	0645      	lsls	r5, r0, #25
 80066c2:	d5fb      	bpl.n	80066bc <_printf_i+0xb8>
 80066c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066c8:	2d00      	cmp	r5, #0
 80066ca:	da03      	bge.n	80066d4 <_printf_i+0xd0>
 80066cc:	232d      	movs	r3, #45	@ 0x2d
 80066ce:	426d      	negs	r5, r5
 80066d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066d4:	230a      	movs	r3, #10
 80066d6:	4859      	ldr	r0, [pc, #356]	@ (800683c <_printf_i+0x238>)
 80066d8:	e011      	b.n	80066fe <_printf_i+0xfa>
 80066da:	6821      	ldr	r1, [r4, #0]
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	0608      	lsls	r0, r1, #24
 80066e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80066e4:	d402      	bmi.n	80066ec <_printf_i+0xe8>
 80066e6:	0649      	lsls	r1, r1, #25
 80066e8:	bf48      	it	mi
 80066ea:	b2ad      	uxthmi	r5, r5
 80066ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80066ee:	6033      	str	r3, [r6, #0]
 80066f0:	bf14      	ite	ne
 80066f2:	230a      	movne	r3, #10
 80066f4:	2308      	moveq	r3, #8
 80066f6:	4851      	ldr	r0, [pc, #324]	@ (800683c <_printf_i+0x238>)
 80066f8:	2100      	movs	r1, #0
 80066fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066fe:	6866      	ldr	r6, [r4, #4]
 8006700:	2e00      	cmp	r6, #0
 8006702:	bfa8      	it	ge
 8006704:	6821      	ldrge	r1, [r4, #0]
 8006706:	60a6      	str	r6, [r4, #8]
 8006708:	bfa4      	itt	ge
 800670a:	f021 0104 	bicge.w	r1, r1, #4
 800670e:	6021      	strge	r1, [r4, #0]
 8006710:	b90d      	cbnz	r5, 8006716 <_printf_i+0x112>
 8006712:	2e00      	cmp	r6, #0
 8006714:	d04b      	beq.n	80067ae <_printf_i+0x1aa>
 8006716:	4616      	mov	r6, r2
 8006718:	fbb5 f1f3 	udiv	r1, r5, r3
 800671c:	fb03 5711 	mls	r7, r3, r1, r5
 8006720:	5dc7      	ldrb	r7, [r0, r7]
 8006722:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006726:	462f      	mov	r7, r5
 8006728:	42bb      	cmp	r3, r7
 800672a:	460d      	mov	r5, r1
 800672c:	d9f4      	bls.n	8006718 <_printf_i+0x114>
 800672e:	2b08      	cmp	r3, #8
 8006730:	d10b      	bne.n	800674a <_printf_i+0x146>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	07df      	lsls	r7, r3, #31
 8006736:	d508      	bpl.n	800674a <_printf_i+0x146>
 8006738:	6923      	ldr	r3, [r4, #16]
 800673a:	6861      	ldr	r1, [r4, #4]
 800673c:	4299      	cmp	r1, r3
 800673e:	bfde      	ittt	le
 8006740:	2330      	movle	r3, #48	@ 0x30
 8006742:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006746:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800674a:	1b92      	subs	r2, r2, r6
 800674c:	6122      	str	r2, [r4, #16]
 800674e:	464b      	mov	r3, r9
 8006750:	4621      	mov	r1, r4
 8006752:	4640      	mov	r0, r8
 8006754:	f8cd a000 	str.w	sl, [sp]
 8006758:	aa03      	add	r2, sp, #12
 800675a:	f7ff fee1 	bl	8006520 <_printf_common>
 800675e:	3001      	adds	r0, #1
 8006760:	d14a      	bne.n	80067f8 <_printf_i+0x1f4>
 8006762:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006766:	b004      	add	sp, #16
 8006768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	f043 0320 	orr.w	r3, r3, #32
 8006772:	6023      	str	r3, [r4, #0]
 8006774:	2778      	movs	r7, #120	@ 0x78
 8006776:	4832      	ldr	r0, [pc, #200]	@ (8006840 <_printf_i+0x23c>)
 8006778:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	6831      	ldr	r1, [r6, #0]
 8006780:	061f      	lsls	r7, r3, #24
 8006782:	f851 5b04 	ldr.w	r5, [r1], #4
 8006786:	d402      	bmi.n	800678e <_printf_i+0x18a>
 8006788:	065f      	lsls	r7, r3, #25
 800678a:	bf48      	it	mi
 800678c:	b2ad      	uxthmi	r5, r5
 800678e:	6031      	str	r1, [r6, #0]
 8006790:	07d9      	lsls	r1, r3, #31
 8006792:	bf44      	itt	mi
 8006794:	f043 0320 	orrmi.w	r3, r3, #32
 8006798:	6023      	strmi	r3, [r4, #0]
 800679a:	b11d      	cbz	r5, 80067a4 <_printf_i+0x1a0>
 800679c:	2310      	movs	r3, #16
 800679e:	e7ab      	b.n	80066f8 <_printf_i+0xf4>
 80067a0:	4826      	ldr	r0, [pc, #152]	@ (800683c <_printf_i+0x238>)
 80067a2:	e7e9      	b.n	8006778 <_printf_i+0x174>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	f023 0320 	bic.w	r3, r3, #32
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	e7f6      	b.n	800679c <_printf_i+0x198>
 80067ae:	4616      	mov	r6, r2
 80067b0:	e7bd      	b.n	800672e <_printf_i+0x12a>
 80067b2:	6833      	ldr	r3, [r6, #0]
 80067b4:	6825      	ldr	r5, [r4, #0]
 80067b6:	1d18      	adds	r0, r3, #4
 80067b8:	6961      	ldr	r1, [r4, #20]
 80067ba:	6030      	str	r0, [r6, #0]
 80067bc:	062e      	lsls	r6, r5, #24
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	d501      	bpl.n	80067c6 <_printf_i+0x1c2>
 80067c2:	6019      	str	r1, [r3, #0]
 80067c4:	e002      	b.n	80067cc <_printf_i+0x1c8>
 80067c6:	0668      	lsls	r0, r5, #25
 80067c8:	d5fb      	bpl.n	80067c2 <_printf_i+0x1be>
 80067ca:	8019      	strh	r1, [r3, #0]
 80067cc:	2300      	movs	r3, #0
 80067ce:	4616      	mov	r6, r2
 80067d0:	6123      	str	r3, [r4, #16]
 80067d2:	e7bc      	b.n	800674e <_printf_i+0x14a>
 80067d4:	6833      	ldr	r3, [r6, #0]
 80067d6:	2100      	movs	r1, #0
 80067d8:	1d1a      	adds	r2, r3, #4
 80067da:	6032      	str	r2, [r6, #0]
 80067dc:	681e      	ldr	r6, [r3, #0]
 80067de:	6862      	ldr	r2, [r4, #4]
 80067e0:	4630      	mov	r0, r6
 80067e2:	f000 f893 	bl	800690c <memchr>
 80067e6:	b108      	cbz	r0, 80067ec <_printf_i+0x1e8>
 80067e8:	1b80      	subs	r0, r0, r6
 80067ea:	6060      	str	r0, [r4, #4]
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	6123      	str	r3, [r4, #16]
 80067f0:	2300      	movs	r3, #0
 80067f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067f6:	e7aa      	b.n	800674e <_printf_i+0x14a>
 80067f8:	4632      	mov	r2, r6
 80067fa:	4649      	mov	r1, r9
 80067fc:	4640      	mov	r0, r8
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	47d0      	blx	sl
 8006802:	3001      	adds	r0, #1
 8006804:	d0ad      	beq.n	8006762 <_printf_i+0x15e>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	079b      	lsls	r3, r3, #30
 800680a:	d413      	bmi.n	8006834 <_printf_i+0x230>
 800680c:	68e0      	ldr	r0, [r4, #12]
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	4298      	cmp	r0, r3
 8006812:	bfb8      	it	lt
 8006814:	4618      	movlt	r0, r3
 8006816:	e7a6      	b.n	8006766 <_printf_i+0x162>
 8006818:	2301      	movs	r3, #1
 800681a:	4632      	mov	r2, r6
 800681c:	4649      	mov	r1, r9
 800681e:	4640      	mov	r0, r8
 8006820:	47d0      	blx	sl
 8006822:	3001      	adds	r0, #1
 8006824:	d09d      	beq.n	8006762 <_printf_i+0x15e>
 8006826:	3501      	adds	r5, #1
 8006828:	68e3      	ldr	r3, [r4, #12]
 800682a:	9903      	ldr	r1, [sp, #12]
 800682c:	1a5b      	subs	r3, r3, r1
 800682e:	42ab      	cmp	r3, r5
 8006830:	dcf2      	bgt.n	8006818 <_printf_i+0x214>
 8006832:	e7eb      	b.n	800680c <_printf_i+0x208>
 8006834:	2500      	movs	r5, #0
 8006836:	f104 0619 	add.w	r6, r4, #25
 800683a:	e7f5      	b.n	8006828 <_printf_i+0x224>
 800683c:	080070ef 	.word	0x080070ef
 8006840:	08007100 	.word	0x08007100

08006844 <__malloc_lock>:
 8006844:	4801      	ldr	r0, [pc, #4]	@ (800684c <__malloc_lock+0x8>)
 8006846:	f7ff bc6f 	b.w	8006128 <__retarget_lock_acquire_recursive>
 800684a:	bf00      	nop
 800684c:	20000314 	.word	0x20000314

08006850 <__malloc_unlock>:
 8006850:	4801      	ldr	r0, [pc, #4]	@ (8006858 <__malloc_unlock+0x8>)
 8006852:	f7ff bc6a 	b.w	800612a <__retarget_lock_release_recursive>
 8006856:	bf00      	nop
 8006858:	20000314 	.word	0x20000314

0800685c <_realloc_r>:
 800685c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006860:	4680      	mov	r8, r0
 8006862:	4615      	mov	r5, r2
 8006864:	460c      	mov	r4, r1
 8006866:	b921      	cbnz	r1, 8006872 <_realloc_r+0x16>
 8006868:	4611      	mov	r1, r2
 800686a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800686e:	f7ff bdd7 	b.w	8006420 <_malloc_r>
 8006872:	b92a      	cbnz	r2, 8006880 <_realloc_r+0x24>
 8006874:	f000 f866 	bl	8006944 <_free_r>
 8006878:	2400      	movs	r4, #0
 800687a:	4620      	mov	r0, r4
 800687c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006880:	f000 f8a8 	bl	80069d4 <_malloc_usable_size_r>
 8006884:	4285      	cmp	r5, r0
 8006886:	4606      	mov	r6, r0
 8006888:	d802      	bhi.n	8006890 <_realloc_r+0x34>
 800688a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800688e:	d8f4      	bhi.n	800687a <_realloc_r+0x1e>
 8006890:	4629      	mov	r1, r5
 8006892:	4640      	mov	r0, r8
 8006894:	f7ff fdc4 	bl	8006420 <_malloc_r>
 8006898:	4607      	mov	r7, r0
 800689a:	2800      	cmp	r0, #0
 800689c:	d0ec      	beq.n	8006878 <_realloc_r+0x1c>
 800689e:	42b5      	cmp	r5, r6
 80068a0:	462a      	mov	r2, r5
 80068a2:	4621      	mov	r1, r4
 80068a4:	bf28      	it	cs
 80068a6:	4632      	movcs	r2, r6
 80068a8:	f000 f83e 	bl	8006928 <memcpy>
 80068ac:	4621      	mov	r1, r4
 80068ae:	4640      	mov	r0, r8
 80068b0:	f000 f848 	bl	8006944 <_free_r>
 80068b4:	463c      	mov	r4, r7
 80068b6:	e7e0      	b.n	800687a <_realloc_r+0x1e>

080068b8 <memmove>:
 80068b8:	4288      	cmp	r0, r1
 80068ba:	b510      	push	{r4, lr}
 80068bc:	eb01 0402 	add.w	r4, r1, r2
 80068c0:	d902      	bls.n	80068c8 <memmove+0x10>
 80068c2:	4284      	cmp	r4, r0
 80068c4:	4623      	mov	r3, r4
 80068c6:	d807      	bhi.n	80068d8 <memmove+0x20>
 80068c8:	1e43      	subs	r3, r0, #1
 80068ca:	42a1      	cmp	r1, r4
 80068cc:	d008      	beq.n	80068e0 <memmove+0x28>
 80068ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068d6:	e7f8      	b.n	80068ca <memmove+0x12>
 80068d8:	4601      	mov	r1, r0
 80068da:	4402      	add	r2, r0
 80068dc:	428a      	cmp	r2, r1
 80068de:	d100      	bne.n	80068e2 <memmove+0x2a>
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068ea:	e7f7      	b.n	80068dc <memmove+0x24>

080068ec <_sbrk_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	2300      	movs	r3, #0
 80068f0:	4d05      	ldr	r5, [pc, #20]	@ (8006908 <_sbrk_r+0x1c>)
 80068f2:	4604      	mov	r4, r0
 80068f4:	4608      	mov	r0, r1
 80068f6:	602b      	str	r3, [r5, #0]
 80068f8:	f7fb fde2 	bl	80024c0 <_sbrk>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d102      	bne.n	8006906 <_sbrk_r+0x1a>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	b103      	cbz	r3, 8006906 <_sbrk_r+0x1a>
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	20000320 	.word	0x20000320

0800690c <memchr>:
 800690c:	4603      	mov	r3, r0
 800690e:	b510      	push	{r4, lr}
 8006910:	b2c9      	uxtb	r1, r1
 8006912:	4402      	add	r2, r0
 8006914:	4293      	cmp	r3, r2
 8006916:	4618      	mov	r0, r3
 8006918:	d101      	bne.n	800691e <memchr+0x12>
 800691a:	2000      	movs	r0, #0
 800691c:	e003      	b.n	8006926 <memchr+0x1a>
 800691e:	7804      	ldrb	r4, [r0, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	428c      	cmp	r4, r1
 8006924:	d1f6      	bne.n	8006914 <memchr+0x8>
 8006926:	bd10      	pop	{r4, pc}

08006928 <memcpy>:
 8006928:	440a      	add	r2, r1
 800692a:	4291      	cmp	r1, r2
 800692c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006930:	d100      	bne.n	8006934 <memcpy+0xc>
 8006932:	4770      	bx	lr
 8006934:	b510      	push	{r4, lr}
 8006936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800693a:	4291      	cmp	r1, r2
 800693c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006940:	d1f9      	bne.n	8006936 <memcpy+0xe>
 8006942:	bd10      	pop	{r4, pc}

08006944 <_free_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4605      	mov	r5, r0
 8006948:	2900      	cmp	r1, #0
 800694a:	d040      	beq.n	80069ce <_free_r+0x8a>
 800694c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006950:	1f0c      	subs	r4, r1, #4
 8006952:	2b00      	cmp	r3, #0
 8006954:	bfb8      	it	lt
 8006956:	18e4      	addlt	r4, r4, r3
 8006958:	f7ff ff74 	bl	8006844 <__malloc_lock>
 800695c:	4a1c      	ldr	r2, [pc, #112]	@ (80069d0 <_free_r+0x8c>)
 800695e:	6813      	ldr	r3, [r2, #0]
 8006960:	b933      	cbnz	r3, 8006970 <_free_r+0x2c>
 8006962:	6063      	str	r3, [r4, #4]
 8006964:	6014      	str	r4, [r2, #0]
 8006966:	4628      	mov	r0, r5
 8006968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800696c:	f7ff bf70 	b.w	8006850 <__malloc_unlock>
 8006970:	42a3      	cmp	r3, r4
 8006972:	d908      	bls.n	8006986 <_free_r+0x42>
 8006974:	6820      	ldr	r0, [r4, #0]
 8006976:	1821      	adds	r1, r4, r0
 8006978:	428b      	cmp	r3, r1
 800697a:	bf01      	itttt	eq
 800697c:	6819      	ldreq	r1, [r3, #0]
 800697e:	685b      	ldreq	r3, [r3, #4]
 8006980:	1809      	addeq	r1, r1, r0
 8006982:	6021      	streq	r1, [r4, #0]
 8006984:	e7ed      	b.n	8006962 <_free_r+0x1e>
 8006986:	461a      	mov	r2, r3
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	b10b      	cbz	r3, 8006990 <_free_r+0x4c>
 800698c:	42a3      	cmp	r3, r4
 800698e:	d9fa      	bls.n	8006986 <_free_r+0x42>
 8006990:	6811      	ldr	r1, [r2, #0]
 8006992:	1850      	adds	r0, r2, r1
 8006994:	42a0      	cmp	r0, r4
 8006996:	d10b      	bne.n	80069b0 <_free_r+0x6c>
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	4401      	add	r1, r0
 800699c:	1850      	adds	r0, r2, r1
 800699e:	4283      	cmp	r3, r0
 80069a0:	6011      	str	r1, [r2, #0]
 80069a2:	d1e0      	bne.n	8006966 <_free_r+0x22>
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	4408      	add	r0, r1
 80069aa:	6010      	str	r0, [r2, #0]
 80069ac:	6053      	str	r3, [r2, #4]
 80069ae:	e7da      	b.n	8006966 <_free_r+0x22>
 80069b0:	d902      	bls.n	80069b8 <_free_r+0x74>
 80069b2:	230c      	movs	r3, #12
 80069b4:	602b      	str	r3, [r5, #0]
 80069b6:	e7d6      	b.n	8006966 <_free_r+0x22>
 80069b8:	6820      	ldr	r0, [r4, #0]
 80069ba:	1821      	adds	r1, r4, r0
 80069bc:	428b      	cmp	r3, r1
 80069be:	bf01      	itttt	eq
 80069c0:	6819      	ldreq	r1, [r3, #0]
 80069c2:	685b      	ldreq	r3, [r3, #4]
 80069c4:	1809      	addeq	r1, r1, r0
 80069c6:	6021      	streq	r1, [r4, #0]
 80069c8:	6063      	str	r3, [r4, #4]
 80069ca:	6054      	str	r4, [r2, #4]
 80069cc:	e7cb      	b.n	8006966 <_free_r+0x22>
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	2000031c 	.word	0x2000031c

080069d4 <_malloc_usable_size_r>:
 80069d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d8:	1f18      	subs	r0, r3, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bfbc      	itt	lt
 80069de:	580b      	ldrlt	r3, [r1, r0]
 80069e0:	18c0      	addlt	r0, r0, r3
 80069e2:	4770      	bx	lr

080069e4 <_init>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	bf00      	nop
 80069e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ea:	bc08      	pop	{r3}
 80069ec:	469e      	mov	lr, r3
 80069ee:	4770      	bx	lr

080069f0 <_fini>:
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	bf00      	nop
 80069f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f6:	bc08      	pop	{r3}
 80069f8:	469e      	mov	lr, r3
 80069fa:	4770      	bx	lr
