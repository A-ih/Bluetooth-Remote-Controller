
ELEC3300_Main_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001460  08014528  08014528  00024528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015988  08015988  0006e26c  2**0
                  CONTENTS
  4 .ARM          00000008  08015988  08015988  00025988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015990  08015990  0006e26c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015990  08015990  00025990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015994  08015994  00025994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c0  20000000  08015998  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0006e26c  2**0
                  CONTENTS
 10 .bss          000029b0  200004c0  200004c0  000304c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002e70  20002e70  000304c0  2**0
                  ALLOC
 12 .oiia_audio   0001bef0  68000000  68000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .meow_audio   000094fc  6801bef0  6801bef0  0005bef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .low_battery_audio 00003840  680253ec  680253ec  000653ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .intruder_alert_audio 00005640  68028c2c  68028c2c  00068c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .ARM.attributes 00000030  00000000  00000000  0006e26c  2**0
                  CONTENTS, READONLY
 17 .comment      00000043  00000000  00000000  0006e29c  2**0
                  CONTENTS, READONLY
 18 .debug_info   0002375b  00000000  00000000  0006e2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00005037  00000000  00000000  00091a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00002040  00000000  00000000  00096a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 0000190e  00000000  00000000  00098ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002a709  00000000  00000000  0009a3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0002bc67  00000000  00000000  000c4acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000f129a  00000000  00000000  000f0736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  00009acc  00000000  00000000  001e19d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000078  00000000  00000000  001eb49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004c0 	.word	0x200004c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014510 	.word	0x08014510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004c4 	.word	0x200004c4
 80001cc:	08014510 	.word	0x08014510

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b970 	b.w	8000f20 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0xe2>
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	b143      	cbz	r3, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c78:	f1c3 0220 	rsb	r2, r3, #32
 8000c7c:	409f      	lsls	r7, r3
 8000c7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c82:	4317      	orrs	r7, r2
 8000c84:	409c      	lsls	r4, r3
 8000c86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c8a:	fa1f f58c 	uxth.w	r5, ip
 8000c8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c92:	0c22      	lsrs	r2, r4, #16
 8000c94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c9c:	fb01 f005 	mul.w	r0, r1, r5
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cac:	f080 811c 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f240 8119 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4462      	add	r2, ip
 8000cba:	1a12      	subs	r2, r2, r0
 8000cbc:	b2a4      	uxth	r4, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cca:	fb00 f505 	mul.w	r5, r0, r5
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x90>
 8000cd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x294>
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x294>
 8000ce4:	4464      	add	r4, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11e      	cbz	r6, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40dc      	lsrs	r4, r3
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0xbc>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80ed 	beq.w	8000ee2 <__udivmoddi4+0x28a>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	fab3 f183 	clz	r1, r3
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d149      	bne.n	8000db0 <__udivmoddi4+0x158>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	d302      	bcc.n	8000d26 <__udivmoddi4+0xce>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	f200 80f8 	bhi.w	8000f16 <__udivmoddi4+0x2be>
 8000d26:	1a84      	subs	r4, r0, r2
 8000d28:	eb65 0203 	sbc.w	r2, r5, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d0e2      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	e9c6 4700 	strd	r4, r7, [r6]
 8000d38:	e7df      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xe6>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8090 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2101      	movs	r1, #1
 8000d54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d58:	fb07 2015 	mls	r0, r7, r5, r2
 8000d5c:	0c22      	lsrs	r2, r4, #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb0e f005 	mul.w	r0, lr, r5
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2b8>
 8000d7a:	4645      	mov	r5, r8
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d84:	fb07 2210 	mls	r2, r7, r0, r2
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x14e>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x14c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2c2>
 8000da4:	4610      	mov	r0, r2
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dae:	e79f      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000db0:	f1c1 0720 	rsb	r7, r1, #32
 8000db4:	408b      	lsls	r3, r1
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc6:	40fd      	lsrs	r5, r7
 8000dc8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dda:	0c1c      	lsrs	r4, r3, #16
 8000ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000de0:	fb08 f50e 	mul.w	r5, r8, lr
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	fa00 f001 	lsl.w	r0, r0, r1
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2b4>
 8000dfc:	42a5      	cmp	r5, r4
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2b4>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4464      	add	r4, ip
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	b29d      	uxth	r5, r3
 8000e0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e10:	fb09 4413 	mls	r4, r9, r3, r4
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2e:	3b02      	subs	r3, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fba3 9502 	umull	r9, r5, r3, r2
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46ae      	mov	lr, r5
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x29c>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x298>
 8000e48:	b156      	cbz	r6, 8000e60 <__udivmoddi4+0x208>
 8000e4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e52:	fa04 f707 	lsl.w	r7, r4, r7
 8000e56:	40ca      	lsrs	r2, r1
 8000e58:	40cc      	lsrs	r4, r1
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	f1c3 0120 	rsb	r1, r3, #32
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	fa20 f201 	lsr.w	r2, r0, r1
 8000e74:	fa25 f101 	lsr.w	r1, r5, r1
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1510 	mls	r5, r7, r0, r1
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e92:	fb00 f50e 	mul.w	r5, r0, lr
 8000e96:	428d      	cmp	r5, r1
 8000e98:	fa04 f403 	lsl.w	r4, r4, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x258>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000ea8:	428d      	cmp	r5, r1
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1b49      	subs	r1, r1, r5
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x282>
 8000ec8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ecc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed2:	4291      	cmp	r1, r2
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	4462      	add	r2, ip
 8000eda:	1a52      	subs	r2, r2, r1
 8000edc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0xfc>
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e708      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000ee8:	4639      	mov	r1, r7
 8000eea:	e6e6      	b.n	8000cba <__udivmoddi4+0x62>
 8000eec:	4610      	mov	r0, r2
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x90>
 8000ef0:	4548      	cmp	r0, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000efc:	3b01      	subs	r3, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000f00:	4645      	mov	r5, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x282>
 8000f04:	462b      	mov	r3, r5
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x258>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f10:	3d02      	subs	r5, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f16:	4608      	mov	r0, r1
 8000f18:	e70a      	b.n	8000d30 <__udivmoddi4+0xd8>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x14e>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <MPU6050_init>:
int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;
int16_t Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;
//float Ax, Ay, Az, Gx, Gy, Gz;
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly
void MPU6050_init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af04      	add	r7, sp, #16
	uint8_t check,data;
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1 , 1000);
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	2301      	movs	r3, #1
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2275      	movs	r2, #117	; 0x75
 8000f3c:	21d0      	movs	r1, #208	; 0xd0
 8000f3e:	4823      	ldr	r0, [pc, #140]	; (8000fcc <MPU6050_init+0xa8>)
 8000f40:	f008 fa02 	bl	8009348 <HAL_I2C_Mem_Read>
	if (check == 104)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b68      	cmp	r3, #104	; 0x68
 8000f48:	d13b      	bne.n	8000fc2 <MPU6050_init+0x9e>
	{
		//Power management register write all 0's to wake up sensor
		data = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	9302      	str	r3, [sp, #8]
 8000f54:	2301      	movs	r3, #1
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	1dbb      	adds	r3, r7, #6
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	226b      	movs	r2, #107	; 0x6b
 8000f60:	21d0      	movs	r1, #208	; 0xd0
 8000f62:	481a      	ldr	r0, [pc, #104]	; (8000fcc <MPU6050_init+0xa8>)
 8000f64:	f008 f8f6 	bl	8009154 <HAL_I2C_Mem_Write>
		//Set data rate of 1KHz by writing SMPRT_DIV register
		data = 0x07;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8000f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	2301      	movs	r3, #1
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	1dbb      	adds	r3, r7, #6
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2219      	movs	r2, #25
 8000f7e:	21d0      	movs	r1, #208	; 0xd0
 8000f80:	4812      	ldr	r0, [pc, #72]	; (8000fcc <MPU6050_init+0xa8>)
 8000f82:	f008 f8e7 	bl	8009154 <HAL_I2C_Mem_Write>
		//Writing both register with 0 to set full scale range
		data = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	2301      	movs	r3, #1
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	1dbb      	adds	r3, r7, #6
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	221c      	movs	r2, #28
 8000f9c:	21d0      	movs	r1, #208	; 0xd0
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <MPU6050_init+0xa8>)
 8000fa0:	f008 f8d8 	bl	8009154 <HAL_I2C_Mem_Write>
		
		data = 0x00;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8000fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	1dbb      	adds	r3, r7, #6
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	221b      	movs	r2, #27
 8000fba:	21d0      	movs	r1, #208	; 0xd0
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <MPU6050_init+0xa8>)
 8000fbe:	f008 f8c9 	bl	8009154 <HAL_I2C_Mem_Write>
	}

}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000710 	.word	0x20000710

08000fd0 <MPU6050_Read_Accel>:

//Function with multiple return using pointer

void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	223b      	movs	r2, #59	; 0x3b
 8000ff0:	21d0      	movs	r1, #208	; 0xd0
 8000ff2:	4835      	ldr	r0, [pc, #212]	; (80010c8 <MPU6050_Read_Accel+0xf8>)
 8000ff4:	f008 f9a8 	bl	8009348 <HAL_I2C_Mem_Read>
	//Adding 2 BYTES into 16 bit integer 
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000ff8:	7c3b      	ldrb	r3, [r7, #16]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	7c7b      	ldrb	r3, [r7, #17]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21a      	sxth	r2, r3
 8001006:	4b31      	ldr	r3, [pc, #196]	; (80010cc <MPU6050_Read_Accel+0xfc>)
 8001008:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800100a:	7cbb      	ldrb	r3, [r7, #18]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b21a      	sxth	r2, r3
 8001010:	7cfb      	ldrb	r3, [r7, #19]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21a      	sxth	r2, r3
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <MPU6050_Read_Accel+0x100>)
 800101a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800101c:	7d3b      	ldrb	r3, [r7, #20]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21a      	sxth	r2, r3
 8001022:	7d7b      	ldrb	r3, [r7, #21]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21a      	sxth	r2, r3
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <MPU6050_Read_Accel+0x104>)
 800102c:	801a      	strh	r2, [r3, #0]
	
	*Ax = Accel_X_RAW*100/16384.0;
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <MPU6050_Read_Accel+0xfc>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	461a      	mov	r2, r3
 8001036:	2364      	movs	r3, #100	; 0x64
 8001038:	fb02 f303 	mul.w	r3, r2, r3
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa69 	bl	8000514 <__aeabi_i2d>
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <MPU6050_Read_Accel+0x108>)
 8001048:	f7ff fbf8 	bl	800083c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fd98 	bl	8000b88 <__aeabi_d2f>
 8001058:	4602      	mov	r2, r0
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW*100/16384.0;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MPU6050_Read_Accel+0x100>)
 8001060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001064:	461a      	mov	r2, r3
 8001066:	2364      	movs	r3, #100	; 0x64
 8001068:	fb02 f303 	mul.w	r3, r2, r3
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa51 	bl	8000514 <__aeabi_i2d>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MPU6050_Read_Accel+0x108>)
 8001078:	f7ff fbe0 	bl	800083c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd80 	bl	8000b88 <__aeabi_d2f>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW*100/16384.0;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MPU6050_Read_Accel+0x104>)
 8001090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001094:	461a      	mov	r2, r3
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	fb02 f303 	mul.w	r3, r2, r3
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa39 	bl	8000514 <__aeabi_i2d>
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MPU6050_Read_Accel+0x108>)
 80010a8:	f7ff fbc8 	bl	800083c <__aeabi_ddiv>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fd68 	bl	8000b88 <__aeabi_d2f>
 80010b8:	4602      	mov	r2, r0
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	601a      	str	r2, [r3, #0]
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000710 	.word	0x20000710
 80010cc:	200004dc 	.word	0x200004dc
 80010d0:	200004de 	.word	0x200004de
 80010d4:	200004e0 	.word	0x200004e0
 80010d8:	40d00000 	.word	0x40d00000

080010dc <SD_Init>:
#include "SDcard.h"


// Mounts the SD card
SDcard_STATUS SD_Init() {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	FRESULT res = f_mount(&SDFatFS, SDPath, 1);
 80010e2:	2201      	movs	r2, #1
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <SD_Init+0x28>)
 80010e6:	4808      	ldr	r0, [pc, #32]	; (8001108 <SD_Init+0x2c>)
 80010e8:	f00f f8b0 	bl	801024c <f_mount>
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]

	if (res == FR_OK) {
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <SD_Init+0x1e>
		return SDcard_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <SD_Init+0x20>
	}
	return SDcard_FAIL;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000a84 	.word	0x20000a84
 8001108:	20000a88 	.word	0x20000a88

0800110c <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af04      	add	r7, sp, #16
 8001112:	4603      	mov	r3, r0
 8001114:	460a      	mov	r2, r1
 8001116:	71fb      	strb	r3, [r7, #7]
 8001118:	4613      	mov	r3, r2
 800111a:	71bb      	strb	r3, [r7, #6]

  msgBuffer[0] = value; // Assign the value to the buffer.
 800111c:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <writeReg+0x44>)
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	7013      	strb	r3, [r2, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <writeReg+0x48>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b299      	uxth	r1, r3
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	b29a      	uxth	r2, r3
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	2301      	movs	r3, #1
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <writeReg+0x44>)
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <writeReg+0x4c>)
 800113c:	f008 f80a 	bl	8009154 <HAL_I2C_Mem_Write>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <writeReg+0x50>)
 8001146:	701a      	strb	r2, [r3, #0]
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000544 	.word	0x20000544
 8001154:	20000000 	.word	0x20000000
 8001158:	200004f0 	.word	0x200004f0
 800115c:	20000548 	.word	0x20000548

08001160 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af04      	add	r7, sp, #16
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	80bb      	strh	r3, [r7, #4]
 8001170:	88ba      	ldrh	r2, [r7, #4]

  memcpy(msgBuffer, &value, 2); // Assign the value to the buffer.
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <writeReg16Bit+0x44>)
 8001174:	801a      	strh	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <writeReg16Bit+0x48>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b299      	uxth	r1, r3
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	b29a      	uxth	r2, r3
 8001180:	2364      	movs	r3, #100	; 0x64
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2302      	movs	r3, #2
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <writeReg16Bit+0x44>)
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	4807      	ldr	r0, [pc, #28]	; (80011ac <writeReg16Bit+0x4c>)
 8001190:	f007 ffe0 	bl	8009154 <HAL_I2C_Mem_Write>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <writeReg16Bit+0x50>)
 800119a:	701a      	strb	r2, [r3, #0]
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000544 	.word	0x20000544
 80011a8:	20000000 	.word	0x20000000
 80011ac:	200004f0 	.word	0x200004f0
 80011b0:	20000548 	.word	0x20000548

080011b4 <readReg>:
  memcpy(msgBuffer, &value, 4); // Assign the value to the buffer.
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af04      	add	r7, sp, #16
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <readReg+0x48>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	b299      	uxth	r1, r3
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <readReg+0x4c>)
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <readReg+0x50>)
 80011de:	f008 f8b3 	bl	8009348 <HAL_I2C_Mem_Read>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <readReg+0x54>)
 80011e8:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <readReg+0x4c>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	73fb      	strb	r3, [r7, #15]

  return value;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000544 	.word	0x20000544
 8001204:	200004f0 	.word	0x200004f0
 8001208:	20000548 	.word	0x20000548

0800120c <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af04      	add	r7, sp, #16
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  uint16_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <readReg16Bit+0x48>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	b299      	uxth	r1, r3
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	b29a      	uxth	r2, r3
 8001226:	2364      	movs	r3, #100	; 0x64
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2302      	movs	r3, #2
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <readReg16Bit+0x4c>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <readReg16Bit+0x50>)
 8001236:	f008 f887 	bl	8009348 <HAL_I2C_Mem_Read>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <readReg16Bit+0x54>)
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <readReg16Bit+0x4c>)
 8001244:	881b      	ldrh	r3, [r3, #0]
  memcpy(&value, msgBuffer, 2);
 8001246:	81fb      	strh	r3, [r7, #14]

  return value;
 8001248:	89fb      	ldrh	r3, [r7, #14]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000
 8001258:	20000544 	.word	0x20000544
 800125c:	200004f0 	.word	0x200004f0
 8001260:	20000548 	.word	0x20000548

08001264 <writeMulti>:
  return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count){
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af04      	add	r7, sp, #16
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	4613      	mov	r3, r2
 8001272:	71bb      	strb	r3, [r7, #6]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3

  memcpy(msgBuffer, src, 4);
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <writeMulti+0x4c>)
 800127c:	601a      	str	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <writeMulti+0x50>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b299      	uxth	r1, r3
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	b29a      	uxth	r2, r3
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	b29b      	uxth	r3, r3
 800128c:	2064      	movs	r0, #100	; 0x64
 800128e:	9002      	str	r0, [sp, #8]
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <writeMulti+0x4c>)
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	4807      	ldr	r0, [pc, #28]	; (80012b8 <writeMulti+0x54>)
 800129a:	f007 ff5b 	bl	8009154 <HAL_I2C_Mem_Write>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <writeMulti+0x58>)
 80012a4:	701a      	strb	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000544 	.word	0x20000544
 80012b4:	20000000 	.word	0x20000000
 80012b8:	200004f0 	.word	0x200004f0
 80012bc:	20000548 	.word	0x20000548

080012c0 <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <readMulti+0x48>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	b299      	uxth	r1, r3
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	2064      	movs	r0, #100	; 0x64
 80012e6:	9002      	str	r0, [sp, #8]
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	4806      	ldr	r0, [pc, #24]	; (800130c <readMulti+0x4c>)
 80012f2:	f008 f829 	bl	8009348 <HAL_I2C_Mem_Read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <readMulti+0x50>)
 80012fc:	701a      	strb	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000000 	.word	0x20000000
 800130c:	200004f0 	.word	0x200004f0
 8001310:	20000548 	.word	0x20000548

08001314 <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool initVL53L0X(bool io_2v8, I2C_HandleTypeDef *handler){
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  // VL53L0X_DataInit() begin

  // Handler
  memcpy(&VL53L0X_I2C_Handler, handler, sizeof(*handler));
 8001320:	2254      	movs	r2, #84	; 0x54
 8001322:	6839      	ldr	r1, [r7, #0]
 8001324:	4854      	ldr	r0, [pc, #336]	; (8001478 <initVL53L0X+0x164>)
 8001326:	f00f feaf 	bl	8011088 <memcpy>

  // Reset the message buffer.
  msgBuffer[0] = 0;
 800132a:	4b54      	ldr	r3, [pc, #336]	; (800147c <initVL53L0X+0x168>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = 0;
 8001330:	4b52      	ldr	r3, [pc, #328]	; (800147c <initVL53L0X+0x168>)
 8001332:	2200      	movs	r2, #0
 8001334:	705a      	strb	r2, [r3, #1]
  msgBuffer[2] = 0;
 8001336:	4b51      	ldr	r3, [pc, #324]	; (800147c <initVL53L0X+0x168>)
 8001338:	2200      	movs	r2, #0
 800133a:	709a      	strb	r2, [r3, #2]
  msgBuffer[3] = 0;
 800133c:	4b4f      	ldr	r3, [pc, #316]	; (800147c <initVL53L0X+0x168>)
 800133e:	2200      	movs	r2, #0
 8001340:	70da      	strb	r2, [r3, #3]

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00a      	beq.n	800135e <initVL53L0X+0x4a>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8001348:	2089      	movs	r0, #137	; 0x89
 800134a:	f7ff ff33 	bl	80011b4 <readReg>
 800134e:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4619      	mov	r1, r3
 8001358:	2089      	movs	r0, #137	; 0x89
 800135a:	f7ff fed7 	bl	800110c <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 800135e:	2100      	movs	r1, #0
 8001360:	2088      	movs	r0, #136	; 0x88
 8001362:	f7ff fed3 	bl	800110c <writeReg>

  writeReg(0x80, 0x01);
 8001366:	2101      	movs	r1, #1
 8001368:	2080      	movs	r0, #128	; 0x80
 800136a:	f7ff fecf 	bl	800110c <writeReg>
  writeReg(0xFF, 0x01);
 800136e:	2101      	movs	r1, #1
 8001370:	20ff      	movs	r0, #255	; 0xff
 8001372:	f7ff fecb 	bl	800110c <writeReg>
  writeReg(0x00, 0x00);
 8001376:	2100      	movs	r1, #0
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fec7 	bl	800110c <writeReg>
  g_stopVariable = readReg(0x91);
 800137e:	2091      	movs	r0, #145	; 0x91
 8001380:	f7ff ff18 	bl	80011b4 <readReg>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <initVL53L0X+0x16c>)
 800138a:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 800138c:	2101      	movs	r1, #1
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff febc 	bl	800110c <writeReg>
  writeReg(0xFF, 0x00);
 8001394:	2100      	movs	r1, #0
 8001396:	20ff      	movs	r0, #255	; 0xff
 8001398:	f7ff feb8 	bl	800110c <writeReg>
  writeReg(0x80, 0x00);
 800139c:	2100      	movs	r1, #0
 800139e:	2080      	movs	r0, #128	; 0x80
 80013a0:	f7ff feb4 	bl	800110c <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80013a4:	2060      	movs	r0, #96	; 0x60
 80013a6:	f7ff ff05 	bl	80011b4 <readReg>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f043 0312 	orr.w	r3, r3, #18
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	2060      	movs	r0, #96	; 0x60
 80013b6:	f7ff fea9 	bl	800110c <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80013ba:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80013be:	f000 fa07 	bl	80017d0 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80013c2:	21ff      	movs	r1, #255	; 0xff
 80013c4:	2001      	movs	r0, #1
 80013c6:	f7ff fea1 	bl	800110c <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80013ca:	f107 0213 	add.w	r2, r7, #19
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fd6d 	bl	8001eb4 <getSpadInfo>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <initVL53L0X+0xd0>
 80013e0:	2300      	movs	r3, #0
 80013e2:	e1ee      	b.n	80017c2 <initVL53L0X+0x4ae>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2206      	movs	r2, #6
 80013ea:	4619      	mov	r1, r3
 80013ec:	20b0      	movs	r0, #176	; 0xb0
 80013ee:	f7ff ff67 	bl	80012c0 <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80013f2:	2101      	movs	r1, #1
 80013f4:	20ff      	movs	r0, #255	; 0xff
 80013f6:	f7ff fe89 	bl	800110c <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80013fa:	2100      	movs	r1, #0
 80013fc:	204f      	movs	r0, #79	; 0x4f
 80013fe:	f7ff fe85 	bl	800110c <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001402:	212c      	movs	r1, #44	; 0x2c
 8001404:	204e      	movs	r0, #78	; 0x4e
 8001406:	f7ff fe81 	bl	800110c <writeReg>
  writeReg(0xFF, 0x00);
 800140a:	2100      	movs	r1, #0
 800140c:	20ff      	movs	r0, #255	; 0xff
 800140e:	f7ff fe7d 	bl	800110c <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001412:	21b4      	movs	r1, #180	; 0xb4
 8001414:	20b6      	movs	r0, #182	; 0xb6
 8001416:	f7ff fe79 	bl	800110c <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 800141a:	7cfb      	ldrb	r3, [r7, #19]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <initVL53L0X+0x110>
 8001420:	230c      	movs	r3, #12
 8001422:	e000      	b.n	8001426 <initVL53L0X+0x112>
 8001424:	2300      	movs	r3, #0
 8001426:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 800142c:	2300      	movs	r3, #0
 800142e:	75bb      	strb	r3, [r7, #22]
 8001430:	e03f      	b.n	80014b2 <initVL53L0X+0x19e>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8001432:	7dba      	ldrb	r2, [r7, #22]
 8001434:	7d7b      	ldrb	r3, [r7, #21]
 8001436:	429a      	cmp	r2, r3
 8001438:	d303      	bcc.n	8001442 <initVL53L0X+0x12e>
 800143a:	7d3b      	ldrb	r3, [r7, #20]
 800143c:	7dfa      	ldrb	r2, [r7, #23]
 800143e:	429a      	cmp	r2, r3
 8001440:	d120      	bne.n	8001484 <initVL53L0X+0x170>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8001442:	7dbb      	ldrb	r3, [r7, #22]
 8001444:	08db      	lsrs	r3, r3, #3
 8001446:	b2d8      	uxtb	r0, r3
 8001448:	4603      	mov	r3, r0
 800144a:	3318      	adds	r3, #24
 800144c:	443b      	add	r3, r7
 800144e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001452:	b25a      	sxtb	r2, r3
 8001454:	7dbb      	ldrb	r3, [r7, #22]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	2101      	movs	r1, #1
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	b25b      	sxtb	r3, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	b25b      	sxtb	r3, r3
 8001466:	4013      	ands	r3, r2
 8001468:	b25a      	sxtb	r2, r3
 800146a:	4603      	mov	r3, r0
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	3318      	adds	r3, #24
 8001470:	443b      	add	r3, r7
 8001472:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001476:	e019      	b.n	80014ac <initVL53L0X+0x198>
 8001478:	200004f0 	.word	0x200004f0
 800147c:	20000544 	.word	0x20000544
 8001480:	200004e8 	.word	0x200004e8
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8001484:	7dbb      	ldrb	r3, [r7, #22]
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	3318      	adds	r3, #24
 800148c:	443b      	add	r3, r7
 800148e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001492:	461a      	mov	r2, r3
 8001494:	7dbb      	ldrb	r3, [r7, #22]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	fa42 f303 	asr.w	r3, r2, r3
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <initVL53L0X+0x198>
    {
      spads_enabled++;
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	3301      	adds	r3, #1
 80014aa:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 80014ac:	7dbb      	ldrb	r3, [r7, #22]
 80014ae:	3301      	adds	r3, #1
 80014b0:	75bb      	strb	r3, [r7, #22]
 80014b2:	7dbb      	ldrb	r3, [r7, #22]
 80014b4:	2b2f      	cmp	r3, #47	; 0x2f
 80014b6:	d9bc      	bls.n	8001432 <initVL53L0X+0x11e>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2206      	movs	r2, #6
 80014be:	4619      	mov	r1, r3
 80014c0:	20b0      	movs	r0, #176	; 0xb0
 80014c2:	f7ff fecf 	bl	8001264 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80014c6:	2101      	movs	r1, #1
 80014c8:	20ff      	movs	r0, #255	; 0xff
 80014ca:	f7ff fe1f 	bl	800110c <writeReg>
  writeReg(0x00, 0x00);
 80014ce:	2100      	movs	r1, #0
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff fe1b 	bl	800110c <writeReg>

  writeReg(0xFF, 0x00);
 80014d6:	2100      	movs	r1, #0
 80014d8:	20ff      	movs	r0, #255	; 0xff
 80014da:	f7ff fe17 	bl	800110c <writeReg>
  writeReg(0x09, 0x00);
 80014de:	2100      	movs	r1, #0
 80014e0:	2009      	movs	r0, #9
 80014e2:	f7ff fe13 	bl	800110c <writeReg>
  writeReg(0x10, 0x00);
 80014e6:	2100      	movs	r1, #0
 80014e8:	2010      	movs	r0, #16
 80014ea:	f7ff fe0f 	bl	800110c <writeReg>
  writeReg(0x11, 0x00);
 80014ee:	2100      	movs	r1, #0
 80014f0:	2011      	movs	r0, #17
 80014f2:	f7ff fe0b 	bl	800110c <writeReg>

  writeReg(0x24, 0x01);
 80014f6:	2101      	movs	r1, #1
 80014f8:	2024      	movs	r0, #36	; 0x24
 80014fa:	f7ff fe07 	bl	800110c <writeReg>
  writeReg(0x25, 0xFF);
 80014fe:	21ff      	movs	r1, #255	; 0xff
 8001500:	2025      	movs	r0, #37	; 0x25
 8001502:	f7ff fe03 	bl	800110c <writeReg>
  writeReg(0x75, 0x00);
 8001506:	2100      	movs	r1, #0
 8001508:	2075      	movs	r0, #117	; 0x75
 800150a:	f7ff fdff 	bl	800110c <writeReg>

  writeReg(0xFF, 0x01);
 800150e:	2101      	movs	r1, #1
 8001510:	20ff      	movs	r0, #255	; 0xff
 8001512:	f7ff fdfb 	bl	800110c <writeReg>
  writeReg(0x4E, 0x2C);
 8001516:	212c      	movs	r1, #44	; 0x2c
 8001518:	204e      	movs	r0, #78	; 0x4e
 800151a:	f7ff fdf7 	bl	800110c <writeReg>
  writeReg(0x48, 0x00);
 800151e:	2100      	movs	r1, #0
 8001520:	2048      	movs	r0, #72	; 0x48
 8001522:	f7ff fdf3 	bl	800110c <writeReg>
  writeReg(0x30, 0x20);
 8001526:	2120      	movs	r1, #32
 8001528:	2030      	movs	r0, #48	; 0x30
 800152a:	f7ff fdef 	bl	800110c <writeReg>

  writeReg(0xFF, 0x00);
 800152e:	2100      	movs	r1, #0
 8001530:	20ff      	movs	r0, #255	; 0xff
 8001532:	f7ff fdeb 	bl	800110c <writeReg>
  writeReg(0x30, 0x09);
 8001536:	2109      	movs	r1, #9
 8001538:	2030      	movs	r0, #48	; 0x30
 800153a:	f7ff fde7 	bl	800110c <writeReg>
  writeReg(0x54, 0x00);
 800153e:	2100      	movs	r1, #0
 8001540:	2054      	movs	r0, #84	; 0x54
 8001542:	f7ff fde3 	bl	800110c <writeReg>
  writeReg(0x31, 0x04);
 8001546:	2104      	movs	r1, #4
 8001548:	2031      	movs	r0, #49	; 0x31
 800154a:	f7ff fddf 	bl	800110c <writeReg>
  writeReg(0x32, 0x03);
 800154e:	2103      	movs	r1, #3
 8001550:	2032      	movs	r0, #50	; 0x32
 8001552:	f7ff fddb 	bl	800110c <writeReg>
  writeReg(0x40, 0x83);
 8001556:	2183      	movs	r1, #131	; 0x83
 8001558:	2040      	movs	r0, #64	; 0x40
 800155a:	f7ff fdd7 	bl	800110c <writeReg>
  writeReg(0x46, 0x25);
 800155e:	2125      	movs	r1, #37	; 0x25
 8001560:	2046      	movs	r0, #70	; 0x46
 8001562:	f7ff fdd3 	bl	800110c <writeReg>
  writeReg(0x60, 0x00);
 8001566:	2100      	movs	r1, #0
 8001568:	2060      	movs	r0, #96	; 0x60
 800156a:	f7ff fdcf 	bl	800110c <writeReg>
  writeReg(0x27, 0x00);
 800156e:	2100      	movs	r1, #0
 8001570:	2027      	movs	r0, #39	; 0x27
 8001572:	f7ff fdcb 	bl	800110c <writeReg>
  writeReg(0x50, 0x06);
 8001576:	2106      	movs	r1, #6
 8001578:	2050      	movs	r0, #80	; 0x50
 800157a:	f7ff fdc7 	bl	800110c <writeReg>
  writeReg(0x51, 0x00);
 800157e:	2100      	movs	r1, #0
 8001580:	2051      	movs	r0, #81	; 0x51
 8001582:	f7ff fdc3 	bl	800110c <writeReg>
  writeReg(0x52, 0x96);
 8001586:	2196      	movs	r1, #150	; 0x96
 8001588:	2052      	movs	r0, #82	; 0x52
 800158a:	f7ff fdbf 	bl	800110c <writeReg>
  writeReg(0x56, 0x08);
 800158e:	2108      	movs	r1, #8
 8001590:	2056      	movs	r0, #86	; 0x56
 8001592:	f7ff fdbb 	bl	800110c <writeReg>
  writeReg(0x57, 0x30);
 8001596:	2130      	movs	r1, #48	; 0x30
 8001598:	2057      	movs	r0, #87	; 0x57
 800159a:	f7ff fdb7 	bl	800110c <writeReg>
  writeReg(0x61, 0x00);
 800159e:	2100      	movs	r1, #0
 80015a0:	2061      	movs	r0, #97	; 0x61
 80015a2:	f7ff fdb3 	bl	800110c <writeReg>
  writeReg(0x62, 0x00);
 80015a6:	2100      	movs	r1, #0
 80015a8:	2062      	movs	r0, #98	; 0x62
 80015aa:	f7ff fdaf 	bl	800110c <writeReg>
  writeReg(0x64, 0x00);
 80015ae:	2100      	movs	r1, #0
 80015b0:	2064      	movs	r0, #100	; 0x64
 80015b2:	f7ff fdab 	bl	800110c <writeReg>
  writeReg(0x65, 0x00);
 80015b6:	2100      	movs	r1, #0
 80015b8:	2065      	movs	r0, #101	; 0x65
 80015ba:	f7ff fda7 	bl	800110c <writeReg>
  writeReg(0x66, 0xA0);
 80015be:	21a0      	movs	r1, #160	; 0xa0
 80015c0:	2066      	movs	r0, #102	; 0x66
 80015c2:	f7ff fda3 	bl	800110c <writeReg>

  writeReg(0xFF, 0x01);
 80015c6:	2101      	movs	r1, #1
 80015c8:	20ff      	movs	r0, #255	; 0xff
 80015ca:	f7ff fd9f 	bl	800110c <writeReg>
  writeReg(0x22, 0x32);
 80015ce:	2132      	movs	r1, #50	; 0x32
 80015d0:	2022      	movs	r0, #34	; 0x22
 80015d2:	f7ff fd9b 	bl	800110c <writeReg>
  writeReg(0x47, 0x14);
 80015d6:	2114      	movs	r1, #20
 80015d8:	2047      	movs	r0, #71	; 0x47
 80015da:	f7ff fd97 	bl	800110c <writeReg>
  writeReg(0x49, 0xFF);
 80015de:	21ff      	movs	r1, #255	; 0xff
 80015e0:	2049      	movs	r0, #73	; 0x49
 80015e2:	f7ff fd93 	bl	800110c <writeReg>
  writeReg(0x4A, 0x00);
 80015e6:	2100      	movs	r1, #0
 80015e8:	204a      	movs	r0, #74	; 0x4a
 80015ea:	f7ff fd8f 	bl	800110c <writeReg>

  writeReg(0xFF, 0x00);
 80015ee:	2100      	movs	r1, #0
 80015f0:	20ff      	movs	r0, #255	; 0xff
 80015f2:	f7ff fd8b 	bl	800110c <writeReg>
  writeReg(0x7A, 0x0A);
 80015f6:	210a      	movs	r1, #10
 80015f8:	207a      	movs	r0, #122	; 0x7a
 80015fa:	f7ff fd87 	bl	800110c <writeReg>
  writeReg(0x7B, 0x00);
 80015fe:	2100      	movs	r1, #0
 8001600:	207b      	movs	r0, #123	; 0x7b
 8001602:	f7ff fd83 	bl	800110c <writeReg>
  writeReg(0x78, 0x21);
 8001606:	2121      	movs	r1, #33	; 0x21
 8001608:	2078      	movs	r0, #120	; 0x78
 800160a:	f7ff fd7f 	bl	800110c <writeReg>

  writeReg(0xFF, 0x01);
 800160e:	2101      	movs	r1, #1
 8001610:	20ff      	movs	r0, #255	; 0xff
 8001612:	f7ff fd7b 	bl	800110c <writeReg>
  writeReg(0x23, 0x34);
 8001616:	2134      	movs	r1, #52	; 0x34
 8001618:	2023      	movs	r0, #35	; 0x23
 800161a:	f7ff fd77 	bl	800110c <writeReg>
  writeReg(0x42, 0x00);
 800161e:	2100      	movs	r1, #0
 8001620:	2042      	movs	r0, #66	; 0x42
 8001622:	f7ff fd73 	bl	800110c <writeReg>
  writeReg(0x44, 0xFF);
 8001626:	21ff      	movs	r1, #255	; 0xff
 8001628:	2044      	movs	r0, #68	; 0x44
 800162a:	f7ff fd6f 	bl	800110c <writeReg>
  writeReg(0x45, 0x26);
 800162e:	2126      	movs	r1, #38	; 0x26
 8001630:	2045      	movs	r0, #69	; 0x45
 8001632:	f7ff fd6b 	bl	800110c <writeReg>
  writeReg(0x46, 0x05);
 8001636:	2105      	movs	r1, #5
 8001638:	2046      	movs	r0, #70	; 0x46
 800163a:	f7ff fd67 	bl	800110c <writeReg>
  writeReg(0x40, 0x40);
 800163e:	2140      	movs	r1, #64	; 0x40
 8001640:	2040      	movs	r0, #64	; 0x40
 8001642:	f7ff fd63 	bl	800110c <writeReg>
  writeReg(0x0E, 0x06);
 8001646:	2106      	movs	r1, #6
 8001648:	200e      	movs	r0, #14
 800164a:	f7ff fd5f 	bl	800110c <writeReg>
  writeReg(0x20, 0x1A);
 800164e:	211a      	movs	r1, #26
 8001650:	2020      	movs	r0, #32
 8001652:	f7ff fd5b 	bl	800110c <writeReg>
  writeReg(0x43, 0x40);
 8001656:	2140      	movs	r1, #64	; 0x40
 8001658:	2043      	movs	r0, #67	; 0x43
 800165a:	f7ff fd57 	bl	800110c <writeReg>

  writeReg(0xFF, 0x00);
 800165e:	2100      	movs	r1, #0
 8001660:	20ff      	movs	r0, #255	; 0xff
 8001662:	f7ff fd53 	bl	800110c <writeReg>
  writeReg(0x34, 0x03);
 8001666:	2103      	movs	r1, #3
 8001668:	2034      	movs	r0, #52	; 0x34
 800166a:	f7ff fd4f 	bl	800110c <writeReg>
  writeReg(0x35, 0x44);
 800166e:	2144      	movs	r1, #68	; 0x44
 8001670:	2035      	movs	r0, #53	; 0x35
 8001672:	f7ff fd4b 	bl	800110c <writeReg>

  writeReg(0xFF, 0x01);
 8001676:	2101      	movs	r1, #1
 8001678:	20ff      	movs	r0, #255	; 0xff
 800167a:	f7ff fd47 	bl	800110c <writeReg>
  writeReg(0x31, 0x04);
 800167e:	2104      	movs	r1, #4
 8001680:	2031      	movs	r0, #49	; 0x31
 8001682:	f7ff fd43 	bl	800110c <writeReg>
  writeReg(0x4B, 0x09);
 8001686:	2109      	movs	r1, #9
 8001688:	204b      	movs	r0, #75	; 0x4b
 800168a:	f7ff fd3f 	bl	800110c <writeReg>
  writeReg(0x4C, 0x05);
 800168e:	2105      	movs	r1, #5
 8001690:	204c      	movs	r0, #76	; 0x4c
 8001692:	f7ff fd3b 	bl	800110c <writeReg>
  writeReg(0x4D, 0x04);
 8001696:	2104      	movs	r1, #4
 8001698:	204d      	movs	r0, #77	; 0x4d
 800169a:	f7ff fd37 	bl	800110c <writeReg>

  writeReg(0xFF, 0x00);
 800169e:	2100      	movs	r1, #0
 80016a0:	20ff      	movs	r0, #255	; 0xff
 80016a2:	f7ff fd33 	bl	800110c <writeReg>
  writeReg(0x44, 0x00);
 80016a6:	2100      	movs	r1, #0
 80016a8:	2044      	movs	r0, #68	; 0x44
 80016aa:	f7ff fd2f 	bl	800110c <writeReg>
  writeReg(0x45, 0x20);
 80016ae:	2120      	movs	r1, #32
 80016b0:	2045      	movs	r0, #69	; 0x45
 80016b2:	f7ff fd2b 	bl	800110c <writeReg>
  writeReg(0x47, 0x08);
 80016b6:	2108      	movs	r1, #8
 80016b8:	2047      	movs	r0, #71	; 0x47
 80016ba:	f7ff fd27 	bl	800110c <writeReg>
  writeReg(0x48, 0x28);
 80016be:	2128      	movs	r1, #40	; 0x28
 80016c0:	2048      	movs	r0, #72	; 0x48
 80016c2:	f7ff fd23 	bl	800110c <writeReg>
  writeReg(0x67, 0x00);
 80016c6:	2100      	movs	r1, #0
 80016c8:	2067      	movs	r0, #103	; 0x67
 80016ca:	f7ff fd1f 	bl	800110c <writeReg>
  writeReg(0x70, 0x04);
 80016ce:	2104      	movs	r1, #4
 80016d0:	2070      	movs	r0, #112	; 0x70
 80016d2:	f7ff fd1b 	bl	800110c <writeReg>
  writeReg(0x71, 0x01);
 80016d6:	2101      	movs	r1, #1
 80016d8:	2071      	movs	r0, #113	; 0x71
 80016da:	f7ff fd17 	bl	800110c <writeReg>
  writeReg(0x72, 0xFE);
 80016de:	21fe      	movs	r1, #254	; 0xfe
 80016e0:	2072      	movs	r0, #114	; 0x72
 80016e2:	f7ff fd13 	bl	800110c <writeReg>
  writeReg(0x76, 0x00);
 80016e6:	2100      	movs	r1, #0
 80016e8:	2076      	movs	r0, #118	; 0x76
 80016ea:	f7ff fd0f 	bl	800110c <writeReg>
  writeReg(0x77, 0x00);
 80016ee:	2100      	movs	r1, #0
 80016f0:	2077      	movs	r0, #119	; 0x77
 80016f2:	f7ff fd0b 	bl	800110c <writeReg>

  writeReg(0xFF, 0x01);
 80016f6:	2101      	movs	r1, #1
 80016f8:	20ff      	movs	r0, #255	; 0xff
 80016fa:	f7ff fd07 	bl	800110c <writeReg>
  writeReg(0x0D, 0x01);
 80016fe:	2101      	movs	r1, #1
 8001700:	200d      	movs	r0, #13
 8001702:	f7ff fd03 	bl	800110c <writeReg>

  writeReg(0xFF, 0x00);
 8001706:	2100      	movs	r1, #0
 8001708:	20ff      	movs	r0, #255	; 0xff
 800170a:	f7ff fcff 	bl	800110c <writeReg>
  writeReg(0x80, 0x01);
 800170e:	2101      	movs	r1, #1
 8001710:	2080      	movs	r0, #128	; 0x80
 8001712:	f7ff fcfb 	bl	800110c <writeReg>
  writeReg(0x01, 0xF8);
 8001716:	21f8      	movs	r1, #248	; 0xf8
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff fcf7 	bl	800110c <writeReg>

  writeReg(0xFF, 0x01);
 800171e:	2101      	movs	r1, #1
 8001720:	20ff      	movs	r0, #255	; 0xff
 8001722:	f7ff fcf3 	bl	800110c <writeReg>
  writeReg(0x8E, 0x01);
 8001726:	2101      	movs	r1, #1
 8001728:	208e      	movs	r0, #142	; 0x8e
 800172a:	f7ff fcef 	bl	800110c <writeReg>
  writeReg(0x00, 0x01);
 800172e:	2101      	movs	r1, #1
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff fceb 	bl	800110c <writeReg>
  writeReg(0xFF, 0x00);
 8001736:	2100      	movs	r1, #0
 8001738:	20ff      	movs	r0, #255	; 0xff
 800173a:	f7ff fce7 	bl	800110c <writeReg>
  writeReg(0x80, 0x00);
 800173e:	2100      	movs	r1, #0
 8001740:	2080      	movs	r0, #128	; 0x80
 8001742:	f7ff fce3 	bl	800110c <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001746:	2104      	movs	r1, #4
 8001748:	200a      	movs	r0, #10
 800174a:	f7ff fcdf 	bl	800110c <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 800174e:	2084      	movs	r0, #132	; 0x84
 8001750:	f7ff fd30 	bl	80011b4 <readReg>
 8001754:	4603      	mov	r3, r0
 8001756:	f023 0310 	bic.w	r3, r3, #16
 800175a:	b2db      	uxtb	r3, r3
 800175c:	4619      	mov	r1, r3
 800175e:	2084      	movs	r0, #132	; 0x84
 8001760:	f7ff fcd4 	bl	800110c <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001764:	2101      	movs	r1, #1
 8001766:	200b      	movs	r0, #11
 8001768:	f7ff fcd0 	bl	800110c <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  g_measTimBudUs = getMeasurementTimingBudget();
 800176c:	f000 f8fe 	bl	800196c <getMeasurementTimingBudget>
 8001770:	4603      	mov	r3, r0
 8001772:	4a16      	ldr	r2, [pc, #88]	; (80017cc <initVL53L0X+0x4b8>)
 8001774:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001776:	21e8      	movs	r1, #232	; 0xe8
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff fcc7 	bl	800110c <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(g_measTimBudUs);
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <initVL53L0X+0x4b8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f85a 	bl	800183c <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001788:	2101      	movs	r1, #1
 800178a:	2001      	movs	r0, #1
 800178c:	f7ff fcbe 	bl	800110c <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 8001790:	2040      	movs	r0, #64	; 0x40
 8001792:	f000 fd49 	bl	8002228 <performSingleRefCalibration>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <initVL53L0X+0x48c>
 800179c:	2300      	movs	r3, #0
 800179e:	e010      	b.n	80017c2 <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80017a0:	2102      	movs	r1, #2
 80017a2:	2001      	movs	r0, #1
 80017a4:	f7ff fcb2 	bl	800110c <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80017a8:	2000      	movs	r0, #0
 80017aa:	f000 fd3d 	bl	8002228 <performSingleRefCalibration>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <initVL53L0X+0x4a4>
 80017b4:	2300      	movs	r3, #0
 80017b6:	e004      	b.n	80017c2 <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80017b8:	21e8      	movs	r1, #232	; 0xe8
 80017ba:	2001      	movs	r0, #1
 80017bc:	f7ff fca6 	bl	800110c <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 80017c0:	2301      	movs	r3, #1
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200004ec 	.word	0x200004ec

080017d0 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(float limit_Mcps)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80017da:	edd7 7a01 	vldr	s15, [r7, #4]
 80017de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	d40a      	bmi.n	80017fe <setSignalRateLimit+0x2e>
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7fe fea5 	bl	8000538 <__aeabi_f2d>
 80017ee:	a311      	add	r3, pc, #68	; (adr r3, 8001834 <setSignalRateLimit+0x64>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7ff f988 	bl	8000b08 <__aeabi_dcmpgt>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <setSignalRateLimit+0x32>
 80017fe:	2300      	movs	r3, #0
 8001800:	e00f      	b.n	8001822 <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8001802:	edd7 7a01 	vldr	s15, [r7, #4]
 8001806:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001830 <setSignalRateLimit+0x60>
 800180a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001812:	ee17 3a90 	vmov	r3, s15
 8001816:	b29b      	uxth	r3, r3
 8001818:	4619      	mov	r1, r3
 800181a:	2044      	movs	r0, #68	; 0x44
 800181c:	f7ff fca0 	bl	8001160 <writeReg16Bit>
  return true;
 8001820:	2301      	movs	r3, #1
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	f3af 8000 	nop.w
 8001830:	43000000 	.word	0x43000000
 8001834:	0a3d70a4 	.word	0x0a3d70a4
 8001838:	407fffd7 	.word	0x407fffd7

0800183c <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b092      	sub	sp, #72	; 0x48
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8001844:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8001848:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 800184c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001850:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 8001852:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001856:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 8001858:	f240 234e 	movw	r3, #590	; 0x24e
 800185c:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 800185e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001862:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 8001864:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001868:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 800186a:	f240 2326 	movw	r3, #550	; 0x226
 800186e:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 8001870:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001874:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187a:	429a      	cmp	r2, r3
 800187c:	d201      	bcs.n	8001882 <setMeasurementTimingBudget+0x46>
 800187e:	2300      	movs	r3, #0
 8001880:	e06e      	b.n	8001960 <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8001882:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001886:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001888:	4413      	add	r3, r2
 800188a:	647b      	str	r3, [r7, #68]	; 0x44

  getSequenceStepEnables(&enables);
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fba3 	bl	8001fdc <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8001896:	f107 020c 	add.w	r2, r7, #12
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fbcd 	bl	8002040 <getSequenceStepTimeouts>

  if (enables.tcc)
 80018a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80018b2:	4413      	add	r3, r2
 80018b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018b6:	4413      	add	r3, r2
 80018b8:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 80018ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018c6:	4413      	add	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018cc:	4413      	add	r3, r2
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
 80018d0:	e009      	b.n	80018e6 <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 80018d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80018de:	4413      	add	r3, r2
 80018e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018e2:	4413      	add	r3, r2
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 80018e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018f2:	4413      	add	r3, r2
 80018f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018f6:	4413      	add	r3, r2
 80018f8:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 80018fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d02d      	beq.n	800195e <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 8001902:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001904:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001906:	4413      	add	r3, r2
 8001908:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 800190a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	d901      	bls.n	8001916 <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 8001912:	2300      	movs	r3, #0
 8001914:	e024      	b.n	8001960 <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 800191e:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4619      	mov	r1, r3
 8001924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001926:	f000 fc59 	bl	80021dc <timeoutMicrosecondsToMclks>
 800192a:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 800192c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 8001930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001938:	8a7a      	ldrh	r2, [r7, #18]
 800193a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800193e:	4413      	add	r3, r2
 8001940:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001944:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fbf3 	bl	8002134 <encodeTimeout>
 800194e:	4603      	mov	r3, r0
 8001950:	4619      	mov	r1, r3
 8001952:	2071      	movs	r0, #113	; 0x71
 8001954:	f7ff fc04 	bl	8001160 <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 8001958:	4a03      	ldr	r2, [pc, #12]	; (8001968 <setMeasurementTimingBudget+0x12c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
  }
  return true;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3748      	adds	r7, #72	; 0x48
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200004ec 	.word	0x200004ec

0800196c <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af00      	add	r7, sp, #0
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8001972:	f240 7376 	movw	r3, #1910	; 0x776
 8001976:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 8001978:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800197c:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 800197e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001982:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 8001984:	f240 234e 	movw	r3, #590	; 0x24e
 8001988:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 800198a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800198e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 8001990:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001994:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8001996:	f240 2326 	movw	r3, #550	; 0x226
 800199a:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 800199c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800199e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019a0:	4413      	add	r3, r2
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  getSequenceStepEnables(&enables);
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 fb17 	bl	8001fdc <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80019ae:	463a      	mov	r2, r7
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fb42 	bl	8002040 <getSequenceStepTimeouts>

  if (enables.tcc)
 80019bc:	7e3b      	ldrb	r3, [r7, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <getMeasurementTimingBudget+0x62>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019c6:	4413      	add	r3, r2
 80019c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ca:	4413      	add	r3, r2
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables.dss)
 80019ce:	7ebb      	ldrb	r3, [r7, #26]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <getMeasurementTimingBudget+0x78>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019d8:	4413      	add	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019de:	4413      	add	r3, r2
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e2:	e008      	b.n	80019f6 <getMeasurementTimingBudget+0x8a>
  }
  else if (enables.msrc)
 80019e4:	7e7b      	ldrb	r3, [r7, #25]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <getMeasurementTimingBudget+0x8a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019ee:	4413      	add	r3, r2
 80019f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f2:	4413      	add	r3, r2
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables.pre_range)
 80019f6:	7efb      	ldrb	r3, [r7, #27]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <getMeasurementTimingBudget+0x9c>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	8c3b      	ldrh	r3, [r7, #32]
 8001a00:	4413      	add	r3, r2
 8001a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a04:	4413      	add	r3, r2
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables.final_range)
 8001a08:	7f3b      	ldrb	r3, [r7, #28]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <getMeasurementTimingBudget+0xae>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	8bfb      	ldrh	r3, [r7, #30]
 8001a12:	4413      	add	r3, r2
 8001a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a16:	4413      	add	r3, r2
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  g_measTimBudUs = budget_us; // store for internal reuse
 8001a1a:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <getMeasurementTimingBudget+0xc0>)
 8001a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1e:	6013      	str	r3, [r2, #0]
  return budget_us;
 8001a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3730      	adds	r7, #48	; 0x30
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200004ec 	.word	0x200004ec

08001a30 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	460a      	mov	r2, r1
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables(&enables);
 8001a4c:	f107 0320 	add.w	r3, r7, #32
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fac3 	bl	8001fdc <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8001a56:	f107 0208 	add.w	r2, r7, #8
 8001a5a:	f107 0320 	add.w	r3, r7, #32
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 faed 	bl	8002040 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d15d      	bne.n	8001b28 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8001a6c:	79bb      	ldrb	r3, [r7, #6]
 8001a6e:	3b0c      	subs	r3, #12
 8001a70:	2b06      	cmp	r3, #6
 8001a72:	d825      	bhi.n	8001ac0 <setVcselPulsePeriod+0x90>
 8001a74:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <setVcselPulsePeriod+0x4c>)
 8001a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7a:	bf00      	nop
 8001a7c:	08001a99 	.word	0x08001a99
 8001a80:	08001ac1 	.word	0x08001ac1
 8001a84:	08001aa3 	.word	0x08001aa3
 8001a88:	08001ac1 	.word	0x08001ac1
 8001a8c:	08001aad 	.word	0x08001aad
 8001a90:	08001ac1 	.word	0x08001ac1
 8001a94:	08001ab7 	.word	0x08001ab7
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8001a98:	2118      	movs	r1, #24
 8001a9a:	2057      	movs	r0, #87	; 0x57
 8001a9c:	f7ff fb36 	bl	800110c <writeReg>
        break;
 8001aa0:	e010      	b.n	8001ac4 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8001aa2:	2130      	movs	r1, #48	; 0x30
 8001aa4:	2057      	movs	r0, #87	; 0x57
 8001aa6:	f7ff fb31 	bl	800110c <writeReg>
        break;
 8001aaa:	e00b      	b.n	8001ac4 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8001aac:	2140      	movs	r1, #64	; 0x40
 8001aae:	2057      	movs	r0, #87	; 0x57
 8001ab0:	f7ff fb2c 	bl	800110c <writeReg>
        break;
 8001ab4:	e006      	b.n	8001ac4 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8001ab6:	2150      	movs	r1, #80	; 0x50
 8001ab8:	2057      	movs	r0, #87	; 0x57
 8001aba:	f7ff fb27 	bl	800110c <writeReg>
        break;
 8001abe:	e001      	b.n	8001ac4 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return false;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e0fc      	b.n	8001cbe <setVcselPulsePeriod+0x28e>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	2056      	movs	r0, #86	; 0x56
 8001ac8:	f7ff fb20 	bl	800110c <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001acc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	2050      	movs	r0, #80	; 0x50
 8001ad4:	f7ff fb1a 	bl	800110c <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	79ba      	ldrb	r2, [r7, #6]
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fb7c 	bl	80021dc <timeoutMicrosecondsToMclks>
 8001ae4:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8001ae6:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001ae8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fb22 	bl	8002134 <encodeTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4619      	mov	r1, r3
 8001af4:	2051      	movs	r0, #81	; 0x51
 8001af6:	f7ff fb33 	bl	8001160 <writeReg16Bit>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	79ba      	ldrb	r2, [r7, #6]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fb6b 	bl	80021dc <timeoutMicrosecondsToMclks>
 8001b06:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8001b08:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001b0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b10:	d804      	bhi.n	8001b1c <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8001b12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b14:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	e000      	b.n	8001b1e <setVcselPulsePeriod+0xee>
 8001b1c:	23ff      	movs	r3, #255	; 0xff
 8001b1e:	4619      	mov	r1, r3
 8001b20:	2046      	movs	r0, #70	; 0x46
 8001b22:	f7ff faf3 	bl	800110c <writeReg>
 8001b26:	e0b1      	b.n	8001c8c <setVcselPulsePeriod+0x25c>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	f040 80ac 	bne.w	8001c88 <setVcselPulsePeriod+0x258>
  {
    switch (period_pclks)
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	3b08      	subs	r3, #8
 8001b34:	2b06      	cmp	r3, #6
 8001b36:	f200 8085 	bhi.w	8001c44 <setVcselPulsePeriod+0x214>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <setVcselPulsePeriod+0x110>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001b5d 	.word	0x08001b5d
 8001b44:	08001c45 	.word	0x08001c45
 8001b48:	08001b97 	.word	0x08001b97
 8001b4c:	08001c45 	.word	0x08001c45
 8001b50:	08001bd1 	.word	0x08001bd1
 8001b54:	08001c45 	.word	0x08001c45
 8001b58:	08001c0b 	.word	0x08001c0b
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001b5c:	2110      	movs	r1, #16
 8001b5e:	2048      	movs	r0, #72	; 0x48
 8001b60:	f7ff fad4 	bl	800110c <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001b64:	2108      	movs	r1, #8
 8001b66:	2047      	movs	r0, #71	; 0x47
 8001b68:	f7ff fad0 	bl	800110c <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	2032      	movs	r0, #50	; 0x32
 8001b70:	f7ff facc 	bl	800110c <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8001b74:	210c      	movs	r1, #12
 8001b76:	2030      	movs	r0, #48	; 0x30
 8001b78:	f7ff fac8 	bl	800110c <writeReg>
        writeReg(0xFF, 0x01);
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	20ff      	movs	r0, #255	; 0xff
 8001b80:	f7ff fac4 	bl	800110c <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8001b84:	2130      	movs	r1, #48	; 0x30
 8001b86:	2030      	movs	r0, #48	; 0x30
 8001b88:	f7ff fac0 	bl	800110c <writeReg>
        writeReg(0xFF, 0x00);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	20ff      	movs	r0, #255	; 0xff
 8001b90:	f7ff fabc 	bl	800110c <writeReg>
        break;
 8001b94:	e058      	b.n	8001c48 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8001b96:	2128      	movs	r1, #40	; 0x28
 8001b98:	2048      	movs	r0, #72	; 0x48
 8001b9a:	f7ff fab7 	bl	800110c <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001b9e:	2108      	movs	r1, #8
 8001ba0:	2047      	movs	r0, #71	; 0x47
 8001ba2:	f7ff fab3 	bl	800110c <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	2032      	movs	r0, #50	; 0x32
 8001baa:	f7ff faaf 	bl	800110c <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8001bae:	2109      	movs	r1, #9
 8001bb0:	2030      	movs	r0, #48	; 0x30
 8001bb2:	f7ff faab 	bl	800110c <writeReg>
        writeReg(0xFF, 0x01);
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	20ff      	movs	r0, #255	; 0xff
 8001bba:	f7ff faa7 	bl	800110c <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	2030      	movs	r0, #48	; 0x30
 8001bc2:	f7ff faa3 	bl	800110c <writeReg>
        writeReg(0xFF, 0x00);
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	20ff      	movs	r0, #255	; 0xff
 8001bca:	f7ff fa9f 	bl	800110c <writeReg>
        break;
 8001bce:	e03b      	b.n	8001c48 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8001bd0:	2138      	movs	r1, #56	; 0x38
 8001bd2:	2048      	movs	r0, #72	; 0x48
 8001bd4:	f7ff fa9a 	bl	800110c <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001bd8:	2108      	movs	r1, #8
 8001bda:	2047      	movs	r0, #71	; 0x47
 8001bdc:	f7ff fa96 	bl	800110c <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001be0:	2103      	movs	r1, #3
 8001be2:	2032      	movs	r0, #50	; 0x32
 8001be4:	f7ff fa92 	bl	800110c <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8001be8:	2108      	movs	r1, #8
 8001bea:	2030      	movs	r0, #48	; 0x30
 8001bec:	f7ff fa8e 	bl	800110c <writeReg>
        writeReg(0xFF, 0x01);
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	20ff      	movs	r0, #255	; 0xff
 8001bf4:	f7ff fa8a 	bl	800110c <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001bf8:	2120      	movs	r1, #32
 8001bfa:	2030      	movs	r0, #48	; 0x30
 8001bfc:	f7ff fa86 	bl	800110c <writeReg>
        writeReg(0xFF, 0x00);
 8001c00:	2100      	movs	r1, #0
 8001c02:	20ff      	movs	r0, #255	; 0xff
 8001c04:	f7ff fa82 	bl	800110c <writeReg>
        break;
 8001c08:	e01e      	b.n	8001c48 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8001c0a:	2148      	movs	r1, #72	; 0x48
 8001c0c:	2048      	movs	r0, #72	; 0x48
 8001c0e:	f7ff fa7d 	bl	800110c <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001c12:	2108      	movs	r1, #8
 8001c14:	2047      	movs	r0, #71	; 0x47
 8001c16:	f7ff fa79 	bl	800110c <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	2032      	movs	r0, #50	; 0x32
 8001c1e:	f7ff fa75 	bl	800110c <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8001c22:	2107      	movs	r1, #7
 8001c24:	2030      	movs	r0, #48	; 0x30
 8001c26:	f7ff fa71 	bl	800110c <writeReg>
        writeReg(0xFF, 0x01);
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	20ff      	movs	r0, #255	; 0xff
 8001c2e:	f7ff fa6d 	bl	800110c <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001c32:	2120      	movs	r1, #32
 8001c34:	2030      	movs	r0, #48	; 0x30
 8001c36:	f7ff fa69 	bl	800110c <writeReg>
        writeReg(0xFF, 0x00);
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	20ff      	movs	r0, #255	; 0xff
 8001c3e:	f7ff fa65 	bl	800110c <writeReg>
        break;
 8001c42:	e001      	b.n	8001c48 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return false;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e03a      	b.n	8001cbe <setVcselPulsePeriod+0x28e>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001c48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	2070      	movs	r0, #112	; 0x70
 8001c50:	f7ff fa5c 	bl	800110c <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	79ba      	ldrb	r2, [r7, #6]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fabe 	bl	80021dc <timeoutMicrosecondsToMclks>
 8001c60:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8001c62:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables.pre_range)
 8001c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <setVcselPulsePeriod+0x244>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001c6c:	89fa      	ldrh	r2, [r7, #14]
 8001c6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c70:	4413      	add	r3, r2
 8001c72:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001c74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fa5c 	bl	8002134 <encodeTimeout>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	2071      	movs	r0, #113	; 0x71
 8001c82:	f7ff fa6d 	bl	8001160 <writeReg16Bit>
 8001c86:	e001      	b.n	8001c8c <setVcselPulsePeriod+0x25c>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e018      	b.n	8001cbe <setVcselPulsePeriod+0x28e>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(g_measTimBudUs);
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <setVcselPulsePeriod+0x298>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fdd3 	bl	800183c <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f7ff fa8c 	bl	80011b4 <readReg>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff fa31 	bl	800110c <writeReg>
  performSingleRefCalibration(0x0);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f000 fabc 	bl	8002228 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8001cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	f7ff fa28 	bl	800110c <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3730      	adds	r7, #48	; 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200004ec 	.word	0x200004ec

08001ccc <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d108      	bne.n	8001cee <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8001cdc:	2050      	movs	r0, #80	; 0x50
 8001cde:	f7ff fa69 	bl	80011b4 <readReg>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	e00c      	b.n	8001d08 <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d108      	bne.n	8001d06 <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8001cf4:	2070      	movs	r0, #112	; 0x70
 8001cf6:	f7ff fa5d 	bl	80011b4 <readReg>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	e000      	b.n	8001d08 <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 8001d06:	23ff      	movs	r3, #255	; 0xff
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeContinuousMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  startTimeout();
 8001d18:	f004 ffd4 	bl	8006cc4 <HAL_GetTick>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <readRangeContinuousMillimeters+0xe0>)
 8001d22:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8001d24:	e015      	b.n	8001d52 <readRangeContinuousMillimeters+0x42>
    if (checkTimeoutExpired())
 8001d26:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <readRangeContinuousMillimeters+0xe4>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d011      	beq.n	8001d52 <readRangeContinuousMillimeters+0x42>
 8001d2e:	f004 ffc9 	bl	8006cc4 <HAL_GetTick>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <readRangeContinuousMillimeters+0xe0>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	4a2d      	ldr	r2, [pc, #180]	; (8001df4 <readRangeContinuousMillimeters+0xe4>)
 8001d40:	8812      	ldrh	r2, [r2, #0]
 8001d42:	4293      	cmp	r3, r2
 8001d44:	dd05      	ble.n	8001d52 <readRangeContinuousMillimeters+0x42>
    {
      g_isTimeout = true;
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <readRangeContinuousMillimeters+0xe8>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
      return 65535;
 8001d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d50:	e04a      	b.n	8001de8 <readRangeContinuousMillimeters+0xd8>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8001d52:	2013      	movs	r0, #19
 8001d54:	f7ff fa2e 	bl	80011b4 <readReg>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0e1      	beq.n	8001d26 <readRangeContinuousMillimeters+0x16>
    }
  }
  if( extraStats == 0 ){
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <readRangeContinuousMillimeters+0x64>
    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
    temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 8001d68:	201e      	movs	r0, #30
 8001d6a:	f7ff fa4f 	bl	800120c <readReg16Bit>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	82fb      	strh	r3, [r7, #22]
 8001d72:	e034      	b.n	8001dde <readRangeContinuousMillimeters+0xce>
    //   4: 0 ?
    //   5: ???
    // 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
    // 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
    // A,B: uncorrected distance [mm], uint16_t
    readMulti(0x14, tempBuffer, 12);
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	220c      	movs	r2, #12
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	2014      	movs	r0, #20
 8001d7e:	f7ff fa9f 	bl	80012c0 <readMulti>
    extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 8001d82:	7a3b      	ldrb	r3, [r7, #8]
 8001d84:	08db      	lsrs	r3, r3, #3
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 8001d8c:	7abb      	ldrb	r3, [r7, #10]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	7afb      	ldrb	r3, [r7, #11]
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 8001da0:	7bbb      	ldrb	r3, [r7, #14]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];    
 8001db4:	7c3b      	ldrb	r3, [r7, #16]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	7c7b      	ldrb	r3, [r7, #17]
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	809a      	strh	r2, [r3, #4]
    temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 8001dc8:	7cbb      	ldrb	r3, [r7, #18]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	7cfb      	ldrb	r3, [r7, #19]
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	82fb      	strh	r3, [r7, #22]
    extraStats->rawDistance = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	8afa      	ldrh	r2, [r7, #22]
 8001ddc:	801a      	strh	r2, [r3, #0]
  }
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001dde:	2101      	movs	r1, #1
 8001de0:	200b      	movs	r0, #11
 8001de2:	f7ff f993 	bl	800110c <writeReg>
  return temp;
 8001de6:	8afb      	ldrh	r3, [r7, #22]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200004e6 	.word	0x200004e6
 8001df4:	200004e2 	.word	0x200004e2
 8001df8:	200004e4 	.word	0x200004e4

08001dfc <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 8001e04:	2101      	movs	r1, #1
 8001e06:	2080      	movs	r0, #128	; 0x80
 8001e08:	f7ff f980 	bl	800110c <writeReg>
  writeReg(0xFF, 0x01);
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	20ff      	movs	r0, #255	; 0xff
 8001e10:	f7ff f97c 	bl	800110c <writeReg>
  writeReg(0x00, 0x00);
 8001e14:	2100      	movs	r1, #0
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7ff f978 	bl	800110c <writeReg>
  writeReg(0x91, g_stopVariable);
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <readRangeSingleMillimeters+0xa8>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	2091      	movs	r0, #145	; 0x91
 8001e24:	f7ff f972 	bl	800110c <writeReg>
  writeReg(0x00, 0x01);
 8001e28:	2101      	movs	r1, #1
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff f96e 	bl	800110c <writeReg>
  writeReg(0xFF, 0x00);
 8001e30:	2100      	movs	r1, #0
 8001e32:	20ff      	movs	r0, #255	; 0xff
 8001e34:	f7ff f96a 	bl	800110c <writeReg>
  writeReg(0x80, 0x00);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2080      	movs	r0, #128	; 0x80
 8001e3c:	f7ff f966 	bl	800110c <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8001e40:	2101      	movs	r1, #1
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff f962 	bl	800110c <writeReg>
  // "Wait until start bit has been cleared"
  startTimeout();
 8001e48:	f004 ff3c 	bl	8006cc4 <HAL_GetTick>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <readRangeSingleMillimeters+0xac>)
 8001e52:	801a      	strh	r2, [r3, #0]
  while (readReg(SYSRANGE_START) & 0x01){
 8001e54:	e015      	b.n	8001e82 <readRangeSingleMillimeters+0x86>
    if (checkTimeoutExpired()){
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <readRangeSingleMillimeters+0xb0>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d011      	beq.n	8001e82 <readRangeSingleMillimeters+0x86>
 8001e5e:	f004 ff31 	bl	8006cc4 <HAL_GetTick>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <readRangeSingleMillimeters+0xac>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <readRangeSingleMillimeters+0xb0>)
 8001e70:	8812      	ldrh	r2, [r2, #0]
 8001e72:	4293      	cmp	r3, r2
 8001e74:	dd05      	ble.n	8001e82 <readRangeSingleMillimeters+0x86>
      g_isTimeout = true;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <readRangeSingleMillimeters+0xb4>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
      return 65535;
 8001e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e80:	e00b      	b.n	8001e9a <readRangeSingleMillimeters+0x9e>
  while (readReg(SYSRANGE_START) & 0x01){
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff f996 	bl	80011b4 <readReg>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1e1      	bne.n	8001e56 <readRangeSingleMillimeters+0x5a>
    }
  }
  return readRangeContinuousMillimeters( extraStats );
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ff3c 	bl	8001d10 <readRangeContinuousMillimeters>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200004e8 	.word	0x200004e8
 8001ea8:	200004e6 	.word	0x200004e6
 8001eac:	200004e2 	.word	0x200004e2
 8001eb0:	200004e4 	.word	0x200004e4

08001eb4 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	2080      	movs	r0, #128	; 0x80
 8001ec2:	f7ff f923 	bl	800110c <writeReg>
  writeReg(0xFF, 0x01);
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	20ff      	movs	r0, #255	; 0xff
 8001eca:	f7ff f91f 	bl	800110c <writeReg>
  writeReg(0x00, 0x00);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff f91b 	bl	800110c <writeReg>

  writeReg(0xFF, 0x06);
 8001ed6:	2106      	movs	r1, #6
 8001ed8:	20ff      	movs	r0, #255	; 0xff
 8001eda:	f7ff f917 	bl	800110c <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001ede:	2083      	movs	r0, #131	; 0x83
 8001ee0:	f7ff f968 	bl	80011b4 <readReg>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	4619      	mov	r1, r3
 8001eee:	2083      	movs	r0, #131	; 0x83
 8001ef0:	f7ff f90c 	bl	800110c <writeReg>
  writeReg(0xFF, 0x07);
 8001ef4:	2107      	movs	r1, #7
 8001ef6:	20ff      	movs	r0, #255	; 0xff
 8001ef8:	f7ff f908 	bl	800110c <writeReg>
  writeReg(0x81, 0x01);
 8001efc:	2101      	movs	r1, #1
 8001efe:	2081      	movs	r0, #129	; 0x81
 8001f00:	f7ff f904 	bl	800110c <writeReg>

  writeReg(0x80, 0x01);
 8001f04:	2101      	movs	r1, #1
 8001f06:	2080      	movs	r0, #128	; 0x80
 8001f08:	f7ff f900 	bl	800110c <writeReg>

  writeReg(0x94, 0x6b);
 8001f0c:	216b      	movs	r1, #107	; 0x6b
 8001f0e:	2094      	movs	r0, #148	; 0x94
 8001f10:	f7ff f8fc 	bl	800110c <writeReg>
  writeReg(0x83, 0x00);
 8001f14:	2100      	movs	r1, #0
 8001f16:	2083      	movs	r0, #131	; 0x83
 8001f18:	f7ff f8f8 	bl	800110c <writeReg>
  startTimeout();
 8001f1c:	f004 fed2 	bl	8006cc4 <HAL_GetTick>
 8001f20:	4603      	mov	r3, r0
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <getSpadInfo+0x120>)
 8001f26:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 8001f28:	e011      	b.n	8001f4e <getSpadInfo+0x9a>
  {
    if (checkTimeoutExpired()) { return false; }
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <getSpadInfo+0x124>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00d      	beq.n	8001f4e <getSpadInfo+0x9a>
 8001f32:	f004 fec7 	bl	8006cc4 <HAL_GetTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <getSpadInfo+0x120>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <getSpadInfo+0x124>)
 8001f44:	8812      	ldrh	r2, [r2, #0]
 8001f46:	4293      	cmp	r3, r2
 8001f48:	dd01      	ble.n	8001f4e <getSpadInfo+0x9a>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e03d      	b.n	8001fca <getSpadInfo+0x116>
  while (readReg(0x83) == 0x00)
 8001f4e:	2083      	movs	r0, #131	; 0x83
 8001f50:	f7ff f930 	bl	80011b4 <readReg>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0e7      	beq.n	8001f2a <getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	2083      	movs	r0, #131	; 0x83
 8001f5e:	f7ff f8d5 	bl	800110c <writeReg>
  tmp = readReg(0x92);
 8001f62:	2092      	movs	r0, #146	; 0x92
 8001f64:	f7ff f926 	bl	80011b4 <readReg>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	09db      	lsrs	r3, r3, #7
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 8001f82:	2100      	movs	r1, #0
 8001f84:	2081      	movs	r0, #129	; 0x81
 8001f86:	f7ff f8c1 	bl	800110c <writeReg>
  writeReg(0xFF, 0x06);
 8001f8a:	2106      	movs	r1, #6
 8001f8c:	20ff      	movs	r0, #255	; 0xff
 8001f8e:	f7ff f8bd 	bl	800110c <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 8001f92:	2083      	movs	r0, #131	; 0x83
 8001f94:	f7ff f90e 	bl	80011b4 <readReg>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f023 0304 	bic.w	r3, r3, #4
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	2083      	movs	r0, #131	; 0x83
 8001fa4:	f7ff f8b2 	bl	800110c <writeReg>
  writeReg(0xFF, 0x01);
 8001fa8:	2101      	movs	r1, #1
 8001faa:	20ff      	movs	r0, #255	; 0xff
 8001fac:	f7ff f8ae 	bl	800110c <writeReg>
  writeReg(0x00, 0x01);
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f7ff f8aa 	bl	800110c <writeReg>

  writeReg(0xFF, 0x00);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	20ff      	movs	r0, #255	; 0xff
 8001fbc:	f7ff f8a6 	bl	800110c <writeReg>
  writeReg(0x80, 0x00);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2080      	movs	r0, #128	; 0x80
 8001fc4:	f7ff f8a2 	bl	800110c <writeReg>

  return true;
 8001fc8:	2301      	movs	r3, #1
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200004e6 	.word	0x200004e6
 8001fd8:	200004e2 	.word	0x200004e2

08001fdc <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7ff f8e5 	bl	80011b4 <readReg>
 8001fea:	4603      	mov	r3, r0
 8001fec:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	08db      	lsrs	r3, r3, #3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	b2da      	uxtb	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	099b      	lsrs	r3, r3, #6
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	09db      	lsrs	r3, r3, #7
 8002032:	b2da      	uxtb	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	711a      	strb	r2, [r3, #4]
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 800204a:	2000      	movs	r0, #0
 800204c:	f7ff fe3e 	bl	8001ccc <getVcselPulsePeriod>
 8002050:	4603      	mov	r3, r0
 8002052:	b29a      	uxth	r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8002058:	2046      	movs	r0, #70	; 0x46
 800205a:	f7ff f8ab 	bl	80011b4 <readReg>
 800205e:	4603      	mov	r3, r0
 8002060:	b29b      	uxth	r3, r3
 8002062:	3301      	adds	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8002072:	b2db      	uxtb	r3, r3
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f000 f888 	bl	800218c <timeoutMclksToMicroseconds>
 800207c:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8002082:	2051      	movs	r0, #81	; 0x51
 8002084:	f7ff f8c2 	bl	800120c <readReg16Bit>
 8002088:	4603      	mov	r3, r0
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f83e 	bl	800210c <decodeTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	4619      	mov	r1, r3
 80020a4:	4610      	mov	r0, r2
 80020a6:	f000 f871 	bl	800218c <timeoutMclksToMicroseconds>
 80020aa:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80020b0:	2001      	movs	r0, #1
 80020b2:	f7ff fe0b 	bl	8001ccc <getVcselPulsePeriod>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80020be:	2071      	movs	r0, #113	; 0x71
 80020c0:	f7ff f8a4 	bl	800120c <readReg16Bit>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f820 	bl	800210c <decodeTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	78db      	ldrb	r3, [r3, #3]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <getSequenceStepTimeouts+0xac>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	891a      	ldrh	r2, [r3, #8]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	88db      	ldrh	r3, [r3, #6]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	4619      	mov	r1, r3
 80020f8:	4610      	mov	r0, r2
 80020fa:	f000 f847 	bl	800218c <timeoutMclksToMicroseconds>
 80020fe:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	615a      	str	r2, [r3, #20]
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	0a12      	lsrs	r2, r2, #8
 800211e:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8002120:	4093      	lsls	r3, r2
 8002122:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002124:	3301      	adds	r3, #1
 8002126:	b29b      	uxth	r3, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d018      	beq.n	800217e <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	3b01      	subs	r3, #1
 8002150:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8002152:	e005      	b.n	8002160 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	085b      	lsrs	r3, r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 800215a:	897b      	ldrh	r3, [r7, #10]
 800215c:	3301      	adds	r3, #1
 800215e:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f4      	bne.n	8002154 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 800216a:	897b      	ldrh	r3, [r7, #10]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	b29b      	uxth	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	b29b      	uxth	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b29b      	uxth	r3, r3
 800217c:	e000      	b.n	8002180 <encodeTimeout+0x4c>
  }
  else { return 0; }
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	460a      	mov	r2, r1
 8002196:	80fb      	strh	r3, [r7, #6]
 8002198:	4613      	mov	r3, r2
 800219a:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 800219c:	797b      	ldrb	r3, [r7, #5]
 800219e:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <timeoutMclksToMicroseconds+0x48>)
 80021a0:	fb02 f303 	mul.w	r3, r2, r3
 80021a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80021a8:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <timeoutMclksToMicroseconds+0x4c>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	fb03 f202 	mul.w	r2, r3, r2
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	085b      	lsrs	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <timeoutMclksToMicroseconds+0x4c>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	099b      	lsrs	r3, r3, #6
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	003a2f00 	.word	0x003a2f00
 80021d8:	10624dd3 	.word	0x10624dd3

080021dc <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <timeoutMicrosecondsToMclks+0x44>)
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80021f4:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <timeoutMicrosecondsToMclks+0x48>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002204:	fb03 f202 	mul.w	r2, r3, r2
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	441a      	add	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	003a2f00 	.word	0x003a2f00
 8002224:	10624dd3 	.word	0x10624dd3

08002228 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	4619      	mov	r1, r3
 800223c:	2000      	movs	r0, #0
 800223e:	f7fe ff65 	bl	800110c <writeReg>

  startTimeout();
 8002242:	f004 fd3f 	bl	8006cc4 <HAL_GetTick>
 8002246:	4603      	mov	r3, r0
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <performSingleRefCalibration+0x78>)
 800224c:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 800224e:	e011      	b.n	8002274 <performSingleRefCalibration+0x4c>
  {
    if (checkTimeoutExpired()) { return false; }
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <performSingleRefCalibration+0x7c>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00d      	beq.n	8002274 <performSingleRefCalibration+0x4c>
 8002258:	f004 fd34 	bl	8006cc4 <HAL_GetTick>
 800225c:	4603      	mov	r3, r0
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <performSingleRefCalibration+0x78>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <performSingleRefCalibration+0x7c>)
 800226a:	8812      	ldrh	r2, [r2, #0]
 800226c:	4293      	cmp	r3, r2
 800226e:	dd01      	ble.n	8002274 <performSingleRefCalibration+0x4c>
 8002270:	2300      	movs	r3, #0
 8002272:	e010      	b.n	8002296 <performSingleRefCalibration+0x6e>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002274:	2013      	movs	r0, #19
 8002276:	f7fe ff9d 	bl	80011b4 <readReg>
 800227a:	4603      	mov	r3, r0
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0e5      	beq.n	8002250 <performSingleRefCalibration+0x28>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002284:	2101      	movs	r1, #1
 8002286:	200b      	movs	r0, #11
 8002288:	f7fe ff40 	bl	800110c <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 800228c:	2100      	movs	r1, #0
 800228e:	2000      	movs	r0, #0
 8002290:	f7fe ff3c 	bl	800110c <writeReg>

  return true;
 8002294:	2301      	movs	r3, #1
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200004e6 	.word	0x200004e6
 80022a4:	200004e2 	.word	0x200004e2

080022a8 <Delay>:

void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	e002      	b.n	80022b8 <Delay+0x10>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f9      	bne.n	80022b2 <Delay+0xa>
 80022be:	bf00      	nop
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LCD_INIT>:

void LCD_INIT ( void )
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80022d2:	2001      	movs	r0, #1
 80022d4:	f000 f82a 	bl	800232c <LCD_BackLed_Control>
	LCD_Rst();
 80022d8:	f000 f810 	bl	80022fc <LCD_Rst>
	LCD_REG_Config();
 80022dc:	f000 f862 	bl	80023a4 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80022e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022ea:	22f0      	movs	r2, #240	; 0xf0
 80022ec:	2100      	movs	r1, #0
 80022ee:	2000      	movs	r0, #0
 80022f0:	f000 f9e9 	bl	80026c6 <LCD_Clear>
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <LCD_Rst>:



void LCD_Rst ( void )
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	2102      	movs	r1, #2
 8002304:	4807      	ldr	r0, [pc, #28]	; (8002324 <LCD_Rst+0x28>)
 8002306:	f006 fa89 	bl	800881c <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 );
 800230a:	4807      	ldr	r0, [pc, #28]	; (8002328 <LCD_Rst+0x2c>)
 800230c:	f7ff ffcc 	bl	80022a8 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8002310:	2201      	movs	r2, #1
 8002312:	2102      	movs	r1, #2
 8002314:	4803      	ldr	r0, [pc, #12]	; (8002324 <LCD_Rst+0x28>)
 8002316:	f006 fa81 	bl	800881c <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 );
 800231a:	4803      	ldr	r0, [pc, #12]	; (8002328 <LCD_Rst+0x2c>)
 800231c:	f7ff ffc4 	bl	80022a8 <Delay>
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	0002bffc 	.word	0x0002bffc

0800232c <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d006      	beq.n	800234a <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 800233c:	2200      	movs	r2, #0
 800233e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002342:	4807      	ldr	r0, [pc, #28]	; (8002360 <LCD_BackLed_Control+0x34>)
 8002344:	f006 fa6a 	bl	800881c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8002348:	e005      	b.n	8002356 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800234a:	2201      	movs	r2, #1
 800234c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <LCD_BackLed_Control+0x34>)
 8002352:	f006 fa63 	bl	800881c <HAL_GPIO_WritePin>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40020400 	.word	0x40020400

08002364 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800236e:	f04f 42d8 	mov.w	r2, #1811939328	; 0x6c000000
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	8013      	strh	r3, [r2, #0]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <LCD_Write_Data+0x1c>)
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	8013      	strh	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	6c000080 	.word	0x6c000080

080023a4 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80023a8:	20cf      	movs	r0, #207	; 0xcf
 80023aa:	f7ff ffdb 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7ff ffe8 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80023b4:	2081      	movs	r0, #129	; 0x81
 80023b6:	f7ff ffe5 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80023ba:	2030      	movs	r0, #48	; 0x30
 80023bc:	f7ff ffe2 	bl	8002384 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80023c0:	20ed      	movs	r0, #237	; 0xed
 80023c2:	f7ff ffcf 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80023c6:	2064      	movs	r0, #100	; 0x64
 80023c8:	f7ff ffdc 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80023cc:	2003      	movs	r0, #3
 80023ce:	f7ff ffd9 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80023d2:	2012      	movs	r0, #18
 80023d4:	f7ff ffd6 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80023d8:	2081      	movs	r0, #129	; 0x81
 80023da:	f7ff ffd3 	bl	8002384 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80023de:	20e8      	movs	r0, #232	; 0xe8
 80023e0:	f7ff ffc0 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80023e4:	2085      	movs	r0, #133	; 0x85
 80023e6:	f7ff ffcd 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80023ea:	2010      	movs	r0, #16
 80023ec:	f7ff ffca 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80023f0:	2078      	movs	r0, #120	; 0x78
 80023f2:	f7ff ffc7 	bl	8002384 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80023f6:	20cb      	movs	r0, #203	; 0xcb
 80023f8:	f7ff ffb4 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80023fc:	2039      	movs	r0, #57	; 0x39
 80023fe:	f7ff ffc1 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8002402:	202c      	movs	r0, #44	; 0x2c
 8002404:	f7ff ffbe 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff ffbb 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800240e:	2034      	movs	r0, #52	; 0x34
 8002410:	f7ff ffb8 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8002414:	2002      	movs	r0, #2
 8002416:	f7ff ffb5 	bl	8002384 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800241a:	20f7      	movs	r0, #247	; 0xf7
 800241c:	f7ff ffa2 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8002420:	2020      	movs	r0, #32
 8002422:	f7ff ffaf 	bl	8002384 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8002426:	20ea      	movs	r0, #234	; 0xea
 8002428:	f7ff ff9c 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800242c:	2000      	movs	r0, #0
 800242e:	f7ff ffa9 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002432:	2000      	movs	r0, #0
 8002434:	f7ff ffa6 	bl	8002384 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8002438:	20b1      	movs	r0, #177	; 0xb1
 800243a:	f7ff ff93 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800243e:	2000      	movs	r0, #0
 8002440:	f7ff ffa0 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8002444:	201b      	movs	r0, #27
 8002446:	f7ff ff9d 	bl	8002384 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800244a:	20b6      	movs	r0, #182	; 0xb6
 800244c:	f7ff ff8a 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8002450:	200a      	movs	r0, #10
 8002452:	f7ff ff97 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8002456:	20a2      	movs	r0, #162	; 0xa2
 8002458:	f7ff ff94 	bl	8002384 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 800245c:	20c0      	movs	r0, #192	; 0xc0
 800245e:	f7ff ff81 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8002462:	2035      	movs	r0, #53	; 0x35
 8002464:	f7ff ff8e 	bl	8002384 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8002468:	20c1      	movs	r0, #193	; 0xc1
 800246a:	f7ff ff7b 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800246e:	2011      	movs	r0, #17
 8002470:	f7ff ff88 	bl	8002384 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8002474:	20c5      	movs	r0, #197	; 0xc5
 8002476:	f7ff ff75 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800247a:	2045      	movs	r0, #69	; 0x45
 800247c:	f7ff ff82 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8002480:	2045      	movs	r0, #69	; 0x45
 8002482:	f7ff ff7f 	bl	8002384 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8002486:	20c7      	movs	r0, #199	; 0xc7
 8002488:	f7ff ff6c 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 800248c:	20a2      	movs	r0, #162	; 0xa2
 800248e:	f7ff ff79 	bl	8002384 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8002492:	20f2      	movs	r0, #242	; 0xf2
 8002494:	f7ff ff66 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002498:	2000      	movs	r0, #0
 800249a:	f7ff ff73 	bl	8002384 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800249e:	2026      	movs	r0, #38	; 0x26
 80024a0:	f7ff ff60 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7ff ff6d 	bl	8002384 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80024aa:	20e0      	movs	r0, #224	; 0xe0
 80024ac:	f7ff ff5a 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80024b0:	200f      	movs	r0, #15
 80024b2:	f7ff ff67 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80024b6:	2026      	movs	r0, #38	; 0x26
 80024b8:	f7ff ff64 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80024bc:	2024      	movs	r0, #36	; 0x24
 80024be:	f7ff ff61 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80024c2:	200b      	movs	r0, #11
 80024c4:	f7ff ff5e 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80024c8:	200e      	movs	r0, #14
 80024ca:	f7ff ff5b 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80024ce:	2009      	movs	r0, #9
 80024d0:	f7ff ff58 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80024d4:	2054      	movs	r0, #84	; 0x54
 80024d6:	f7ff ff55 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80024da:	20a8      	movs	r0, #168	; 0xa8
 80024dc:	f7ff ff52 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80024e0:	2046      	movs	r0, #70	; 0x46
 80024e2:	f7ff ff4f 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80024e6:	200c      	movs	r0, #12
 80024e8:	f7ff ff4c 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80024ec:	2017      	movs	r0, #23
 80024ee:	f7ff ff49 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80024f2:	2009      	movs	r0, #9
 80024f4:	f7ff ff46 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80024f8:	200f      	movs	r0, #15
 80024fa:	f7ff ff43 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80024fe:	2007      	movs	r0, #7
 8002500:	f7ff ff40 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002504:	2000      	movs	r0, #0
 8002506:	f7ff ff3d 	bl	8002384 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800250a:	20e1      	movs	r0, #225	; 0xe1
 800250c:	f7ff ff2a 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002510:	2000      	movs	r0, #0
 8002512:	f7ff ff37 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8002516:	2019      	movs	r0, #25
 8002518:	f7ff ff34 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800251c:	201b      	movs	r0, #27
 800251e:	f7ff ff31 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8002522:	2004      	movs	r0, #4
 8002524:	f7ff ff2e 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8002528:	2010      	movs	r0, #16
 800252a:	f7ff ff2b 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800252e:	2007      	movs	r0, #7
 8002530:	f7ff ff28 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8002534:	202a      	movs	r0, #42	; 0x2a
 8002536:	f7ff ff25 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800253a:	2047      	movs	r0, #71	; 0x47
 800253c:	f7ff ff22 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8002540:	2039      	movs	r0, #57	; 0x39
 8002542:	f7ff ff1f 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8002546:	2003      	movs	r0, #3
 8002548:	f7ff ff1c 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800254c:	2006      	movs	r0, #6
 800254e:	f7ff ff19 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8002552:	2006      	movs	r0, #6
 8002554:	f7ff ff16 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8002558:	2030      	movs	r0, #48	; 0x30
 800255a:	f7ff ff13 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800255e:	2038      	movs	r0, #56	; 0x38
 8002560:	f7ff ff10 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8002564:	200f      	movs	r0, #15
 8002566:	f7ff ff0d 	bl	8002384 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800256a:	2036      	movs	r0, #54	; 0x36
 800256c:	f7ff fefa 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8002570:	20c8      	movs	r0, #200	; 0xc8
 8002572:	f7ff ff07 	bl	8002384 <LCD_Write_Data>
//	LCD_Write_Data ( 0b00000000 );

	DEBUG_DELAY();

	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8002576:	202a      	movs	r0, #42	; 0x2a
 8002578:	f7ff fef4 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800257c:	2000      	movs	r0, #0
 800257e:	f7ff ff01 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002582:	2000      	movs	r0, #0
 8002584:	f7ff fefe 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002588:	2000      	movs	r0, #0
 800258a:	f7ff fefb 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800258e:	20ef      	movs	r0, #239	; 0xef
 8002590:	f7ff fef8 	bl	8002384 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8002594:	202b      	movs	r0, #43	; 0x2b
 8002596:	f7ff fee5 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800259a:	2000      	movs	r0, #0
 800259c:	f7ff fef2 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7ff feef 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80025a6:	2001      	movs	r0, #1
 80025a8:	f7ff feec 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80025ac:	203f      	movs	r0, #63	; 0x3f
 80025ae:	f7ff fee9 	bl	8002384 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80025b2:	203a      	movs	r0, #58	; 0x3a
 80025b4:	f7ff fed6 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80025b8:	2055      	movs	r0, #85	; 0x55
 80025ba:	f7ff fee3 	bl	8002384 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80025be:	2011      	movs	r0, #17
 80025c0:	f7ff fed0 	bl	8002364 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80025c4:	4803      	ldr	r0, [pc, #12]	; (80025d4 <LCD_REG_Config+0x230>)
 80025c6:	f7ff fe6f 	bl	80022a8 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80025ca:	2029      	movs	r0, #41	; 0x29
 80025cc:	f7ff feca 	bl	8002364 <LCD_Write_Cmd>
	
	
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	0002bffc 	.word	0x0002bffc

080025d8 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4604      	mov	r4, r0
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	4623      	mov	r3, r4
 80025e8:	80fb      	strh	r3, [r7, #6]
 80025ea:	4603      	mov	r3, r0
 80025ec:	80bb      	strh	r3, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	807b      	strh	r3, [r7, #2]
 80025f2:	4613      	mov	r3, r2
 80025f4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80025f6:	202a      	movs	r0, #42	; 0x2a
 80025f8:	f7ff feb4 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	b29b      	uxth	r3, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff febe 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	b29b      	uxth	r3, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff feb8 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8002614:	88fa      	ldrh	r2, [r7, #6]
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	4413      	add	r3, r2
 800261a:	3b01      	subs	r3, #1
 800261c:	121b      	asrs	r3, r3, #8
 800261e:	b29b      	uxth	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff feaf 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8002626:	88fa      	ldrh	r2, [r7, #6]
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	4413      	add	r3, r2
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29b      	uxth	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	b29b      	uxth	r3, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fea4 	bl	8002384 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 800263c:	202b      	movs	r0, #43	; 0x2b
 800263e:	f7ff fe91 	bl	8002364 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8002642:	88bb      	ldrh	r3, [r7, #4]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b29b      	uxth	r3, r3
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fe9b 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800264e:	88bb      	ldrh	r3, [r7, #4]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	b29b      	uxth	r3, r3
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fe95 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800265a:	88ba      	ldrh	r2, [r7, #4]
 800265c:	883b      	ldrh	r3, [r7, #0]
 800265e:	4413      	add	r3, r2
 8002660:	3b01      	subs	r3, #1
 8002662:	121b      	asrs	r3, r3, #8
 8002664:	b29b      	uxth	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fe8c 	bl	8002384 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800266c:	88ba      	ldrh	r2, [r7, #4]
 800266e:	883b      	ldrh	r3, [r7, #0]
 8002670:	4413      	add	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29b      	uxth	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	b29b      	uxth	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fe81 	bl	8002384 <LCD_Write_Data>
	
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}

0800268a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800269a:	202c      	movs	r0, #44	; 0x2c
 800269c:	f7ff fe62 	bl	8002364 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e006      	b.n	80026b4 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fe6b 	bl	8002384 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3301      	adds	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d3f4      	bcc.n	80026a6 <LCD_FillColor+0x1c>
		
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80026c6:	b590      	push	{r4, r7, lr}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4604      	mov	r4, r0
 80026ce:	4608      	mov	r0, r1
 80026d0:	4611      	mov	r1, r2
 80026d2:	461a      	mov	r2, r3
 80026d4:	4623      	mov	r3, r4
 80026d6:	80fb      	strh	r3, [r7, #6]
 80026d8:	4603      	mov	r3, r0
 80026da:	80bb      	strh	r3, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
 80026e0:	4613      	mov	r3, r2
 80026e2:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80026e4:	883b      	ldrh	r3, [r7, #0]
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	88b9      	ldrh	r1, [r7, #4]
 80026ea:	88f8      	ldrh	r0, [r7, #6]
 80026ec:	f7ff ff74 	bl	80025d8 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80026f0:	887b      	ldrh	r3, [r7, #2]
 80026f2:	883a      	ldrh	r2, [r7, #0]
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	8b3b      	ldrh	r3, [r7, #24]
 80026fc:	4619      	mov	r1, r3
 80026fe:	4610      	mov	r0, r2
 8002700:	f7ff ffc3 	bl	800268a <LCD_FillColor>
	
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bd90      	pop	{r4, r7, pc}

0800270c <LCD_DrawChar>:




void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	80fb      	strh	r3, [r7, #6]
 8002716:	460b      	mov	r3, r1
 8002718:	80bb      	strh	r3, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	3b20      	subs	r3, #32
 8002722:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002724:	88b9      	ldrh	r1, [r7, #4]
 8002726:	88f8      	ldrh	r0, [r7, #6]
 8002728:	2310      	movs	r3, #16
 800272a:	2208      	movs	r2, #8
 800272c:	f7ff ff54 	bl	80025d8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8002730:	202c      	movs	r0, #44	; 0x2c
 8002732:	f7ff fe17 	bl	8002364 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002736:	2300      	movs	r3, #0
 8002738:	73bb      	strb	r3, [r7, #14]
 800273a:	e023      	b.n	8002784 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800273c:	7b3a      	ldrb	r2, [r7, #12]
 800273e:	7bbb      	ldrb	r3, [r7, #14]
 8002740:	4914      	ldr	r1, [pc, #80]	; (8002794 <LCD_DrawChar+0x88>)
 8002742:	0112      	lsls	r2, r2, #4
 8002744:	440a      	add	r2, r1
 8002746:	4413      	add	r3, r2
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800274c:	2300      	movs	r3, #0
 800274e:	737b      	strb	r3, [r7, #13]
 8002750:	e012      	b.n	8002778 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 800275c:	201f      	movs	r0, #31
 800275e:	f7ff fe11 	bl	8002384 <LCD_Write_Data>
 8002762:	e003      	b.n	800276c <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8002764:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002768:	f7ff fe0c 	bl	8002384 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002772:	7b7b      	ldrb	r3, [r7, #13]
 8002774:	3301      	adds	r3, #1
 8002776:	737b      	strb	r3, [r7, #13]
 8002778:	7b7b      	ldrb	r3, [r7, #13]
 800277a:	2b07      	cmp	r3, #7
 800277c:	d9e9      	bls.n	8002752 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800277e:	7bbb      	ldrb	r3, [r7, #14]
 8002780:	3301      	adds	r3, #1
 8002782:	73bb      	strb	r3, [r7, #14]
 8002784:	7bbb      	ldrb	r3, [r7, #14]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	d9d8      	bls.n	800273c <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	080146ac 	.word	0x080146ac

08002798 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	603a      	str	r2, [r7, #0]
 80027a2:	80fb      	strh	r3, [r7, #6]
 80027a4:	460b      	mov	r3, r1
 80027a6:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80027a8:	e01c      	b.n	80027e4 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	2be8      	cmp	r3, #232	; 0xe8
 80027ae:	d904      	bls.n	80027ba <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80027b0:	2300      	movs	r3, #0
 80027b2:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80027b4:	88bb      	ldrh	r3, [r7, #4]
 80027b6:	3310      	adds	r3, #16
 80027b8:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80027ba:	88bb      	ldrh	r3, [r7, #4]
 80027bc:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80027c0:	d903      	bls.n	80027ca <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80027c2:	2300      	movs	r3, #0
 80027c4:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	88b9      	ldrh	r1, [r7, #4]
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff9a 	bl	800270c <LCD_DrawChar>
		
		pStr ++;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	3301      	adds	r3, #1
 80027dc:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	3308      	adds	r3, #8
 80027e2:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1de      	bne.n	80027aa <LCD_DrawString+0x12>
		
	}
	
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <LCD_DrawFace>:



// Skin color, eye color
void LCD_DrawFace(uint16_t usC, uint16_t usP, const uint8_t *face, uint16_t usColor, uint16_t bgColor)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60ba      	str	r2, [r7, #8]
 8002800:	461a      	mov	r2, r3
 8002802:	4603      	mov	r3, r0
 8002804:	81fb      	strh	r3, [r7, #14]
 8002806:	460b      	mov	r3, r1
 8002808:	81bb      	strh	r3, [r7, #12]
 800280a:	4613      	mov	r3, r2
 800280c:	80fb      	strh	r3, [r7, #6]
    // The output is 240x320 (24*10 x 32*10)
    uint16_t width = 24 * 10;
 800280e:	23f0      	movs	r3, #240	; 0xf0
 8002810:	837b      	strh	r3, [r7, #26]
    uint16_t height = 32 * 10;
 8002812:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002816:	833b      	strh	r3, [r7, #24]
    LCD_OpenWindow(usC, usP, width, height);
 8002818:	8b3b      	ldrh	r3, [r7, #24]
 800281a:	8b7a      	ldrh	r2, [r7, #26]
 800281c:	89b9      	ldrh	r1, [r7, #12]
 800281e:	89f8      	ldrh	r0, [r7, #14]
 8002820:	f7ff feda 	bl	80025d8 <LCD_OpenWindow>
    LCD_Write_Cmd(CMD_SetPixel);
 8002824:	202c      	movs	r0, #44	; 0x2c
 8002826:	f7ff fd9d 	bl	8002364 <LCD_Write_Cmd>


    for (uint16_t lcd_y = 0; lcd_y < height; lcd_y++) {
 800282a:	2300      	movs	r3, #0
 800282c:	83fb      	strh	r3, [r7, #30]
 800282e:	e042      	b.n	80028b6 <LCD_DrawFace+0xbe>
        uint8_t x = lcd_y / 10;
 8002830:	8bfb      	ldrh	r3, [r7, #30]
 8002832:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <LCD_DrawFace+0xd0>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	08db      	lsrs	r3, r3, #3
 800283a:	b29b      	uxth	r3, r3
 800283c:	75fb      	strb	r3, [r7, #23]
        for (uint16_t lcd_x = 0; lcd_x < width; lcd_x++) {
 800283e:	2300      	movs	r3, #0
 8002840:	83bb      	strh	r3, [r7, #28]
 8002842:	e031      	b.n	80028a8 <LCD_DrawFace+0xb0>
            uint8_t y = 23 - (lcd_x / 10);
 8002844:	8bbb      	ldrh	r3, [r7, #28]
 8002846:	4a20      	ldr	r2, [pc, #128]	; (80028c8 <LCD_DrawFace+0xd0>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	08db      	lsrs	r3, r3, #3
 800284e:	b29b      	uxth	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f1c3 0317 	rsb	r3, r3, #23
 8002856:	75bb      	strb	r3, [r7, #22]
            uint16_t byteIndex = x * 3 + (y / 8);
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	b29b      	uxth	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	0052      	lsls	r2, r2, #1
 8002860:	4413      	add	r3, r2
 8002862:	b29a      	uxth	r2, r3
 8002864:	7dbb      	ldrb	r3, [r7, #22]
 8002866:	08db      	lsrs	r3, r3, #3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	b29b      	uxth	r3, r3
 800286c:	4413      	add	r3, r2
 800286e:	82bb      	strh	r3, [r7, #20]
            uint8_t bitOffset = y % 8;
 8002870:	7dbb      	ldrb	r3, [r7, #22]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	74fb      	strb	r3, [r7, #19]
            uint8_t byte = face[byteIndex];
 8002878:	8abb      	ldrh	r3, [r7, #20]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	4413      	add	r3, r2
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	74bb      	strb	r3, [r7, #18]
            uint16_t color = (byte & (1 << bitOffset)) ? usColor : bgColor;
 8002882:	7cba      	ldrb	r2, [r7, #18]
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	fa42 f303 	asr.w	r3, r2, r3
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <LCD_DrawFace+0x9e>
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	e000      	b.n	8002898 <LCD_DrawFace+0xa0>
 8002896:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002898:	823b      	strh	r3, [r7, #16]
            LCD_Write_Data(color);
 800289a:	8a3b      	ldrh	r3, [r7, #16]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fd71 	bl	8002384 <LCD_Write_Data>
        for (uint16_t lcd_x = 0; lcd_x < width; lcd_x++) {
 80028a2:	8bbb      	ldrh	r3, [r7, #28]
 80028a4:	3301      	adds	r3, #1
 80028a6:	83bb      	strh	r3, [r7, #28]
 80028a8:	8bba      	ldrh	r2, [r7, #28]
 80028aa:	8b7b      	ldrh	r3, [r7, #26]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d3c9      	bcc.n	8002844 <LCD_DrawFace+0x4c>
    for (uint16_t lcd_y = 0; lcd_y < height; lcd_y++) {
 80028b0:	8bfb      	ldrh	r3, [r7, #30]
 80028b2:	3301      	adds	r3, #1
 80028b4:	83fb      	strh	r3, [r7, #30]
 80028b6:	8bfa      	ldrh	r2, [r7, #30]
 80028b8:	8b3b      	ldrh	r3, [r7, #24]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d3b8      	bcc.n	8002830 <LCD_DrawFace+0x38>
        }
    }
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	cccccccd 	.word	0xcccccccd

080028cc <initAudio>:
	INTRUDER_ALERT_AUDIO
} soundtrack_index;



void initAudio(audioController* audio_controller) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    HAL_TIM_Base_Start(audio_controller->htim);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4618      	mov	r0, r3
 80028da:	f009 fc9f 	bl	800c21c <HAL_TIM_Base_Start>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <loadAudioFiles>:


// Initialize SD card first before calling this function
void loadAudioFiles() {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b09a      	sub	sp, #104	; 0x68
 80028ec:	af00      	add	r7, sp, #0
	char line[20] = {'\0'};
 80028ee:	2300      	movs	r3, #0
 80028f0:	647b      	str	r3, [r7, #68]	; 0x44
 80028f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	60da      	str	r2, [r3, #12]

	// Currently hardcoded to load 4 audio tracks
	for (uint8_t soundtrack = 0; soundtrack < 4; soundtrack++) {
 8002900:	2300      	movs	r3, #0
 8002902:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002906:	e060      	b.n	80029ca <loadAudioFiles+0xe2>
		char name[64] = {'\0'};
 8002908:	2300      	movs	r3, #0
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	f107 0308 	add.w	r3, r7, #8
 8002910:	223c      	movs	r2, #60	; 0x3c
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f00e fb34 	bl	8010f82 <memset>

		strcpy(name, soundtrackDirectory[soundtrack]);
 800291a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800291e:	019b      	lsls	r3, r3, #6
 8002920:	4a2e      	ldr	r2, [pc, #184]	; (80029dc <loadAudioFiles+0xf4>)
 8002922:	441a      	add	r2, r3
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f00e fba5 	bl	8011078 <strcpy>

		FRESULT res = f_open(&SDFile, name, FA_READ);
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	2201      	movs	r2, #1
 8002932:	4619      	mov	r1, r3
 8002934:	482a      	ldr	r0, [pc, #168]	; (80029e0 <loadAudioFiles+0xf8>)
 8002936:	f00d fccf 	bl	80102d8 <f_open>
 800293a:	4603      	mov	r3, r0
 800293c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		for (int i = 0; i < soundtrackFileSize[soundtrack]; i++) {
 8002940:	2300      	movs	r3, #0
 8002942:	663b      	str	r3, [r7, #96]	; 0x60
 8002944:	e030      	b.n	80029a8 <loadAudioFiles+0xc0>
		  f_gets(&line, sizeof(line), &SDFile);
 8002946:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800294a:	4a25      	ldr	r2, [pc, #148]	; (80029e0 <loadAudioFiles+0xf8>)
 800294c:	2114      	movs	r1, #20
 800294e:	4618      	mov	r0, r3
 8002950:	f00e f895 	bl	8010a7e <f_gets>

		  int val = (line[0] - 48) * 1000 + (line[1] - 48) * 100 + (line[2] - 48) * 10 + (line[3] - 48);
 8002954:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002958:	3b30      	subs	r3, #48	; 0x30
 800295a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800295e:	fb03 f202 	mul.w	r2, r3, r2
 8002962:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002966:	3b30      	subs	r3, #48	; 0x30
 8002968:	2164      	movs	r1, #100	; 0x64
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	18d1      	adds	r1, r2, r3
 8002970:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002974:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	18ca      	adds	r2, r1, r3
 8002982:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002986:	3b30      	subs	r3, #48	; 0x30
 8002988:	4413      	add	r3, r2
 800298a:	65bb      	str	r3, [r7, #88]	; 0x58
		  soundtrackAddr[soundtrack][i] = val;
 800298c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002990:	4a14      	ldr	r2, [pc, #80]	; (80029e4 <loadAudioFiles+0xfc>)
 8002992:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002996:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800299e:	b292      	uxth	r2, r2
 80029a0:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < soundtrackFileSize[soundtrack]; i++) {
 80029a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029a4:	3301      	adds	r3, #1
 80029a6:	663b      	str	r3, [r7, #96]	; 0x60
 80029a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029ac:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <loadAudioFiles+0x100>)
 80029ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029b2:	461a      	mov	r2, r3
 80029b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b6:	4293      	cmp	r3, r2
 80029b8:	dbc5      	blt.n	8002946 <loadAudioFiles+0x5e>
		}

		f_close(&SDFile);
 80029ba:	4809      	ldr	r0, [pc, #36]	; (80029e0 <loadAudioFiles+0xf8>)
 80029bc:	f00e f835 	bl	8010a2a <f_close>
	for (uint8_t soundtrack = 0; soundtrack < 4; soundtrack++) {
 80029c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029c4:	3301      	adds	r3, #1
 80029c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80029ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d99a      	bls.n	8002908 <loadAudioFiles+0x20>
	}
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	3768      	adds	r7, #104	; 0x68
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000004 	.word	0x20000004
 80029e0:	20001ac0 	.word	0x20001ac0
 80029e4:	2000010c 	.word	0x2000010c
 80029e8:	20000104 	.word	0x20000104

080029ec <playAudio>:


void playAudio(audioController* audio_controller, soundtrack_index sound) {
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
	HAL_DAC_Start_DMA(audio_controller->hdac, audio_controller->dac_channel, soundtrackAddr[sound], soundtrackFileSize[sound], DAC_ALIGN_12B_R);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6899      	ldr	r1, [r3, #8]
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <playAudio+0x38>)
 8002a04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	4c07      	ldr	r4, [pc, #28]	; (8002a28 <playAudio+0x3c>)
 8002a0c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8002a10:	461c      	mov	r4, r3
 8002a12:	2300      	movs	r3, #0
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4623      	mov	r3, r4
 8002a18:	f005 f816 	bl	8007a48 <HAL_DAC_Start_DMA>
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd90      	pop	{r4, r7, pc}
 8002a24:	2000010c 	.word	0x2000010c
 8002a28:	20000104 	.word	0x20000104

08002a2c <servoReaderStart>:
	double servoAngles[bufLen];
} servoAngleReader;



void servoReaderStart(servoAngleReader* reader) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(reader->servoADC, (uint32_t*)reader->ADC_buf, bufLen);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	220e      	movs	r2, #14
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f004 faec 	bl	800701c <HAL_ADC_Start_DMA>
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <updateAngles>:

	return reader->ADC_buf[servo_channel];
}


void updateAngles(servoAngleReader* reader) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 13; i++) {
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e021      	b.n	8002a9e <updateAngles+0x52>
		reader->servoAngles[i] = 180.0 * reader->ADC_buf[i] / 4096.0;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4413      	add	r3, r2
 8002a62:	889b      	ldrh	r3, [r3, #4]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd55 	bl	8000514 <__aeabi_i2d>
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <updateAngles+0x64>)
 8002a70:	f7fd fdba 	bl	80005e8 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <updateAngles+0x68>)
 8002a82:	f7fd fedb 	bl	800083c <__aeabi_ddiv>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	68f9      	ldr	r1, [r7, #12]
 8002a8e:	3104      	adds	r1, #4
 8002a90:	00c9      	lsls	r1, r1, #3
 8002a92:	4401      	add	r1, r0
 8002a94:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 13; i++) {
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b0c      	cmp	r3, #12
 8002aa2:	ddda      	ble.n	8002a5a <updateAngles+0xe>
	}
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40668000 	.word	0x40668000
 8002ab4:	40b00000 	.word	0x40b00000

08002ab8 <getBatteryVoltage>:
	}

	return reader->servoAngles[servo_channel];
}

double getBatteryVoltage(servoAngleReader* reader) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	return (reader->ADC_buf[BATT_CH] / 4096.0) * (3.3 *  2); // Multiply by two for the battery division ratio
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8bdb      	ldrh	r3, [r3, #30]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd25 	bl	8000514 <__aeabi_i2d>
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <getBatteryVoltage+0x50>)
 8002ad0:	f7fd feb4 	bl	800083c <__aeabi_ddiv>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	a308      	add	r3, pc, #32	; (adr r3, 8002b00 <getBatteryVoltage+0x48>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f7fd fd81 	bl	80005e8 <__aeabi_dmul>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	ec43 2b17 	vmov	d7, r2, r3
}
 8002aee:	eeb0 0a47 	vmov.f32	s0, s14
 8002af2:	eef0 0a67 	vmov.f32	s1, s15
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	f3af 8000 	nop.w
 8002b00:	66666666 	.word	0x66666666
 8002b04:	401a6666 	.word	0x401a6666
 8002b08:	40b00000 	.word	0x40b00000

08002b0c <updateAnglesArray>:
	uint8_t smoothing_counter;
} servo_set;



void updateAnglesArray(servo_set* _servo_set, double angles[bufLen]) {
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < bufLen; i++) {
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e00f      	b.n	8002b3c <updateAnglesArray+0x30>
		_servo_set->angles[i] = angles[i];
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	68f9      	ldr	r1, [r7, #12]
 8002b2c:	3114      	adds	r1, #20
 8002b2e:	00c9      	lsls	r1, r1, #3
 8002b30:	4401      	add	r1, r0
 8002b32:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < bufLen; i++) {
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	ddec      	ble.n	8002b1c <updateAnglesArray+0x10>
	}
}
 8002b42:	bf00      	nop
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <updateSetpointsArray>:


void updateSetpointsArray(servo_set* _servo_set, double setpoints[bufLen]) {
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < bufLen; i++) {
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	e00f      	b.n	8002b80 <updateSetpointsArray+0x30>
		_servo_set->setpoints[i] = setpoints[i];
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	68f9      	ldr	r1, [r7, #12]
 8002b70:	3107      	adds	r1, #7
 8002b72:	00c9      	lsls	r1, r1, #3
 8002b74:	4401      	add	r1, r0
 8002b76:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < bufLen; i++) {
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	ddec      	ble.n	8002b60 <updateSetpointsArray+0x10>
	}
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <updateOutputsArray>:


void updateOutputsArray(servo_set* _servo_set, double outputs[bufLen]) {
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < bufLen; i++) {
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e00f      	b.n	8002bc4 <updateOutputsArray+0x30>
		_servo_set->outputs[i] = outputs[i];
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	68f9      	ldr	r1, [r7, #12]
 8002bb4:	3121      	adds	r1, #33	; 0x21
 8002bb6:	00c9      	lsls	r1, r1, #3
 8002bb8:	4401      	add	r1, r0
 8002bba:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < bufLen; i++) {
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	ddec      	ble.n	8002ba4 <updateOutputsArray+0x10>
	}
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <initFilteredOutputArray>:

void initFilteredOutputArray(servo_set* _servo_set) {
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e01d      	b.n	8002c22 <initFilteredOutputArray+0x4a>
		for (int j = 0; j < bufLen; j++) {
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	e014      	b.n	8002c16 <initFilteredOutputArray+0x3e>
			_servo_set->filtered_output[i][j] = 0;
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	332e      	adds	r3, #46	; 0x2e
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4419      	add	r1, r3
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < bufLen; j++) {
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	dde7      	ble.n	8002bec <initFilteredOutputArray+0x14>
	for (int i = 0; i < 8; i++) {
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b07      	cmp	r3, #7
 8002c26:	ddde      	ble.n	8002be6 <initFilteredOutputArray+0xe>
		}
	}
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <pidInit>:


uint8_t pidInit(servo_set* _servo_set) {
 8002c38:	b590      	push	{r4, r7, lr}
 8002c3a:	b09f      	sub	sp, #124	; 0x7c
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	6078      	str	r0, [r7, #4]
	double zeros[bufLen] = {0};
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	2268      	movs	r2, #104	; 0x68
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f00e f99a 	bl	8010f82 <memset>

	// Initalizing the three arrays
	updateSetpointsArray(_servo_set, zeros);
 8002c4e:	f107 0308 	add.w	r3, r7, #8
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff7b 	bl	8002b50 <updateSetpointsArray>
	updateAnglesArray(_servo_set, zeros);
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff53 	bl	8002b0c <updateAnglesArray>
	updateOutputsArray(_servo_set, zeros);
 8002c66:	f107 0308 	add.w	r3, r7, #8
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff ff91 	bl	8002b94 <updateOutputsArray>
	initFilteredOutputArray(_servo_set);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff ffb0 	bl	8002bd8 <initFilteredOutputArray>

	_servo_set->smoothing_counter = 0;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
	// 100, 0.1, 5
	// 500, 1, 25
	// 1500, 2, 20

	// WORKS: 100, 0, 0.08
	PID(_servo_set->LB_Tibia_PID, &(_servo_set->angles[LB_TIBIA_ADC]), &(_servo_set->outputs[LB_TIBIA_ADC]), &(_servo_set->setpoints[LB_TIBIA_ADC]), 85, 1, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6858      	ldr	r0, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3340      	adds	r3, #64	; 0x40
 8002c94:	2400      	movs	r4, #0
 8002c96:	9401      	str	r4, [sp, #4]
 8002c98:	2401      	movs	r4, #1
 8002c9a:	9400      	str	r4, [sp, #0]
 8002c9c:	ed9f 2bbc 	vldr	d2, [pc, #752]	; 8002f90 <pidInit+0x358>
 8002ca0:	ed9f 1bbd 	vldr	d1, [pc, #756]	; 8002f98 <pidInit+0x360>
 8002ca4:	ed9f 0bbe 	vldr	d0, [pc, #760]	; 8002fa0 <pidInit+0x368>
 8002ca8:	f002 ff52 	bl	8005b50 <PID>
	PID(_servo_set->LB_Femur_PID, &(_servo_set->angles[LB_FEMUR_ADC]), &(_servo_set->outputs[LB_FEMUR_ADC]), &(_servo_set->setpoints[LB_FEMUR_ADC]), 85, 1, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6898      	ldr	r0, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3338      	adds	r3, #56	; 0x38
 8002cc0:	2400      	movs	r4, #0
 8002cc2:	9401      	str	r4, [sp, #4]
 8002cc4:	2401      	movs	r4, #1
 8002cc6:	9400      	str	r4, [sp, #0]
 8002cc8:	ed9f 2bb1 	vldr	d2, [pc, #708]	; 8002f90 <pidInit+0x358>
 8002ccc:	ed9f 1bb2 	vldr	d1, [pc, #712]	; 8002f98 <pidInit+0x360>
 8002cd0:	ed9f 0bb3 	vldr	d0, [pc, #716]	; 8002fa0 <pidInit+0x368>
 8002cd4:	f002 ff3c 	bl	8005b50 <PID>
	PID(_servo_set->LB_Shoul_PID, &(_servo_set->angles[LB_SHOUL_ADC]), &(_servo_set->outputs[LB_SHOUL_ADC]), &(_servo_set->setpoints[LB_SHOUL_ADC]), 170, 1, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68d8      	ldr	r0, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3370      	adds	r3, #112	; 0x70
 8002cec:	2400      	movs	r4, #0
 8002cee:	9401      	str	r4, [sp, #4]
 8002cf0:	2401      	movs	r4, #1
 8002cf2:	9400      	str	r4, [sp, #0]
 8002cf4:	ed9f 2ba6 	vldr	d2, [pc, #664]	; 8002f90 <pidInit+0x358>
 8002cf8:	ed9f 1ba7 	vldr	d1, [pc, #668]	; 8002f98 <pidInit+0x360>
 8002cfc:	ed9f 0baa 	vldr	d0, [pc, #680]	; 8002fa8 <pidInit+0x370>
 8002d00:	f002 ff26 	bl	8005b50 <PID>
	PID(_servo_set->LF_Tibia_PID, &(_servo_set->angles[LF_TIBIA_ADC]), &(_servo_set->outputs[LF_TIBIA_ADC]), &(_servo_set->setpoints[LF_TIBIA_ADC]), 85, 1, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6918      	ldr	r0, [r3, #16]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f103 01f8 	add.w	r1, r3, #248	; 0xf8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3390      	adds	r3, #144	; 0x90
 8002d18:	2400      	movs	r4, #0
 8002d1a:	9401      	str	r4, [sp, #4]
 8002d1c:	2401      	movs	r4, #1
 8002d1e:	9400      	str	r4, [sp, #0]
 8002d20:	ed9f 2b9b 	vldr	d2, [pc, #620]	; 8002f90 <pidInit+0x358>
 8002d24:	ed9f 1b9c 	vldr	d1, [pc, #624]	; 8002f98 <pidInit+0x360>
 8002d28:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 8002fa0 <pidInit+0x368>
 8002d2c:	f002 ff10 	bl	8005b50 <PID>
	PID(_servo_set->LF_Femur_PID, &(_servo_set->angles[LF_FEMUR_ADC]), &(_servo_set->outputs[LF_FEMUR_ADC]), &(_servo_set->setpoints[LF_FEMUR_ADC]), 85, 1, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6958      	ldr	r0, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3388      	adds	r3, #136	; 0x88
 8002d44:	2400      	movs	r4, #0
 8002d46:	9401      	str	r4, [sp, #4]
 8002d48:	2401      	movs	r4, #1
 8002d4a:	9400      	str	r4, [sp, #0]
 8002d4c:	ed9f 2b90 	vldr	d2, [pc, #576]	; 8002f90 <pidInit+0x358>
 8002d50:	ed9f 1b91 	vldr	d1, [pc, #580]	; 8002f98 <pidInit+0x360>
 8002d54:	ed9f 0b92 	vldr	d0, [pc, #584]	; 8002fa0 <pidInit+0x368>
 8002d58:	f002 fefa 	bl	8005b50 <PID>
	PID(_servo_set->LF_Shoul_PID, &(_servo_set->angles[LF_SHOUL_ADC]), &(_servo_set->outputs[LF_SHOUL_ADC]), &(_servo_set->setpoints[LF_SHOUL_ADC]), 170, 1, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6998      	ldr	r0, [r3, #24]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3378      	adds	r3, #120	; 0x78
 8002d70:	2400      	movs	r4, #0
 8002d72:	9401      	str	r4, [sp, #4]
 8002d74:	2401      	movs	r4, #1
 8002d76:	9400      	str	r4, [sp, #0]
 8002d78:	ed9f 2b85 	vldr	d2, [pc, #532]	; 8002f90 <pidInit+0x358>
 8002d7c:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8002f98 <pidInit+0x360>
 8002d80:	ed9f 0b89 	vldr	d0, [pc, #548]	; 8002fa8 <pidInit+0x370>
 8002d84:	f002 fee4 	bl	8005b50 <PID>
	PID(_servo_set->RF_Tibia_PID, &(_servo_set->angles[RF_TIBIA_ADC]), &(_servo_set->outputs[RF_TIBIA_ADC]), &(_servo_set->setpoints[RF_TIBIA_ADC]), 85, 1, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69d8      	ldr	r0, [r3, #28]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3350      	adds	r3, #80	; 0x50
 8002d9c:	2400      	movs	r4, #0
 8002d9e:	9401      	str	r4, [sp, #4]
 8002da0:	2401      	movs	r4, #1
 8002da2:	9400      	str	r4, [sp, #0]
 8002da4:	ed9f 2b7a 	vldr	d2, [pc, #488]	; 8002f90 <pidInit+0x358>
 8002da8:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8002f98 <pidInit+0x360>
 8002dac:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 8002fa0 <pidInit+0x368>
 8002db0:	f002 fece 	bl	8005b50 <PID>
	PID(_servo_set->RF_Femur_PID, &(_servo_set->angles[RF_FEMUR_ADC]), &(_servo_set->outputs[RF_FEMUR_ADC]), &(_servo_set->setpoints[RF_FEMUR_ADC]), 85, 1, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a18      	ldr	r0, [r3, #32]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3348      	adds	r3, #72	; 0x48
 8002dc8:	2400      	movs	r4, #0
 8002dca:	9401      	str	r4, [sp, #4]
 8002dcc:	2401      	movs	r4, #1
 8002dce:	9400      	str	r4, [sp, #0]
 8002dd0:	ed9f 2b6f 	vldr	d2, [pc, #444]	; 8002f90 <pidInit+0x358>
 8002dd4:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8002f98 <pidInit+0x360>
 8002dd8:	ed9f 0b71 	vldr	d0, [pc, #452]	; 8002fa0 <pidInit+0x368>
 8002ddc:	f002 feb8 	bl	8005b50 <PID>
	PID(_servo_set->RF_Shoul_PID, &(_servo_set->angles[RF_SHOUL_ADC]), &(_servo_set->outputs[RF_SHOUL_ADC]), &(_servo_set->setpoints[RF_SHOUL_ADC]), 170, 1, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f503 7298 	add.w	r2, r3, #304	; 0x130
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3360      	adds	r3, #96	; 0x60
 8002df4:	2400      	movs	r4, #0
 8002df6:	9401      	str	r4, [sp, #4]
 8002df8:	2401      	movs	r4, #1
 8002dfa:	9400      	str	r4, [sp, #0]
 8002dfc:	ed9f 2b64 	vldr	d2, [pc, #400]	; 8002f90 <pidInit+0x358>
 8002e00:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8002f98 <pidInit+0x360>
 8002e04:	ed9f 0b68 	vldr	d0, [pc, #416]	; 8002fa8 <pidInit+0x370>
 8002e08:	f002 fea2 	bl	8005b50 <PID>
	PID(_servo_set->RB_Tibia_PID, &(_servo_set->angles[RB_TIBIA_ADC]), &(_servo_set->outputs[RB_TIBIA_ADC]), &(_servo_set->setpoints[RB_TIBIA_ADC]), 85, 1, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3358      	adds	r3, #88	; 0x58
 8002e20:	2400      	movs	r4, #0
 8002e22:	9401      	str	r4, [sp, #4]
 8002e24:	2401      	movs	r4, #1
 8002e26:	9400      	str	r4, [sp, #0]
 8002e28:	ed9f 2b59 	vldr	d2, [pc, #356]	; 8002f90 <pidInit+0x358>
 8002e2c:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8002f98 <pidInit+0x360>
 8002e30:	ed9f 0b5b 	vldr	d0, [pc, #364]	; 8002fa0 <pidInit+0x368>
 8002e34:	f002 fe8c 	bl	8005b50 <PID>
	PID(_servo_set->RB_Femur_PID, &(_servo_set->angles[RB_FEMUR_ADC]), &(_servo_set->outputs[RB_FEMUR_ADC]), &(_servo_set->setpoints[RB_FEMUR_ADC]), 85, 1, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3398      	adds	r3, #152	; 0x98
 8002e4c:	2400      	movs	r4, #0
 8002e4e:	9401      	str	r4, [sp, #4]
 8002e50:	2401      	movs	r4, #1
 8002e52:	9400      	str	r4, [sp, #0]
 8002e54:	ed9f 2b4e 	vldr	d2, [pc, #312]	; 8002f90 <pidInit+0x358>
 8002e58:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8002f98 <pidInit+0x360>
 8002e5c:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8002fa0 <pidInit+0x368>
 8002e60:	f002 fe76 	bl	8005b50 <PID>
	PID(_servo_set->RB_Shoul_PID, &(_servo_set->angles[RB_SHOUL_ADC]), &(_servo_set->outputs[RB_SHOUL_ADC]), &(_servo_set->setpoints[RB_SHOUL_ADC]), 170, 1, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f103 01d0 	add.w	r1, r3, #208	; 0xd0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3368      	adds	r3, #104	; 0x68
 8002e78:	2400      	movs	r4, #0
 8002e7a:	9401      	str	r4, [sp, #4]
 8002e7c:	2401      	movs	r4, #1
 8002e7e:	9400      	str	r4, [sp, #0]
 8002e80:	ed9f 2b43 	vldr	d2, [pc, #268]	; 8002f90 <pidInit+0x358>
 8002e84:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8002f98 <pidInit+0x360>
 8002e88:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8002fa8 <pidInit+0x370>
 8002e8c:	f002 fe60 	bl	8005b50 <PID>

	PID_Init(_servo_set->LB_Tibia_PID);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f002 fe1f 	bl	8005ad8 <PID_Init>
	PID_Init(_servo_set->LB_Femur_PID);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 fe1a 	bl	8005ad8 <PID_Init>
	PID_Init(_servo_set->LB_Shoul_PID);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f002 fe15 	bl	8005ad8 <PID_Init>
	PID_Init(_servo_set->LF_Tibia_PID);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 fe10 	bl	8005ad8 <PID_Init>
	PID_Init(_servo_set->LF_Femur_PID);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f002 fe0b 	bl	8005ad8 <PID_Init>
	PID_Init(_servo_set->LF_Shoul_PID);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f002 fe06 	bl	8005ad8 <PID_Init>
	PID_Init(_servo_set->RF_Tibia_PID);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f002 fe01 	bl	8005ad8 <PID_Init>
	PID_Init(_servo_set->RF_Femur_PID);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 fdfc 	bl	8005ad8 <PID_Init>
	PID_Init(_servo_set->RF_Shoul_PID);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f002 fdf7 	bl	8005ad8 <PID_Init>
	PID_Init(_servo_set->RB_Tibia_PID);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 fdf2 	bl	8005ad8 <PID_Init>
	PID_Init(_servo_set->RB_Femur_PID);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f002 fded 	bl	8005ad8 <PID_Init>
	PID_Init(_servo_set->RB_Shoul_PID);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4618      	mov	r0, r3
 8002f04:	f002 fde8 	bl	8005ad8 <PID_Init>

	PID_SetSampleTime(_servo_set->LB_Tibia_PID, 1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 f8c8 	bl	80060a4 <PID_SetSampleTime>
	PID_SetSampleTime(_servo_set->LB_Femur_PID, 1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 f8c2 	bl	80060a4 <PID_SetSampleTime>
	PID_SetSampleTime(_servo_set->LB_Shoul_PID, 1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2101      	movs	r1, #1
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 f8bc 	bl	80060a4 <PID_SetSampleTime>
	PID_SetSampleTime(_servo_set->LF_Tibia_PID, 1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 f8b6 	bl	80060a4 <PID_SetSampleTime>
	PID_SetSampleTime(_servo_set->LF_Femur_PID, 1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f003 f8b0 	bl	80060a4 <PID_SetSampleTime>
	PID_SetSampleTime(_servo_set->LF_Shoul_PID, 1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 f8aa 	bl	80060a4 <PID_SetSampleTime>
	PID_SetSampleTime(_servo_set->RF_Tibia_PID, 1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 f8a4 	bl	80060a4 <PID_SetSampleTime>
	PID_SetSampleTime(_servo_set->RF_Femur_PID, 1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	2101      	movs	r1, #1
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 f89e 	bl	80060a4 <PID_SetSampleTime>
	PID_SetSampleTime(_servo_set->RF_Shoul_PID, 1);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 f898 	bl	80060a4 <PID_SetSampleTime>
	PID_SetSampleTime(_servo_set->RB_Tibia_PID, 1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f003 f892 	bl	80060a4 <PID_SetSampleTime>
	PID_SetSampleTime(_servo_set->RB_Femur_PID, 1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	2101      	movs	r1, #1
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 f88c 	bl	80060a4 <PID_SetSampleTime>
	PID_SetSampleTime(_servo_set->RB_Shoul_PID, 1);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	e019      	b.n	8002fc4 <pidInit+0x38c>
	...
 8002f9c:	3ff00000 	.word	0x3ff00000
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	40554000 	.word	0x40554000
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	40654000 	.word	0x40654000
 8002fb0:	00000000 	.word	0x00000000
 8002fb4:	40affe00 	.word	0x40affe00
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	c0affe00 	.word	0xc0affe00
 8002fc0:	44bec000 	.word	0x44bec000
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 f86b 	bl	80060a4 <PID_SetSampleTime>

	PID_SetMode(_servo_set->LB_Tibia_PID, _PID_MODE_AUTOMATIC);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f002 fef1 	bl	8005dbc <PID_SetMode>
	PID_SetMode(_servo_set->LB_Femur_PID, _PID_MODE_AUTOMATIC);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f002 feeb 	bl	8005dbc <PID_SetMode>
	PID_SetMode(_servo_set->LB_Shoul_PID, _PID_MODE_AUTOMATIC);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2101      	movs	r1, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f002 fee5 	bl	8005dbc <PID_SetMode>
	PID_SetMode(_servo_set->LF_Tibia_PID, _PID_MODE_AUTOMATIC);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f002 fedf 	bl	8005dbc <PID_SetMode>
	PID_SetMode(_servo_set->LF_Femur_PID, _PID_MODE_AUTOMATIC);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	2101      	movs	r1, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f002 fed9 	bl	8005dbc <PID_SetMode>
	PID_SetMode(_servo_set->LF_Shoul_PID, _PID_MODE_AUTOMATIC);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2101      	movs	r1, #1
 8003010:	4618      	mov	r0, r3
 8003012:	f002 fed3 	bl	8005dbc <PID_SetMode>
	PID_SetMode(_servo_set->RF_Tibia_PID, _PID_MODE_AUTOMATIC);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	2101      	movs	r1, #1
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fecd 	bl	8005dbc <PID_SetMode>
	PID_SetMode(_servo_set->RF_Femur_PID, _PID_MODE_AUTOMATIC);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	2101      	movs	r1, #1
 8003028:	4618      	mov	r0, r3
 800302a:	f002 fec7 	bl	8005dbc <PID_SetMode>
	PID_SetMode(_servo_set->RF_Shoul_PID, _PID_MODE_AUTOMATIC);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2101      	movs	r1, #1
 8003034:	4618      	mov	r0, r3
 8003036:	f002 fec1 	bl	8005dbc <PID_SetMode>
	PID_SetMode(_servo_set->RB_Tibia_PID, _PID_MODE_AUTOMATIC);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	2101      	movs	r1, #1
 8003040:	4618      	mov	r0, r3
 8003042:	f002 febb 	bl	8005dbc <PID_SetMode>
	PID_SetMode(_servo_set->RB_Femur_PID, _PID_MODE_AUTOMATIC);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	2101      	movs	r1, #1
 800304c:	4618      	mov	r0, r3
 800304e:	f002 feb5 	bl	8005dbc <PID_SetMode>
	PID_SetMode(_servo_set->RB_Shoul_PID, _PID_MODE_AUTOMATIC);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	2101      	movs	r1, #1
 8003058:	4618      	mov	r0, r3
 800305a:	f002 feaf 	bl	8005dbc <PID_SetMode>

	PID_SetOutputLimits(_servo_set->LB_Tibia_PID, -4095, 4095);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	ed1f 1b2d 	vldr	d1, [pc, #-180]	; 8002fb0 <pidInit+0x378>
 8003066:	ed1f 0b2c 	vldr	d0, [pc, #-176]	; 8002fb8 <pidInit+0x380>
 800306a:	4618      	mov	r0, r3
 800306c:	f002 fec4 	bl	8005df8 <PID_SetOutputLimits>
	PID_SetOutputLimits(_servo_set->LB_Femur_PID, -4095, 4095);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	ed1f 1b32 	vldr	d1, [pc, #-200]	; 8002fb0 <pidInit+0x378>
 8003078:	ed1f 0b31 	vldr	d0, [pc, #-196]	; 8002fb8 <pidInit+0x380>
 800307c:	4618      	mov	r0, r3
 800307e:	f002 febb 	bl	8005df8 <PID_SetOutputLimits>
	PID_SetOutputLimits(_servo_set->LB_Shoul_PID, -4095, 4095);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	ed1f 1b36 	vldr	d1, [pc, #-216]	; 8002fb0 <pidInit+0x378>
 800308a:	ed1f 0b35 	vldr	d0, [pc, #-212]	; 8002fb8 <pidInit+0x380>
 800308e:	4618      	mov	r0, r3
 8003090:	f002 feb2 	bl	8005df8 <PID_SetOutputLimits>
	PID_SetOutputLimits(_servo_set->LF_Tibia_PID, -4095, 4095);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	ed1f 1b3b 	vldr	d1, [pc, #-236]	; 8002fb0 <pidInit+0x378>
 800309c:	ed1f 0b3a 	vldr	d0, [pc, #-232]	; 8002fb8 <pidInit+0x380>
 80030a0:	4618      	mov	r0, r3
 80030a2:	f002 fea9 	bl	8005df8 <PID_SetOutputLimits>
	PID_SetOutputLimits(_servo_set->LF_Femur_PID, -4095, 4095);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	ed1f 1b3f 	vldr	d1, [pc, #-252]	; 8002fb0 <pidInit+0x378>
 80030ae:	ed1f 0b3e 	vldr	d0, [pc, #-248]	; 8002fb8 <pidInit+0x380>
 80030b2:	4618      	mov	r0, r3
 80030b4:	f002 fea0 	bl	8005df8 <PID_SetOutputLimits>
	PID_SetOutputLimits(_servo_set->LF_Shoul_PID, -4095, 4095);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	ed1f 1b44 	vldr	d1, [pc, #-272]	; 8002fb0 <pidInit+0x378>
 80030c0:	ed1f 0b43 	vldr	d0, [pc, #-268]	; 8002fb8 <pidInit+0x380>
 80030c4:	4618      	mov	r0, r3
 80030c6:	f002 fe97 	bl	8005df8 <PID_SetOutputLimits>
	PID_SetOutputLimits(_servo_set->RF_Tibia_PID, -4095, 4095);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	ed1f 1b48 	vldr	d1, [pc, #-288]	; 8002fb0 <pidInit+0x378>
 80030d2:	ed1f 0b47 	vldr	d0, [pc, #-284]	; 8002fb8 <pidInit+0x380>
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 fe8e 	bl	8005df8 <PID_SetOutputLimits>
	PID_SetOutputLimits(_servo_set->RF_Femur_PID, -4095, 4095);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	ed1f 1b4d 	vldr	d1, [pc, #-308]	; 8002fb0 <pidInit+0x378>
 80030e4:	ed1f 0b4c 	vldr	d0, [pc, #-304]	; 8002fb8 <pidInit+0x380>
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 fe85 	bl	8005df8 <PID_SetOutputLimits>
	PID_SetOutputLimits(_servo_set->RF_Shoul_PID, -4095, 4095);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	ed1f 1b51 	vldr	d1, [pc, #-324]	; 8002fb0 <pidInit+0x378>
 80030f6:	ed1f 0b50 	vldr	d0, [pc, #-320]	; 8002fb8 <pidInit+0x380>
 80030fa:	4618      	mov	r0, r3
 80030fc:	f002 fe7c 	bl	8005df8 <PID_SetOutputLimits>
	PID_SetOutputLimits(_servo_set->RB_Tibia_PID, -4095, 4095);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	ed1f 1b56 	vldr	d1, [pc, #-344]	; 8002fb0 <pidInit+0x378>
 8003108:	ed1f 0b55 	vldr	d0, [pc, #-340]	; 8002fb8 <pidInit+0x380>
 800310c:	4618      	mov	r0, r3
 800310e:	f002 fe73 	bl	8005df8 <PID_SetOutputLimits>
	PID_SetOutputLimits(_servo_set->RB_Femur_PID, -4095, 4095);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	ed1f 1b5a 	vldr	d1, [pc, #-360]	; 8002fb0 <pidInit+0x378>
 800311a:	ed1f 0b59 	vldr	d0, [pc, #-356]	; 8002fb8 <pidInit+0x380>
 800311e:	4618      	mov	r0, r3
 8003120:	f002 fe6a 	bl	8005df8 <PID_SetOutputLimits>
	PID_SetOutputLimits(_servo_set->RB_Shoul_PID, -4095, 4095);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	ed1f 1b5f 	vldr	d1, [pc, #-380]	; 8002fb0 <pidInit+0x378>
 800312c:	ed1f 0b5e 	vldr	d0, [pc, #-376]	; 8002fb8 <pidInit+0x380>
 8003130:	4618      	mov	r0, r3
 8003132:	f002 fe61 	bl	8005df8 <PID_SetOutputLimits>


	if (!(pca9685_init(_servo_set->pwm_out_1))) {
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 800313c:	4618      	mov	r0, r3
 800313e:	f002 fac5 	bl	80056cc <pca9685_init>
 8003142:	4603      	mov	r3, r0
 8003144:	f083 0301 	eor.w	r3, r3, #1
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <pidInit+0x51a>
		return 0;
 800314e:	2300      	movs	r3, #0
 8003150:	e02a      	b.n	80031a8 <pidInit+0x570>
	}

	if (!(pca9685_init(_servo_set->pwm_out_2))) {
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8003158:	4618      	mov	r0, r3
 800315a:	f002 fab7 	bl	80056cc <pca9685_init>
 800315e:	4603      	mov	r3, r0
 8003160:	f083 0301 	eor.w	r3, r3, #1
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <pidInit+0x536>
		return 0;
 800316a:	2300      	movs	r3, #0
 800316c:	e01c      	b.n	80031a8 <pidInit+0x570>
	}

	pca9685_wakeup(_servo_set->pwm_out_1);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 8003174:	4618      	mov	r0, r3
 8003176:	f002 fb77 	bl	8005868 <pca9685_wakeup>
	pca9685_wakeup(_servo_set->pwm_out_2);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8003180:	4618      	mov	r0, r3
 8003182:	f002 fb71 	bl	8005868 <pca9685_wakeup>

	pca9685_set_pwm_frequency(_servo_set->pwm_out_1, 1526);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 800318c:	ed1f 0a74 	vldr	s0, [pc, #-464]	; 8002fc0 <pidInit+0x388>
 8003190:	4618      	mov	r0, r3
 8003192:	f002 fbbf 	bl	8005914 <pca9685_set_pwm_frequency>
	pca9685_set_pwm_frequency(_servo_set->pwm_out_2, 1526);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 800319c:	ed1f 0a78 	vldr	s0, [pc, #-480]	; 8002fc0 <pidInit+0x388>
 80031a0:	4618      	mov	r0, r3
 80031a2:	f002 fbb7 	bl	8005914 <pca9685_set_pwm_frequency>

	return 1;
 80031a6:	2301      	movs	r3, #1
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3774      	adds	r7, #116	; 0x74
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd90      	pop	{r4, r7, pc}

080031b0 <updateServo>:


void updateServo(servo_set* _servo_set) {
 80031b0:	b5b0      	push	{r4, r5, r7, lr}
 80031b2:	b09e      	sub	sp, #120	; 0x78
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	if (_servo_set->smoothing_counter >= 0) {
		_servo_set->smoothing_counter = 0;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
	}
	else {
		_servo_set->smoothing_counter++;
	}
	// Computing the output, then output to the PWM driver over I2C
	PID_Compute(_servo_set->LB_Tibia_PID);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 fd0f 	bl	8005be8 <PID_Compute>
	PID_Compute(_servo_set->LB_Femur_PID);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f002 fd0a 	bl	8005be8 <PID_Compute>
	PID_Compute(_servo_set->LB_Shoul_PID);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 fd05 	bl	8005be8 <PID_Compute>

	PID_Compute(_servo_set->LF_Tibia_PID);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f002 fd00 	bl	8005be8 <PID_Compute>
	PID_Compute(_servo_set->LF_Femur_PID);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f002 fcfb 	bl	8005be8 <PID_Compute>
	PID_Compute(_servo_set->LF_Shoul_PID);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 fcf6 	bl	8005be8 <PID_Compute>

	PID_Compute(_servo_set->RF_Tibia_PID);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	4618      	mov	r0, r3
 8003202:	f002 fcf1 	bl	8005be8 <PID_Compute>
	PID_Compute(_servo_set->RF_Femur_PID);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4618      	mov	r0, r3
 800320c:	f002 fcec 	bl	8005be8 <PID_Compute>
	PID_Compute(_servo_set->RF_Shoul_PID);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	4618      	mov	r0, r3
 8003216:	f002 fce7 	bl	8005be8 <PID_Compute>

	PID_Compute(_servo_set->RB_Tibia_PID);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	4618      	mov	r0, r3
 8003220:	f002 fce2 	bl	8005be8 <PID_Compute>
	PID_Compute(_servo_set->RB_Femur_PID);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	4618      	mov	r0, r3
 800322a:	f002 fcdd 	bl	8005be8 <PID_Compute>
	PID_Compute(_servo_set->RB_Shoul_PID);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4618      	mov	r0, r3
 8003234:	f002 fcd8 	bl	8005be8 <PID_Compute>
	// 	averaged_output[i] = (_servo_set->filtered_output[0][i]);
	// 	// averaged_output[i] = (_servo_set->filtered_output[0][i] + _servo_set->filtered_output[1][i] + _servo_set->filtered_output[2][i] + _servo_set->filtered_output[3][i]) / 4;
	// 						// _servo_set->filtered_output[4][i] + _servo_set->filtered_output[5][i] + _servo_set->filtered_output[6][i] + _servo_set->filtered_output[7][i]) / 8.0;
	// }
	
	unsigned int onehot_F_output [bufLen] = {0};
 8003238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800323c:	2234      	movs	r2, #52	; 0x34
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f00d fe9e 	bl	8010f82 <memset>
	unsigned int onehot_B_output [bufLen] = {0};
 8003246:	f107 030c 	add.w	r3, r7, #12
 800324a:	2234      	movs	r2, #52	; 0x34
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f00d fe97 	bl	8010f82 <memset>


	for (int i = 0; i < bufLen; i++) {
 8003254:	2300      	movs	r3, #0
 8003256:	677b      	str	r3, [r7, #116]	; 0x74
 8003258:	e048      	b.n	80032ec <updateServo+0x13c>
		if (_servo_set->outputs[i] >= 0) {
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325e:	3321      	adds	r3, #33	; 0x21
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	f7fd fc40 	bl	8000af4 <__aeabi_dcmpge>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d019      	beq.n	80032ae <updateServo+0xfe>
			onehot_F_output[i] = _servo_set->outputs[i];
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800327e:	3321      	adds	r3, #33	; 0x21
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	f7fd fc5c 	bl	8000b48 <__aeabi_d2uiz>
 8003290:	4602      	mov	r2, r0
 8003292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	3378      	adds	r3, #120	; 0x78
 8003298:	443b      	add	r3, r7
 800329a:	f843 2c38 	str.w	r2, [r3, #-56]
			onehot_B_output[i] = 0;
 800329e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	3378      	adds	r3, #120	; 0x78
 80032a4:	443b      	add	r3, r7
 80032a6:	2200      	movs	r2, #0
 80032a8:	f843 2c6c 	str.w	r2, [r3, #-108]
 80032ac:	e01b      	b.n	80032e6 <updateServo+0x136>
		}
		else {
			onehot_F_output[i] = 0;
 80032ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	3378      	adds	r3, #120	; 0x78
 80032b4:	443b      	add	r3, r7
 80032b6:	2200      	movs	r2, #0
 80032b8:	f843 2c38 	str.w	r2, [r3, #-56]
			onehot_B_output[i] = (unsigned int)(-_servo_set->outputs[i]);
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c0:	3321      	adds	r3, #33	; 0x21
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	4614      	mov	r4, r2
 80032cc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80032d0:	4620      	mov	r0, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	f7fd fc38 	bl	8000b48 <__aeabi_d2uiz>
 80032d8:	4602      	mov	r2, r0
 80032da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	3378      	adds	r3, #120	; 0x78
 80032e0:	443b      	add	r3, r7
 80032e2:	f843 2c6c 	str.w	r2, [r3, #-108]
	for (int i = 0; i < bufLen; i++) {
 80032e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e8:	3301      	adds	r3, #1
 80032ea:	677b      	str	r3, [r7, #116]	; 0x74
 80032ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	ddb3      	ble.n	800325a <updateServo+0xaa>
		}
	}

	// PWM Controller 1
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), RF_TIBIA_F_1, 0, (onehot_F_output[RF_TIBIA_ADC]));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 80032f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fa:	2200      	movs	r2, #0
 80032fc:	210a      	movs	r1, #10
 80032fe:	f002 fb9d 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), RF_TIBIA_B_1, 0, (onehot_B_output[RF_TIBIA_ADC]));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2200      	movs	r2, #0
 800330c:	210b      	movs	r1, #11
 800330e:	f002 fb95 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), RF_FEMUR_F_1, 0, (onehot_F_output[RF_FEMUR_ADC]));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 8003318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800331a:	2200      	movs	r2, #0
 800331c:	210f      	movs	r1, #15
 800331e:	f002 fb8d 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), RF_FEMUR_B_1, 0, (onehot_B_output[RF_FEMUR_ADC]));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2200      	movs	r2, #0
 800332c:	210e      	movs	r1, #14
 800332e:	f002 fb85 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), RF_SHOUL_F_1, 0, (onehot_F_output[RF_SHOUL_ADC]));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 8003338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333a:	2200      	movs	r2, #0
 800333c:	210d      	movs	r1, #13
 800333e:	f002 fb7d 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), RF_SHOUL_B_1, 0, (onehot_B_output[RF_SHOUL_ADC]));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	2200      	movs	r2, #0
 800334c:	210c      	movs	r1, #12
 800334e:	f002 fb75 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), LF_TIBIA_F_1, 0, (onehot_F_output[LF_TIBIA_ADC]));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 8003358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335a:	2200      	movs	r2, #0
 800335c:	2100      	movs	r1, #0
 800335e:	f002 fb6d 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), LF_TIBIA_B_1, 0, (onehot_B_output[LF_TIBIA_ADC]));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	2200      	movs	r2, #0
 800336c:	2108      	movs	r1, #8
 800336e:	f002 fb65 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), LF_FEMUR_F_1, 0, (onehot_F_output[LF_FEMUR_ADC]));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 8003378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800337a:	2200      	movs	r2, #0
 800337c:	2101      	movs	r1, #1
 800337e:	f002 fb5d 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), LF_FEMUR_B_1, 0, (onehot_B_output[LF_FEMUR_ADC]));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 8003388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338a:	2200      	movs	r2, #0
 800338c:	2102      	movs	r1, #2
 800338e:	f002 fb55 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), LF_SHOUL_F_1, 0, (onehot_F_output[LF_SHOUL_ADC]));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 8003398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800339a:	2200      	movs	r2, #0
 800339c:	2103      	movs	r1, #3
 800339e:	f002 fb4d 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), LF_SHOUL_B_1, 0, (onehot_B_output[LF_SHOUL_ADC]));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	2200      	movs	r2, #0
 80033ac:	2109      	movs	r1, #9
 80033ae:	f002 fb45 	bl	8005a3c <pca9685_set_channel_pwm_times>

//	pca9685_wakeup((_servo_set->pwm_out_1));

	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), RB_TIBIA_F_1, 0, (onehot_F_output[RB_TIBIA_ADC]));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 80033b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ba:	2200      	movs	r2, #0
 80033bc:	2107      	movs	r1, #7
 80033be:	f002 fb3d 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), RB_TIBIA_B_1, 0, (onehot_B_output[RB_TIBIA_ADC]));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2200      	movs	r2, #0
 80033cc:	2106      	movs	r1, #6
 80033ce:	f002 fb35 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), RB_SHOUL_F_1, 0, (onehot_F_output[RB_SHOUL_ADC]));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 80033d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033da:	2200      	movs	r2, #0
 80033dc:	2104      	movs	r1, #4
 80033de:	f002 fb2d 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_1), RB_SHOUL_B_1, 0, (onehot_B_output[RB_SHOUL_ADC]));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	2200      	movs	r2, #0
 80033ec:	2105      	movs	r1, #5
 80033ee:	f002 fb25 	bl	8005a3c <pca9685_set_channel_pwm_times>

//	pca9685_wakeup((_servo_set->pwm_out_2));
	// PWM Controller 2
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_2), LB_TIBIA_F_2, 0, (onehot_F_output[LB_TIBIA_ADC]));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 04b4 	ldr.w	r0, [r3, #1204]	; 0x4b4
 80033f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fa:	2200      	movs	r2, #0
 80033fc:	2108      	movs	r1, #8
 80033fe:	f002 fb1d 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_2), LB_TIBIA_B_2, 0, (onehot_B_output[LB_TIBIA_ADC]));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 04b4 	ldr.w	r0, [r3, #1204]	; 0x4b4
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	2200      	movs	r2, #0
 800340c:	2109      	movs	r1, #9
 800340e:	f002 fb15 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_2), LB_FEMUR_F_2, 0, (onehot_F_output[LB_FEMUR_ADC]));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8d3 04b4 	ldr.w	r0, [r3, #1204]	; 0x4b4
 8003418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800341a:	2200      	movs	r2, #0
 800341c:	210d      	movs	r1, #13
 800341e:	f002 fb0d 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_2), LB_FEMUR_B_2, 0, (onehot_B_output[LB_FEMUR_ADC]));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 04b4 	ldr.w	r0, [r3, #1204]	; 0x4b4
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	210c      	movs	r1, #12
 800342e:	f002 fb05 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_2), LB_SHOUL_F_2, 0, (onehot_F_output[LB_SHOUL_ADC])); 
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 04b4 	ldr.w	r0, [r3, #1204]	; 0x4b4
 8003438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800343a:	2200      	movs	r2, #0
 800343c:	210b      	movs	r1, #11
 800343e:	f002 fafd 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_2), LB_SHOUL_B_2, 0, (onehot_B_output[LB_SHOUL_ADC]));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 04b4 	ldr.w	r0, [r3, #1204]	; 0x4b4
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	2200      	movs	r2, #0
 800344c:	210a      	movs	r1, #10
 800344e:	f002 faf5 	bl	8005a3c <pca9685_set_channel_pwm_times>

	pca9685_set_channel_pwm_times((_servo_set->pwm_out_2), RB_FEMUR_F_2, 0, (onehot_F_output[RB_FEMUR_ADC]));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8d3 04b4 	ldr.w	r0, [r3, #1204]	; 0x4b4
 8003458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800345a:	2200      	movs	r2, #0
 800345c:	210f      	movs	r1, #15
 800345e:	f002 faed 	bl	8005a3c <pca9685_set_channel_pwm_times>
	pca9685_set_channel_pwm_times((_servo_set->pwm_out_2), RB_FEMUR_B_2, 0, (onehot_B_output[RB_FEMUR_ADC]));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 04b4 	ldr.w	r0, [r3, #1204]	; 0x4b4
 8003468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346a:	2200      	movs	r2, #0
 800346c:	210e      	movs	r1, #14
 800346e:	f002 fae5 	bl	8005a3c <pca9685_set_channel_pwm_times>
}
 8003472:	bf00      	nop
 8003474:	3778      	adds	r7, #120	; 0x78
 8003476:	46bd      	mov	sp, r7
 8003478:	bdb0      	pop	{r4, r5, r7, pc}
 800347a:	0000      	movs	r0, r0
 800347c:	0000      	movs	r0, r0
	...

08003480 <inverse_kinematics>:
    double shoul_omega;
    double femur_theta;
    double tibia_epsilon;
} leg_position;

void inverse_kinematics(leg_position* leg) {
 8003480:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003484:	b08c      	sub	sp, #48	; 0x30
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]

    // Outputs
    float omega, theta, epsilon;    // Direct computed angle for shoulder, femur and tibia respectively, before correction
    float cr_omega, cr_theta, cr_epsilon;    // Corrected values

    D = sqrtf(powf(leg->z, 2) + pow(leg->y, 2) - 3.9*3.9);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003490:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003494:	eeb0 0a67 	vmov.f32	s0, s15
 8003498:	f00e fe43 	bl	8012122 <powf>
 800349c:	ee10 3a10 	vmov	r3, s0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd f849 	bl	8000538 <__aeabi_f2d>
 80034a6:	4604      	mov	r4, r0
 80034a8:	460d      	mov	r5, r1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd f842 	bl	8000538 <__aeabi_f2d>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	ed9f 1bd5 	vldr	d1, [pc, #852]	; 8003810 <inverse_kinematics+0x390>
 80034bc:	ec43 2b10 	vmov	d0, r2, r3
 80034c0:	f00e fc14 	bl	8011cec <pow>
 80034c4:	ec53 2b10 	vmov	r2, r3, d0
 80034c8:	4620      	mov	r0, r4
 80034ca:	4629      	mov	r1, r5
 80034cc:	f7fc fed6 	bl	800027c <__adddf3>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4610      	mov	r0, r2
 80034d6:	4619      	mov	r1, r3
 80034d8:	a3cf      	add	r3, pc, #828	; (adr r3, 8003818 <inverse_kinematics+0x398>)
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	f7fc fecb 	bl	8000278 <__aeabi_dsub>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	f7fd fb4d 	bl	8000b88 <__aeabi_d2f>
 80034ee:	4603      	mov	r3, r0
 80034f0:	ee00 3a10 	vmov	s0, r3
 80034f4:	f00e fe6c 	bl	80121d0 <sqrtf>
 80034f8:	ed87 0a08 	vstr	s0, [r7, #32]

    G = sqrtf(pow(D, 2) + pow((leg->x), 2));
 80034fc:	6a38      	ldr	r0, [r7, #32]
 80034fe:	f7fd f81b 	bl	8000538 <__aeabi_f2d>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	ed9f 1bc2 	vldr	d1, [pc, #776]	; 8003810 <inverse_kinematics+0x390>
 800350a:	ec43 2b10 	vmov	d0, r2, r3
 800350e:	f00e fbed 	bl	8011cec <pow>
 8003512:	ec55 4b10 	vmov	r4, r5, d0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd f80c 	bl	8000538 <__aeabi_f2d>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	ed9f 1bba 	vldr	d1, [pc, #744]	; 8003810 <inverse_kinematics+0x390>
 8003528:	ec43 2b10 	vmov	d0, r2, r3
 800352c:	f00e fbde 	bl	8011cec <pow>
 8003530:	ec53 2b10 	vmov	r2, r3, d0
 8003534:	4620      	mov	r0, r4
 8003536:	4629      	mov	r1, r5
 8003538:	f7fc fea0 	bl	800027c <__adddf3>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	f7fd fb20 	bl	8000b88 <__aeabi_d2f>
 8003548:	4603      	mov	r3, r0
 800354a:	ee00 3a10 	vmov	s0, r3
 800354e:	f00e fe3f 	bl	80121d0 <sqrtf>
 8003552:	ed87 0a07 	vstr	s0, [r7, #28]

    phi = acos((G * G - 199.92) / (-196.89));
 8003556:	edd7 7a07 	vldr	s15, [r7, #28]
 800355a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800355e:	ee17 0a90 	vmov	r0, s15
 8003562:	f7fc ffe9 	bl	8000538 <__aeabi_f2d>
 8003566:	a3ae      	add	r3, pc, #696	; (adr r3, 8003820 <inverse_kinematics+0x3a0>)
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f7fc fe84 	bl	8000278 <__aeabi_dsub>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	a3ab      	add	r3, pc, #684	; (adr r3, 8003828 <inverse_kinematics+0x3a8>)
 800357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357e:	f7fd f95d 	bl	800083c <__aeabi_ddiv>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	ec43 2b17 	vmov	d7, r2, r3
 800358a:	eeb0 0a47 	vmov.f32	s0, s14
 800358e:	eef0 0a67 	vmov.f32	s1, s15
 8003592:	f00e fb77 	bl	8011c84 <acos>
 8003596:	ec53 2b10 	vmov	r2, r3, d0
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	f7fd faf3 	bl	8000b88 <__aeabi_d2f>
 80035a2:	4603      	mov	r3, r0
 80035a4:	61bb      	str	r3, [r7, #24]

    omega = atan((leg->z) / (leg->y)) + atan(D / 3.9);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80035b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80035b6:	ee16 0a90 	vmov	r0, s13
 80035ba:	f7fc ffbd 	bl	8000538 <__aeabi_f2d>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	ec43 2b10 	vmov	d0, r2, r3
 80035c6:	f00e fc03 	bl	8011dd0 <atan>
 80035ca:	ec55 4b10 	vmov	r4, r5, d0
 80035ce:	6a38      	ldr	r0, [r7, #32]
 80035d0:	f7fc ffb2 	bl	8000538 <__aeabi_f2d>
 80035d4:	a396      	add	r3, pc, #600	; (adr r3, 8003830 <inverse_kinematics+0x3b0>)
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f7fd f92f 	bl	800083c <__aeabi_ddiv>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	ec43 2b17 	vmov	d7, r2, r3
 80035e6:	eeb0 0a47 	vmov.f32	s0, s14
 80035ea:	eef0 0a67 	vmov.f32	s1, s15
 80035ee:	f00e fbef 	bl	8011dd0 <atan>
 80035f2:	ec53 2b10 	vmov	r2, r3, d0
 80035f6:	4620      	mov	r0, r4
 80035f8:	4629      	mov	r1, r5
 80035fa:	f7fc fe3f 	bl	800027c <__adddf3>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	f7fd fabf 	bl	8000b88 <__aeabi_d2f>
 800360a:	4603      	mov	r3, r0
 800360c:	617b      	str	r3, [r7, #20]

    theta = atan((leg->x) / D) + atan(10.83 * sinf(phi) / G);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	ed93 7a01 	vldr	s14, [r3, #4]
 8003614:	edd7 7a08 	vldr	s15, [r7, #32]
 8003618:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800361c:	ee16 0a90 	vmov	r0, s13
 8003620:	f7fc ff8a 	bl	8000538 <__aeabi_f2d>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	ec43 2b10 	vmov	d0, r2, r3
 800362c:	f00e fbd0 	bl	8011dd0 <atan>
 8003630:	ec59 8b10 	vmov	r8, r9, d0
 8003634:	ed97 0a06 	vldr	s0, [r7, #24]
 8003638:	f00e fde8 	bl	801220c <sinf>
 800363c:	ee10 3a10 	vmov	r3, s0
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc ff79 	bl	8000538 <__aeabi_f2d>
 8003646:	a37c      	add	r3, pc, #496	; (adr r3, 8003838 <inverse_kinematics+0x3b8>)
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f7fc ffcc 	bl	80005e8 <__aeabi_dmul>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4614      	mov	r4, r2
 8003656:	461d      	mov	r5, r3
 8003658:	69f8      	ldr	r0, [r7, #28]
 800365a:	f7fc ff6d 	bl	8000538 <__aeabi_f2d>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4620      	mov	r0, r4
 8003664:	4629      	mov	r1, r5
 8003666:	f7fd f8e9 	bl	800083c <__aeabi_ddiv>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	ec43 2b17 	vmov	d7, r2, r3
 8003672:	eeb0 0a47 	vmov.f32	s0, s14
 8003676:	eef0 0a67 	vmov.f32	s1, s15
 800367a:	f00e fba9 	bl	8011dd0 <atan>
 800367e:	ec53 2b10 	vmov	r2, r3, d0
 8003682:	4640      	mov	r0, r8
 8003684:	4649      	mov	r1, r9
 8003686:	f7fc fdf9 	bl	800027c <__adddf3>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	f7fd fa79 	bl	8000b88 <__aeabi_d2f>
 8003696:	4603      	mov	r3, r0
 8003698:	613b      	str	r3, [r7, #16]

    epsilon = theta + phi;
 800369a:	ed97 7a04 	vldr	s14, [r7, #16]
 800369e:	edd7 7a06 	vldr	s15, [r7, #24]
 80036a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a6:	edc7 7a03 	vstr	s15, [r7, #12]

    // Applying hardcoded angular correction for these shitass servos
    switch(leg->leg) {
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	f200 8192 	bhi.w	80039d8 <inverse_kinematics+0x558>
 80036b4:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <inverse_kinematics+0x23c>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036cd 	.word	0x080036cd
 80036c0:	08003763 	.word	0x08003763
 80036c4:	08003889 	.word	0x08003889
 80036c8:	08003931 	.word	0x08003931
        case (LB):
            cr_omega =  omega;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            cr_theta = (PI - theta - 1.471138) * 1.14;
 80036d0:	6938      	ldr	r0, [r7, #16]
 80036d2:	f7fc ff31 	bl	8000538 <__aeabi_f2d>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	a159      	add	r1, pc, #356	; (adr r1, 8003840 <inverse_kinematics+0x3c0>)
 80036dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036e0:	f7fc fdca 	bl	8000278 <__aeabi_dsub>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	a356      	add	r3, pc, #344	; (adr r3, 8003848 <inverse_kinematics+0x3c8>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f7fc fdc1 	bl	8000278 <__aeabi_dsub>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	a354      	add	r3, pc, #336	; (adr r3, 8003850 <inverse_kinematics+0x3d0>)
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f7fc ff70 	bl	80005e8 <__aeabi_dmul>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	f7fd fa3a 	bl	8000b88 <__aeabi_d2f>
 8003714:	4603      	mov	r3, r0
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
            cr_epsilon = (PI - epsilon - 0.4101524) * 1 + PI_OVER_TWO;
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7fc ff0d 	bl	8000538 <__aeabi_f2d>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	a147      	add	r1, pc, #284	; (adr r1, 8003840 <inverse_kinematics+0x3c0>)
 8003724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003728:	f7fc fda6 	bl	8000278 <__aeabi_dsub>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4610      	mov	r0, r2
 8003732:	4619      	mov	r1, r3
 8003734:	a348      	add	r3, pc, #288	; (adr r3, 8003858 <inverse_kinematics+0x3d8>)
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	f7fc fd9d 	bl	8000278 <__aeabi_dsub>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	a346      	add	r3, pc, #280	; (adr r3, 8003860 <inverse_kinematics+0x3e0>)
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f7fc fd96 	bl	800027c <__adddf3>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	f7fd fa16 	bl	8000b88 <__aeabi_d2f>
 800375c:	4603      	mov	r3, r0
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003760:	e13a      	b.n	80039d8 <inverse_kinematics+0x558>
        
        case (RB):
            cr_omega = omega;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	62fb      	str	r3, [r7, #44]	; 0x2c
            cr_theta = (PI - theta - 1.552994) * 1.143;
 8003766:	6938      	ldr	r0, [r7, #16]
 8003768:	f7fc fee6 	bl	8000538 <__aeabi_f2d>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	a133      	add	r1, pc, #204	; (adr r1, 8003840 <inverse_kinematics+0x3c0>)
 8003772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003776:	f7fc fd7f 	bl	8000278 <__aeabi_dsub>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	a339      	add	r3, pc, #228	; (adr r3, 8003868 <inverse_kinematics+0x3e8>)
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f7fc fd76 	bl	8000278 <__aeabi_dsub>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	a336      	add	r3, pc, #216	; (adr r3, 8003870 <inverse_kinematics+0x3f0>)
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	f7fc ff25 	bl	80005e8 <__aeabi_dmul>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4610      	mov	r0, r2
 80037a4:	4619      	mov	r1, r3
 80037a6:	f7fd f9ef 	bl	8000b88 <__aeabi_d2f>
 80037aa:	4603      	mov	r3, r0
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
            cr_epsilon = (PI - epsilon - 0.52307518) * 1.245 + PI_OVER_TWO;
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f7fc fec2 	bl	8000538 <__aeabi_f2d>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	a121      	add	r1, pc, #132	; (adr r1, 8003840 <inverse_kinematics+0x3c0>)
 80037ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037be:	f7fc fd5b 	bl	8000278 <__aeabi_dsub>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4610      	mov	r0, r2
 80037c8:	4619      	mov	r1, r3
 80037ca:	a32b      	add	r3, pc, #172	; (adr r3, 8003878 <inverse_kinematics+0x3f8>)
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f7fc fd52 	bl	8000278 <__aeabi_dsub>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	a328      	add	r3, pc, #160	; (adr r3, 8003880 <inverse_kinematics+0x400>)
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f7fc ff01 	bl	80005e8 <__aeabi_dmul>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4610      	mov	r0, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	a31c      	add	r3, pc, #112	; (adr r3, 8003860 <inverse_kinematics+0x3e0>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f7fc fd42 	bl	800027c <__adddf3>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	f7fd f9c2 	bl	8000b88 <__aeabi_d2f>
 8003804:	4603      	mov	r3, r0
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003808:	e0e6      	b.n	80039d8 <inverse_kinematics+0x558>
 800380a:	bf00      	nop
 800380c:	f3af 8000 	nop.w
 8003810:	00000000 	.word	0x00000000
 8003814:	40000000 	.word	0x40000000
 8003818:	1eb851eb 	.word	0x1eb851eb
 800381c:	402e6b85 	.word	0x402e6b85
 8003820:	a3d70a3d 	.word	0xa3d70a3d
 8003824:	4068fd70 	.word	0x4068fd70
 8003828:	e147ae14 	.word	0xe147ae14
 800382c:	c0689c7a 	.word	0xc0689c7a
 8003830:	33333333 	.word	0x33333333
 8003834:	400f3333 	.word	0x400f3333
 8003838:	c28f5c29 	.word	0xc28f5c29
 800383c:	4025a8f5 	.word	0x4025a8f5
 8003840:	54442d18 	.word	0x54442d18
 8003844:	400921fb 	.word	0x400921fb
 8003848:	ffde7211 	.word	0xffde7211
 800384c:	3ff789c7 	.word	0x3ff789c7
 8003850:	a3d70a3d 	.word	0xa3d70a3d
 8003854:	3ff23d70 	.word	0x3ff23d70
 8003858:	da180eea 	.word	0xda180eea
 800385c:	3fda3fef 	.word	0x3fda3fef
 8003860:	5443d6f4 	.word	0x5443d6f4
 8003864:	3ff921fb 	.word	0x3ff921fb
 8003868:	3c8e25c8 	.word	0x3c8e25c8
 800386c:	3ff8d910 	.word	0x3ff8d910
 8003870:	5e353f7d 	.word	0x5e353f7d
 8003874:	3ff249ba 	.word	0x3ff249ba
 8003878:	28ee60c6 	.word	0x28ee60c6
 800387c:	3fe0bd08 	.word	0x3fe0bd08
 8003880:	1eb851ec 	.word	0x1eb851ec
 8003884:	3ff3eb85 	.word	0x3ff3eb85

        case (LF):
            cr_omega = omega;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
            cr_theta = (PI - theta - 1.6015141) * 1.339;
 800388c:	6938      	ldr	r0, [r7, #16]
 800388e:	f7fc fe53 	bl	8000538 <__aeabi_f2d>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	a160      	add	r1, pc, #384	; (adr r1, 8003a18 <inverse_kinematics+0x598>)
 8003898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800389c:	f7fc fcec 	bl	8000278 <__aeabi_dsub>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4610      	mov	r0, r2
 80038a6:	4619      	mov	r1, r3
 80038a8:	a35d      	add	r3, pc, #372	; (adr r3, 8003a20 <inverse_kinematics+0x5a0>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f7fc fce3 	bl	8000278 <__aeabi_dsub>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	a35b      	add	r3, pc, #364	; (adr r3, 8003a28 <inverse_kinematics+0x5a8>)
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f7fc fe92 	bl	80005e8 <__aeabi_dmul>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4610      	mov	r0, r2
 80038ca:	4619      	mov	r1, r3
 80038cc:	f7fd f95c 	bl	8000b88 <__aeabi_d2f>
 80038d0:	4603      	mov	r3, r0
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
            cr_epsilon = (PI - epsilon - 0.4701917) * 1.145 + PI_OVER_TWO;
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f7fc fe2f 	bl	8000538 <__aeabi_f2d>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	a14e      	add	r1, pc, #312	; (adr r1, 8003a18 <inverse_kinematics+0x598>)
 80038e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038e4:	f7fc fcc8 	bl	8000278 <__aeabi_dsub>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	a34f      	add	r3, pc, #316	; (adr r3, 8003a30 <inverse_kinematics+0x5b0>)
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	f7fc fcbf 	bl	8000278 <__aeabi_dsub>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	a34d      	add	r3, pc, #308	; (adr r3, 8003a38 <inverse_kinematics+0x5b8>)
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f7fc fe6e 	bl	80005e8 <__aeabi_dmul>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4610      	mov	r0, r2
 8003912:	4619      	mov	r1, r3
 8003914:	a34a      	add	r3, pc, #296	; (adr r3, 8003a40 <inverse_kinematics+0x5c0>)
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f7fc fcaf 	bl	800027c <__adddf3>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	f7fd f92f 	bl	8000b88 <__aeabi_d2f>
 800392a:	4603      	mov	r3, r0
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800392e:	e053      	b.n	80039d8 <inverse_kinematics+0x558>

        case (RF):
            cr_omega = omega;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
            cr_theta = (PI - theta - 1.5961036) * 1.273;
 8003934:	6938      	ldr	r0, [r7, #16]
 8003936:	f7fc fdff 	bl	8000538 <__aeabi_f2d>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	a136      	add	r1, pc, #216	; (adr r1, 8003a18 <inverse_kinematics+0x598>)
 8003940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003944:	f7fc fc98 	bl	8000278 <__aeabi_dsub>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	a33d      	add	r3, pc, #244	; (adr r3, 8003a48 <inverse_kinematics+0x5c8>)
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f7fc fc8f 	bl	8000278 <__aeabi_dsub>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	a33b      	add	r3, pc, #236	; (adr r3, 8003a50 <inverse_kinematics+0x5d0>)
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f7fc fe3e 	bl	80005e8 <__aeabi_dmul>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	f7fd f908 	bl	8000b88 <__aeabi_d2f>
 8003978:	4603      	mov	r3, r0
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
            cr_epsilon = (PI - epsilon - 0.4977679) * 1.105 + PI_OVER_TWO;
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7fc fddb 	bl	8000538 <__aeabi_f2d>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	a124      	add	r1, pc, #144	; (adr r1, 8003a18 <inverse_kinematics+0x598>)
 8003988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800398c:	f7fc fc74 	bl	8000278 <__aeabi_dsub>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4610      	mov	r0, r2
 8003996:	4619      	mov	r1, r3
 8003998:	a32f      	add	r3, pc, #188	; (adr r3, 8003a58 <inverse_kinematics+0x5d8>)
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	f7fc fc6b 	bl	8000278 <__aeabi_dsub>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	a32d      	add	r3, pc, #180	; (adr r3, 8003a60 <inverse_kinematics+0x5e0>)
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f7fc fe1a 	bl	80005e8 <__aeabi_dmul>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4610      	mov	r0, r2
 80039ba:	4619      	mov	r1, r3
 80039bc:	a320      	add	r3, pc, #128	; (adr r3, 8003a40 <inverse_kinematics+0x5c0>)
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	f7fc fc5b 	bl	800027c <__adddf3>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4610      	mov	r0, r2
 80039cc:	4619      	mov	r1, r3
 80039ce:	f7fd f8db 	bl	8000b88 <__aeabi_d2f>
 80039d2:	4603      	mov	r3, r0
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039d6:	bf00      	nop
    }

    leg->shoul_omega = cr_omega;
 80039d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039da:	f7fc fdad 	bl	8000538 <__aeabi_f2d>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    leg->femur_theta = cr_theta;
 80039e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ea:	f7fc fda5 	bl	8000538 <__aeabi_f2d>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    leg->tibia_epsilon = cr_epsilon;
 80039f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039fa:	f7fc fd9d 	bl	8000538 <__aeabi_f2d>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8003a08:	bf00      	nop
 8003a0a:	3730      	adds	r7, #48	; 0x30
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a12:	bf00      	nop
 8003a14:	f3af 8000 	nop.w
 8003a18:	54442d18 	.word	0x54442d18
 8003a1c:	400921fb 	.word	0x400921fb
 8003a20:	3fb95373 	.word	0x3fb95373
 8003a24:	3ff99fcd 	.word	0x3ff99fcd
 8003a28:	43958106 	.word	0x43958106
 8003a2c:	3ff56c8b 	.word	0x3ff56c8b
 8003a30:	ed9670f0 	.word	0xed9670f0
 8003a34:	3fde179e 	.word	0x3fde179e
 8003a38:	851eb852 	.word	0x851eb852
 8003a3c:	3ff251eb 	.word	0x3ff251eb
 8003a40:	5443d6f4 	.word	0x5443d6f4
 8003a44:	3ff921fb 	.word	0x3ff921fb
 8003a48:	edb07223 	.word	0xedb07223
 8003a4c:	3ff989a3 	.word	0x3ff989a3
 8003a50:	3f7ced91 	.word	0x3f7ced91
 8003a54:	3ff45e35 	.word	0x3ff45e35
 8003a58:	e4dfe909 	.word	0xe4dfe909
 8003a5c:	3fdfdb6d 	.word	0x3fdfdb6d
 8003a60:	7ae147ae 	.word	0x7ae147ae
 8003a64:	3ff1ae14 	.word	0x3ff1ae14

08003a68 <setDesiredPosition>:


// Call this function to update and calculate the legs position
void setDesiredPosition(leg_position* leg, float x, float height_y, float z) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a74:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a78:	ed87 1a00 	vstr	s2, [r7]
	leg->x = x;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	605a      	str	r2, [r3, #4]
	leg->y = height_y;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	609a      	str	r2, [r3, #8]
	leg->z = z;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	60da      	str	r2, [r3, #12]

	inverse_kinematics(leg);
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7ff fcf6 	bl	8003480 <inverse_kinematics>
}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	0000      	movs	r0, r0
	...

08003aa0 <updateLeg>:


// Call this function to commit the new angles to the PID controllers
void updateLeg(leg_position* leg, servo_set* _servo_set) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
    switch (leg->leg) {
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	f200 8134 	bhi.w	8003d1c <updateLeg+0x27c>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <updateLeg+0x1c>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003b53 	.word	0x08003b53
 8003ac4:	08003bf5 	.word	0x08003bf5
 8003ac8:	08003c7b 	.word	0x08003c7b
        case (LB):
            (_servo_set->setpoints)[LB_TIBIA_ADC] = leg->tibia_epsilon * 180 / PI;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	4b96      	ldr	r3, [pc, #600]	; (8003d30 <updateLeg+0x290>)
 8003ad8:	f7fc fd86 	bl	80005e8 <__aeabi_dmul>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	a390      	add	r3, pc, #576	; (adr r3, 8003d28 <updateLeg+0x288>)
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	f7fc fea7 	bl	800083c <__aeabi_ddiv>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	6839      	ldr	r1, [r7, #0]
 8003af4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        	(_servo_set->setpoints)[LB_FEMUR_ADC] = leg->femur_theta * 180 / PI;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	4b8b      	ldr	r3, [pc, #556]	; (8003d30 <updateLeg+0x290>)
 8003b04:	f7fc fd70 	bl	80005e8 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	a385      	add	r3, pc, #532	; (adr r3, 8003d28 <updateLeg+0x288>)
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f7fc fe91 	bl	800083c <__aeabi_ddiv>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	6839      	ldr	r1, [r7, #0]
 8003b20:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        	(_servo_set->setpoints)[LB_SHOUL_ADC] = leg->shoul_omega * 180 / PI;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	4b80      	ldr	r3, [pc, #512]	; (8003d30 <updateLeg+0x290>)
 8003b30:	f7fc fd5a 	bl	80005e8 <__aeabi_dmul>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4610      	mov	r0, r2
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	a37a      	add	r3, pc, #488	; (adr r3, 8003d28 <updateLeg+0x288>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f7fc fe7b 	bl	800083c <__aeabi_ddiv>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	6839      	ldr	r1, [r7, #0]
 8003b4c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
            break;
 8003b50:	e0e4      	b.n	8003d1c <updateLeg+0x27c>

        case (RB):
			(_servo_set->setpoints)[RB_TIBIA_ADC] = 180 - (leg->tibia_epsilon * 180 / PI);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <updateLeg+0x290>)
 8003b5e:	f7fc fd43 	bl	80005e8 <__aeabi_dmul>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4610      	mov	r0, r2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	a36f      	add	r3, pc, #444	; (adr r3, 8003d28 <updateLeg+0x288>)
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	f7fc fe64 	bl	800083c <__aeabi_ddiv>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	f04f 0000 	mov.w	r0, #0
 8003b7c:	496c      	ldr	r1, [pc, #432]	; (8003d30 <updateLeg+0x290>)
 8003b7e:	f7fc fb7b 	bl	8000278 <__aeabi_dsub>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	6839      	ldr	r1, [r7, #0]
 8003b88:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			(_servo_set->setpoints)[RB_FEMUR_ADC] = 180 - (leg->femur_theta * 180 / PI);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	4b66      	ldr	r3, [pc, #408]	; (8003d30 <updateLeg+0x290>)
 8003b98:	f7fc fd26 	bl	80005e8 <__aeabi_dmul>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	a360      	add	r3, pc, #384	; (adr r3, 8003d28 <updateLeg+0x288>)
 8003ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003baa:	f7fc fe47 	bl	800083c <__aeabi_ddiv>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	495e      	ldr	r1, [pc, #376]	; (8003d30 <updateLeg+0x290>)
 8003bb8:	f7fc fb5e 	bl	8000278 <__aeabi_dsub>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	6839      	ldr	r1, [r7, #0]
 8003bc2:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
			(_servo_set->setpoints)[RB_SHOUL_ADC] = leg->shoul_omega * 180 / PI;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	4b57      	ldr	r3, [pc, #348]	; (8003d30 <updateLeg+0x290>)
 8003bd2:	f7fc fd09 	bl	80005e8 <__aeabi_dmul>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	a352      	add	r3, pc, #328	; (adr r3, 8003d28 <updateLeg+0x288>)
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f7fc fe2a 	bl	800083c <__aeabi_ddiv>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	6839      	ldr	r1, [r7, #0]
 8003bee:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
			break;
 8003bf2:	e093      	b.n	8003d1c <updateLeg+0x27c>

        case (LF):
            (_servo_set->setpoints)[LF_TIBIA_ADC] = leg->tibia_epsilon * 180 / PI;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	4b4c      	ldr	r3, [pc, #304]	; (8003d30 <updateLeg+0x290>)
 8003c00:	f7fc fcf2 	bl	80005e8 <__aeabi_dmul>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	a346      	add	r3, pc, #280	; (adr r3, 8003d28 <updateLeg+0x288>)
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f7fc fe13 	bl	800083c <__aeabi_ddiv>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	6839      	ldr	r1, [r7, #0]
 8003c1c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
        	(_servo_set->setpoints)[LF_FEMUR_ADC] = leg->femur_theta * 180 / PI;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	4b41      	ldr	r3, [pc, #260]	; (8003d30 <updateLeg+0x290>)
 8003c2c:	f7fc fcdc 	bl	80005e8 <__aeabi_dmul>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	a33b      	add	r3, pc, #236	; (adr r3, 8003d28 <updateLeg+0x288>)
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f7fc fdfd 	bl	800083c <__aeabi_ddiv>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	6839      	ldr	r1, [r7, #0]
 8003c48:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
        	(_servo_set->setpoints)[LF_SHOUL_ADC] = leg->shoul_omega * 180 / PI;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <updateLeg+0x290>)
 8003c58:	f7fc fcc6 	bl	80005e8 <__aeabi_dmul>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	a330      	add	r3, pc, #192	; (adr r3, 8003d28 <updateLeg+0x288>)
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f7fc fde7 	bl	800083c <__aeabi_ddiv>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	6839      	ldr	r1, [r7, #0]
 8003c74:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
            break;
 8003c78:	e050      	b.n	8003d1c <updateLeg+0x27c>

        case (RF):
			(_servo_set->setpoints)[RF_TIBIA_ADC] = 180 - (leg->tibia_epsilon * 180 / PI);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <updateLeg+0x290>)
 8003c86:	f7fc fcaf 	bl	80005e8 <__aeabi_dmul>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	a325      	add	r3, pc, #148	; (adr r3, 8003d28 <updateLeg+0x288>)
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f7fc fdd0 	bl	800083c <__aeabi_ddiv>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	f04f 0000 	mov.w	r0, #0
 8003ca4:	4922      	ldr	r1, [pc, #136]	; (8003d30 <updateLeg+0x290>)
 8003ca6:	f7fc fae7 	bl	8000278 <__aeabi_dsub>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	6839      	ldr	r1, [r7, #0]
 8003cb0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			(_servo_set->setpoints)[RF_FEMUR_ADC] = 180 - (leg->femur_theta * 180 / PI);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <updateLeg+0x290>)
 8003cc0:	f7fc fc92 	bl	80005e8 <__aeabi_dmul>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	a316      	add	r3, pc, #88	; (adr r3, 8003d28 <updateLeg+0x288>)
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	f7fc fdb3 	bl	800083c <__aeabi_ddiv>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	f04f 0000 	mov.w	r0, #0
 8003cde:	4914      	ldr	r1, [pc, #80]	; (8003d30 <updateLeg+0x290>)
 8003ce0:	f7fc faca 	bl	8000278 <__aeabi_dsub>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			(_servo_set->setpoints)[RF_SHOUL_ADC] = leg->shoul_omega * 180 / PI;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <updateLeg+0x290>)
 8003cfa:	f7fc fc75 	bl	80005e8 <__aeabi_dmul>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4610      	mov	r0, r2
 8003d04:	4619      	mov	r1, r3
 8003d06:	a308      	add	r3, pc, #32	; (adr r3, 8003d28 <updateLeg+0x288>)
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f7fc fd96 	bl	800083c <__aeabi_ddiv>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	6839      	ldr	r1, [r7, #0]
 8003d16:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			break;
 8003d1a:	bf00      	nop
    }
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	f3af 8000 	nop.w
 8003d28:	54442d18 	.word	0x54442d18
 8003d2c:	400921fb 	.word	0x400921fb
 8003d30:	40668000 	.word	0x40668000

08003d34 <interactUpdate>:
} interaction_timer;




void interactUpdate(interaction_timer* rtc_handler) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(rtc_handler->hrtc, &rtc_handler->LastTime, RTC_FORMAT_BIN);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f007 f85b 	bl	800ae00 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(rtc_handler->hrtc, &rtc_handler->LastDate, RTC_FORMAT_BIN);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69d8      	ldr	r0, [r3, #28]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3314      	adds	r3, #20
 8003d52:	2200      	movs	r2, #0
 8003d54:	4619      	mov	r1, r3
 8003d56:	f007 f935 	bl	800afc4 <HAL_RTC_GetDate>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <checkIfSad>:


uint8_t checkIfSad(interaction_timer* rtc_handler) {
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b088      	sub	sp, #32
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef CurrTime;	// Last time of interaction
	RTC_DateTypeDef CurrDate;	// Last date of interaction

	HAL_RTC_GetTime(rtc_handler->hrtc, &CurrTime, RTC_FORMAT_BIN);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f107 010c 	add.w	r1, r7, #12
 8003d72:	2200      	movs	r2, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f007 f843 	bl	800ae00 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(rtc_handler->hrtc, &CurrDate, RTC_FORMAT_BIN);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f107 0108 	add.w	r1, r7, #8
 8003d82:	2200      	movs	r2, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f007 f91d 	bl	800afc4 <HAL_RTC_GetDate>


	if ((CurrDate.Date - rtc_handler->LastDate.Date) > rtc_handler->sadThresholdDay) {
 8003d8a:	7abb      	ldrb	r3, [r7, #10]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7d9b      	ldrb	r3, [r3, #22]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	7e92      	ldrb	r2, [r2, #26]
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	dd01      	ble.n	8003da0 <checkIfSad+0x3e>
		return 1;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e016      	b.n	8003dce <checkIfSad+0x6c>
	}
	else if ((CurrTime.Hours - rtc_handler->LastTime.Hours) > rtc_handler->sadThresholdHour) {
 8003da0:	7b3b      	ldrb	r3, [r7, #12]
 8003da2:	461a      	mov	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	7e52      	ldrb	r2, [r2, #25]
 8003dae:	4293      	cmp	r3, r2
 8003db0:	dd01      	ble.n	8003db6 <checkIfSad+0x54>
		return 1;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e00b      	b.n	8003dce <checkIfSad+0x6c>
	}
	else if ((CurrTime.Minutes - rtc_handler->LastTime.Minutes) > rtc_handler->sadThresholdMin) {
 8003db6:	7b7b      	ldrb	r3, [r7, #13]
 8003db8:	461a      	mov	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	785b      	ldrb	r3, [r3, #1]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	7e12      	ldrb	r2, [r2, #24]
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	dd01      	ble.n	8003dcc <checkIfSad+0x6a>
		return 1;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <checkIfSad+0x6c>
	}
	else {
		return 0;
 8003dcc:	2300      	movs	r3, #0
	}
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <receive_normal_data>:

uint8_t photo_buffer[PHOTO_SIZE];

// receive normal data
HAL_StatusTypeDef receive_normal_data(UART_HandleTypeDef *huart, int8_t *cal_x, int8_t *cal_y, uint8_t *button, uint8_t *joybut)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b086      	sub	sp, #24
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	603b      	str	r3, [r7, #0]
    uint8_t rx_buf[4];
    if (HAL_UART_Receive(huart, rx_buf, 4, 1000) == HAL_OK)
 8003de4:	f107 0114 	add.w	r1, r7, #20
 8003de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dec:	2204      	movs	r2, #4
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f008 fd47 	bl	800c882 <HAL_UART_Receive>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10f      	bne.n	8003e1a <receive_normal_data+0x44>
    {
    	*button   = (int8_t)rx_buf[0];
 8003dfa:	7d3a      	ldrb	r2, [r7, #20]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	701a      	strb	r2, [r3, #0]
        *cal_x  = (int8_t)rx_buf[1];
 8003e00:	7d7b      	ldrb	r3, [r7, #21]
 8003e02:	b25a      	sxtb	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	701a      	strb	r2, [r3, #0]
        *cal_y  = rx_buf[2];
 8003e08:	7dbb      	ldrb	r3, [r7, #22]
 8003e0a:	b25a      	sxtb	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	701a      	strb	r2, [r3, #0]
        *joybut  = rx_buf[3];
 8003e10:	7dfa      	ldrb	r2, [r7, #23]
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	701a      	strb	r2, [r3, #0]
        // rx_buf[4] is stop bit (0x5A)
        return HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e000      	b.n	8003e1c <receive_normal_data+0x46>
    }
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <determineMultimediaState>:
// Alarm (3)
// Angry (4)
// Happy (5)
// Sad (6)
// Normal (7)
void determineMultimediaState(state_controller* sc) {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
    updateCTouch(sc);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f8c9 	bl	8003fc4 <updateCTouch>
    updateBatteryVoltage(sc);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8e2 	bl	8003ffc <updateBatteryVoltage>

    // Determine if Dead
    if (sc->battery_voltage_adc < 3) {
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e3e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e4a:	d50a      	bpl.n	8003e62 <determineMultimediaState+0x3e>
        sc->current_mm_state = DEAD;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2206      	movs	r2, #6
 8003e50:	f883 2020 	strb.w	r2, [r3, #32]
        playAudio(sc->_audio_controller, LOW_BATTERY_AUDIO);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	2102      	movs	r1, #2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fdc6 	bl	80029ec <playAudio>
        sc->current_mm_state = SAD;
    }
    else {
        sc->current_mm_state = NORMAL;
    }
}
 8003e60:	e052      	b.n	8003f08 <determineMultimediaState+0xe4>
    else if (sc->battery_voltage_adc < 3.5) {
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e68:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8003e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e74:	d504      	bpl.n	8003e80 <determineMultimediaState+0x5c>
        sc->current_mm_state = SLEEPY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003e7e:	e043      	b.n	8003f08 <determineMultimediaState+0xe4>
    else if (sc->ts_button == 2) {
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	7c1b      	ldrb	r3, [r3, #16]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d111      	bne.n	8003eac <determineMultimediaState+0x88>
        watchdogTrigger(sc, sc->distanceStr);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f8ca 	bl	8004028 <watchdogTrigger>
        if (sc->current_mm_state == ALARM) {
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e9a:	2b05      	cmp	r3, #5
 8003e9c:	d134      	bne.n	8003f08 <determineMultimediaState+0xe4>
        	playAudio(sc->_audio_controller, INTRUDER_ALERT_AUDIO);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	2103      	movs	r1, #3
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fe fda1 	bl	80029ec <playAudio>
}
 8003eaa:	e02d      	b.n	8003f08 <determineMultimediaState+0xe4>
    else if (sc->ctouch_state[4] == 1) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	791b      	ldrb	r3, [r3, #4]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d104      	bne.n	8003ebe <determineMultimediaState+0x9a>
        sc->current_mm_state = ANGRY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003ebc:	e024      	b.n	8003f08 <determineMultimediaState+0xe4>
    else if (sc->ctouch_state[1] == 1) {
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	785b      	ldrb	r3, [r3, #1]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d10f      	bne.n	8003ee6 <determineMultimediaState+0xc2>
        interactUpdate(sc->interactionTimer);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff ff32 	bl	8003d34 <interactUpdate>
        playAudio(sc->_audio_controller, MEOW_AUDIO);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fd88 	bl	80029ec <playAudio>
        sc->current_mm_state = HAPPY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2204      	movs	r2, #4
 8003ee0:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003ee4:	e010      	b.n	8003f08 <determineMultimediaState+0xe4>
    else if (checkIfSad(sc->interactionTimer)) {
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff ff39 	bl	8003d62 <checkIfSad>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d004      	beq.n	8003f00 <determineMultimediaState+0xdc>
        sc->current_mm_state = SAD;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003efe:	e003      	b.n	8003f08 <determineMultimediaState+0xe4>
        sc->current_mm_state = NORMAL;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <determineMovementState>:
// LOAFING  (Dead)
// GYRATING (Joystick != 0, joystick_button pressed)
// WALKING  (Joystick != 0, joystick_button not pressed)
// SITTING  (Remote button)
// STANDING (Default)
void determineMovementState(state_controller* sc) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

    updateCTouch(sc);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f853 	bl	8003fc4 <updateCTouch>
    updateBatteryVoltage(sc);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f86c 	bl	8003ffc <updateBatteryVoltage>
//    watchdogTrigger(sc);

    // Determine if Loafing
    if (sc->battery_voltage_adc < 4) {
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f2a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f36:	d504      	bpl.n	8003f42 <determineMovementState+0x32>
        sc->current_move_state = LOAFING;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003f40:	e032      	b.n	8003fa8 <determineMovementState+0x98>
    }
    // Determine if gyrating
    else if ((sc->joystick_x != 0 || sc->joystick_y != 0) && sc->joystick_button != 0) {
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <determineMovementState+0x46>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <determineMovementState+0x58>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	7bdb      	ldrb	r3, [r3, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d004      	beq.n	8003f68 <determineMovementState+0x58>
        sc->current_move_state = GYRATING;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003f66:	e01f      	b.n	8003fa8 <determineMovementState+0x98>
    }
    // Determine if walking
    else if ((sc->joystick_x != 0 || sc->joystick_y != 0) && sc->joystick_button == 0) {
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <determineMovementState+0x6c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <determineMovementState+0x7e>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	7bdb      	ldrb	r3, [r3, #15]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <determineMovementState+0x7e>
    	sc->current_move_state = WALKING;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003f8c:	e00c      	b.n	8003fa8 <determineMovementState+0x98>
    }
    // Determine if sitting
    else if (sc->ctouch_state[4] == 1) {
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	791b      	ldrb	r3, [r3, #4]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d104      	bne.n	8003fa0 <determineMovementState+0x90>
    	sc->current_move_state = SITTING;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2203      	movs	r2, #3
 8003f9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003f9e:	e003      	b.n	8003fa8 <determineMovementState+0x98>
    }
    else {
    	sc->current_move_state = STANDING;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    if (sc->ts_button == 1) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7c1b      	ldrb	r3, [r3, #16]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d105      	bne.n	8003fbc <determineMovementState+0xac>
    	playAudio(sc->_audio_controller, OIIA_AUDIO);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fd18 	bl	80029ec <playAudio>
    }
}   
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <updateCTouch>:

void updateCTouch(state_controller* sc) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
//    sc->ctouch_state[0] = HAL_GPIO_ReadPin(CTOUCH1_PORT, CTOUCH1_PIN);
    sc->ctouch_state[1] = HAL_GPIO_ReadPin(CTOUCH2_PORT, CTOUCH2_PIN);
 8003fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fd0:	4809      	ldr	r0, [pc, #36]	; (8003ff8 <updateCTouch+0x34>)
 8003fd2:	f004 fc0b 	bl	80087ec <HAL_GPIO_ReadPin>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	705a      	strb	r2, [r3, #1]
//    sc->ctouch_state[2] = HAL_GPIO_ReadPin(CTOUCH3_PORT, CTOUCH3_PIN);
//    sc->ctouch_state[3] = HAL_GPIO_ReadPin(CTOUCH4_PORT, CTOUCH4_PIN);
    sc->ctouch_state[4] = HAL_GPIO_ReadPin(CTOUCH5_PORT, CTOUCH5_PIN);
 8003fde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fe2:	4805      	ldr	r0, [pc, #20]	; (8003ff8 <updateCTouch+0x34>)
 8003fe4:	f004 fc02 	bl	80087ec <HAL_GPIO_ReadPin>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	461a      	mov	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	711a      	strb	r2, [r3, #4]
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40020400 	.word	0x40020400

08003ffc <updateBatteryVoltage>:

void updateBatteryVoltage(state_controller* sc) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
    sc->battery_voltage_adc = getBatteryVoltage(sc->_servo_reader);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	4618      	mov	r0, r3
 800400a:	f7fe fd55 	bl	8002ab8 <getBatteryVoltage>
 800400e:	ec53 2b10 	vmov	r2, r3, d0
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	f7fc fdb7 	bl	8000b88 <__aeabi_d2f>
 800401a:	4602      	mov	r2, r0
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	609a      	str	r2, [r3, #8]
}
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <watchdogTrigger>:


}


void watchdogTrigger(state_controller* sc, statInfo_t_VL53L0X* distanceStr) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
    static uint16_t watchdog_distance = 0;
    static uint16_t watchdog_distance_last = 0;
    const uint16_t DISTANCE_THRESHOLD = 100; // 100mm threshold for movement detection
 8004032:	2364      	movs	r3, #100	; 0x64
 8004034:	81fb      	strh	r3, [r7, #14]

    // Get current distance reading
    watchdog_distance = readRangeSingleMillimeters(distanceStr);
 8004036:	6838      	ldr	r0, [r7, #0]
 8004038:	f7fd fee0 	bl	8001dfc <readRangeSingleMillimeters>
 800403c:	4603      	mov	r3, r0
 800403e:	461a      	mov	r2, r3
 8004040:	4b16      	ldr	r3, [pc, #88]	; (800409c <watchdogTrigger+0x74>)
 8004042:	801a      	strh	r2, [r3, #0]

    // If this is the first reading, just store it and return
    if (watchdog_distance_last == 0) {
 8004044:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <watchdogTrigger+0x78>)
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <watchdogTrigger+0x2e>
        watchdog_distance_last = watchdog_distance;
 800404c:	4b13      	ldr	r3, [pc, #76]	; (800409c <watchdogTrigger+0x74>)
 800404e:	881a      	ldrh	r2, [r3, #0]
 8004050:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <watchdogTrigger+0x78>)
 8004052:	801a      	strh	r2, [r3, #0]
        return;
 8004054:	e01f      	b.n	8004096 <watchdogTrigger+0x6e>
    }

    // Calculate absolute difference between current and last reading
    uint16_t distance_diff = (watchdog_distance > watchdog_distance_last) ?
 8004056:	4b11      	ldr	r3, [pc, #68]	; (800409c <watchdogTrigger+0x74>)
 8004058:	881a      	ldrh	r2, [r3, #0]
 800405a:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <watchdogTrigger+0x78>)
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d906      	bls.n	8004070 <watchdogTrigger+0x48>
                            (watchdog_distance - watchdog_distance_last) :
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <watchdogTrigger+0x74>)
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <watchdogTrigger+0x78>)
 8004068:	881b      	ldrh	r3, [r3, #0]
    uint16_t distance_diff = (watchdog_distance > watchdog_distance_last) ?
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	b29b      	uxth	r3, r3
 800406e:	e005      	b.n	800407c <watchdogTrigger+0x54>
                            (watchdog_distance_last - watchdog_distance);
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <watchdogTrigger+0x78>)
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <watchdogTrigger+0x74>)
 8004076:	881b      	ldrh	r3, [r3, #0]
    uint16_t distance_diff = (watchdog_distance > watchdog_distance_last) ?
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	b29b      	uxth	r3, r3
 800407c:	81bb      	strh	r3, [r7, #12]

    // Store current reading for next comparison
    watchdog_distance_last = watchdog_distance;
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <watchdogTrigger+0x74>)
 8004080:	881a      	ldrh	r2, [r3, #0]
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <watchdogTrigger+0x78>)
 8004084:	801a      	strh	r2, [r3, #0]

    // If distance difference is too large, set alarm state
    if (distance_diff > DISTANCE_THRESHOLD) {
 8004086:	89ba      	ldrh	r2, [r7, #12]
 8004088:	89fb      	ldrh	r3, [r7, #14]
 800408a:	429a      	cmp	r2, r3
 800408c:	d903      	bls.n	8004096 <watchdogTrigger+0x6e>
        sc->current_mm_state = ALARM;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2205      	movs	r2, #5
 8004092:	f883 2020 	strb.w	r2, [r3, #32]
    }
}
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20000a60 	.word	0x20000a60
 80040a0:	20000a62 	.word	0x20000a62
 80040a4:	00000000 	.word	0x00000000

080040a8 <updateMovements>:
// STANDING,
// GYRATING,
// WALKING,
// SITTING,
// LOAFING,
void updateMovements(movement_controller* mc, state_controller* sc, servo_set* _servo_set, leg_position* LB, leg_position* RB, leg_position* LF, leg_position* RF) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	ed2d 8b02 	vpush	{d8}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
    // Only start at the beginning of a walking cycle
    // if (mc->movement_counter == 0) {
    if (true) {
        mc->executing_state = sc->current_move_state;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	709a      	strb	r2, [r3, #2]
    }

    float acc_x, acc_y, acc_z = 0;
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]

	switch (mc->executing_state) {
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	789b      	ldrb	r3, [r3, #2]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	f000 8218 	beq.w	8004504 <updateMovements+0x45c>
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	f300 8216 	bgt.w	8004506 <updateMovements+0x45e>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 81ed 	beq.w	80044ba <updateMovements+0x412>
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	f040 8210 	bne.w	8004506 <updateMovements+0x45e>
		case (WALKING):
			setDesiredPosition(LB, X_OFFSET - triangle_wave[(mc->movement_counter + 0) % 100] * (float)sc->joystick_x , Y_OFFSET - square_wave[(mc->movement_counter + 0) % 100] * 4 , 3.9 - triangle_wave[(mc->movement_counter + 0) % 100] * (float)sc->joystick_y / 2.5);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	4bdc      	ldr	r3, [pc, #880]	; (8004460 <updateMovements+0x3b8>)
 80040ee:	fb83 1302 	smull	r1, r3, r3, r2
 80040f2:	1159      	asrs	r1, r3, #5
 80040f4:	17d3      	asrs	r3, r2, #31
 80040f6:	1acb      	subs	r3, r1, r3
 80040f8:	2164      	movs	r1, #100	; 0x64
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	4ad8      	ldr	r2, [pc, #864]	; (8004464 <updateMovements+0x3bc>)
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	ed93 7a00 	vldr	s14, [r3]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8004110:	ee07 3a90 	vmov	s15, r3
 8004114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411c:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 8004468 <updateMovements+0x3c0>
 8004120:	ee37 8a67 	vsub.f32	s16, s14, s15
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	4bcd      	ldr	r3, [pc, #820]	; (8004460 <updateMovements+0x3b8>)
 800412c:	fb83 1302 	smull	r1, r3, r3, r2
 8004130:	1159      	asrs	r1, r3, #5
 8004132:	17d3      	asrs	r3, r2, #31
 8004134:	1acb      	subs	r3, r1, r3
 8004136:	2164      	movs	r1, #100	; 0x64
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	4acb      	ldr	r2, [pc, #812]	; (800446c <updateMovements+0x3c4>)
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	edd3 7a00 	vldr	s15, [r3]
 8004148:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800414c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004150:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8004154:	ee77 8a67 	vsub.f32	s17, s14, s15
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	4bc0      	ldr	r3, [pc, #768]	; (8004460 <updateMovements+0x3b8>)
 8004160:	fb83 1302 	smull	r1, r3, r3, r2
 8004164:	1159      	asrs	r1, r3, #5
 8004166:	17d3      	asrs	r3, r2, #31
 8004168:	1acb      	subs	r3, r1, r3
 800416a:	2164      	movs	r1, #100	; 0x64
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	4abc      	ldr	r2, [pc, #752]	; (8004464 <updateMovements+0x3bc>)
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	ed93 7a00 	vldr	s14, [r3]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800418a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418e:	ee17 0a90 	vmov	r0, s15
 8004192:	f7fc f9d1 	bl	8000538 <__aeabi_f2d>
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	4bb5      	ldr	r3, [pc, #724]	; (8004470 <updateMovements+0x3c8>)
 800419c:	f7fc fb4e 	bl	800083c <__aeabi_ddiv>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	a1ac      	add	r1, pc, #688	; (adr r1, 8004458 <updateMovements+0x3b0>)
 80041a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041aa:	f7fc f865 	bl	8000278 <__aeabi_dsub>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4610      	mov	r0, r2
 80041b4:	4619      	mov	r1, r3
 80041b6:	f7fc fce7 	bl	8000b88 <__aeabi_d2f>
 80041ba:	4603      	mov	r3, r0
 80041bc:	ee01 3a10 	vmov	s2, r3
 80041c0:	eef0 0a68 	vmov.f32	s1, s17
 80041c4:	eeb0 0a48 	vmov.f32	s0, s16
 80041c8:	6838      	ldr	r0, [r7, #0]
 80041ca:	f7ff fc4d 	bl	8003a68 <setDesiredPosition>
			setDesiredPosition(RB, X_OFFSET - triangle_wave[(mc->movement_counter + 25) % 100] * (float)sc->joystick_x , Y_OFFSET - square_wave[(mc->movement_counter + 25) % 100] * 4 , 3.9 - triangle_wave[(mc->movement_counter + 25) % 100] * (float)sc->joystick_y / 2.5);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	f103 0219 	add.w	r2, r3, #25
 80041d6:	4ba2      	ldr	r3, [pc, #648]	; (8004460 <updateMovements+0x3b8>)
 80041d8:	fb83 1302 	smull	r1, r3, r3, r2
 80041dc:	1159      	asrs	r1, r3, #5
 80041de:	17d3      	asrs	r3, r2, #31
 80041e0:	1acb      	subs	r3, r1, r3
 80041e2:	2164      	movs	r1, #100	; 0x64
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	4a9e      	ldr	r2, [pc, #632]	; (8004464 <updateMovements+0x3bc>)
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	ed93 7a00 	vldr	s14, [r3]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004206:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8004468 <updateMovements+0x3c0>
 800420a:	ee37 8a67 	vsub.f32	s16, s14, s15
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	f103 0219 	add.w	r2, r3, #25
 8004216:	4b92      	ldr	r3, [pc, #584]	; (8004460 <updateMovements+0x3b8>)
 8004218:	fb83 1302 	smull	r1, r3, r3, r2
 800421c:	1159      	asrs	r1, r3, #5
 800421e:	17d3      	asrs	r3, r2, #31
 8004220:	1acb      	subs	r3, r1, r3
 8004222:	2164      	movs	r1, #100	; 0x64
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	4a90      	ldr	r2, [pc, #576]	; (800446c <updateMovements+0x3c4>)
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	edd3 7a00 	vldr	s15, [r3]
 8004234:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800423c:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8004240:	ee77 8a67 	vsub.f32	s17, s14, s15
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	f103 0219 	add.w	r2, r3, #25
 800424c:	4b84      	ldr	r3, [pc, #528]	; (8004460 <updateMovements+0x3b8>)
 800424e:	fb83 1302 	smull	r1, r3, r3, r2
 8004252:	1159      	asrs	r1, r3, #5
 8004254:	17d3      	asrs	r3, r2, #31
 8004256:	1acb      	subs	r3, r1, r3
 8004258:	2164      	movs	r1, #100	; 0x64
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	4a80      	ldr	r2, [pc, #512]	; (8004464 <updateMovements+0x3bc>)
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	ed93 7a00 	vldr	s14, [r3]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8004270:	ee07 3a90 	vmov	s15, r3
 8004274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427c:	ee17 0a90 	vmov	r0, s15
 8004280:	f7fc f95a 	bl	8000538 <__aeabi_f2d>
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	4b79      	ldr	r3, [pc, #484]	; (8004470 <updateMovements+0x3c8>)
 800428a:	f7fc fad7 	bl	800083c <__aeabi_ddiv>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	a171      	add	r1, pc, #452	; (adr r1, 8004458 <updateMovements+0x3b0>)
 8004294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004298:	f7fb ffee 	bl	8000278 <__aeabi_dsub>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	f7fc fc70 	bl	8000b88 <__aeabi_d2f>
 80042a8:	4603      	mov	r3, r0
 80042aa:	ee01 3a10 	vmov	s2, r3
 80042ae:	eef0 0a68 	vmov.f32	s1, s17
 80042b2:	eeb0 0a48 	vmov.f32	s0, s16
 80042b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042b8:	f7ff fbd6 	bl	8003a68 <setDesiredPosition>
			setDesiredPosition(LF, X_OFFSET - triangle_wave[(mc->movement_counter + 50) % 100] * (float)sc->joystick_x, Y_OFFSET - square_wave[(mc->movement_counter + 50) % 100] * 4 , 3.9 - triangle_wave[(mc->movement_counter + 50) % 100] * (float)sc->joystick_y / 2.5);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042c4:	4b66      	ldr	r3, [pc, #408]	; (8004460 <updateMovements+0x3b8>)
 80042c6:	fb83 1302 	smull	r1, r3, r3, r2
 80042ca:	1159      	asrs	r1, r3, #5
 80042cc:	17d3      	asrs	r3, r2, #31
 80042ce:	1acb      	subs	r3, r1, r3
 80042d0:	2164      	movs	r1, #100	; 0x64
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	4a62      	ldr	r2, [pc, #392]	; (8004464 <updateMovements+0x3bc>)
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	ed93 7a00 	vldr	s14, [r3]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80042e8:	ee07 3a90 	vmov	s15, r3
 80042ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f4:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8004468 <updateMovements+0x3c0>
 80042f8:	ee37 8a67 	vsub.f32	s16, s14, s15
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004304:	4b56      	ldr	r3, [pc, #344]	; (8004460 <updateMovements+0x3b8>)
 8004306:	fb83 1302 	smull	r1, r3, r3, r2
 800430a:	1159      	asrs	r1, r3, #5
 800430c:	17d3      	asrs	r3, r2, #31
 800430e:	1acb      	subs	r3, r1, r3
 8004310:	2164      	movs	r1, #100	; 0x64
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	4a54      	ldr	r2, [pc, #336]	; (800446c <updateMovements+0x3c4>)
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	edd3 7a00 	vldr	s15, [r3]
 8004322:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800432a:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800432e:	ee77 8a67 	vsub.f32	s17, s14, s15
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800433a:	4b49      	ldr	r3, [pc, #292]	; (8004460 <updateMovements+0x3b8>)
 800433c:	fb83 1302 	smull	r1, r3, r3, r2
 8004340:	1159      	asrs	r1, r3, #5
 8004342:	17d3      	asrs	r3, r2, #31
 8004344:	1acb      	subs	r3, r1, r3
 8004346:	2164      	movs	r1, #100	; 0x64
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	4a45      	ldr	r2, [pc, #276]	; (8004464 <updateMovements+0x3bc>)
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	ed93 7a00 	vldr	s14, [r3]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436a:	ee17 0a90 	vmov	r0, s15
 800436e:	f7fc f8e3 	bl	8000538 <__aeabi_f2d>
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	4b3e      	ldr	r3, [pc, #248]	; (8004470 <updateMovements+0x3c8>)
 8004378:	f7fc fa60 	bl	800083c <__aeabi_ddiv>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	a135      	add	r1, pc, #212	; (adr r1, 8004458 <updateMovements+0x3b0>)
 8004382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004386:	f7fb ff77 	bl	8000278 <__aeabi_dsub>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4610      	mov	r0, r2
 8004390:	4619      	mov	r1, r3
 8004392:	f7fc fbf9 	bl	8000b88 <__aeabi_d2f>
 8004396:	4603      	mov	r3, r0
 8004398:	ee01 3a10 	vmov	s2, r3
 800439c:	eef0 0a68 	vmov.f32	s1, s17
 80043a0:	eeb0 0a48 	vmov.f32	s0, s16
 80043a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043a6:	f7ff fb5f 	bl	8003a68 <setDesiredPosition>
			setDesiredPosition(RF, X_OFFSET - triangle_wave[(mc->movement_counter + 75) % 100] * (float)sc->joystick_x, Y_OFFSET - square_wave[(mc->movement_counter + 75) % 100] * 4 , 3.9 - triangle_wave[(mc->movement_counter + 75) % 100] * (float)sc->joystick_y / 2.5);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	f103 024b 	add.w	r2, r3, #75	; 0x4b
 80043b2:	4b2b      	ldr	r3, [pc, #172]	; (8004460 <updateMovements+0x3b8>)
 80043b4:	fb83 1302 	smull	r1, r3, r3, r2
 80043b8:	1159      	asrs	r1, r3, #5
 80043ba:	17d3      	asrs	r3, r2, #31
 80043bc:	1acb      	subs	r3, r1, r3
 80043be:	2164      	movs	r1, #100	; 0x64
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	4a27      	ldr	r2, [pc, #156]	; (8004464 <updateMovements+0x3bc>)
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	ed93 7a00 	vldr	s14, [r3]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004468 <updateMovements+0x3c0>
 80043e6:	ee37 8a67 	vsub.f32	s16, s14, s15
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	f103 024b 	add.w	r2, r3, #75	; 0x4b
 80043f2:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <updateMovements+0x3b8>)
 80043f4:	fb83 1302 	smull	r1, r3, r3, r2
 80043f8:	1159      	asrs	r1, r3, #5
 80043fa:	17d3      	asrs	r3, r2, #31
 80043fc:	1acb      	subs	r3, r1, r3
 80043fe:	2164      	movs	r1, #100	; 0x64
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	4a19      	ldr	r2, [pc, #100]	; (800446c <updateMovements+0x3c4>)
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	edd3 7a00 	vldr	s15, [r3]
 8004410:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004418:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800441c:	ee77 8a67 	vsub.f32	s17, s14, s15
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	f103 024b 	add.w	r2, r3, #75	; 0x4b
 8004428:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <updateMovements+0x3b8>)
 800442a:	fb83 1302 	smull	r1, r3, r3, r2
 800442e:	1159      	asrs	r1, r3, #5
 8004430:	17d3      	asrs	r3, r2, #31
 8004432:	1acb      	subs	r3, r1, r3
 8004434:	2164      	movs	r1, #100	; 0x64
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	4a09      	ldr	r2, [pc, #36]	; (8004464 <updateMovements+0x3bc>)
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	ed93 7a00 	vldr	s14, [r3]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004454:	e00e      	b.n	8004474 <updateMovements+0x3cc>
 8004456:	bf00      	nop
 8004458:	33333333 	.word	0x33333333
 800445c:	400f3333 	.word	0x400f3333
 8004460:	51eb851f 	.word	0x51eb851f
 8004464:	200002b0 	.word	0x200002b0
 8004468:	00000000 	.word	0x00000000
 800446c:	2000011c 	.word	0x2000011c
 8004470:	40040000 	.word	0x40040000
 8004474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004478:	ee17 0a90 	vmov	r0, s15
 800447c:	f7fc f85c 	bl	8000538 <__aeabi_f2d>
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	4b2c      	ldr	r3, [pc, #176]	; (8004538 <updateMovements+0x490>)
 8004486:	f7fc f9d9 	bl	800083c <__aeabi_ddiv>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	a128      	add	r1, pc, #160	; (adr r1, 8004530 <updateMovements+0x488>)
 8004490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004494:	f7fb fef0 	bl	8000278 <__aeabi_dsub>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	f7fc fb72 	bl	8000b88 <__aeabi_d2f>
 80044a4:	4603      	mov	r3, r0
 80044a6:	ee01 3a10 	vmov	s2, r3
 80044aa:	eef0 0a68 	vmov.f32	s1, s17
 80044ae:	eeb0 0a48 	vmov.f32	s0, s16
 80044b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044b4:	f7ff fad8 	bl	8003a68 <setDesiredPosition>

            break;
 80044b8:	e025      	b.n	8004506 <updateMovements+0x45e>
        
        case (STANDING):
//			 MPU6050_Read_Accel(&acc_x, &acc_y, &acc_z);
//			 computeStanding(mc, acc_x, acc_y, acc_z);

            setDesiredPosition(LB, X_OFFSET, Y_OFFSET , 3.9);
 80044ba:	ed9f 1a20 	vldr	s2, [pc, #128]	; 800453c <updateMovements+0x494>
 80044be:	eef2 0a0c 	vmov.f32	s1, #44	; 0x41600000  14.0
 80044c2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8004540 <updateMovements+0x498>
 80044c6:	6838      	ldr	r0, [r7, #0]
 80044c8:	f7ff face 	bl	8003a68 <setDesiredPosition>
            setDesiredPosition(RB, X_OFFSET, Y_OFFSET , 3.9);
 80044cc:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 800453c <updateMovements+0x494>
 80044d0:	eef2 0a0c 	vmov.f32	s1, #44	; 0x41600000  14.0
 80044d4:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8004540 <updateMovements+0x498>
 80044d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044da:	f7ff fac5 	bl	8003a68 <setDesiredPosition>
            setDesiredPosition(LF, X_OFFSET, Y_OFFSET , 3.9);
 80044de:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800453c <updateMovements+0x494>
 80044e2:	eef2 0a0c 	vmov.f32	s1, #44	; 0x41600000  14.0
 80044e6:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8004540 <updateMovements+0x498>
 80044ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044ec:	f7ff fabc 	bl	8003a68 <setDesiredPosition>
            setDesiredPosition(RF, X_OFFSET, Y_OFFSET , 3.9);
 80044f0:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800453c <updateMovements+0x494>
 80044f4:	eef2 0a0c 	vmov.f32	s1, #44	; 0x41600000  14.0
 80044f8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8004540 <updateMovements+0x498>
 80044fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044fe:	f7ff fab3 	bl	8003a68 <setDesiredPosition>

            break;
 8004502:	e000      	b.n	8004506 <updateMovements+0x45e>
//            setDesiredPosition(RF, X_OFFSET, Y_OFFSET, 3.9);

            break;

        case (LOAFING):
            break;
 8004504:	bf00      	nop
	}

    // Increment movement states till 1000
    if (mc->movement_counter >= 99) {
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	2b62      	cmp	r3, #98	; 0x62
 800450c:	d903      	bls.n	8004516 <updateMovements+0x46e>
        mc->movement_counter = 0;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	801a      	strh	r2, [r3, #0]
    }
    else {
        mc->movement_counter++;
    }
}
 8004514:	e005      	b.n	8004522 <updateMovements+0x47a>
        mc->movement_counter++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	3301      	adds	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	801a      	strh	r2, [r3, #0]
}
 8004522:	bf00      	nop
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	ecbd 8b02 	vpop	{d8}
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	33333333 	.word	0x33333333
 8004534:	400f3333 	.word	0x400f3333
 8004538:	40040000 	.word	0x40040000
 800453c:	4079999a 	.word	0x4079999a
 8004540:	00000000 	.word	0x00000000

08004544 <updateFace>:
    multimedia_state last_state;    // To check if a screen update is necessary
    uint8_t animation_counter;      // 0 to 3 for the sleep animation
} face_controller;

// Call this in the 1s loop!
void updateFace(face_controller* fc, state_controller* sc) {
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af02      	add	r7, sp, #8
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
    if (fc->last_state != sc->current_mm_state) {
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004558:	429a      	cmp	r2, r3
 800455a:	f000 80a7 	beq.w	80046ac <updateFace+0x168>
        fc->last_state = sc->current_mm_state;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	701a      	strb	r2, [r3, #0]

        switch (sc->current_mm_state) {
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800456e:	2b06      	cmp	r3, #6
 8004570:	f200 809c 	bhi.w	80046ac <updateFace+0x168>
 8004574:	a201      	add	r2, pc, #4	; (adr r2, 800457c <updateFace+0x38>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	08004599 	.word	0x08004599
 8004580:	080045ad 	.word	0x080045ad
 8004584:	08004647 	.word	0x08004647
 8004588:	0800465b 	.word	0x0800465b
 800458c:	0800466f 	.word	0x0800466f
 8004590:	08004683 	.word	0x08004683
 8004594:	08004697 	.word	0x08004697
            case (NORMAL):
                LCD_DrawFace(0, 0, face_normal, SKIN_COLOR, EYE_COLOR);
 8004598:	f24c 4340 	movw	r3, #50240	; 0xc440
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	2300      	movs	r3, #0
 80045a0:	4a44      	ldr	r2, [pc, #272]	; (80046b4 <updateFace+0x170>)
 80045a2:	2100      	movs	r1, #0
 80045a4:	2000      	movs	r0, #0
 80045a6:	f7fe f927 	bl	80027f8 <LCD_DrawFace>
                break;
 80045aa:	e07f      	b.n	80046ac <updateFace+0x168>

            case (SLEEPY):
                if (fc->animation_counter == 0) {
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	785b      	ldrb	r3, [r3, #1]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10f      	bne.n	80045d4 <updateFace+0x90>
                    (fc->animation_counter)++;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	785b      	ldrb	r3, [r3, #1]
 80045b8:	3301      	adds	r3, #1
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	705a      	strb	r2, [r3, #1]
                    LCD_DrawFace(0, 0, face_sleep_1, SKIN_COLOR, EYE_COLOR);
 80045c0:	f24c 4340 	movw	r3, #50240	; 0xc440
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	2300      	movs	r3, #0
 80045c8:	4a3b      	ldr	r2, [pc, #236]	; (80046b8 <updateFace+0x174>)
 80045ca:	2100      	movs	r1, #0
 80045cc:	2000      	movs	r0, #0
 80045ce:	f7fe f913 	bl	80027f8 <LCD_DrawFace>
                }
                else if (fc->animation_counter == 3) {
                    (fc->animation_counter) = 0;
                    LCD_DrawFace(0, 0, face_sleep_4, SKIN_COLOR, EYE_COLOR);
                }
                break;
 80045d2:	e06a      	b.n	80046aa <updateFace+0x166>
                else if (fc->animation_counter == 1) {
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	785b      	ldrb	r3, [r3, #1]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d10f      	bne.n	80045fc <updateFace+0xb8>
                    (fc->animation_counter)++;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	3301      	adds	r3, #1
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	705a      	strb	r2, [r3, #1]
                    LCD_DrawFace(0, 0, face_sleep_2, SKIN_COLOR, EYE_COLOR);
 80045e8:	f24c 4340 	movw	r3, #50240	; 0xc440
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	2300      	movs	r3, #0
 80045f0:	4a32      	ldr	r2, [pc, #200]	; (80046bc <updateFace+0x178>)
 80045f2:	2100      	movs	r1, #0
 80045f4:	2000      	movs	r0, #0
 80045f6:	f7fe f8ff 	bl	80027f8 <LCD_DrawFace>
                break;
 80045fa:	e056      	b.n	80046aa <updateFace+0x166>
                else if (fc->animation_counter == 2) {
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d10f      	bne.n	8004624 <updateFace+0xe0>
                    (fc->animation_counter)++;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	3301      	adds	r3, #1
 800460a:	b2da      	uxtb	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	705a      	strb	r2, [r3, #1]
                    LCD_DrawFace(0, 0, face_sleep_3, SKIN_COLOR, EYE_COLOR);
 8004610:	f24c 4340 	movw	r3, #50240	; 0xc440
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	2300      	movs	r3, #0
 8004618:	4a29      	ldr	r2, [pc, #164]	; (80046c0 <updateFace+0x17c>)
 800461a:	2100      	movs	r1, #0
 800461c:	2000      	movs	r0, #0
 800461e:	f7fe f8eb 	bl	80027f8 <LCD_DrawFace>
                break;
 8004622:	e042      	b.n	80046aa <updateFace+0x166>
                else if (fc->animation_counter == 3) {
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	785b      	ldrb	r3, [r3, #1]
 8004628:	2b03      	cmp	r3, #3
 800462a:	d13e      	bne.n	80046aa <updateFace+0x166>
                    (fc->animation_counter) = 0;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	705a      	strb	r2, [r3, #1]
                    LCD_DrawFace(0, 0, face_sleep_4, SKIN_COLOR, EYE_COLOR);
 8004632:	f24c 4340 	movw	r3, #50240	; 0xc440
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	2300      	movs	r3, #0
 800463a:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <updateFace+0x180>)
 800463c:	2100      	movs	r1, #0
 800463e:	2000      	movs	r0, #0
 8004640:	f7fe f8da 	bl	80027f8 <LCD_DrawFace>
                break;
 8004644:	e031      	b.n	80046aa <updateFace+0x166>
            
            case (SAD):
                LCD_DrawFace(0, 0, face_sad, SKIN_COLOR, EYE_COLOR);
 8004646:	f24c 4340 	movw	r3, #50240	; 0xc440
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	2300      	movs	r3, #0
 800464e:	4a1e      	ldr	r2, [pc, #120]	; (80046c8 <updateFace+0x184>)
 8004650:	2100      	movs	r1, #0
 8004652:	2000      	movs	r0, #0
 8004654:	f7fe f8d0 	bl	80027f8 <LCD_DrawFace>
                break;
 8004658:	e028      	b.n	80046ac <updateFace+0x168>

            case (ANGRY):
                LCD_DrawFace(0, 0, face_angry, SKIN_COLOR, EYE_COLOR);
 800465a:	f24c 4340 	movw	r3, #50240	; 0xc440
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2300      	movs	r3, #0
 8004662:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <updateFace+0x188>)
 8004664:	2100      	movs	r1, #0
 8004666:	2000      	movs	r0, #0
 8004668:	f7fe f8c6 	bl	80027f8 <LCD_DrawFace>
                break;
 800466c:	e01e      	b.n	80046ac <updateFace+0x168>

            case (HAPPY):
                LCD_DrawFace(0, 0, face_happy, SKIN_COLOR, EYE_COLOR);
 800466e:	f24c 4340 	movw	r3, #50240	; 0xc440
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	2300      	movs	r3, #0
 8004676:	4a16      	ldr	r2, [pc, #88]	; (80046d0 <updateFace+0x18c>)
 8004678:	2100      	movs	r1, #0
 800467a:	2000      	movs	r0, #0
 800467c:	f7fe f8bc 	bl	80027f8 <LCD_DrawFace>
                break;
 8004680:	e014      	b.n	80046ac <updateFace+0x168>

            case (ALARM):
                LCD_DrawFace(0, 0, face_angry, SKIN_COLOR, EYE_COLOR);
 8004682:	f24c 4340 	movw	r3, #50240	; 0xc440
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	2300      	movs	r3, #0
 800468a:	4a10      	ldr	r2, [pc, #64]	; (80046cc <updateFace+0x188>)
 800468c:	2100      	movs	r1, #0
 800468e:	2000      	movs	r0, #0
 8004690:	f7fe f8b2 	bl	80027f8 <LCD_DrawFace>
                break;
 8004694:	e00a      	b.n	80046ac <updateFace+0x168>
        
            case (DEAD):
                LCD_DrawFace(0, 0, face_dead, SKIN_COLOR, EYE_COLOR);
 8004696:	f24c 4340 	movw	r3, #50240	; 0xc440
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	2300      	movs	r3, #0
 800469e:	4a0d      	ldr	r2, [pc, #52]	; (80046d4 <updateFace+0x190>)
 80046a0:	2100      	movs	r1, #0
 80046a2:	2000      	movs	r0, #0
 80046a4:	f7fe f8a8 	bl	80027f8 <LCD_DrawFace>
                break;
 80046a8:	e000      	b.n	80046ac <updateFace+0x168>
                break;
 80046aa:	bf00      	nop
        }
    }
}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	08014c9c 	.word	0x08014c9c
 80046b8:	08014e1c 	.word	0x08014e1c
 80046bc:	08014e7c 	.word	0x08014e7c
 80046c0:	08014edc 	.word	0x08014edc
 80046c4:	08014f3c 	.word	0x08014f3c
 80046c8:	08014dbc 	.word	0x08014dbc
 80046cc:	08014cfc 	.word	0x08014cfc
 80046d0:	08014d5c 	.word	0x08014d5c
 80046d4:	08014f9c 	.word	0x08014f9c

080046d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046d8:	b5b0      	push	{r4, r5, r7, lr}
 80046da:	f5ad 6d42 	sub.w	sp, sp, #3104	; 0xc20
 80046de:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  int sys_tick_c = 0, sys_tick_p_1 = 0, sys_tick_p_100 = 0, sys_tick_p_move = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f8c7 3c00 	str.w	r3, [r7, #3072]	; 0xc00
 80046e6:	2300      	movs	r3, #0
 80046e8:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8c7 3c08 	str.w	r3, [r7, #3080]	; 0xc08
 80046f2:	2300      	movs	r3, #0
 80046f4:	f8c7 3c04 	str.w	r3, [r7, #3076]	; 0xc04
  int walk_state = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc

//  double femur_trajectory_walk[] = {55, 55, 90, 44};
//  double tibia_trajectory_walk[] = {118, 137, 137, 99};
  double femur_trajectory_walk[4] = {60, 45, 102, 51};
 80046fe:	4bdd      	ldr	r3, [pc, #884]	; (8004a74 <main+0x39c>)
 8004700:	f607 34d8 	addw	r4, r7, #3032	; 0xbd8
 8004704:	461d      	mov	r5, r3
 8004706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800470a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800470e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  double tibia_trajectory_walk[4] = {115, 128, 135, 106};
 8004712:	4bd9      	ldr	r3, [pc, #868]	; (8004a78 <main+0x3a0>)
 8004714:	f607 34b8 	addw	r4, r7, #3000	; 0xbb8
 8004718:	461d      	mov	r5, r3
 800471a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800471c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800471e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004726:	f002 fa67 	bl	8006bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800472a:	f000 fa3f 	bl	8004bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800472e:	f000 fdd3 	bl	80052d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004732:	f000 fd4b 	bl	80051cc <MX_DMA_Init>
  MX_FSMC_Init();
 8004736:	f000 fe99 	bl	800546c <MX_FSMC_Init>
  MX_SDIO_SD_Init();
 800473a:	f000 fcaf 	bl	800509c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800473e:	f009 fa2f 	bl	800dba0 <MX_FATFS_Init>
  MX_ADC2_Init();
 8004742:	f000 fba7 	bl	8004e94 <MX_ADC2_Init>
  MX_ADC1_Init();
 8004746:	f000 fa9d 	bl	8004c84 <MX_ADC1_Init>
  MX_DAC_Init();
 800474a:	f000 fbf5 	bl	8004f38 <MX_DAC_Init>
  MX_TIM4_Init();
 800474e:	f000 fcc5 	bl	80050dc <MX_TIM4_Init>
  MX_I2C1_Init();
 8004752:	f000 fc1b 	bl	8004f8c <MX_I2C1_Init>
  MX_RTC_Init();
 8004756:	f000 fc47 	bl	8004fe8 <MX_RTC_Init>
  MX_USART6_UART_Init();
 800475a:	f000 fd0d 	bl	8005178 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

	// Configuring systick
	HAL_SetTickFreq(HAL_TICK_FREQ_1KHZ);
 800475e:	2001      	movs	r0, #1
 8004760:	f002 fabc 	bl	8006cdc <HAL_SetTickFreq>


	// Initalizing the LCD
	LCD_INIT();
 8004764:	f7fd fdb2 	bl	80022cc <LCD_INIT>
	LCD_BackLed_Control(DISABLE);
 8004768:	2000      	movs	r0, #0
 800476a:	f7fd fddf 	bl	800232c <LCD_BackLed_Control>


	// Mounting SD cards
	LCD_DrawString(0, 0, "INIT SD");
 800476e:	4ac3      	ldr	r2, [pc, #780]	; (8004a7c <main+0x3a4>)
 8004770:	2100      	movs	r1, #0
 8004772:	2000      	movs	r0, #0
 8004774:	f7fe f810 	bl	8002798 <LCD_DrawString>
	SDcard_STATUS status = SD_Init();
 8004778:	f7fc fcb0 	bl	80010dc <SD_Init>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3bfb 	strb.w	r3, [r7, #3067]	; 0xbfb
	if (status != SDcard_OK) {
 8004782:	f897 3bfb 	ldrb.w	r3, [r7, #3067]	; 0xbfb
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <main+0xb6>
	  HardFault_Handler();
 800478a:	f002 f8cc 	bl	8006926 <HardFault_Handler>
	}
	LCD_DrawString(150, 0, "SD OK");
 800478e:	4abc      	ldr	r2, [pc, #752]	; (8004a80 <main+0x3a8>)
 8004790:	2100      	movs	r1, #0
 8004792:	2096      	movs	r0, #150	; 0x96
 8004794:	f7fe f800 	bl	8002798 <LCD_DrawString>


	// Initializing the MPU6050
	MPU6050_init();
 8004798:	f7fc fbc4 	bl	8000f24 <MPU6050_init>
	MPU6050_Read_Accel(&acc_x, &acc_y, &acc_z);
 800479c:	4ab9      	ldr	r2, [pc, #740]	; (8004a84 <main+0x3ac>)
 800479e:	49ba      	ldr	r1, [pc, #744]	; (8004a88 <main+0x3b0>)
 80047a0:	48ba      	ldr	r0, [pc, #744]	; (8004a8c <main+0x3b4>)
 80047a2:	f7fc fc15 	bl	8000fd0 <MPU6050_Read_Accel>


//	 Initalizing the VL53L0X
	statInfo_t_VL53L0X distanceStr;
	initVL53L0X(1, &hi2c1);
 80047a6:	49ba      	ldr	r1, [pc, #744]	; (8004a90 <main+0x3b8>)
 80047a8:	2001      	movs	r0, #1
 80047aa:	f7fc fdb3 	bl	8001314 <initVL53L0X>

	// Configure the sensor for high accuracy and speed in 20 cm.
	setSignalRateLimit(2);
 80047ae:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80047b2:	f7fd f80d 	bl	80017d0 <setSignalRateLimit>
	setVcselPulsePeriod(VcselPeriodPreRange, 10);
 80047b6:	210a      	movs	r1, #10
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7fd f939 	bl	8001a30 <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 80047be:	210e      	movs	r1, #14
 80047c0:	2001      	movs	r0, #1
 80047c2:	f7fd f935 	bl	8001a30 <setVcselPulsePeriod>
	setMeasurementTimingBudget(300 * 1000UL);
 80047c6:	48b3      	ldr	r0, [pc, #716]	; (8004a94 <main+0x3bc>)
 80047c8:	f7fd f838 	bl	800183c <setMeasurementTimingBudget>


	// Initializing the servo angle reading
	servoAngleReader servo_reader;
	servo_reader.servoADC = &hadc1;
 80047cc:	4bb2      	ldr	r3, [pc, #712]	; (8004a98 <main+0x3c0>)
 80047ce:	f8c7 3b18 	str.w	r3, [r7, #2840]	; 0xb18
	servoReaderStart(&servo_reader);
 80047d2:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe f928 	bl	8002a2c <servoReaderStart>

	// Instantiating the PCA PWM controllers
	static pca9685_handle_t GPWM_1;
	static pca9685_handle_t GPWM_2;

	GPWM_1.device_address = 0x61 << 1;
 80047dc:	4baf      	ldr	r3, [pc, #700]	; (8004a9c <main+0x3c4>)
 80047de:	22c2      	movs	r2, #194	; 0xc2
 80047e0:	809a      	strh	r2, [r3, #4]
	GPWM_2.device_address = 0x60 << 1;
 80047e2:	4baf      	ldr	r3, [pc, #700]	; (8004aa0 <main+0x3c8>)
 80047e4:	22c0      	movs	r2, #192	; 0xc0
 80047e6:	809a      	strh	r2, [r3, #4]

	GPWM_1.i2c_handle = &hi2c1;
 80047e8:	4bac      	ldr	r3, [pc, #688]	; (8004a9c <main+0x3c4>)
 80047ea:	4aa9      	ldr	r2, [pc, #676]	; (8004a90 <main+0x3b8>)
 80047ec:	601a      	str	r2, [r3, #0]
	GPWM_2.i2c_handle = &hi2c1;
 80047ee:	4bac      	ldr	r3, [pc, #688]	; (8004aa0 <main+0x3c8>)
 80047f0:	4aa7      	ldr	r2, [pc, #668]	; (8004a90 <main+0x3b8>)
 80047f2:	601a      	str	r2, [r3, #0]

	GPWM_1.inverted = 0;
 80047f4:	4ba9      	ldr	r3, [pc, #676]	; (8004a9c <main+0x3c4>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	719a      	strb	r2, [r3, #6]
	GPWM_2.inverted = 0;
 80047fa:	4ba9      	ldr	r3, [pc, #676]	; (8004aa0 <main+0x3c8>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	719a      	strb	r2, [r3, #6]

	servoSet.pwm_out_1 = &GPWM_1;
 8004800:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004804:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8004808:	4aa4      	ldr	r2, [pc, #656]	; (8004a9c <main+0x3c4>)
 800480a:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
	servoSet.pwm_out_2 = &GPWM_2;
 800480e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004812:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8004816:	4aa2      	ldr	r2, [pc, #648]	; (8004aa0 <main+0x3c8>)
 8004818:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4

	servoSet.LB_Tibia_PID = &LB_Tibia_PID;
 800481c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004820:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8004824:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 8004828:	605a      	str	r2, [r3, #4]
	servoSet.LB_Femur_PID = &LB_Femur_PID;
 800482a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800482e:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8004832:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 8004836:	609a      	str	r2, [r3, #8]
	servoSet.LB_Shoul_PID = &LB_Shoul_PID;
 8004838:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800483c:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8004840:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8004844:	60da      	str	r2, [r3, #12]
	servoSet.LF_Tibia_PID = &LF_Tibia_PID;
 8004846:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800484a:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800484e:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8004852:	611a      	str	r2, [r3, #16]
	servoSet.LF_Femur_PID = &LF_Femur_PID;
 8004854:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004858:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800485c:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8004860:	615a      	str	r2, [r3, #20]
	servoSet.LF_Shoul_PID = &LF_Shoul_PID;
 8004862:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004866:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800486a:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800486e:	619a      	str	r2, [r3, #24]
	servoSet.RF_Tibia_PID = &RF_Tibia_PID;
 8004870:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004874:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8004878:	f507 7250 	add.w	r2, r7, #832	; 0x340
 800487c:	61da      	str	r2, [r3, #28]
	servoSet.RF_Femur_PID = &RF_Femur_PID;
 800487e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004882:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8004886:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 800488a:	621a      	str	r2, [r3, #32]
	servoSet.RF_Shoul_PID = &RF_Shoul_PID;
 800488c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004890:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8004894:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004898:	625a      	str	r2, [r3, #36]	; 0x24
	servoSet.RB_Tibia_PID = &RB_Tibia_PID;
 800489a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800489e:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 80048a2:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28
	servoSet.RB_Femur_PID = &RB_Femur_PID;
 80048a8:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80048ac:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 80048b0:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80048b4:	62da      	str	r2, [r3, #44]	; 0x2c
	servoSet.RB_Shoul_PID = &RB_Shoul_PID;
 80048b6:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80048ba:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 80048be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30



	// Initalizing the PCA9685
	LCD_DrawString(0, 20, "INIT PCA9685");
 80048c4:	4a77      	ldr	r2, [pc, #476]	; (8004aa4 <main+0x3cc>)
 80048c6:	2114      	movs	r1, #20
 80048c8:	2000      	movs	r0, #0
 80048ca:	f7fd ff65 	bl	8002798 <LCD_DrawString>
	if (!pidInit(&servoSet)) {
 80048ce:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe f9b0 	bl	8002c38 <pidInit>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <main+0x214>
		LCD_DrawString(150, 20, "FAIL");
 80048de:	4a72      	ldr	r2, [pc, #456]	; (8004aa8 <main+0x3d0>)
 80048e0:	2114      	movs	r1, #20
 80048e2:	2096      	movs	r0, #150	; 0x96
 80048e4:	f7fd ff58 	bl	8002798 <LCD_DrawString>
		HardFault_Handler();
 80048e8:	f002 f81d 	bl	8006926 <HardFault_Handler>
	}
	LCD_DrawString(150, 20, "PCA9685 OK");
 80048ec:	4a6f      	ldr	r2, [pc, #444]	; (8004aac <main+0x3d4>)
 80048ee:	2114      	movs	r1, #20
 80048f0:	2096      	movs	r0, #150	; 0x96
 80048f2:	f7fd ff51 	bl	8002798 <LCD_DrawString>
	leg_position LB_pos;
	leg_position RB_pos;
	leg_position LF_pos;
	leg_position RF_pos;

	LB_pos.leg = LB;
 80048f6:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80048fa:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 80048fe:	2200      	movs	r2, #0
 8004900:	701a      	strb	r2, [r3, #0]
	RB_pos.leg = RB;
 8004902:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004906:	f5a3 6335 	sub.w	r3, r3, #2896	; 0xb50
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
	LF_pos.leg = LF;
 800490e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004912:	f6a3 3378 	subw	r3, r3, #2936	; 0xb78
 8004916:	2202      	movs	r2, #2
 8004918:	701a      	strb	r2, [r3, #0]
	RF_pos.leg = RF;
 800491a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800491e:	f5a3 633a 	sub.w	r3, r3, #2976	; 0xba0
 8004922:	2203      	movs	r2, #3
 8004924:	701a      	strb	r2, [r3, #0]


	// Initializing the audio player
	audioController AudioCtrl;

	AudioCtrl.hdac = &hdac;
 8004926:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800492a:	f6a3 33ac 	subw	r3, r3, #2988	; 0xbac
 800492e:	4a60      	ldr	r2, [pc, #384]	; (8004ab0 <main+0x3d8>)
 8004930:	601a      	str	r2, [r3, #0]
	AudioCtrl.htim = &htim4;
 8004932:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004936:	f6a3 33ac 	subw	r3, r3, #2988	; 0xbac
 800493a:	4a5e      	ldr	r2, [pc, #376]	; (8004ab4 <main+0x3dc>)
 800493c:	605a      	str	r2, [r3, #4]
	AudioCtrl.dac_channel = DAC_CHANNEL_1;
 800493e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004942:	f6a3 33ac 	subw	r3, r3, #2988	; 0xbac
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]

	LCD_DrawString(0, 40, "LOADING AUDIO FILE");
 800494a:	4a5b      	ldr	r2, [pc, #364]	; (8004ab8 <main+0x3e0>)
 800494c:	2128      	movs	r1, #40	; 0x28
 800494e:	2000      	movs	r0, #0
 8004950:	f7fd ff22 	bl	8002798 <LCD_DrawString>
	initAudio(&AudioCtrl);
 8004954:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004958:	4618      	mov	r0, r3
 800495a:	f7fd ffb7 	bl	80028cc <initAudio>
	loadAudioFiles();
 800495e:	f7fd ffc3 	bl	80028e8 <loadAudioFiles>


	// Initalizing the interaction timer
	interaction_timer interactionTimer;
	interactionTimer.hrtc = &hrtc;
 8004962:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004966:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 800496a:	4a54      	ldr	r2, [pc, #336]	; (8004abc <main+0x3e4>)
 800496c:	61da      	str	r2, [r3, #28]
	interactionTimer.sadThresholdDay = SAD_THRESHOLD_DAY;
 800496e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004972:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 8004976:	2200      	movs	r2, #0
 8004978:	769a      	strb	r2, [r3, #26]
	interactionTimer.sadThresholdHour = SAD_THRESHOLD_HOUR;
 800497a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800497e:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 8004982:	2200      	movs	r2, #0
 8004984:	765a      	strb	r2, [r3, #25]
	interactionTimer.sadThresholdMin = SAD_THRESHOLD_MIN;
 8004986:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800498a:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 800498e:	2201      	movs	r2, #1
 8004990:	761a      	strb	r2, [r3, #24]
	interactUpdate(&interactionTimer);
 8004992:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff f9cc 	bl	8003d34 <interactUpdate>


	// Initializing the face controller
	face_controller faceController;
	faceController.animation_counter = 0;
 800499c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80049a0:	f5a3 633d 	sub.w	r3, r3, #3024	; 0xbd0
 80049a4:	2200      	movs	r2, #0
 80049a6:	705a      	strb	r2, [r3, #1]

  movement_controller moveController;
  moveController.movement_counter = 0;
 80049a8:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80049ac:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 80049b0:	2200      	movs	r2, #0
 80049b2:	801a      	strh	r2, [r3, #0]
  moveController.executing_state = STANDING;
 80049b4:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80049b8:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 80049bc:	2200      	movs	r2, #0
 80049be:	709a      	strb	r2, [r3, #2]

	// Initializing the state controller
	state_controller stateController;
	stateController._servo_reader = &servo_reader;
 80049c0:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80049c4:	f5a3 6341 	sub.w	r3, r3, #3088	; 0xc10
 80049c8:	f607 3218 	addw	r2, r7, #2840	; 0xb18
 80049cc:	615a      	str	r2, [r3, #20]
	stateController.interactionTimer = &interactionTimer;
 80049ce:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80049d2:	f5a3 6341 	sub.w	r3, r3, #3088	; 0xc10
 80049d6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80049da:	619a      	str	r2, [r3, #24]
	stateController._audio_controller = &AudioCtrl;
 80049dc:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80049e0:	f5a3 6341 	sub.w	r3, r3, #3088	; 0xc10
 80049e4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80049e8:	61da      	str	r2, [r3, #28]
	stateController.current_mm_state = NORMAL;
 80049ea:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80049ee:	f5a3 6341 	sub.w	r3, r3, #3088	; 0xc10
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2020 	strb.w	r2, [r3, #32]
	stateController.current_move_state = STANDING;
 80049f8:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80049fc:	f5a3 6341 	sub.w	r3, r3, #3088	; 0xc10
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	stateController.bt_uart = &huart6;
 8004a06:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004a0a:	f5a3 6341 	sub.w	r3, r3, #3088	; 0xc10
 8004a0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ac0 <main+0x3e8>)
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24
	stateController.distanceStr = &distanceStr;
 8004a12:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004a16:	f5a3 6341 	sub.w	r3, r3, #3088	; 0xc10
 8004a1a:	f607 32ac 	addw	r2, r7, #2988	; 0xbac
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sys_tick_c = HAL_GetTick();
 8004a20:	f002 f950 	bl	8006cc4 <HAL_GetTick>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f8c7 3c00 	str.w	r3, [r7, #3072]	; 0xc00

//	  MPU6050_Read_Accel(&acc_x, &acc_y, &acc_z);
//	  distance = readRangeSingleMillimeters(&distanceStr);

	  // 1 Hz Processes
	  if ((sys_tick_c - sys_tick_p_1) >= 1000) {
 8004a2a:	f8d7 2c00 	ldr.w	r2, [r7, #3072]	; 0xc00
 8004a2e:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a38:	db52      	blt.n	8004ae0 <main+0x408>
		  sys_tick_p_1 = sys_tick_c;
 8004a3a:	f8d7 3c00 	ldr.w	r3, [r7, #3072]	; 0xc00
 8004a3e:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c
		  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9);
 8004a42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a46:	481f      	ldr	r0, [pc, #124]	; (8004ac4 <main+0x3ec>)
 8004a48:	f003 ff01 	bl	800884e <HAL_GPIO_TogglePin>
		  HAL_StatusTypeDef remote_status = receive_normal_data(stateController.bt_uart, &stateController.joystick_x, &stateController.joystick_y, &stateController.joystick_button, &stateController.ts_button);
 8004a4c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004a50:	f5a3 6341 	sub.w	r3, r3, #3088	; 0xc10
 8004a54:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004a56:	463b      	mov	r3, r7
 8004a58:	f103 040f 	add.w	r4, r3, #15
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	f103 020e 	add.w	r2, r3, #14
 8004a62:	463b      	mov	r3, r7
 8004a64:	f103 010d 	add.w	r1, r3, #13
 8004a68:	463b      	mov	r3, r7
 8004a6a:	3310      	adds	r3, #16
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	4623      	mov	r3, r4
 8004a70:	e02a      	b.n	8004ac8 <main+0x3f0>
 8004a72:	bf00      	nop
 8004a74:	08014570 	.word	0x08014570
 8004a78:	08014590 	.word	0x08014590
 8004a7c:	08014528 	.word	0x08014528
 8004a80:	08014530 	.word	0x08014530
 8004a84:	20000a5c 	.word	0x20000a5c
 8004a88:	20000a58 	.word	0x20000a58
 8004a8c:	20000a54 	.word	0x20000a54
 8004a90:	20000710 	.word	0x20000710
 8004a94:	000493e0 	.word	0x000493e0
 8004a98:	2000054c 	.word	0x2000054c
 8004a9c:	20000a64 	.word	0x20000a64
 8004aa0:	20000a6c 	.word	0x20000a6c
 8004aa4:	08014538 	.word	0x08014538
 8004aa8:	08014548 	.word	0x08014548
 8004aac:	08014550 	.word	0x08014550
 8004ab0:	2000069c 	.word	0x2000069c
 8004ab4:	200008c8 	.word	0x200008c8
 8004ab8:	0801455c 	.word	0x0801455c
 8004abc:	20000764 	.word	0x20000764
 8004ac0:	20000910 	.word	0x20000910
 8004ac4:	40021400 	.word	0x40021400
 8004ac8:	f7ff f985 	bl	8003dd6 <receive_normal_data>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 3bfa 	strb.w	r3, [r7, #3066]	; 0xbfa
		  updateFace(&faceController, &stateController);
 8004ad2:	463a      	mov	r2, r7
 8004ad4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fd32 	bl	8004544 <updateFace>
	  }

    //  Hz Processes
	  if ((sys_tick_c - sys_tick_p_move) >= 10) {
 8004ae0:	f8d7 2c00 	ldr.w	r2, [r7, #3072]	; 0xc00
 8004ae4:	f8d7 3c04 	ldr.w	r3, [r7, #3076]	; 0xc04
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b09      	cmp	r3, #9
 8004aec:	dd16      	ble.n	8004b1c <main+0x444>
		  sys_tick_p_move = sys_tick_c;
 8004aee:	f8d7 3c00 	ldr.w	r3, [r7, #3072]	; 0xc00
 8004af2:	f8c7 3c04 	str.w	r3, [r7, #3076]	; 0xc04
		  updateMovements(&moveController, &stateController, &servoSet, &LB_pos, &RB_pos, &LF_pos, &RF_pos);
 8004af6:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8004afa:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8004afe:	4639      	mov	r1, r7
 8004b00:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004b04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004b08:	9302      	str	r3, [sp, #8]
 8004b0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4623      	mov	r3, r4
 8004b18:	f7ff fac6 	bl	80040a8 <updateMovements>
	  }

	  // 1000 Hz Processes
	  if ((sys_tick_c - sys_tick_p_100) >= 1) {
 8004b1c:	f8d7 2c00 	ldr.w	r2, [r7, #3072]	; 0xc00
 8004b20:	f8d7 3c08 	ldr.w	r3, [r7, #3080]	; 0xc08
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	dd2b      	ble.n	8004b82 <main+0x4aa>
		  sys_tick_p_100 = sys_tick_c;
 8004b2a:	f8d7 3c00 	ldr.w	r3, [r7, #3072]	; 0xc00
 8004b2e:	f8c7 3c08 	str.w	r3, [r7, #3080]	; 0xc08
//		  updateLeg(&RB_pos, &servoSet);
//		  updateLeg(&LF_pos, &servoSet);
//		  updateLeg(&RF_pos, &servoSet);

		  // Begin the process
		  determineMultimediaState(&stateController);
 8004b32:	463b      	mov	r3, r7
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff f975 	bl	8003e24 <determineMultimediaState>
	      determineMovementState(&stateController);
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff f9e7 	bl	8003f10 <determineMovementState>

	      updateLeg(&LB_pos, &servoSet);
 8004b42:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8004b46:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fe ffa7 	bl	8003aa0 <updateLeg>
		  updateLeg(&RB_pos, &servoSet);
 8004b52:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8004b56:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fe ff9f 	bl	8003aa0 <updateLeg>
	      updateLeg(&LF_pos, &servoSet);
 8004b62:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8004b66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe ff97 	bl	8003aa0 <updateLeg>
	      updateLeg(&RF_pos, &servoSet);
 8004b72:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8004b76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe ff8f 	bl	8003aa0 <updateLeg>
	  }

	updateAngles(&servo_reader);
 8004b82:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fd ff60 	bl	8002a4c <updateAngles>
	updateAnglesArray(&servoSet, servo_reader.servoAngles);
 8004b8c:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8004b90:	f103 0220 	add.w	r2, r3, #32
 8004b94:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fd ffb6 	bl	8002b0c <updateAnglesArray>
	updateServo(&servoSet); // Poll every time!
 8004ba0:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fe fb03 	bl	80031b0 <updateServo>
	  sys_tick_c = HAL_GetTick();
 8004baa:	e739      	b.n	8004a20 <main+0x348>

08004bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b094      	sub	sp, #80	; 0x50
 8004bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bb2:	f107 0320 	add.w	r3, r7, #32
 8004bb6:	2230      	movs	r2, #48	; 0x30
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f00c f9e1 	bl	8010f82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bc0:	f107 030c 	add.w	r3, r7, #12
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	605a      	str	r2, [r3, #4]
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	60da      	str	r2, [r3, #12]
 8004bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60bb      	str	r3, [r7, #8]
 8004bd4:	4b29      	ldr	r3, [pc, #164]	; (8004c7c <SystemClock_Config+0xd0>)
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <SystemClock_Config+0xd0>)
 8004bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bde:	6413      	str	r3, [r2, #64]	; 0x40
 8004be0:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <SystemClock_Config+0xd0>)
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bec:	2300      	movs	r3, #0
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	4b23      	ldr	r3, [pc, #140]	; (8004c80 <SystemClock_Config+0xd4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a22      	ldr	r2, [pc, #136]	; (8004c80 <SystemClock_Config+0xd4>)
 8004bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b20      	ldr	r3, [pc, #128]	; (8004c80 <SystemClock_Config+0xd4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004c08:	230a      	movs	r3, #10
 8004c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c10:	2310      	movs	r3, #16
 8004c12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004c14:	2301      	movs	r3, #1
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004c20:	2308      	movs	r3, #8
 8004c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004c24:	23a8      	movs	r3, #168	; 0xa8
 8004c26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004c2c:	2307      	movs	r3, #7
 8004c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c30:	f107 0320 	add.w	r3, r7, #32
 8004c34:	4618      	mov	r0, r3
 8004c36:	f005 fa59 	bl	800a0ec <HAL_RCC_OscConfig>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004c40:	f000 fcc0 	bl	80055c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c44:	230f      	movs	r3, #15
 8004c46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004c5c:	f107 030c 	add.w	r3, r7, #12
 8004c60:	2105      	movs	r1, #5
 8004c62:	4618      	mov	r0, r3
 8004c64:	f005 fcba 	bl	800a5dc <HAL_RCC_ClockConfig>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004c6e:	f000 fca9 	bl	80055c4 <Error_Handler>
  }
}
 8004c72:	bf00      	nop
 8004c74:	3750      	adds	r7, #80	; 0x50
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40007000 	.word	0x40007000

08004c84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004c8a:	463b      	mov	r3, r7
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	605a      	str	r2, [r3, #4]
 8004c92:	609a      	str	r2, [r3, #8]
 8004c94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004c96:	4b7c      	ldr	r3, [pc, #496]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004c98:	4a7c      	ldr	r2, [pc, #496]	; (8004e8c <MX_ADC1_Init+0x208>)
 8004c9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c9c:	4b7a      	ldr	r3, [pc, #488]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ca2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ca4:	4b78      	ldr	r3, [pc, #480]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004caa:	4b77      	ldr	r3, [pc, #476]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004cb0:	4b75      	ldr	r3, [pc, #468]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004cb6:	4b74      	ldr	r3, [pc, #464]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004cbe:	4b72      	ldr	r3, [pc, #456]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004cc4:	4b70      	ldr	r3, [pc, #448]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004cc6:	4a72      	ldr	r2, [pc, #456]	; (8004e90 <MX_ADC1_Init+0x20c>)
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004cca:	4b6f      	ldr	r3, [pc, #444]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8004cd0:	4b6d      	ldr	r3, [pc, #436]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004cd2:	220e      	movs	r2, #14
 8004cd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004cd6:	4b6c      	ldr	r3, [pc, #432]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004cde:	4b6a      	ldr	r3, [pc, #424]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ce4:	4868      	ldr	r0, [pc, #416]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004ce6:	f002 f845 	bl	8006d74 <HAL_ADC_Init>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004cf0:	f000 fc68 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d00:	463b      	mov	r3, r7
 8004d02:	4619      	mov	r1, r3
 8004d04:	4860      	ldr	r0, [pc, #384]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004d06:	f002 fac1 	bl	800728c <HAL_ADC_ConfigChannel>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004d10:	f000 fc58 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004d14:	2301      	movs	r3, #1
 8004d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4859      	ldr	r0, [pc, #356]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004d22:	f002 fab3 	bl	800728c <HAL_ADC_ConfigChannel>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004d2c:	f000 fc4a 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004d30:	2302      	movs	r3, #2
 8004d32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004d34:	2303      	movs	r3, #3
 8004d36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d38:	463b      	mov	r3, r7
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4852      	ldr	r0, [pc, #328]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004d3e:	f002 faa5 	bl	800728c <HAL_ADC_ConfigChannel>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8004d48:	f000 fc3c 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004d50:	2304      	movs	r3, #4
 8004d52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d54:	463b      	mov	r3, r7
 8004d56:	4619      	mov	r1, r3
 8004d58:	484b      	ldr	r0, [pc, #300]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004d5a:	f002 fa97 	bl	800728c <HAL_ADC_ConfigChannel>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8004d64:	f000 fc2e 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004d68:	2305      	movs	r3, #5
 8004d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004d6c:	2305      	movs	r3, #5
 8004d6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d70:	463b      	mov	r3, r7
 8004d72:	4619      	mov	r1, r3
 8004d74:	4844      	ldr	r0, [pc, #272]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004d76:	f002 fa89 	bl	800728c <HAL_ADC_ConfigChannel>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8004d80:	f000 fc20 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004d84:	2306      	movs	r3, #6
 8004d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004d88:	2306      	movs	r3, #6
 8004d8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d8c:	463b      	mov	r3, r7
 8004d8e:	4619      	mov	r1, r3
 8004d90:	483d      	ldr	r0, [pc, #244]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004d92:	f002 fa7b 	bl	800728c <HAL_ADC_ConfigChannel>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8004d9c:	f000 fc12 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004da0:	2307      	movs	r3, #7
 8004da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004da4:	2307      	movs	r3, #7
 8004da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004da8:	463b      	mov	r3, r7
 8004daa:	4619      	mov	r1, r3
 8004dac:	4836      	ldr	r0, [pc, #216]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004dae:	f002 fa6d 	bl	800728c <HAL_ADC_ConfigChannel>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8004db8:	f000 fc04 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004dc0:	2308      	movs	r3, #8
 8004dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	482f      	ldr	r0, [pc, #188]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004dca:	f002 fa5f 	bl	800728c <HAL_ADC_ConfigChannel>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8004dd4:	f000 fbf6 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004dd8:	2309      	movs	r3, #9
 8004dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004ddc:	2309      	movs	r3, #9
 8004dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004de0:	463b      	mov	r3, r7
 8004de2:	4619      	mov	r1, r3
 8004de4:	4828      	ldr	r0, [pc, #160]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004de6:	f002 fa51 	bl	800728c <HAL_ADC_ConfigChannel>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8004df0:	f000 fbe8 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004df4:	230a      	movs	r3, #10
 8004df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004df8:	230a      	movs	r3, #10
 8004dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4821      	ldr	r0, [pc, #132]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004e02:	f002 fa43 	bl	800728c <HAL_ADC_ConfigChannel>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8004e0c:	f000 fbda 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004e10:	230b      	movs	r3, #11
 8004e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004e14:	230b      	movs	r3, #11
 8004e16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e18:	463b      	mov	r3, r7
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	481a      	ldr	r0, [pc, #104]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004e1e:	f002 fa35 	bl	800728c <HAL_ADC_ConfigChannel>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8004e28:	f000 fbcc 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004e2c:	230c      	movs	r3, #12
 8004e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004e30:	230c      	movs	r3, #12
 8004e32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e34:	463b      	mov	r3, r7
 8004e36:	4619      	mov	r1, r3
 8004e38:	4813      	ldr	r0, [pc, #76]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004e3a:	f002 fa27 	bl	800728c <HAL_ADC_ConfigChannel>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8004e44:	f000 fbbe 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004e48:	230d      	movs	r3, #13
 8004e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8004e4c:	230d      	movs	r3, #13
 8004e4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e50:	463b      	mov	r3, r7
 8004e52:	4619      	mov	r1, r3
 8004e54:	480c      	ldr	r0, [pc, #48]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004e56:	f002 fa19 	bl	800728c <HAL_ADC_ConfigChannel>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8004e60:	f000 fbb0 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004e64:	230f      	movs	r3, #15
 8004e66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004e68:	230e      	movs	r3, #14
 8004e6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e6c:	463b      	mov	r3, r7
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4805      	ldr	r0, [pc, #20]	; (8004e88 <MX_ADC1_Init+0x204>)
 8004e72:	f002 fa0b 	bl	800728c <HAL_ADC_ConfigChannel>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8004e7c:	f000 fba2 	bl	80055c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	2000054c 	.word	0x2000054c
 8004e8c:	40012000 	.word	0x40012000
 8004e90:	0f000001 	.word	0x0f000001

08004e94 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	609a      	str	r2, [r3, #8]
 8004ea4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004ea6:	4b21      	ldr	r3, [pc, #132]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004ea8:	4a21      	ldr	r2, [pc, #132]	; (8004f30 <MX_ADC2_Init+0x9c>)
 8004eaa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004eac:	4b1f      	ldr	r3, [pc, #124]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004eae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004eb2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004eb4:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004eba:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004ec6:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004ece:	4b17      	ldr	r3, [pc, #92]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ed4:	4b15      	ldr	r3, [pc, #84]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004ed6:	4a17      	ldr	r2, [pc, #92]	; (8004f34 <MX_ADC2_Init+0xa0>)
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004eda:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004ee0:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004ee6:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004eee:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004ef4:	480d      	ldr	r0, [pc, #52]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004ef6:	f001 ff3d 	bl	8006d74 <HAL_ADC_Init>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004f00:	f000 fb60 	bl	80055c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004f04:	230e      	movs	r3, #14
 8004f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f10:	463b      	mov	r3, r7
 8004f12:	4619      	mov	r1, r3
 8004f14:	4805      	ldr	r0, [pc, #20]	; (8004f2c <MX_ADC2_Init+0x98>)
 8004f16:	f002 f9b9 	bl	800728c <HAL_ADC_ConfigChannel>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004f20:	f000 fb50 	bl	80055c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000594 	.word	0x20000594
 8004f30:	40012100 	.word	0x40012100
 8004f34:	0f000001 	.word	0x0f000001

08004f38 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004f3e:	463b      	mov	r3, r7
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <MX_DAC_Init+0x4c>)
 8004f48:	4a0f      	ldr	r2, [pc, #60]	; (8004f88 <MX_DAC_Init+0x50>)
 8004f4a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8004f4c:	480d      	ldr	r0, [pc, #52]	; (8004f84 <MX_DAC_Init+0x4c>)
 8004f4e:	f002 fd58 	bl	8007a02 <HAL_DAC_Init>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8004f58:	f000 fb34 	bl	80055c4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8004f5c:	232c      	movs	r3, #44	; 0x2c
 8004f5e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004f60:	2300      	movs	r3, #0
 8004f62:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004f64:	463b      	mov	r3, r7
 8004f66:	2200      	movs	r2, #0
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4806      	ldr	r0, [pc, #24]	; (8004f84 <MX_DAC_Init+0x4c>)
 8004f6c:	f002 fe58 	bl	8007c20 <HAL_DAC_ConfigChannel>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8004f76:	f000 fb25 	bl	80055c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	2000069c 	.word	0x2000069c
 8004f88:	40007400 	.word	0x40007400

08004f8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004f90:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <MX_I2C1_Init+0x50>)
 8004f92:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <MX_I2C1_Init+0x54>)
 8004f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004f96:	4b11      	ldr	r3, [pc, #68]	; (8004fdc <MX_I2C1_Init+0x50>)
 8004f98:	4a12      	ldr	r2, [pc, #72]	; (8004fe4 <MX_I2C1_Init+0x58>)
 8004f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004f9c:	4b0f      	ldr	r3, [pc, #60]	; (8004fdc <MX_I2C1_Init+0x50>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004fa2:	4b0e      	ldr	r3, [pc, #56]	; (8004fdc <MX_I2C1_Init+0x50>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <MX_I2C1_Init+0x50>)
 8004faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <MX_I2C1_Init+0x50>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004fb6:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <MX_I2C1_Init+0x50>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004fbc:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <MX_I2C1_Init+0x50>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004fc2:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <MX_I2C1_Init+0x50>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004fc8:	4804      	ldr	r0, [pc, #16]	; (8004fdc <MX_I2C1_Init+0x50>)
 8004fca:	f003 fc5b 	bl	8008884 <HAL_I2C_Init>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004fd4:	f000 faf6 	bl	80055c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004fd8:	bf00      	nop
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20000710 	.word	0x20000710
 8004fe0:	40005400 	.word	0x40005400
 8004fe4:	00061a80 	.word	0x00061a80

08004fe8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004fee:	1d3b      	adds	r3, r7, #4
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	60da      	str	r2, [r3, #12]
 8004ffa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005000:	4b24      	ldr	r3, [pc, #144]	; (8005094 <MX_RTC_Init+0xac>)
 8005002:	4a25      	ldr	r2, [pc, #148]	; (8005098 <MX_RTC_Init+0xb0>)
 8005004:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005006:	4b23      	ldr	r3, [pc, #140]	; (8005094 <MX_RTC_Init+0xac>)
 8005008:	2200      	movs	r2, #0
 800500a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800500c:	4b21      	ldr	r3, [pc, #132]	; (8005094 <MX_RTC_Init+0xac>)
 800500e:	227f      	movs	r2, #127	; 0x7f
 8005010:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005012:	4b20      	ldr	r3, [pc, #128]	; (8005094 <MX_RTC_Init+0xac>)
 8005014:	22ff      	movs	r2, #255	; 0xff
 8005016:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005018:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <MX_RTC_Init+0xac>)
 800501a:	2200      	movs	r2, #0
 800501c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800501e:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <MX_RTC_Init+0xac>)
 8005020:	2200      	movs	r2, #0
 8005022:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <MX_RTC_Init+0xac>)
 8005026:	2200      	movs	r2, #0
 8005028:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800502a:	481a      	ldr	r0, [pc, #104]	; (8005094 <MX_RTC_Init+0xac>)
 800502c:	f005 fdd8 	bl	800abe0 <HAL_RTC_Init>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8005036:	f000 fac5 	bl	80055c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800503a:	2312      	movs	r3, #18
 800503c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x40;
 800503e:	2340      	movs	r3, #64	; 0x40
 8005040:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8005042:	2300      	movs	r3, #0
 8005044:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005046:	2300      	movs	r3, #0
 8005048:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800504e:	1d3b      	adds	r3, r7, #4
 8005050:	2201      	movs	r2, #1
 8005052:	4619      	mov	r1, r3
 8005054:	480f      	ldr	r0, [pc, #60]	; (8005094 <MX_RTC_Init+0xac>)
 8005056:	f005 fe39 	bl	800accc <HAL_RTC_SetTime>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8005060:	f000 fab0 	bl	80055c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8005064:	2307      	movs	r3, #7
 8005066:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8005068:	2304      	movs	r3, #4
 800506a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x5;
 800506c:	2305      	movs	r3, #5
 800506e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x25;
 8005070:	2325      	movs	r3, #37	; 0x25
 8005072:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005074:	463b      	mov	r3, r7
 8005076:	2201      	movs	r2, #1
 8005078:	4619      	mov	r1, r3
 800507a:	4806      	ldr	r0, [pc, #24]	; (8005094 <MX_RTC_Init+0xac>)
 800507c:	f005 ff1e 	bl	800aebc <HAL_RTC_SetDate>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8005086:	f000 fa9d 	bl	80055c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800508a:	bf00      	nop
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000764 	.word	0x20000764
 8005098:	40002800 	.word	0x40002800

0800509c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <MX_SDIO_SD_Init+0x38>)
 80050a2:	4a0d      	ldr	r2, [pc, #52]	; (80050d8 <MX_SDIO_SD_Init+0x3c>)
 80050a4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <MX_SDIO_SD_Init+0x38>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <MX_SDIO_SD_Init+0x38>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <MX_SDIO_SD_Init+0x38>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <MX_SDIO_SD_Init+0x38>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <MX_SDIO_SD_Init+0x38>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 80050c4:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <MX_SDIO_SD_Init+0x38>)
 80050c6:	220c      	movs	r2, #12
 80050c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80050ca:	bf00      	nop
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	20000784 	.word	0x20000784
 80050d8:	40012c00 	.word	0x40012c00

080050dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050e2:	f107 0308 	add.w	r3, r7, #8
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	605a      	str	r2, [r3, #4]
 80050ec:	609a      	str	r2, [r3, #8]
 80050ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050f0:	463b      	mov	r3, r7
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80050f8:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <MX_TIM4_Init+0x94>)
 80050fa:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <MX_TIM4_Init+0x98>)
 80050fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1679;
 80050fe:	4b1c      	ldr	r3, [pc, #112]	; (8005170 <MX_TIM4_Init+0x94>)
 8005100:	f240 628f 	movw	r2, #1679	; 0x68f
 8005104:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005106:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <MX_TIM4_Init+0x94>)
 8005108:	2200      	movs	r2, #0
 800510a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4;
 800510c:	4b18      	ldr	r3, [pc, #96]	; (8005170 <MX_TIM4_Init+0x94>)
 800510e:	2204      	movs	r2, #4
 8005110:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005112:	4b17      	ldr	r3, [pc, #92]	; (8005170 <MX_TIM4_Init+0x94>)
 8005114:	2200      	movs	r2, #0
 8005116:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005118:	4b15      	ldr	r3, [pc, #84]	; (8005170 <MX_TIM4_Init+0x94>)
 800511a:	2200      	movs	r2, #0
 800511c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800511e:	4814      	ldr	r0, [pc, #80]	; (8005170 <MX_TIM4_Init+0x94>)
 8005120:	f007 f82c 	bl	800c17c <HAL_TIM_Base_Init>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800512a:	f000 fa4b 	bl	80055c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800512e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005132:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005134:	f107 0308 	add.w	r3, r7, #8
 8005138:	4619      	mov	r1, r3
 800513a:	480d      	ldr	r0, [pc, #52]	; (8005170 <MX_TIM4_Init+0x94>)
 800513c:	f007 f8d6 	bl	800c2ec <HAL_TIM_ConfigClockSource>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005146:	f000 fa3d 	bl	80055c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800514a:	2320      	movs	r3, #32
 800514c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800514e:	2300      	movs	r3, #0
 8005150:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005152:	463b      	mov	r3, r7
 8005154:	4619      	mov	r1, r3
 8005156:	4806      	ldr	r0, [pc, #24]	; (8005170 <MX_TIM4_Init+0x94>)
 8005158:	f007 faca 	bl	800c6f0 <HAL_TIMEx_MasterConfigSynchronization>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005162:	f000 fa2f 	bl	80055c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005166:	bf00      	nop
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	200008c8 	.word	0x200008c8
 8005174:	40000800 	.word	0x40000800

08005178 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800517c:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 800517e:	4a12      	ldr	r2, [pc, #72]	; (80051c8 <MX_USART6_UART_Init+0x50>)
 8005180:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 8005184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005188:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800518a:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 800518c:	2200      	movs	r2, #0
 800518e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 8005192:	2200      	movs	r2, #0
 8005194:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 8005198:	2200      	movs	r2, #0
 800519a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 800519e:	220c      	movs	r2, #12
 80051a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80051ae:	4805      	ldr	r0, [pc, #20]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 80051b0:	f007 fb1a 	bl	800c7e8 <HAL_UART_Init>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80051ba:	f000 fa03 	bl	80055c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80051be:	bf00      	nop
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000910 	.word	0x20000910
 80051c8:	40011400 	.word	0x40011400

080051cc <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80051d2:	2300      	movs	r3, #0
 80051d4:	607b      	str	r3, [r7, #4]
 80051d6:	4b3d      	ldr	r3, [pc, #244]	; (80052cc <MX_DMA_Init+0x100>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	4a3c      	ldr	r2, [pc, #240]	; (80052cc <MX_DMA_Init+0x100>)
 80051dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051e0:	6313      	str	r3, [r2, #48]	; 0x30
 80051e2:	4b3a      	ldr	r3, [pc, #232]	; (80052cc <MX_DMA_Init+0x100>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80051ee:	2300      	movs	r3, #0
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	4b36      	ldr	r3, [pc, #216]	; (80052cc <MX_DMA_Init+0x100>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	4a35      	ldr	r2, [pc, #212]	; (80052cc <MX_DMA_Init+0x100>)
 80051f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051fc:	6313      	str	r3, [r2, #48]	; 0x30
 80051fe:	4b33      	ldr	r3, [pc, #204]	; (80052cc <MX_DMA_Init+0x100>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 800520a:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <MX_DMA_Init+0x104>)
 800520c:	4a31      	ldr	r2, [pc, #196]	; (80052d4 <MX_DMA_Init+0x108>)
 800520e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8005210:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <MX_DMA_Init+0x104>)
 8005212:	2200      	movs	r2, #0
 8005214:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8005216:	4b2e      	ldr	r3, [pc, #184]	; (80052d0 <MX_DMA_Init+0x104>)
 8005218:	2280      	movs	r2, #128	; 0x80
 800521a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 800521c:	4b2c      	ldr	r3, [pc, #176]	; (80052d0 <MX_DMA_Init+0x104>)
 800521e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005222:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 8005224:	4b2a      	ldr	r3, [pc, #168]	; (80052d0 <MX_DMA_Init+0x104>)
 8005226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800522a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800522c:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <MX_DMA_Init+0x104>)
 800522e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005232:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005234:	4b26      	ldr	r3, [pc, #152]	; (80052d0 <MX_DMA_Init+0x104>)
 8005236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800523a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 800523c:	4b24      	ldr	r3, [pc, #144]	; (80052d0 <MX_DMA_Init+0x104>)
 800523e:	2200      	movs	r2, #0
 8005240:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_HIGH;
 8005242:	4b23      	ldr	r3, [pc, #140]	; (80052d0 <MX_DMA_Init+0x104>)
 8005244:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005248:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800524a:	4b21      	ldr	r3, [pc, #132]	; (80052d0 <MX_DMA_Init+0x104>)
 800524c:	2204      	movs	r2, #4
 800524e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005250:	4b1f      	ldr	r3, [pc, #124]	; (80052d0 <MX_DMA_Init+0x104>)
 8005252:	2203      	movs	r2, #3
 8005254:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8005256:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <MX_DMA_Init+0x104>)
 8005258:	2200      	movs	r2, #0
 800525a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800525c:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <MX_DMA_Init+0x104>)
 800525e:	2200      	movs	r2, #0
 8005260:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8005262:	481b      	ldr	r0, [pc, #108]	; (80052d0 <MX_DMA_Init+0x104>)
 8005264:	f002 fdb6 	bl	8007dd4 <HAL_DMA_Init>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <MX_DMA_Init+0xa6>
  {
    Error_Handler( );
 800526e:	f000 f9a9 	bl	80055c4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005272:	2200      	movs	r2, #0
 8005274:	2100      	movs	r1, #0
 8005276:	2010      	movs	r0, #16
 8005278:	f002 fb8d 	bl	8007996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800527c:	2010      	movs	r0, #16
 800527e:	f002 fba6 	bl	80079ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005282:	2200      	movs	r2, #0
 8005284:	2100      	movs	r1, #0
 8005286:	203a      	movs	r0, #58	; 0x3a
 8005288:	f002 fb85 	bl	8007996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800528c:	203a      	movs	r0, #58	; 0x3a
 800528e:	f002 fb9e 	bl	80079ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005292:	2200      	movs	r2, #0
 8005294:	2100      	movs	r1, #0
 8005296:	203b      	movs	r0, #59	; 0x3b
 8005298:	f002 fb7d 	bl	8007996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800529c:	203b      	movs	r0, #59	; 0x3b
 800529e:	f002 fb96 	bl	80079ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80052a2:	2200      	movs	r2, #0
 80052a4:	2100      	movs	r1, #0
 80052a6:	203c      	movs	r0, #60	; 0x3c
 80052a8:	f002 fb75 	bl	8007996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80052ac:	203c      	movs	r0, #60	; 0x3c
 80052ae:	f002 fb8e 	bl	80079ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80052b2:	2200      	movs	r2, #0
 80052b4:	2100      	movs	r1, #0
 80052b6:	2045      	movs	r0, #69	; 0x45
 80052b8:	f002 fb6d 	bl	8007996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80052bc:	2045      	movs	r0, #69	; 0x45
 80052be:	f002 fb86 	bl	80079ce <HAL_NVIC_EnableIRQ>

}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40023800 	.word	0x40023800
 80052d0:	20000954 	.word	0x20000954
 80052d4:	40026428 	.word	0x40026428

080052d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08e      	sub	sp, #56	; 0x38
 80052dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	605a      	str	r2, [r3, #4]
 80052e8:	609a      	str	r2, [r3, #8]
 80052ea:	60da      	str	r2, [r3, #12]
 80052ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80052ee:	2300      	movs	r3, #0
 80052f0:	623b      	str	r3, [r7, #32]
 80052f2:	4b5b      	ldr	r3, [pc, #364]	; (8005460 <MX_GPIO_Init+0x188>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	4a5a      	ldr	r2, [pc, #360]	; (8005460 <MX_GPIO_Init+0x188>)
 80052f8:	f043 0320 	orr.w	r3, r3, #32
 80052fc:	6313      	str	r3, [r2, #48]	; 0x30
 80052fe:	4b58      	ldr	r3, [pc, #352]	; (8005460 <MX_GPIO_Init+0x188>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	623b      	str	r3, [r7, #32]
 8005308:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	4b54      	ldr	r3, [pc, #336]	; (8005460 <MX_GPIO_Init+0x188>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	4a53      	ldr	r2, [pc, #332]	; (8005460 <MX_GPIO_Init+0x188>)
 8005314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005318:	6313      	str	r3, [r2, #48]	; 0x30
 800531a:	4b51      	ldr	r3, [pc, #324]	; (8005460 <MX_GPIO_Init+0x188>)
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	61fb      	str	r3, [r7, #28]
 8005324:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	4b4d      	ldr	r3, [pc, #308]	; (8005460 <MX_GPIO_Init+0x188>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	4a4c      	ldr	r2, [pc, #304]	; (8005460 <MX_GPIO_Init+0x188>)
 8005330:	f043 0304 	orr.w	r3, r3, #4
 8005334:	6313      	str	r3, [r2, #48]	; 0x30
 8005336:	4b4a      	ldr	r3, [pc, #296]	; (8005460 <MX_GPIO_Init+0x188>)
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	4b46      	ldr	r3, [pc, #280]	; (8005460 <MX_GPIO_Init+0x188>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	4a45      	ldr	r2, [pc, #276]	; (8005460 <MX_GPIO_Init+0x188>)
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	6313      	str	r3, [r2, #48]	; 0x30
 8005352:	4b43      	ldr	r3, [pc, #268]	; (8005460 <MX_GPIO_Init+0x188>)
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	613b      	str	r3, [r7, #16]
 8005362:	4b3f      	ldr	r3, [pc, #252]	; (8005460 <MX_GPIO_Init+0x188>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	4a3e      	ldr	r2, [pc, #248]	; (8005460 <MX_GPIO_Init+0x188>)
 8005368:	f043 0302 	orr.w	r3, r3, #2
 800536c:	6313      	str	r3, [r2, #48]	; 0x30
 800536e:	4b3c      	ldr	r3, [pc, #240]	; (8005460 <MX_GPIO_Init+0x188>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	4b38      	ldr	r3, [pc, #224]	; (8005460 <MX_GPIO_Init+0x188>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	4a37      	ldr	r2, [pc, #220]	; (8005460 <MX_GPIO_Init+0x188>)
 8005384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005388:	6313      	str	r3, [r2, #48]	; 0x30
 800538a:	4b35      	ldr	r3, [pc, #212]	; (8005460 <MX_GPIO_Init+0x188>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005396:	2300      	movs	r3, #0
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	4b31      	ldr	r3, [pc, #196]	; (8005460 <MX_GPIO_Init+0x188>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	4a30      	ldr	r2, [pc, #192]	; (8005460 <MX_GPIO_Init+0x188>)
 80053a0:	f043 0310 	orr.w	r3, r3, #16
 80053a4:	6313      	str	r3, [r2, #48]	; 0x30
 80053a6:	4b2e      	ldr	r3, [pc, #184]	; (8005460 <MX_GPIO_Init+0x188>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80053b2:	2300      	movs	r3, #0
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	4b2a      	ldr	r3, [pc, #168]	; (8005460 <MX_GPIO_Init+0x188>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	4a29      	ldr	r2, [pc, #164]	; (8005460 <MX_GPIO_Init+0x188>)
 80053bc:	f043 0308 	orr.w	r3, r3, #8
 80053c0:	6313      	str	r3, [r2, #48]	; 0x30
 80053c2:	4b27      	ldr	r3, [pc, #156]	; (8005460 <MX_GPIO_Init+0x188>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 80053ce:	2200      	movs	r2, #0
 80053d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053d4:	4823      	ldr	r0, [pc, #140]	; (8005464 <MX_GPIO_Init+0x18c>)
 80053d6:	f003 fa21 	bl	800881c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80053da:	2200      	movs	r2, #0
 80053dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053e0:	4821      	ldr	r0, [pc, #132]	; (8005468 <MX_GPIO_Init+0x190>)
 80053e2:	f003 fa1b 	bl	800881c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053ec:	2301      	movs	r3, #1
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f4:	2300      	movs	r3, #0
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053fc:	4619      	mov	r1, r3
 80053fe:	4819      	ldr	r0, [pc, #100]	; (8005464 <MX_GPIO_Init+0x18c>)
 8005400:	f003 f858 	bl	80084b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005404:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800540a:	2300      	movs	r3, #0
 800540c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800540e:	2302      	movs	r3, #2
 8005410:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005416:	4619      	mov	r1, r3
 8005418:	4813      	ldr	r0, [pc, #76]	; (8005468 <MX_GPIO_Init+0x190>)
 800541a:	f003 f84b 	bl	80084b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800541e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005424:	2300      	movs	r3, #0
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005428:	2300      	movs	r3, #0
 800542a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800542c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005430:	4619      	mov	r1, r3
 8005432:	480d      	ldr	r0, [pc, #52]	; (8005468 <MX_GPIO_Init+0x190>)
 8005434:	f003 f83e 	bl	80084b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800543e:	2301      	movs	r3, #1
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005442:	2300      	movs	r3, #0
 8005444:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005446:	2300      	movs	r3, #0
 8005448:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800544a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800544e:	4619      	mov	r1, r3
 8005450:	4805      	ldr	r0, [pc, #20]	; (8005468 <MX_GPIO_Init+0x190>)
 8005452:	f003 f82f 	bl	80084b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005456:	bf00      	nop
 8005458:	3738      	adds	r7, #56	; 0x38
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40023800 	.word	0x40023800
 8005464:	40021400 	.word	0x40021400
 8005468:	40020400 	.word	0x40020400

0800546c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8005472:	1d3b      	adds	r3, r7, #4
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	605a      	str	r2, [r3, #4]
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	60da      	str	r2, [r3, #12]
 800547e:	611a      	str	r2, [r3, #16]
 8005480:	615a      	str	r2, [r3, #20]
 8005482:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8005484:	4b4c      	ldr	r3, [pc, #304]	; (80055b8 <MX_FSMC_Init+0x14c>)
 8005486:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800548a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800548c:	4b4a      	ldr	r3, [pc, #296]	; (80055b8 <MX_FSMC_Init+0x14c>)
 800548e:	4a4b      	ldr	r2, [pc, #300]	; (80055bc <MX_FSMC_Init+0x150>)
 8005490:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 8005492:	4b49      	ldr	r3, [pc, #292]	; (80055b8 <MX_FSMC_Init+0x14c>)
 8005494:	2206      	movs	r2, #6
 8005496:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8005498:	4b47      	ldr	r3, [pc, #284]	; (80055b8 <MX_FSMC_Init+0x14c>)
 800549a:	2200      	movs	r2, #0
 800549c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800549e:	4b46      	ldr	r3, [pc, #280]	; (80055b8 <MX_FSMC_Init+0x14c>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80054a4:	4b44      	ldr	r3, [pc, #272]	; (80055b8 <MX_FSMC_Init+0x14c>)
 80054a6:	2210      	movs	r2, #16
 80054a8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80054aa:	4b43      	ldr	r3, [pc, #268]	; (80055b8 <MX_FSMC_Init+0x14c>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80054b0:	4b41      	ldr	r3, [pc, #260]	; (80055b8 <MX_FSMC_Init+0x14c>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80054b6:	4b40      	ldr	r3, [pc, #256]	; (80055b8 <MX_FSMC_Init+0x14c>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80054bc:	4b3e      	ldr	r3, [pc, #248]	; (80055b8 <MX_FSMC_Init+0x14c>)
 80054be:	2200      	movs	r2, #0
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80054c2:	4b3d      	ldr	r3, [pc, #244]	; (80055b8 <MX_FSMC_Init+0x14c>)
 80054c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054c8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80054ca:	4b3b      	ldr	r3, [pc, #236]	; (80055b8 <MX_FSMC_Init+0x14c>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80054d0:	4b39      	ldr	r3, [pc, #228]	; (80055b8 <MX_FSMC_Init+0x14c>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80054d6:	4b38      	ldr	r3, [pc, #224]	; (80055b8 <MX_FSMC_Init+0x14c>)
 80054d8:	2200      	movs	r2, #0
 80054da:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80054dc:	4b36      	ldr	r3, [pc, #216]	; (80055b8 <MX_FSMC_Init+0x14c>)
 80054de:	2200      	movs	r2, #0
 80054e0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80054e2:	4b35      	ldr	r3, [pc, #212]	; (80055b8 <MX_FSMC_Init+0x14c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80054e8:	2301      	movs	r3, #1
 80054ea:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80054ec:	230f      	movs	r3, #15
 80054ee:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80054f0:	2305      	movs	r3, #5
 80054f2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80054f8:	2310      	movs	r3, #16
 80054fa:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80054fc:	2311      	movs	r3, #17
 80054fe:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8005500:	2300      	movs	r3, #0
 8005502:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8005504:	1d3b      	adds	r3, r7, #4
 8005506:	2200      	movs	r2, #0
 8005508:	4619      	mov	r1, r3
 800550a:	482b      	ldr	r0, [pc, #172]	; (80055b8 <MX_FSMC_Init+0x14c>)
 800550c:	f006 fdee 	bl	800c0ec <HAL_SRAM_Init>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8005516:	f000 f855 	bl	80055c4 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800551a:	4b29      	ldr	r3, [pc, #164]	; (80055c0 <MX_FSMC_Init+0x154>)
 800551c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005520:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8005522:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <MX_FSMC_Init+0x154>)
 8005524:	4a25      	ldr	r2, [pc, #148]	; (80055bc <MX_FSMC_Init+0x150>)
 8005526:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8005528:	4b25      	ldr	r3, [pc, #148]	; (80055c0 <MX_FSMC_Init+0x154>)
 800552a:	2204      	movs	r2, #4
 800552c:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800552e:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <MX_FSMC_Init+0x154>)
 8005530:	2200      	movs	r2, #0
 8005532:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8005534:	4b22      	ldr	r3, [pc, #136]	; (80055c0 <MX_FSMC_Init+0x154>)
 8005536:	2200      	movs	r2, #0
 8005538:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800553a:	4b21      	ldr	r3, [pc, #132]	; (80055c0 <MX_FSMC_Init+0x154>)
 800553c:	2210      	movs	r2, #16
 800553e:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8005540:	4b1f      	ldr	r3, [pc, #124]	; (80055c0 <MX_FSMC_Init+0x154>)
 8005542:	2200      	movs	r2, #0
 8005544:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8005546:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <MX_FSMC_Init+0x154>)
 8005548:	2200      	movs	r2, #0
 800554a:	61da      	str	r2, [r3, #28]
  hsram2.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800554c:	4b1c      	ldr	r3, [pc, #112]	; (80055c0 <MX_FSMC_Init+0x154>)
 800554e:	2200      	movs	r2, #0
 8005550:	621a      	str	r2, [r3, #32]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8005552:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <MX_FSMC_Init+0x154>)
 8005554:	2200      	movs	r2, #0
 8005556:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8005558:	4b19      	ldr	r3, [pc, #100]	; (80055c0 <MX_FSMC_Init+0x154>)
 800555a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800555e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8005560:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <MX_FSMC_Init+0x154>)
 8005562:	2200      	movs	r2, #0
 8005564:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8005566:	4b16      	ldr	r3, [pc, #88]	; (80055c0 <MX_FSMC_Init+0x154>)
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800556c:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <MX_FSMC_Init+0x154>)
 800556e:	2200      	movs	r2, #0
 8005570:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8005572:	4b13      	ldr	r3, [pc, #76]	; (80055c0 <MX_FSMC_Init+0x154>)
 8005574:	2200      	movs	r2, #0
 8005576:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8005578:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <MX_FSMC_Init+0x154>)
 800557a:	2200      	movs	r2, #0
 800557c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8005582:	230f      	movs	r3, #15
 8005584:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 8;
 8005586:	2308      	movs	r3, #8
 8005588:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800558e:	2310      	movs	r3, #16
 8005590:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8005592:	2311      	movs	r3, #17
 8005594:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800559a:	1d3b      	adds	r3, r7, #4
 800559c:	2200      	movs	r2, #0
 800559e:	4619      	mov	r1, r3
 80055a0:	4807      	ldr	r0, [pc, #28]	; (80055c0 <MX_FSMC_Init+0x154>)
 80055a2:	f006 fda3 	bl	800c0ec <HAL_SRAM_Init>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <MX_FSMC_Init+0x144>
  {
    Error_Handler( );
 80055ac:	f000 f80a 	bl	80055c4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80055b0:	bf00      	nop
 80055b2:	3720      	adds	r7, #32
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	200009b4 	.word	0x200009b4
 80055bc:	a0000104 	.word	0xa0000104
 80055c0:	20000a04 	.word	0x20000a04

080055c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055c8:	b672      	cpsid	i
}
 80055ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80055cc:	e7fe      	b.n	80055cc <Error_Handler+0x8>

080055ce <pca9685_write_u8>:
		3248, 3284, 3320, 3356, 3393, 3430, 3467, 3504, 3542, 3579, 3617, 3656, 3694, 3733, 3773, 3812, 3852, 3892,
		3932, 3973, 4013, 4055, 4095
};

static bool pca9685_write_u8(pca9685_handle_t *handle, uint8_t address, uint8_t value)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b086      	sub	sp, #24
 80055d2:	af02      	add	r7, sp, #8
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	70fb      	strb	r3, [r7, #3]
 80055da:	4613      	mov	r3, r2
 80055dc:	70bb      	strb	r3, [r7, #2]
	uint8_t data[] = {address, value};
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	733b      	strb	r3, [r7, #12]
 80055e2:	78bb      	ldrb	r3, [r7, #2]
 80055e4:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, data, 2, PCA9685_I2C_TIMEOUT) == HAL_OK;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	8899      	ldrh	r1, [r3, #4]
 80055ee:	f107 020c 	add.w	r2, r7, #12
 80055f2:	230a      	movs	r3, #10
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2302      	movs	r3, #2
 80055f8:	f003 fa88 	bl	8008b0c <HAL_I2C_Master_Transmit>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bf0c      	ite	eq
 8005602:	2301      	moveq	r3, #1
 8005604:	2300      	movne	r3, #0
 8005606:	b2db      	uxtb	r3, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <pca9685_write_data>:

static bool pca9685_write_data(pca9685_handle_t *handle, uint8_t address, uint8_t *data, size_t length)
{
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b089      	sub	sp, #36	; 0x24
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	460b      	mov	r3, r1
 800561e:	72fb      	strb	r3, [r7, #11]
    if (length == 0 || length > 4) {
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <pca9685_write_data+0x1c>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b04      	cmp	r3, #4
 800562a:	d901      	bls.n	8005630 <pca9685_write_data+0x20>
        return false;
 800562c:	2300      	movs	r3, #0
 800562e:	e01d      	b.n	800566c <pca9685_write_data+0x5c>
    }

    uint8_t transfer[5];
    transfer[0] = address;
 8005630:	7afb      	ldrb	r3, [r7, #11]
 8005632:	743b      	strb	r3, [r7, #16]

    memcpy(&transfer[1], data, length);
 8005634:	f107 0310 	add.w	r3, r7, #16
 8005638:	3301      	adds	r3, #1
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4618      	mov	r0, r3
 8005640:	f00b fd22 	bl	8011088 <memcpy>

    return HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, transfer, length + 1, PCA9685_I2C_TIMEOUT) == HAL_OK;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8899      	ldrh	r1, [r3, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	3301      	adds	r3, #1
 8005652:	b29b      	uxth	r3, r3
 8005654:	f107 0210 	add.w	r2, r7, #16
 8005658:	240a      	movs	r4, #10
 800565a:	9400      	str	r4, [sp, #0]
 800565c:	f003 fa56 	bl	8008b0c <HAL_I2C_Master_Transmit>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	bd90      	pop	{r4, r7, pc}

08005674 <pca9685_read_u8>:

static bool pca9685_read_u8(pca9685_handle_t *handle, uint8_t address, uint8_t *dest)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	460b      	mov	r3, r1
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	72fb      	strb	r3, [r7, #11]
	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, &address, 1, PCA9685_I2C_TIMEOUT) != HAL_OK) {
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8899      	ldrh	r1, [r3, #4]
 800568a:	f107 020b 	add.w	r2, r7, #11
 800568e:	230a      	movs	r3, #10
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	2301      	movs	r3, #1
 8005694:	f003 fa3a 	bl	8008b0c <HAL_I2C_Master_Transmit>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <pca9685_read_u8+0x2e>
		return false;
 800569e:	2300      	movs	r3, #0
 80056a0:	e00f      	b.n	80056c2 <pca9685_read_u8+0x4e>
	}

	return HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address, dest, 1, PCA9685_I2C_TIMEOUT) == HAL_OK;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8899      	ldrh	r1, [r3, #4]
 80056aa:	230a      	movs	r3, #10
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	2301      	movs	r3, #1
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	f003 fb29 	bl	8008d08 <HAL_I2C_Master_Receive>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf0c      	ite	eq
 80056bc:	2301      	moveq	r3, #1
 80056be:	2300      	movne	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <pca9685_init>:

bool pca9685_init(pca9685_handle_t *handle)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle != NULL);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <pca9685_init+0x1c>
 80056dc:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <pca9685_init+0xd8>)
 80056de:	4a32      	ldr	r2, [pc, #200]	; (80057a8 <pca9685_init+0xdc>)
 80056e0:	2155      	movs	r1, #85	; 0x55
 80056e2:	4832      	ldr	r0, [pc, #200]	; (80057ac <pca9685_init+0xe0>)
 80056e4:	f00b fb2a 	bl	8010d3c <__assert_func>

	bool success = true;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73bb      	strb	r3, [r7, #14]

	// Set mode registers to default values (Auto-Increment, Sleep, Open-Drain).
	uint8_t mode1_reg_default_value = 0b00110000u;
 80056ec:	2330      	movs	r3, #48	; 0x30
 80056ee:	737b      	strb	r3, [r7, #13]
	uint8_t mode2_reg_default_value = 0b00000100u;
 80056f0:	2304      	movs	r3, #4
 80056f2:	73fb      	strb	r3, [r7, #15]

	if (handle->inverted) {
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	799b      	ldrb	r3, [r3, #6]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <pca9685_init+0x38>
		mode2_reg_default_value |= 0b00010000u;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	f043 0310 	orr.w	r3, r3, #16
 8005702:	73fb      	strb	r3, [r7, #15]
	}

	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg_default_value);
 8005704:	7b7b      	ldrb	r3, [r7, #13]
 8005706:	461a      	mov	r2, r3
 8005708:	2100      	movs	r1, #0
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff ff5f 	bl	80055ce <pca9685_write_u8>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	7bbb      	ldrb	r3, [r7, #14]
 8005716:	4013      	ands	r3, r2
 8005718:	2b00      	cmp	r3, #0
 800571a:	bf14      	ite	ne
 800571c:	2301      	movne	r3, #1
 800571e:	2300      	moveq	r3, #0
 8005720:	73bb      	strb	r3, [r7, #14]
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE2, mode2_reg_default_value);
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	461a      	mov	r2, r3
 8005726:	2101      	movs	r1, #1
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ff50 	bl	80055ce <pca9685_write_u8>
 800572e:	4603      	mov	r3, r0
 8005730:	461a      	mov	r2, r3
 8005732:	7bbb      	ldrb	r3, [r7, #14]
 8005734:	4013      	ands	r3, r2
 8005736:	2b00      	cmp	r3, #0
 8005738:	bf14      	ite	ne
 800573a:	2301      	movne	r3, #1
 800573c:	2300      	moveq	r3, #0
 800573e:	73bb      	strb	r3, [r7, #14]

    // Turn all channels off to begin with.
    uint8_t data[4] = { 0x00, 0x00, 0x00, 0x10 };
 8005740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005744:	60bb      	str	r3, [r7, #8]
    success &= pca9685_write_data(handle, PCA9685_REGISTER_ALL_LED_ON_L, data, 4);
 8005746:	f107 0208 	add.w	r2, r7, #8
 800574a:	2304      	movs	r3, #4
 800574c:	21fa      	movs	r1, #250	; 0xfa
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff ff5e 	bl	8005610 <pca9685_write_data>
 8005754:	4603      	mov	r3, r0
 8005756:	461a      	mov	r2, r3
 8005758:	7bbb      	ldrb	r3, [r7, #14]
 800575a:	4013      	ands	r3, r2
 800575c:	2b00      	cmp	r3, #0
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	73bb      	strb	r3, [r7, #14]

	success &= pca9685_set_pwm_frequency(handle, 1000);
 8005766:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80057b0 <pca9685_init+0xe4>
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f8d2 	bl	8005914 <pca9685_set_pwm_frequency>
 8005770:	4603      	mov	r3, r0
 8005772:	461a      	mov	r2, r3
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	4013      	ands	r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	bf14      	ite	ne
 800577c:	2301      	movne	r3, #1
 800577e:	2300      	moveq	r3, #0
 8005780:	73bb      	strb	r3, [r7, #14]
	success &= pca9685_wakeup(handle);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f870 	bl	8005868 <pca9685_wakeup>
 8005788:	4603      	mov	r3, r0
 800578a:	461a      	mov	r2, r3
 800578c:	7bbb      	ldrb	r3, [r7, #14]
 800578e:	4013      	ands	r3, r2
 8005790:	2b00      	cmp	r3, #0
 8005792:	bf14      	ite	ne
 8005794:	2301      	movne	r3, #1
 8005796:	2300      	moveq	r3, #0
 8005798:	73bb      	strb	r3, [r7, #14]

	return success;
 800579a:	7bbb      	ldrb	r3, [r7, #14]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	080145b0 	.word	0x080145b0
 80057a8:	08014ffc 	.word	0x08014ffc
 80057ac:	080145cc 	.word	0x080145cc
 80057b0:	447a0000 	.word	0x447a0000

080057b4 <pca9685_is_sleeping>:

bool pca9685_is_sleeping(pca9685_handle_t *handle, bool *sleeping)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
	bool success = true;
 80057be:	2301      	movs	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]

	// Read the current state of the mode 1 register.
	uint8_t mode1_reg;
	success &= pca9685_read_u8(handle, PCA9685_REGISTER_MODE1, &mode1_reg);
 80057c2:	f107 030e 	add.w	r3, r7, #14
 80057c6:	461a      	mov	r2, r3
 80057c8:	2100      	movs	r1, #0
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff ff52 	bl	8005674 <pca9685_read_u8>
 80057d0:	4603      	mov	r3, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bf14      	ite	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	2300      	moveq	r3, #0
 80057e0:	73fb      	strb	r3, [r7, #15]

	// Check if the sleeping bit is set.
	*sleeping = PCA9685_READ_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 80057e2:	7bbb      	ldrb	r3, [r7, #14]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf14      	ite	ne
 80057ec:	2301      	movne	r3, #1
 80057ee:	2300      	moveq	r3, #0
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	701a      	strb	r2, [r3, #0]

	return success;
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <pca9685_sleep>:

bool pca9685_sleep(pca9685_handle_t *handle)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	bool success = true;
 8005808:	2301      	movs	r3, #1
 800580a:	73fb      	strb	r3, [r7, #15]

	// Read the current state of the mode 1 register.
	uint8_t mode1_reg;
	success &= pca9685_read_u8(handle, PCA9685_REGISTER_MODE1, &mode1_reg);
 800580c:	f107 030e 	add.w	r3, r7, #14
 8005810:	461a      	mov	r2, r3
 8005812:	2100      	movs	r1, #0
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff ff2d 	bl	8005674 <pca9685_read_u8>
 800581a:	4603      	mov	r3, r0
 800581c:	461a      	mov	r2, r3
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	4013      	ands	r3, r2
 8005822:	2b00      	cmp	r3, #0
 8005824:	bf14      	ite	ne
 8005826:	2301      	movne	r3, #1
 8005828:	2300      	moveq	r3, #0
 800582a:	73fb      	strb	r3, [r7, #15]

	// Don't write the restart bit back and set the sleep bit.
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005832:	b2db      	uxtb	r3, r3
 8005834:	73bb      	strb	r3, [r7, #14]
	PCA9685_SET_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8005836:	7bbb      	ldrb	r3, [r7, #14]
 8005838:	f043 0310 	orr.w	r3, r3, #16
 800583c:	b2db      	uxtb	r3, r3
 800583e:	73bb      	strb	r3, [r7, #14]
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg);
 8005840:	7bbb      	ldrb	r3, [r7, #14]
 8005842:	461a      	mov	r2, r3
 8005844:	2100      	movs	r1, #0
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff fec1 	bl	80055ce <pca9685_write_u8>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	4013      	ands	r3, r2
 8005854:	2b00      	cmp	r3, #0
 8005856:	bf14      	ite	ne
 8005858:	2301      	movne	r3, #1
 800585a:	2300      	moveq	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]

	return success;
 800585e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <pca9685_wakeup>:

bool pca9685_wakeup(pca9685_handle_t *handle)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
	bool success = true;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]

	// Read the current state of the mode 1 register.
	uint8_t mode1_reg;
	success &= pca9685_read_u8(handle, PCA9685_REGISTER_MODE1, &mode1_reg);
 8005874:	f107 030d 	add.w	r3, r7, #13
 8005878:	461a      	mov	r2, r3
 800587a:	2100      	movs	r1, #0
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff fef9 	bl	8005674 <pca9685_read_u8>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	4013      	ands	r3, r2
 800588a:	2b00      	cmp	r3, #0
 800588c:	bf14      	ite	ne
 800588e:	2301      	movne	r3, #1
 8005890:	2300      	moveq	r3, #0
 8005892:	73fb      	strb	r3, [r7, #15]

	bool restart_required = PCA9685_READ_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8005894:	7b7b      	ldrb	r3, [r7, #13]
 8005896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589a:	2b00      	cmp	r3, #0
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	73bb      	strb	r3, [r7, #14]

	// Clear the restart bit for now and clear the sleep bit.
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 80058a4:	7b7b      	ldrb	r3, [r7, #13]
 80058a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	737b      	strb	r3, [r7, #13]
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 80058ae:	7b7b      	ldrb	r3, [r7, #13]
 80058b0:	f023 0310 	bic.w	r3, r3, #16
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	737b      	strb	r3, [r7, #13]
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg);
 80058b8:	7b7b      	ldrb	r3, [r7, #13]
 80058ba:	461a      	mov	r2, r3
 80058bc:	2100      	movs	r1, #0
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff fe85 	bl	80055ce <pca9685_write_u8>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]

	if (restart_required) {
 80058d6:	7bbb      	ldrb	r3, [r7, #14]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d016      	beq.n	800590a <pca9685_wakeup+0xa2>

		// Oscillator requires at least 500us to stabilise, so wait 1ms.
		HAL_Delay(1);
 80058dc:	2001      	movs	r0, #1
 80058de:	f001 fa25 	bl	8006d2c <HAL_Delay>

		PCA9685_SET_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 80058e2:	7b7b      	ldrb	r3, [r7, #13]
 80058e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	737b      	strb	r3, [r7, #13]
		success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg);
 80058ec:	7b7b      	ldrb	r3, [r7, #13]
 80058ee:	461a      	mov	r2, r3
 80058f0:	2100      	movs	r1, #0
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fe6b 	bl	80055ce <pca9685_write_u8>
 80058f8:	4603      	mov	r3, r0
 80058fa:	461a      	mov	r2, r3
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
	}

	return success;
 800590a:	7bfb      	ldrb	r3, [r7, #15]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <pca9685_set_pwm_frequency>:

bool pca9685_set_pwm_frequency(pca9685_handle_t *handle, float frequency)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	ed87 0a02 	vstr	s0, [r7, #8]
	assert(frequency >= 24);
 8005920:	edd7 7a02 	vldr	s15, [r7, #8]
 8005924:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8005928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800592c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005930:	da05      	bge.n	800593e <pca9685_set_pwm_frequency+0x2a>
 8005932:	4b3b      	ldr	r3, [pc, #236]	; (8005a20 <pca9685_set_pwm_frequency+0x10c>)
 8005934:	4a3b      	ldr	r2, [pc, #236]	; (8005a24 <pca9685_set_pwm_frequency+0x110>)
 8005936:	21a9      	movs	r1, #169	; 0xa9
 8005938:	483b      	ldr	r0, [pc, #236]	; (8005a28 <pca9685_set_pwm_frequency+0x114>)
 800593a:	f00b f9ff 	bl	8010d3c <__assert_func>
	assert(frequency <= 1526);
 800593e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005942:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8005a2c <pca9685_set_pwm_frequency+0x118>
 8005946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800594a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594e:	d905      	bls.n	800595c <pca9685_set_pwm_frequency+0x48>
 8005950:	4b37      	ldr	r3, [pc, #220]	; (8005a30 <pca9685_set_pwm_frequency+0x11c>)
 8005952:	4a34      	ldr	r2, [pc, #208]	; (8005a24 <pca9685_set_pwm_frequency+0x110>)
 8005954:	21aa      	movs	r1, #170	; 0xaa
 8005956:	4834      	ldr	r0, [pc, #208]	; (8005a28 <pca9685_set_pwm_frequency+0x114>)
 8005958:	f00b f9f0 	bl	8010d3c <__assert_func>

	bool success = true;
 800595c:	2301      	movs	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]

	// Calculate the prescaler value (see datasheet page 25)
	uint8_t prescaler = (uint8_t)roundf(25000000.0f / (4096 * frequency)) - 1;
 8005960:	edd7 7a02 	vldr	s15, [r7, #8]
 8005964:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005a34 <pca9685_set_pwm_frequency+0x120>
 8005968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800596c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8005a38 <pca9685_set_pwm_frequency+0x124>
 8005970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005974:	eeb0 0a47 	vmov.f32	s0, s14
 8005978:	f00c fcb2 	bl	80122e0 <roundf>
 800597c:	eef0 7a40 	vmov.f32	s15, s0
 8005980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005984:	edc7 7a01 	vstr	s15, [r7, #4]
 8005988:	793b      	ldrb	r3, [r7, #4]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	75bb      	strb	r3, [r7, #22]

	bool already_sleeping;
	success &= pca9685_is_sleeping(handle, &already_sleeping);
 8005990:	f107 0315 	add.w	r3, r7, #21
 8005994:	4619      	mov	r1, r3
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff ff0c 	bl	80057b4 <pca9685_is_sleeping>
 800599c:	4603      	mov	r3, r0
 800599e:	461a      	mov	r2, r3
 80059a0:	7dfb      	ldrb	r3, [r7, #23]
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]

	// The prescaler can only be changed in sleep mode.
	if (!already_sleeping) {
 80059ae:	7d7b      	ldrb	r3, [r7, #21]
 80059b0:	f083 0301 	eor.w	r3, r3, #1
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00b      	beq.n	80059d2 <pca9685_set_pwm_frequency+0xbe>
		success &= pca9685_sleep(handle);
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff ff20 	bl	8005800 <pca9685_sleep>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	75fb      	strb	r3, [r7, #23]
	}

	// Write the new prescaler value.
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_PRESCALER, prescaler);
 80059d2:	7dbb      	ldrb	r3, [r7, #22]
 80059d4:	461a      	mov	r2, r3
 80059d6:	21fe      	movs	r1, #254	; 0xfe
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7ff fdf8 	bl	80055ce <pca9685_write_u8>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	7dfb      	ldrb	r3, [r7, #23]
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	bf14      	ite	ne
 80059ea:	2301      	movne	r3, #1
 80059ec:	2300      	moveq	r3, #0
 80059ee:	75fb      	strb	r3, [r7, #23]

	// If the device wasn't sleeping, return from sleep mode.
	if (!already_sleeping) {
 80059f0:	7d7b      	ldrb	r3, [r7, #21]
 80059f2:	f083 0301 	eor.w	r3, r3, #1
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00b      	beq.n	8005a14 <pca9685_set_pwm_frequency+0x100>
		success &= pca9685_wakeup(handle);
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff ff33 	bl	8005868 <pca9685_wakeup>
 8005a02:	4603      	mov	r3, r0
 8005a04:	461a      	mov	r2, r3
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	bf14      	ite	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	2300      	moveq	r3, #0
 8005a12:	75fb      	strb	r3, [r7, #23]
	}

	return success;
 8005a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	080145e4 	.word	0x080145e4
 8005a24:	0801500c 	.word	0x0801500c
 8005a28:	080145cc 	.word	0x080145cc
 8005a2c:	44bec000 	.word	0x44bec000
 8005a30:	080145f4 	.word	0x080145f4
 8005a34:	45800000 	.word	0x45800000
 8005a38:	4bbebc20 	.word	0x4bbebc20

08005a3c <pca9685_set_channel_pwm_times>:

bool pca9685_set_channel_pwm_times(pca9685_handle_t *handle, unsigned channel, unsigned on_time, unsigned off_time)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
	assert(channel >= 0);
	assert(channel < 16);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b0f      	cmp	r3, #15
 8005a4e:	d905      	bls.n	8005a5c <pca9685_set_channel_pwm_times+0x20>
 8005a50:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <pca9685_set_channel_pwm_times+0x88>)
 8005a52:	4a1d      	ldr	r2, [pc, #116]	; (8005ac8 <pca9685_set_channel_pwm_times+0x8c>)
 8005a54:	21c7      	movs	r1, #199	; 0xc7
 8005a56:	481d      	ldr	r0, [pc, #116]	; (8005acc <pca9685_set_channel_pwm_times+0x90>)
 8005a58:	f00b f970 	bl	8010d3c <__assert_func>

	assert(on_time >= 0);
	assert(on_time <= 4096);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a62:	d905      	bls.n	8005a70 <pca9685_set_channel_pwm_times+0x34>
 8005a64:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <pca9685_set_channel_pwm_times+0x94>)
 8005a66:	4a18      	ldr	r2, [pc, #96]	; (8005ac8 <pca9685_set_channel_pwm_times+0x8c>)
 8005a68:	21ca      	movs	r1, #202	; 0xca
 8005a6a:	4818      	ldr	r0, [pc, #96]	; (8005acc <pca9685_set_channel_pwm_times+0x90>)
 8005a6c:	f00b f966 	bl	8010d3c <__assert_func>

	assert(off_time >= 0);
	assert(off_time <= 4096);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a76:	d905      	bls.n	8005a84 <pca9685_set_channel_pwm_times+0x48>
 8005a78:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <pca9685_set_channel_pwm_times+0x98>)
 8005a7a:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <pca9685_set_channel_pwm_times+0x8c>)
 8005a7c:	21cd      	movs	r1, #205	; 0xcd
 8005a7e:	4813      	ldr	r0, [pc, #76]	; (8005acc <pca9685_set_channel_pwm_times+0x90>)
 8005a80:	f00b f95c 	bl	8010d3c <__assert_func>

	uint8_t data[4] = { on_time, on_time >> 8u, off_time, off_time >> 8u };
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	753b      	strb	r3, [r7, #20]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	0a1b      	lsrs	r3, r3, #8
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	757b      	strb	r3, [r7, #21]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	75bb      	strb	r3, [r7, #22]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	0a1b      	lsrs	r3, r3, #8
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	75fb      	strb	r3, [r7, #23]
	return pca9685_write_data(handle, PCA9685_REGISTER_LED0_ON_L + channel * 4, data, 4);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	3306      	adds	r3, #6
 8005aaa:	b2d9      	uxtb	r1, r3
 8005aac:	f107 0214 	add.w	r2, r7, #20
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f7ff fdac 	bl	8005610 <pca9685_write_data>
 8005ab8:	4603      	mov	r3, r0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	08014608 	.word	0x08014608
 8005ac8:	08015028 	.word	0x08015028
 8005acc:	080145cc 	.word	0x080145cc
 8005ad0:	08014618 	.word	0x08014618
 8005ad4:	08014628 	.word	0x08014628

08005ad8 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005b08:	f7fa fffe 	bl	8000b08 <__aeabi_dcmpgt>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d006      	beq.n	8005b20 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8005b1e:	e011      	b.n	8005b44 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005b2c:	f7fa ffce 	bl	8000acc <__aeabi_dcmplt>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d100      	bne.n	8005b38 <PID_Init+0x60>
}
 8005b36:	e005      	b.n	8005b44 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	0000      	movs	r0, r0
	...

08005b50 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	; 0x28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6278      	str	r0, [r7, #36]	; 0x24
 8005b58:	6239      	str	r1, [r7, #32]
 8005b5a:	61fa      	str	r2, [r7, #28]
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	ed87 0b04 	vstr	d0, [r7, #16]
 8005b62:	ed87 1b02 	vstr	d1, [r7, #8]
 8005b66:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	6a3a      	ldr	r2, [r7, #32]
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	2200      	movs	r2, #0
 8005b80:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8005b82:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8005bd8 <PID+0x88>
 8005b86:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8005be0 <PID+0x90>
 8005b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b8c:	f000 f934 	bl	8005df8 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	2264      	movs	r2, #100	; 0x64
 8005b94:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8005b96:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b9e:	f000 fa41 	bl	8006024 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8005ba2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	ed97 2b00 	vldr	d2, [r7]
 8005bac:	ed97 1b02 	vldr	d1, [r7, #8]
 8005bb0:	ed97 0b04 	vldr	d0, [r7, #16]
 8005bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bb6:	f000 f98d 	bl	8005ed4 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8005bba:	f001 f883 	bl	8006cc4 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	1ad2      	subs	r2, r2, r3
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	605a      	str	r2, [r3, #4]
	
}
 8005bca:	bf00      	nop
 8005bcc:	3728      	adds	r7, #40	; 0x28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	f3af 8000 	nop.w
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	406fe000 	.word	0x406fe000
	...

08005be8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8005be8:	b5b0      	push	{r4, r5, r7, lr}
 8005bea:	b08c      	sub	sp, #48	; 0x30
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <PID_Compute+0x14>
	{
		return _FALSE;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e0db      	b.n	8005db4 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8005bfc:	f001 f862 	bl	8006cc4 <HAL_GetTick>
 8005c00:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	6a3a      	ldr	r2, [r7, #32]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	f0c0 80cd 	bcc.w	8005db2 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c30:	f7fa fb22 	bl	8000278 <__aeabi_dsub>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005c42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c46:	f7fa fb17 	bl	8000278 <__aeabi_dsub>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8005c5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c62:	f7fa fcc1 	bl	80005e8 <__aeabi_dmul>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	f7fa fb05 	bl	800027c <__adddf3>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d114      	bne.n	8005cae <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8005c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c94:	f7fa fca8 	bl	80005e8 <__aeabi_dmul>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	f7fa faea 	bl	8000278 <__aeabi_dsub>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005cba:	f7fa ff25 	bl	8000b08 <__aeabi_dcmpgt>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d006      	beq.n	8005cd2 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8005cd0:	e010      	b.n	8005cf4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005cde:	f7fa fef5 	bl	8000acc <__aeabi_dcmplt>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00b      	beq.n	8005d14 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005d02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d06:	f7fa fc6f 	bl	80005e8 <__aeabi_dmul>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005d12:	e005      	b.n	8005d20 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	f04f 0300 	mov.w	r3, #0
 8005d1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d30:	f7fa fc5a 	bl	80005e8 <__aeabi_dmul>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4620      	mov	r0, r4
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	f7fa fa9c 	bl	8000278 <__aeabi_dsub>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d48:	f7fa fa98 	bl	800027c <__adddf3>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005d5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d5e:	f7fa fed3 	bl	8000b08 <__aeabi_dcmpgt>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005d6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005d72:	e00e      	b.n	8005d92 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005d7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d7e:	f7fa fea5 	bl	8000acc <__aeabi_dcmplt>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005d8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d9a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005da4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dac:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8005db2:	2300      	movs	r3, #0
	}
	
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3730      	adds	r7, #48	; 0x30
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bdb0      	pop	{r4, r5, r7, pc}

08005dbc <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	bf0c      	ite	eq
 8005dce:	2301      	moveq	r3, #1
 8005dd0:	2300      	movne	r3, #0
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d006      	beq.n	8005dea <PID_SetMode+0x2e>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	785b      	ldrb	r3, [r3, #1]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff fe77 	bl	8005ad8 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	7bfa      	ldrb	r2, [r7, #15]
 8005dee:	705a      	strb	r2, [r3, #1]
	
}
 8005df0:	bf00      	nop
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6178      	str	r0, [r7, #20]
 8005e00:	ed87 0b02 	vstr	d0, [r7, #8]
 8005e04:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8005e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e10:	f7fa fe70 	bl	8000af4 <__aeabi_dcmpge>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d158      	bne.n	8005ecc <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8005e1a:	6979      	ldr	r1, [r7, #20]
 8005e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e20:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8005e24:	6979      	ldr	r1, [r7, #20]
 8005e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e2a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	785b      	ldrb	r3, [r3, #1]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d04b      	beq.n	8005ece <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005e44:	f7fa fe60 	bl	8000b08 <__aeabi_dcmpgt>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005e58:	e9c1 2300 	strd	r2, r3, [r1]
 8005e5c:	e012      	b.n	8005e84 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005e6c:	f7fa fe2e 	bl	8000acc <__aeabi_dcmplt>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d006      	beq.n	8005e84 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005e80:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005e90:	f7fa fe3a 	bl	8000b08 <__aeabi_dcmpgt>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d006      	beq.n	8005ea8 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005ea0:	6979      	ldr	r1, [r7, #20]
 8005ea2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8005ea6:	e012      	b.n	8005ece <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005eb4:	f7fa fe0a 	bl	8000acc <__aeabi_dcmplt>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d007      	beq.n	8005ece <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005ec4:	6979      	ldr	r1, [r7, #20]
 8005ec6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8005eca:	e000      	b.n	8005ece <PID_SetOutputLimits+0xd6>
		return;
 8005ecc:	bf00      	nop
		}
		else { }
		
	}
	
}
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08a      	sub	sp, #40	; 0x28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	61f8      	str	r0, [r7, #28]
 8005edc:	ed87 0b04 	vstr	d0, [r7, #16]
 8005ee0:	ed87 1b02 	vstr	d1, [r7, #8]
 8005ee4:	ed87 2b00 	vstr	d2, [r7]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ef8:	f7fa fde8 	bl	8000acc <__aeabi_dcmplt>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f040 8089 	bne.w	8006016 <PID_SetTunings2+0x142>
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f10:	f7fa fddc 	bl	8000acc <__aeabi_dcmplt>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d17d      	bne.n	8006016 <PID_SetTunings2+0x142>
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f26:	f7fa fdd1 	bl	8000acc <__aeabi_dcmplt>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d172      	bne.n	8006016 <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	7efa      	ldrb	r2, [r7, #27]
 8005f34:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8005f36:	7efb      	ldrb	r3, [r7, #27]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	bf0c      	ite	eq
 8005f3c:	2301      	moveq	r3, #1
 8005f3e:	2300      	movne	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8005f48:	69f9      	ldr	r1, [r7, #28]
 8005f4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8005f52:	69f9      	ldr	r1, [r7, #28]
 8005f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f58:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8005f5c:	69f9      	ldr	r1, [r7, #28]
 8005f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f62:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fa fac2 	bl	80004f4 <__aeabi_ui2d>
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <PID_SetTunings2+0x14c>)
 8005f76:	f7fa fc61 	bl	800083c <__aeabi_ddiv>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8005f82:	69f9      	ldr	r1, [r7, #28]
 8005f84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f88:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8005f8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f94:	f7fa fb28 	bl	80005e8 <__aeabi_dmul>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	69f9      	ldr	r1, [r7, #28]
 8005f9e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8005fa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005faa:	f7fa fc47 	bl	800083c <__aeabi_ddiv>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	69f9      	ldr	r1, [r7, #28]
 8005fb4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	78db      	ldrb	r3, [r3, #3]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d12b      	bne.n	8006018 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005fc6:	f04f 0000 	mov.w	r0, #0
 8005fca:	f04f 0100 	mov.w	r1, #0
 8005fce:	f7fa f953 	bl	8000278 <__aeabi_dsub>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	69f9      	ldr	r1, [r7, #28]
 8005fd8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005fe2:	f04f 0000 	mov.w	r0, #0
 8005fe6:	f04f 0100 	mov.w	r1, #0
 8005fea:	f7fa f945 	bl	8000278 <__aeabi_dsub>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	69f9      	ldr	r1, [r7, #28]
 8005ff4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005ffe:	f04f 0000 	mov.w	r0, #0
 8006002:	f04f 0100 	mov.w	r1, #0
 8006006:	f7fa f937 	bl	8000278 <__aeabi_dsub>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	69f9      	ldr	r1, [r7, #28]
 8006010:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8006014:	e000      	b.n	8006018 <PID_SetTunings2+0x144>
		return;
 8006016:	bf00      	nop
		
	}
	
}
 8006018:	3728      	adds	r7, #40	; 0x28
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	408f4000 	.word	0x408f4000

08006024 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d02e      	beq.n	8006096 <PID_SetControllerDirection+0x72>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	78db      	ldrb	r3, [r3, #3]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	429a      	cmp	r2, r3
 8006040:	d029      	beq.n	8006096 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006048:	f04f 0000 	mov.w	r0, #0
 800604c:	f04f 0100 	mov.w	r1, #0
 8006050:	f7fa f912 	bl	8000278 <__aeabi_dsub>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006064:	f04f 0000 	mov.w	r0, #0
 8006068:	f04f 0100 	mov.w	r1, #0
 800606c:	f7fa f904 	bl	8000278 <__aeabi_dsub>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006080:	f04f 0000 	mov.w	r0, #0
 8006084:	f04f 0100 	mov.w	r1, #0
 8006088:	f7fa f8f6 	bl	8000278 <__aeabi_dsub>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	70da      	strb	r2, [r3, #3]
	
}
 800609c:	bf00      	nop
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 80060a4:	b5b0      	push	{r4, r5, r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	dd2e      	ble.n	8006112 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80060b4:	6838      	ldr	r0, [r7, #0]
 80060b6:	f7fa fa2d 	bl	8000514 <__aeabi_i2d>
 80060ba:	4604      	mov	r4, r0
 80060bc:	460d      	mov	r5, r1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fa fa16 	bl	80004f4 <__aeabi_ui2d>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4620      	mov	r0, r4
 80060ce:	4629      	mov	r1, r5
 80060d0:	f7fa fbb4 	bl	800083c <__aeabi_ddiv>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80060e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060e6:	f7fa fa7f 	bl	80005e8 <__aeabi_dmul>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80060fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060fe:	f7fa fb9d 	bl	800083c <__aeabi_ddiv>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8006112:	bf00      	nop
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800611c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006122:	2300      	movs	r3, #0
 8006124:	607b      	str	r3, [r7, #4]
 8006126:	4b10      	ldr	r3, [pc, #64]	; (8006168 <HAL_MspInit+0x4c>)
 8006128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612a:	4a0f      	ldr	r2, [pc, #60]	; (8006168 <HAL_MspInit+0x4c>)
 800612c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006130:	6453      	str	r3, [r2, #68]	; 0x44
 8006132:	4b0d      	ldr	r3, [pc, #52]	; (8006168 <HAL_MspInit+0x4c>)
 8006134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800613e:	2300      	movs	r3, #0
 8006140:	603b      	str	r3, [r7, #0]
 8006142:	4b09      	ldr	r3, [pc, #36]	; (8006168 <HAL_MspInit+0x4c>)
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	4a08      	ldr	r2, [pc, #32]	; (8006168 <HAL_MspInit+0x4c>)
 8006148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800614c:	6413      	str	r3, [r2, #64]	; 0x40
 800614e:	4b06      	ldr	r3, [pc, #24]	; (8006168 <HAL_MspInit+0x4c>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40023800 	.word	0x40023800

0800616c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08e      	sub	sp, #56	; 0x38
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	609a      	str	r2, [r3, #8]
 8006180:	60da      	str	r2, [r3, #12]
 8006182:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a80      	ldr	r2, [pc, #512]	; (800638c <HAL_ADC_MspInit+0x220>)
 800618a:	4293      	cmp	r3, r2
 800618c:	f040 8095 	bne.w	80062ba <HAL_ADC_MspInit+0x14e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006190:	2300      	movs	r3, #0
 8006192:	623b      	str	r3, [r7, #32]
 8006194:	4b7e      	ldr	r3, [pc, #504]	; (8006390 <HAL_ADC_MspInit+0x224>)
 8006196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006198:	4a7d      	ldr	r2, [pc, #500]	; (8006390 <HAL_ADC_MspInit+0x224>)
 800619a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800619e:	6453      	str	r3, [r2, #68]	; 0x44
 80061a0:	4b7b      	ldr	r3, [pc, #492]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80061a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a8:	623b      	str	r3, [r7, #32]
 80061aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061ac:	2300      	movs	r3, #0
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	4b77      	ldr	r3, [pc, #476]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	4a76      	ldr	r2, [pc, #472]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80061b6:	f043 0304 	orr.w	r3, r3, #4
 80061ba:	6313      	str	r3, [r2, #48]	; 0x30
 80061bc:	4b74      	ldr	r3, [pc, #464]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80061be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061c8:	2300      	movs	r3, #0
 80061ca:	61bb      	str	r3, [r7, #24]
 80061cc:	4b70      	ldr	r3, [pc, #448]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80061ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d0:	4a6f      	ldr	r2, [pc, #444]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80061d2:	f043 0301 	orr.w	r3, r3, #1
 80061d6:	6313      	str	r3, [r2, #48]	; 0x30
 80061d8:	4b6d      	ldr	r3, [pc, #436]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	4b69      	ldr	r3, [pc, #420]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	4a68      	ldr	r2, [pc, #416]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80061ee:	f043 0302 	orr.w	r3, r3, #2
 80061f2:	6313      	str	r3, [r2, #48]	; 0x30
 80061f4:	4b66      	ldr	r3, [pc, #408]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	697b      	ldr	r3, [r7, #20]
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006200:	232f      	movs	r3, #47	; 0x2f
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006204:	2303      	movs	r3, #3
 8006206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006208:	2300      	movs	r3, #0
 800620a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800620c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006210:	4619      	mov	r1, r3
 8006212:	4860      	ldr	r0, [pc, #384]	; (8006394 <HAL_ADC_MspInit+0x228>)
 8006214:	f002 f94e 	bl	80084b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006218:	23ef      	movs	r3, #239	; 0xef
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800621c:	2303      	movs	r3, #3
 800621e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006220:	2300      	movs	r3, #0
 8006222:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006228:	4619      	mov	r1, r3
 800622a:	485b      	ldr	r0, [pc, #364]	; (8006398 <HAL_ADC_MspInit+0x22c>)
 800622c:	f002 f942 	bl	80084b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006230:	2303      	movs	r3, #3
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006234:	2303      	movs	r3, #3
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006238:	2300      	movs	r3, #0
 800623a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800623c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006240:	4619      	mov	r1, r3
 8006242:	4856      	ldr	r0, [pc, #344]	; (800639c <HAL_ADC_MspInit+0x230>)
 8006244:	f002 f936 	bl	80084b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8006248:	4b55      	ldr	r3, [pc, #340]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 800624a:	4a56      	ldr	r2, [pc, #344]	; (80063a4 <HAL_ADC_MspInit+0x238>)
 800624c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800624e:	4b54      	ldr	r3, [pc, #336]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 8006250:	2200      	movs	r2, #0
 8006252:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006254:	4b52      	ldr	r3, [pc, #328]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 8006256:	2200      	movs	r2, #0
 8006258:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800625a:	4b51      	ldr	r3, [pc, #324]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 800625c:	2200      	movs	r2, #0
 800625e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006260:	4b4f      	ldr	r3, [pc, #316]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 8006262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006266:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006268:	4b4d      	ldr	r3, [pc, #308]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 800626a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800626e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006270:	4b4b      	ldr	r3, [pc, #300]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 8006272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006276:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006278:	4b49      	ldr	r3, [pc, #292]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 800627a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800627e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006280:	4b47      	ldr	r3, [pc, #284]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 8006282:	2200      	movs	r2, #0
 8006284:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006286:	4b46      	ldr	r3, [pc, #280]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 8006288:	2200      	movs	r2, #0
 800628a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800628c:	4844      	ldr	r0, [pc, #272]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 800628e:	f001 fda1 	bl	8007dd4 <HAL_DMA_Init>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8006298:	f7ff f994 	bl	80055c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a40      	ldr	r2, [pc, #256]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38
 80062a2:	4a3f      	ldr	r2, [pc, #252]	; (80063a0 <HAL_ADC_MspInit+0x234>)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80062a8:	2200      	movs	r2, #0
 80062aa:	2100      	movs	r1, #0
 80062ac:	2012      	movs	r0, #18
 80062ae:	f001 fb72 	bl	8007996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80062b2:	2012      	movs	r0, #18
 80062b4:	f001 fb8b 	bl	80079ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80062b8:	e064      	b.n	8006384 <HAL_ADC_MspInit+0x218>
  else if(hadc->Instance==ADC2)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a3a      	ldr	r2, [pc, #232]	; (80063a8 <HAL_ADC_MspInit+0x23c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d15f      	bne.n	8006384 <HAL_ADC_MspInit+0x218>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	4b31      	ldr	r3, [pc, #196]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80062ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062cc:	4a30      	ldr	r2, [pc, #192]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80062ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062d2:	6453      	str	r3, [r2, #68]	; 0x44
 80062d4:	4b2e      	ldr	r3, [pc, #184]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80062d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	4b2a      	ldr	r3, [pc, #168]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	4a29      	ldr	r2, [pc, #164]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80062ea:	f043 0304 	orr.w	r3, r3, #4
 80062ee:	6313      	str	r3, [r2, #48]	; 0x30
 80062f0:	4b27      	ldr	r3, [pc, #156]	; (8006390 <HAL_ADC_MspInit+0x224>)
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80062fc:	2310      	movs	r3, #16
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006300:	2303      	movs	r3, #3
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006304:	2300      	movs	r3, #0
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800630c:	4619      	mov	r1, r3
 800630e:	4821      	ldr	r0, [pc, #132]	; (8006394 <HAL_ADC_MspInit+0x228>)
 8006310:	f002 f8d0 	bl	80084b4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <HAL_ADC_MspInit+0x240>)
 8006316:	4a26      	ldr	r2, [pc, #152]	; (80063b0 <HAL_ADC_MspInit+0x244>)
 8006318:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800631a:	4b24      	ldr	r3, [pc, #144]	; (80063ac <HAL_ADC_MspInit+0x240>)
 800631c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006320:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006322:	4b22      	ldr	r3, [pc, #136]	; (80063ac <HAL_ADC_MspInit+0x240>)
 8006324:	2200      	movs	r2, #0
 8006326:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006328:	4b20      	ldr	r3, [pc, #128]	; (80063ac <HAL_ADC_MspInit+0x240>)
 800632a:	2200      	movs	r2, #0
 800632c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800632e:	4b1f      	ldr	r3, [pc, #124]	; (80063ac <HAL_ADC_MspInit+0x240>)
 8006330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006334:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006336:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <HAL_ADC_MspInit+0x240>)
 8006338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800633c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800633e:	4b1b      	ldr	r3, [pc, #108]	; (80063ac <HAL_ADC_MspInit+0x240>)
 8006340:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006344:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8006346:	4b19      	ldr	r3, [pc, #100]	; (80063ac <HAL_ADC_MspInit+0x240>)
 8006348:	2200      	movs	r2, #0
 800634a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800634c:	4b17      	ldr	r3, [pc, #92]	; (80063ac <HAL_ADC_MspInit+0x240>)
 800634e:	2200      	movs	r2, #0
 8006350:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006352:	4b16      	ldr	r3, [pc, #88]	; (80063ac <HAL_ADC_MspInit+0x240>)
 8006354:	2200      	movs	r2, #0
 8006356:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006358:	4814      	ldr	r0, [pc, #80]	; (80063ac <HAL_ADC_MspInit+0x240>)
 800635a:	f001 fd3b 	bl	8007dd4 <HAL_DMA_Init>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <HAL_ADC_MspInit+0x1fc>
      Error_Handler();
 8006364:	f7ff f92e 	bl	80055c4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a10      	ldr	r2, [pc, #64]	; (80063ac <HAL_ADC_MspInit+0x240>)
 800636c:	639a      	str	r2, [r3, #56]	; 0x38
 800636e:	4a0f      	ldr	r2, [pc, #60]	; (80063ac <HAL_ADC_MspInit+0x240>)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006374:	2200      	movs	r2, #0
 8006376:	2100      	movs	r1, #0
 8006378:	2012      	movs	r0, #18
 800637a:	f001 fb0c 	bl	8007996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800637e:	2012      	movs	r0, #18
 8006380:	f001 fb25 	bl	80079ce <HAL_NVIC_EnableIRQ>
}
 8006384:	bf00      	nop
 8006386:	3738      	adds	r7, #56	; 0x38
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	40012000 	.word	0x40012000
 8006390:	40023800 	.word	0x40023800
 8006394:	40020800 	.word	0x40020800
 8006398:	40020000 	.word	0x40020000
 800639c:	40020400 	.word	0x40020400
 80063a0:	200005dc 	.word	0x200005dc
 80063a4:	40026470 	.word	0x40026470
 80063a8:	40012100 	.word	0x40012100
 80063ac:	2000063c 	.word	0x2000063c
 80063b0:	40026440 	.word	0x40026440

080063b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08a      	sub	sp, #40	; 0x28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063bc:	f107 0314 	add.w	r3, r7, #20
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	605a      	str	r2, [r3, #4]
 80063c6:	609a      	str	r2, [r3, #8]
 80063c8:	60da      	str	r2, [r3, #12]
 80063ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a2f      	ldr	r2, [pc, #188]	; (8006490 <HAL_DAC_MspInit+0xdc>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d158      	bne.n	8006488 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80063d6:	2300      	movs	r3, #0
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	4b2e      	ldr	r3, [pc, #184]	; (8006494 <HAL_DAC_MspInit+0xe0>)
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	4a2d      	ldr	r2, [pc, #180]	; (8006494 <HAL_DAC_MspInit+0xe0>)
 80063e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063e4:	6413      	str	r3, [r2, #64]	; 0x40
 80063e6:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <HAL_DAC_MspInit+0xe0>)
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	4b27      	ldr	r3, [pc, #156]	; (8006494 <HAL_DAC_MspInit+0xe0>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	4a26      	ldr	r2, [pc, #152]	; (8006494 <HAL_DAC_MspInit+0xe0>)
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	6313      	str	r3, [r2, #48]	; 0x30
 8006402:	4b24      	ldr	r3, [pc, #144]	; (8006494 <HAL_DAC_MspInit+0xe0>)
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800640e:	2310      	movs	r3, #16
 8006410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006412:	2303      	movs	r3, #3
 8006414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800641a:	f107 0314 	add.w	r3, r7, #20
 800641e:	4619      	mov	r1, r3
 8006420:	481d      	ldr	r0, [pc, #116]	; (8006498 <HAL_DAC_MspInit+0xe4>)
 8006422:	f002 f847 	bl	80084b4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8006426:	4b1d      	ldr	r3, [pc, #116]	; (800649c <HAL_DAC_MspInit+0xe8>)
 8006428:	4a1d      	ldr	r2, [pc, #116]	; (80064a0 <HAL_DAC_MspInit+0xec>)
 800642a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800642c:	4b1b      	ldr	r3, [pc, #108]	; (800649c <HAL_DAC_MspInit+0xe8>)
 800642e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8006432:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006434:	4b19      	ldr	r3, [pc, #100]	; (800649c <HAL_DAC_MspInit+0xe8>)
 8006436:	2240      	movs	r2, #64	; 0x40
 8006438:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800643a:	4b18      	ldr	r3, [pc, #96]	; (800649c <HAL_DAC_MspInit+0xe8>)
 800643c:	2200      	movs	r2, #0
 800643e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8006440:	4b16      	ldr	r3, [pc, #88]	; (800649c <HAL_DAC_MspInit+0xe8>)
 8006442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006446:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006448:	4b14      	ldr	r3, [pc, #80]	; (800649c <HAL_DAC_MspInit+0xe8>)
 800644a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800644e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006450:	4b12      	ldr	r3, [pc, #72]	; (800649c <HAL_DAC_MspInit+0xe8>)
 8006452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006456:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8006458:	4b10      	ldr	r3, [pc, #64]	; (800649c <HAL_DAC_MspInit+0xe8>)
 800645a:	2200      	movs	r2, #0
 800645c:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800645e:	4b0f      	ldr	r3, [pc, #60]	; (800649c <HAL_DAC_MspInit+0xe8>)
 8006460:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006464:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006466:	4b0d      	ldr	r3, [pc, #52]	; (800649c <HAL_DAC_MspInit+0xe8>)
 8006468:	2200      	movs	r2, #0
 800646a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800646c:	480b      	ldr	r0, [pc, #44]	; (800649c <HAL_DAC_MspInit+0xe8>)
 800646e:	f001 fcb1 	bl	8007dd4 <HAL_DMA_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8006478:	f7ff f8a4 	bl	80055c4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a07      	ldr	r2, [pc, #28]	; (800649c <HAL_DAC_MspInit+0xe8>)
 8006480:	609a      	str	r2, [r3, #8]
 8006482:	4a06      	ldr	r2, [pc, #24]	; (800649c <HAL_DAC_MspInit+0xe8>)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8006488:	bf00      	nop
 800648a:	3728      	adds	r7, #40	; 0x28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40007400 	.word	0x40007400
 8006494:	40023800 	.word	0x40023800
 8006498:	40020000 	.word	0x40020000
 800649c:	200006b0 	.word	0x200006b0
 80064a0:	40026088 	.word	0x40026088

080064a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08a      	sub	sp, #40	; 0x28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064ac:	f107 0314 	add.w	r3, r7, #20
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	605a      	str	r2, [r3, #4]
 80064b6:	609a      	str	r2, [r3, #8]
 80064b8:	60da      	str	r2, [r3, #12]
 80064ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a19      	ldr	r2, [pc, #100]	; (8006528 <HAL_I2C_MspInit+0x84>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d12c      	bne.n	8006520 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	4b18      	ldr	r3, [pc, #96]	; (800652c <HAL_I2C_MspInit+0x88>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	4a17      	ldr	r2, [pc, #92]	; (800652c <HAL_I2C_MspInit+0x88>)
 80064d0:	f043 0302 	orr.w	r3, r3, #2
 80064d4:	6313      	str	r3, [r2, #48]	; 0x30
 80064d6:	4b15      	ldr	r3, [pc, #84]	; (800652c <HAL_I2C_MspInit+0x88>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80064e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064e8:	2312      	movs	r3, #18
 80064ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064f0:	2303      	movs	r3, #3
 80064f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80064f4:	2304      	movs	r3, #4
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064f8:	f107 0314 	add.w	r3, r7, #20
 80064fc:	4619      	mov	r1, r3
 80064fe:	480c      	ldr	r0, [pc, #48]	; (8006530 <HAL_I2C_MspInit+0x8c>)
 8006500:	f001 ffd8 	bl	80084b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	4b08      	ldr	r3, [pc, #32]	; (800652c <HAL_I2C_MspInit+0x88>)
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	4a07      	ldr	r2, [pc, #28]	; (800652c <HAL_I2C_MspInit+0x88>)
 800650e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006512:	6413      	str	r3, [r2, #64]	; 0x40
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_I2C_MspInit+0x88>)
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006520:	bf00      	nop
 8006522:	3728      	adds	r7, #40	; 0x28
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40005400 	.word	0x40005400
 800652c:	40023800 	.word	0x40023800
 8006530:	40020400 	.word	0x40020400

08006534 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800653c:	f107 0308 	add.w	r3, r7, #8
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	605a      	str	r2, [r3, #4]
 8006546:	609a      	str	r2, [r3, #8]
 8006548:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a0c      	ldr	r2, [pc, #48]	; (8006580 <HAL_RTC_MspInit+0x4c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d111      	bne.n	8006578 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006554:	2302      	movs	r3, #2
 8006556:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800655c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800655e:	f107 0308 	add.w	r3, r7, #8
 8006562:	4618      	mov	r0, r3
 8006564:	f004 fa5a 	bl	800aa1c <HAL_RCCEx_PeriphCLKConfig>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800656e:	f7ff f829 	bl	80055c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006572:	4b04      	ldr	r3, [pc, #16]	; (8006584 <HAL_RTC_MspInit+0x50>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006578:	bf00      	nop
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40002800 	.word	0x40002800
 8006584:	42470e3c 	.word	0x42470e3c

08006588 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	; 0x28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006590:	f107 0314 	add.w	r3, r7, #20
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	605a      	str	r2, [r3, #4]
 800659a:	609a      	str	r2, [r3, #8]
 800659c:	60da      	str	r2, [r3, #12]
 800659e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a64      	ldr	r2, [pc, #400]	; (8006738 <HAL_SD_MspInit+0x1b0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	f040 80c1 	bne.w	800672e <HAL_SD_MspInit+0x1a6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80065ac:	2300      	movs	r3, #0
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	4b62      	ldr	r3, [pc, #392]	; (800673c <HAL_SD_MspInit+0x1b4>)
 80065b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b4:	4a61      	ldr	r2, [pc, #388]	; (800673c <HAL_SD_MspInit+0x1b4>)
 80065b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065ba:	6453      	str	r3, [r2, #68]	; 0x44
 80065bc:	4b5f      	ldr	r3, [pc, #380]	; (800673c <HAL_SD_MspInit+0x1b4>)
 80065be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	4b5b      	ldr	r3, [pc, #364]	; (800673c <HAL_SD_MspInit+0x1b4>)
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	4a5a      	ldr	r2, [pc, #360]	; (800673c <HAL_SD_MspInit+0x1b4>)
 80065d2:	f043 0304 	orr.w	r3, r3, #4
 80065d6:	6313      	str	r3, [r2, #48]	; 0x30
 80065d8:	4b58      	ldr	r3, [pc, #352]	; (800673c <HAL_SD_MspInit+0x1b4>)
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065e4:	2300      	movs	r3, #0
 80065e6:	60bb      	str	r3, [r7, #8]
 80065e8:	4b54      	ldr	r3, [pc, #336]	; (800673c <HAL_SD_MspInit+0x1b4>)
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	4a53      	ldr	r2, [pc, #332]	; (800673c <HAL_SD_MspInit+0x1b4>)
 80065ee:	f043 0308 	orr.w	r3, r3, #8
 80065f2:	6313      	str	r3, [r2, #48]	; 0x30
 80065f4:	4b51      	ldr	r3, [pc, #324]	; (800673c <HAL_SD_MspInit+0x1b4>)
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	60bb      	str	r3, [r7, #8]
 80065fe:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8006600:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8006604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006606:	2302      	movs	r3, #2
 8006608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660a:	2300      	movs	r3, #0
 800660c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800660e:	2303      	movs	r3, #3
 8006610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006612:	230c      	movs	r3, #12
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006616:	f107 0314 	add.w	r3, r7, #20
 800661a:	4619      	mov	r1, r3
 800661c:	4848      	ldr	r0, [pc, #288]	; (8006740 <HAL_SD_MspInit+0x1b8>)
 800661e:	f001 ff49 	bl	80084b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006622:	2304      	movs	r3, #4
 8006624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006626:	2302      	movs	r3, #2
 8006628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662a:	2300      	movs	r3, #0
 800662c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800662e:	2303      	movs	r3, #3
 8006630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006632:	230c      	movs	r3, #12
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006636:	f107 0314 	add.w	r3, r7, #20
 800663a:	4619      	mov	r1, r3
 800663c:	4841      	ldr	r0, [pc, #260]	; (8006744 <HAL_SD_MspInit+0x1bc>)
 800663e:	f001 ff39 	bl	80084b4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8006642:	4b41      	ldr	r3, [pc, #260]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 8006644:	4a41      	ldr	r2, [pc, #260]	; (800674c <HAL_SD_MspInit+0x1c4>)
 8006646:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006648:	4b3f      	ldr	r3, [pc, #252]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 800664a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800664e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006650:	4b3d      	ldr	r3, [pc, #244]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 8006652:	2200      	movs	r2, #0
 8006654:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006656:	4b3c      	ldr	r3, [pc, #240]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 8006658:	2200      	movs	r2, #0
 800665a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800665c:	4b3a      	ldr	r3, [pc, #232]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 800665e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006662:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006664:	4b38      	ldr	r3, [pc, #224]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 8006666:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800666a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800666c:	4b36      	ldr	r3, [pc, #216]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 800666e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006672:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006674:	4b34      	ldr	r3, [pc, #208]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 8006676:	2220      	movs	r2, #32
 8006678:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800667a:	4b33      	ldr	r3, [pc, #204]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 800667c:	2200      	movs	r2, #0
 800667e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006680:	4b31      	ldr	r3, [pc, #196]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 8006682:	2204      	movs	r2, #4
 8006684:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006686:	4b30      	ldr	r3, [pc, #192]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 8006688:	2203      	movs	r2, #3
 800668a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800668c:	4b2e      	ldr	r3, [pc, #184]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 800668e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006692:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006694:	4b2c      	ldr	r3, [pc, #176]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 8006696:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800669a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800669c:	482a      	ldr	r0, [pc, #168]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 800669e:	f001 fb99 	bl	8007dd4 <HAL_DMA_Init>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80066a8:	f7fe ff8c 	bl	80055c4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a26      	ldr	r2, [pc, #152]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40
 80066b2:	4a25      	ldr	r2, [pc, #148]	; (8006748 <HAL_SD_MspInit+0x1c0>)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 80066b8:	4b25      	ldr	r3, [pc, #148]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 80066ba:	4a26      	ldr	r2, [pc, #152]	; (8006754 <HAL_SD_MspInit+0x1cc>)
 80066bc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80066be:	4b24      	ldr	r3, [pc, #144]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 80066c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80066c4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80066c6:	4b22      	ldr	r3, [pc, #136]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 80066c8:	2240      	movs	r2, #64	; 0x40
 80066ca:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066cc:	4b20      	ldr	r3, [pc, #128]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80066d2:	4b1f      	ldr	r3, [pc, #124]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 80066d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066d8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80066da:	4b1d      	ldr	r3, [pc, #116]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 80066dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066e0:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80066e2:	4b1b      	ldr	r3, [pc, #108]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 80066e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80066e8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80066ea:	4b19      	ldr	r3, [pc, #100]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 80066ec:	2220      	movs	r2, #32
 80066ee:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80066f0:	4b17      	ldr	r3, [pc, #92]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80066f6:	4b16      	ldr	r3, [pc, #88]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 80066f8:	2204      	movs	r2, #4
 80066fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80066fc:	4b14      	ldr	r3, [pc, #80]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 80066fe:	2203      	movs	r2, #3
 8006700:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006702:	4b13      	ldr	r3, [pc, #76]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 8006704:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006708:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 800670c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006710:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006712:	480f      	ldr	r0, [pc, #60]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 8006714:	f001 fb5e 	bl	8007dd4 <HAL_DMA_Init>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800671e:	f7fe ff51 	bl	80055c4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a0a      	ldr	r2, [pc, #40]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 8006726:	63da      	str	r2, [r3, #60]	; 0x3c
 8006728:	4a09      	ldr	r2, [pc, #36]	; (8006750 <HAL_SD_MspInit+0x1c8>)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800672e:	bf00      	nop
 8006730:	3728      	adds	r7, #40	; 0x28
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40023800 	.word	0x40023800
 8006740:	40020800 	.word	0x40020800
 8006744:	40020c00 	.word	0x40020c00
 8006748:	20000808 	.word	0x20000808
 800674c:	400264a0 	.word	0x400264a0
 8006750:	20000868 	.word	0x20000868
 8006754:	40026458 	.word	0x40026458

08006758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a0b      	ldr	r2, [pc, #44]	; (8006794 <HAL_TIM_Base_MspInit+0x3c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d10d      	bne.n	8006786 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <HAL_TIM_Base_MspInit+0x40>)
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	4a09      	ldr	r2, [pc, #36]	; (8006798 <HAL_TIM_Base_MspInit+0x40>)
 8006774:	f043 0304 	orr.w	r3, r3, #4
 8006778:	6413      	str	r3, [r2, #64]	; 0x40
 800677a:	4b07      	ldr	r3, [pc, #28]	; (8006798 <HAL_TIM_Base_MspInit+0x40>)
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006786:	bf00      	nop
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	40000800 	.word	0x40000800
 8006798:	40023800 	.word	0x40023800

0800679c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08a      	sub	sp, #40	; 0x28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	605a      	str	r2, [r3, #4]
 80067ae:	609a      	str	r2, [r3, #8]
 80067b0:	60da      	str	r2, [r3, #12]
 80067b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a19      	ldr	r2, [pc, #100]	; (8006820 <HAL_UART_MspInit+0x84>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d12b      	bne.n	8006816 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80067be:	2300      	movs	r3, #0
 80067c0:	613b      	str	r3, [r7, #16]
 80067c2:	4b18      	ldr	r3, [pc, #96]	; (8006824 <HAL_UART_MspInit+0x88>)
 80067c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c6:	4a17      	ldr	r2, [pc, #92]	; (8006824 <HAL_UART_MspInit+0x88>)
 80067c8:	f043 0320 	orr.w	r3, r3, #32
 80067cc:	6453      	str	r3, [r2, #68]	; 0x44
 80067ce:	4b15      	ldr	r3, [pc, #84]	; (8006824 <HAL_UART_MspInit+0x88>)
 80067d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <HAL_UART_MspInit+0x88>)
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	4a10      	ldr	r2, [pc, #64]	; (8006824 <HAL_UART_MspInit+0x88>)
 80067e4:	f043 0304 	orr.w	r3, r3, #4
 80067e8:	6313      	str	r3, [r2, #48]	; 0x30
 80067ea:	4b0e      	ldr	r3, [pc, #56]	; (8006824 <HAL_UART_MspInit+0x88>)
 80067ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80067f6:	23c0      	movs	r3, #192	; 0xc0
 80067f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067fa:	2302      	movs	r3, #2
 80067fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006802:	2303      	movs	r3, #3
 8006804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006806:	2308      	movs	r3, #8
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800680a:	f107 0314 	add.w	r3, r7, #20
 800680e:	4619      	mov	r1, r3
 8006810:	4805      	ldr	r0, [pc, #20]	; (8006828 <HAL_UART_MspInit+0x8c>)
 8006812:	f001 fe4f 	bl	80084b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006816:	bf00      	nop
 8006818:	3728      	adds	r7, #40	; 0x28
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	40011400 	.word	0x40011400
 8006824:	40023800 	.word	0x40023800
 8006828:	40020800 	.word	0x40020800

0800682c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006832:	1d3b      	adds	r3, r7, #4
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	605a      	str	r2, [r3, #4]
 800683a:	609a      	str	r2, [r3, #8]
 800683c:	60da      	str	r2, [r3, #12]
 800683e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8006840:	4b2c      	ldr	r3, [pc, #176]	; (80068f4 <HAL_FSMC_MspInit+0xc8>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d151      	bne.n	80068ec <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8006848:	4b2a      	ldr	r3, [pc, #168]	; (80068f4 <HAL_FSMC_MspInit+0xc8>)
 800684a:	2201      	movs	r2, #1
 800684c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800684e:	2300      	movs	r3, #0
 8006850:	603b      	str	r3, [r7, #0]
 8006852:	4b29      	ldr	r3, [pc, #164]	; (80068f8 <HAL_FSMC_MspInit+0xcc>)
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	4a28      	ldr	r2, [pc, #160]	; (80068f8 <HAL_FSMC_MspInit+0xcc>)
 8006858:	f043 0301 	orr.w	r3, r3, #1
 800685c:	6393      	str	r3, [r2, #56]	; 0x38
 800685e:	4b26      	ldr	r3, [pc, #152]	; (80068f8 <HAL_FSMC_MspInit+0xcc>)
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	683b      	ldr	r3, [r7, #0]
  PG10   ------> FSMC_NE3
  PG12   ------> FSMC_NE4
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800686a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800686e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006870:	2302      	movs	r3, #2
 8006872:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006878:	2303      	movs	r3, #3
 800687a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800687c:	230c      	movs	r3, #12
 800687e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006880:	1d3b      	adds	r3, r7, #4
 8006882:	4619      	mov	r1, r3
 8006884:	481d      	ldr	r0, [pc, #116]	; (80068fc <HAL_FSMC_MspInit+0xd0>)
 8006886:	f001 fe15 	bl	80084b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800688a:	f241 433f 	movw	r3, #5183	; 0x143f
 800688e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006890:	2302      	movs	r3, #2
 8006892:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006898:	2303      	movs	r3, #3
 800689a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800689c:	230c      	movs	r3, #12
 800689e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80068a0:	1d3b      	adds	r3, r7, #4
 80068a2:	4619      	mov	r1, r3
 80068a4:	4816      	ldr	r0, [pc, #88]	; (8006900 <HAL_FSMC_MspInit+0xd4>)
 80068a6:	f001 fe05 	bl	80084b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80068aa:	f64f 7383 	movw	r3, #65411	; 0xff83
 80068ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b0:	2302      	movs	r3, #2
 80068b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068b8:	2303      	movs	r3, #3
 80068ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80068bc:	230c      	movs	r3, #12
 80068be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068c0:	1d3b      	adds	r3, r7, #4
 80068c2:	4619      	mov	r1, r3
 80068c4:	480f      	ldr	r0, [pc, #60]	; (8006904 <HAL_FSMC_MspInit+0xd8>)
 80068c6:	f001 fdf5 	bl	80084b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80068ca:	f64f 7333 	movw	r3, #65331	; 0xff33
 80068ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068d0:	2302      	movs	r3, #2
 80068d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068d8:	2303      	movs	r3, #3
 80068da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80068dc:	230c      	movs	r3, #12
 80068de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068e0:	1d3b      	adds	r3, r7, #4
 80068e2:	4619      	mov	r1, r3
 80068e4:	4808      	ldr	r0, [pc, #32]	; (8006908 <HAL_FSMC_MspInit+0xdc>)
 80068e6:	f001 fde5 	bl	80084b4 <HAL_GPIO_Init>
 80068ea:	e000      	b.n	80068ee <HAL_FSMC_MspInit+0xc2>
    return;
 80068ec:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000a74 	.word	0x20000a74
 80068f8:	40023800 	.word	0x40023800
 80068fc:	40021400 	.word	0x40021400
 8006900:	40021800 	.word	0x40021800
 8006904:	40021000 	.word	0x40021000
 8006908:	40020c00 	.word	0x40020c00

0800690c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8006914:	f7ff ff8a 	bl	800682c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006924:	e7fe      	b.n	8006924 <NMI_Handler+0x4>

08006926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006926:	b480      	push	{r7}
 8006928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800692a:	e7fe      	b.n	800692a <HardFault_Handler+0x4>

0800692c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006930:	e7fe      	b.n	8006930 <MemManage_Handler+0x4>

08006932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006932:	b480      	push	{r7}
 8006934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006936:	e7fe      	b.n	8006936 <BusFault_Handler+0x4>

08006938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800693c:	e7fe      	b.n	800693c <UsageFault_Handler+0x4>

0800693e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800693e:	b480      	push	{r7}
 8006940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006942:	bf00      	nop
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006950:	bf00      	nop
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800695a:	b480      	push	{r7}
 800695c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800695e:	bf00      	nop
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800696c:	f000 f996 	bl	8006c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006970:	bf00      	nop
 8006972:	bd80      	pop	{r7, pc}

08006974 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8006978:	4802      	ldr	r0, [pc, #8]	; (8006984 <DMA1_Stream5_IRQHandler+0x10>)
 800697a:	f001 fb31 	bl	8007fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800697e:	bf00      	nop
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	200006b0 	.word	0x200006b0

08006988 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800698c:	4803      	ldr	r0, [pc, #12]	; (800699c <ADC_IRQHandler+0x14>)
 800698e:	f000 fa34 	bl	8006dfa <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8006992:	4803      	ldr	r0, [pc, #12]	; (80069a0 <ADC_IRQHandler+0x18>)
 8006994:	f000 fa31 	bl	8006dfa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006998:	bf00      	nop
 800699a:	bd80      	pop	{r7, pc}
 800699c:	2000054c 	.word	0x2000054c
 80069a0:	20000594 	.word	0x20000594

080069a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80069a8:	4802      	ldr	r0, [pc, #8]	; (80069b4 <DMA2_Stream2_IRQHandler+0x10>)
 80069aa:	f001 fb19 	bl	8007fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80069ae:	bf00      	nop
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	2000063c 	.word	0x2000063c

080069b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80069bc:	4802      	ldr	r0, [pc, #8]	; (80069c8 <DMA2_Stream3_IRQHandler+0x10>)
 80069be:	f001 fb0f 	bl	8007fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80069c2:	bf00      	nop
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000868 	.word	0x20000868

080069cc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80069d0:	4802      	ldr	r0, [pc, #8]	; (80069dc <DMA2_Stream4_IRQHandler+0x10>)
 80069d2:	f001 fb05 	bl	8007fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80069d6:	bf00      	nop
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	200005dc 	.word	0x200005dc

080069e0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80069e4:	4802      	ldr	r0, [pc, #8]	; (80069f0 <DMA2_Stream6_IRQHandler+0x10>)
 80069e6:	f001 fafb 	bl	8007fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80069ea:	bf00      	nop
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000808 	.word	0x20000808

080069f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  return 1;
 80069f8:	2301      	movs	r3, #1
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <_kill>:

int _kill(int pid, int sig)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006a0e:	f00a fb07 	bl	8011020 <__errno>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2216      	movs	r2, #22
 8006a16:	601a      	str	r2, [r3, #0]
  return -1;
 8006a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <_exit>:

void _exit (int status)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff ffe7 	bl	8006a04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006a36:	e7fe      	b.n	8006a36 <_exit+0x12>

08006a38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a44:	2300      	movs	r3, #0
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	e00a      	b.n	8006a60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006a4a:	f3af 8000 	nop.w
 8006a4e:	4601      	mov	r1, r0
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	60ba      	str	r2, [r7, #8]
 8006a56:	b2ca      	uxtb	r2, r1
 8006a58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	dbf0      	blt.n	8006a4a <_read+0x12>
  }

  return len;
 8006a68:	687b      	ldr	r3, [r7, #4]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b086      	sub	sp, #24
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	e009      	b.n	8006a98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	60ba      	str	r2, [r7, #8]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	3301      	adds	r3, #1
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	dbf1      	blt.n	8006a84 <_write+0x12>
  }
  return len;
 8006aa0:	687b      	ldr	r3, [r7, #4]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <_close>:

int _close(int file)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ad2:	605a      	str	r2, [r3, #4]
  return 0;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <_isatty>:

int _isatty(int file)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006aea:	2301      	movs	r3, #1
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006b1c:	4a14      	ldr	r2, [pc, #80]	; (8006b70 <_sbrk+0x5c>)
 8006b1e:	4b15      	ldr	r3, [pc, #84]	; (8006b74 <_sbrk+0x60>)
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006b28:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <_sbrk+0x64>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d102      	bne.n	8006b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006b30:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <_sbrk+0x64>)
 8006b32:	4a12      	ldr	r2, [pc, #72]	; (8006b7c <_sbrk+0x68>)
 8006b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006b36:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <_sbrk+0x64>)
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d207      	bcs.n	8006b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b44:	f00a fa6c 	bl	8011020 <__errno>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	220c      	movs	r2, #12
 8006b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b52:	e009      	b.n	8006b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b54:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <_sbrk+0x64>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <_sbrk+0x64>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4413      	add	r3, r2
 8006b62:	4a05      	ldr	r2, [pc, #20]	; (8006b78 <_sbrk+0x64>)
 8006b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b66:	68fb      	ldr	r3, [r7, #12]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20020000 	.word	0x20020000
 8006b74:	00000400 	.word	0x00000400
 8006b78:	20000a78 	.word	0x20000a78
 8006b7c:	20002e70 	.word	0x20002e70

08006b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <SystemInit+0x20>)
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8a:	4a05      	ldr	r2, [pc, #20]	; (8006ba0 <SystemInit+0x20>)
 8006b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b94:	bf00      	nop
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	e000ed00 	.word	0xe000ed00

08006ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006ba8:	480d      	ldr	r0, [pc, #52]	; (8006be0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006baa:	490e      	ldr	r1, [pc, #56]	; (8006be4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006bac:	4a0e      	ldr	r2, [pc, #56]	; (8006be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006bb0:	e002      	b.n	8006bb8 <LoopCopyDataInit>

08006bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006bb6:	3304      	adds	r3, #4

08006bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006bbc:	d3f9      	bcc.n	8006bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bbe:	4a0b      	ldr	r2, [pc, #44]	; (8006bec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006bc0:	4c0b      	ldr	r4, [pc, #44]	; (8006bf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006bc4:	e001      	b.n	8006bca <LoopFillZerobss>

08006bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bc8:	3204      	adds	r2, #4

08006bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006bcc:	d3fb      	bcc.n	8006bc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006bce:	f7ff ffd7 	bl	8006b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bd2:	f00a fa2b 	bl	801102c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006bd6:	f7fd fd7f 	bl	80046d8 <main>
  bx  lr    
 8006bda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006be4:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 8006be8:	08015998 	.word	0x08015998
  ldr r2, =_sbss
 8006bec:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 8006bf0:	20002e70 	.word	0x20002e70

08006bf4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006bf4:	e7fe      	b.n	8006bf4 <CAN1_RX0_IRQHandler>
	...

08006bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006bfc:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <HAL_Init+0x40>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a0d      	ldr	r2, [pc, #52]	; (8006c38 <HAL_Init+0x40>)
 8006c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c08:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_Init+0x40>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a0a      	ldr	r2, [pc, #40]	; (8006c38 <HAL_Init+0x40>)
 8006c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c14:	4b08      	ldr	r3, [pc, #32]	; (8006c38 <HAL_Init+0x40>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <HAL_Init+0x40>)
 8006c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c20:	2003      	movs	r0, #3
 8006c22:	f000 fead 	bl	8007980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c26:	200f      	movs	r0, #15
 8006c28:	f000 f808 	bl	8006c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c2c:	f7ff fa76 	bl	800611c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	40023c00 	.word	0x40023c00

08006c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c44:	4b12      	ldr	r3, [pc, #72]	; (8006c90 <HAL_InitTick+0x54>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <HAL_InitTick+0x58>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fec5 	bl	80079ea <HAL_SYSTICK_Config>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e00e      	b.n	8006c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b0f      	cmp	r3, #15
 8006c6e:	d80a      	bhi.n	8006c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c70:	2200      	movs	r2, #0
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	f000 fe8d 	bl	8007996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c7c:	4a06      	ldr	r2, [pc, #24]	; (8006c98 <HAL_InitTick+0x5c>)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	e000      	b.n	8006c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20000444 	.word	0x20000444
 8006c94:	2000044c 	.word	0x2000044c
 8006c98:	20000448 	.word	0x20000448

08006c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ca0:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <HAL_IncTick+0x20>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <HAL_IncTick+0x24>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4413      	add	r3, r2
 8006cac:	4a04      	ldr	r2, [pc, #16]	; (8006cc0 <HAL_IncTick+0x24>)
 8006cae:	6013      	str	r3, [r2, #0]
}
 8006cb0:	bf00      	nop
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	2000044c 	.word	0x2000044c
 8006cc0:	20000a7c 	.word	0x20000a7c

08006cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8006cc8:	4b03      	ldr	r3, [pc, #12]	; (8006cd8 <HAL_GetTick+0x14>)
 8006cca:	681b      	ldr	r3, [r3, #0]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	20000a7c 	.word	0x20000a7c

08006cdc <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8006cea:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <HAL_SetTickFreq+0x48>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	79fa      	ldrb	r2, [r7, #7]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d012      	beq.n	8006d1a <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <HAL_SetTickFreq+0x48>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8006cfa:	4a0a      	ldr	r2, [pc, #40]	; (8006d24 <HAL_SetTickFreq+0x48>)
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8006d00:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <HAL_SetTickFreq+0x4c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff ff99 	bl	8006c3c <HAL_InitTick>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8006d14:	4a03      	ldr	r2, [pc, #12]	; (8006d24 <HAL_SetTickFreq+0x48>)
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
 8006d18:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	2000044c 	.word	0x2000044c
 8006d28:	20000448 	.word	0x20000448

08006d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d34:	f7ff ffc6 	bl	8006cc4 <HAL_GetTick>
 8006d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d44:	d005      	beq.n	8006d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d46:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <HAL_Delay+0x44>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006d52:	bf00      	nop
 8006d54:	f7ff ffb6 	bl	8006cc4 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d8f7      	bhi.n	8006d54 <HAL_Delay+0x28>
  {
  }
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	2000044c 	.word	0x2000044c

08006d74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e033      	b.n	8006df2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7ff f9ea 	bl	800616c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006daa:	f003 0310 	and.w	r3, r3, #16
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d118      	bne.n	8006de4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006dba:	f023 0302 	bic.w	r3, r3, #2
 8006dbe:	f043 0202 	orr.w	r2, r3, #2
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fb82 	bl	80074d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	f023 0303 	bic.w	r3, r3, #3
 8006dda:	f043 0201 	orr.w	r2, r3, #1
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	641a      	str	r2, [r3, #64]	; 0x40
 8006de2:	e001      	b.n	8006de8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	2300      	movs	r3, #0
 8006e08:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d049      	beq.n	8006ec4 <HAL_ADC_IRQHandler+0xca>
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d046      	beq.n	8006ec4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	f003 0310 	and.w	r3, r3, #16
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d105      	bne.n	8006e4e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d12b      	bne.n	8006eb4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d127      	bne.n	8006eb4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d006      	beq.n	8006e80 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d119      	bne.n	8006eb4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0220 	bic.w	r2, r2, #32
 8006e8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d105      	bne.n	8006eb4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	f043 0201 	orr.w	r2, r3, #1
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f9c1 	bl	800723c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f06f 0212 	mvn.w	r2, #18
 8006ec2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d057      	beq.n	8006f8a <HAL_ADC_IRQHandler+0x190>
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d054      	beq.n	8006f8a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	f003 0310 	and.w	r3, r3, #16
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d105      	bne.n	8006ef8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d139      	bne.n	8006f7a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d006      	beq.n	8006f22 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d12b      	bne.n	8006f7a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d124      	bne.n	8006f7a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d11d      	bne.n	8006f7a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d119      	bne.n	8006f7a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f54:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d105      	bne.n	8006f7a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f043 0201 	orr.w	r2, r3, #1
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fc26 	bl	80077cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 020c 	mvn.w	r2, #12
 8006f88:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d017      	beq.n	8006fd0 <HAL_ADC_IRQHandler+0x1d6>
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d014      	beq.n	8006fd0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d10d      	bne.n	8006fd0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f94f 	bl	8007264 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f06f 0201 	mvn.w	r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fde:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d015      	beq.n	8007012 <HAL_ADC_IRQHandler+0x218>
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d012      	beq.n	8007012 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff0:	f043 0202 	orr.w	r2, r3, #2
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0220 	mvn.w	r2, #32
 8007000:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f938 	bl	8007278 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0220 	mvn.w	r2, #32
 8007010:	601a      	str	r2, [r3, #0]
  }
}
 8007012:	bf00      	nop
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_ADC_Start_DMA+0x1e>
 8007036:	2302      	movs	r3, #2
 8007038:	e0e9      	b.n	800720e <HAL_ADC_Start_DMA+0x1f2>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b01      	cmp	r3, #1
 800704e:	d018      	beq.n	8007082 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0201 	orr.w	r2, r2, #1
 800705e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007060:	4b6d      	ldr	r3, [pc, #436]	; (8007218 <HAL_ADC_Start_DMA+0x1fc>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a6d      	ldr	r2, [pc, #436]	; (800721c <HAL_ADC_Start_DMA+0x200>)
 8007066:	fba2 2303 	umull	r2, r3, r2, r3
 800706a:	0c9a      	lsrs	r2, r3, #18
 800706c:	4613      	mov	r3, r2
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	4413      	add	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007074:	e002      	b.n	800707c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	3b01      	subs	r3, #1
 800707a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f9      	bne.n	8007076 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007090:	d107      	bne.n	80070a2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	f040 80a1 	bne.w	80071f4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80070ba:	f023 0301 	bic.w	r3, r3, #1
 80070be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d007      	beq.n	80070e4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80070dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f0:	d106      	bne.n	8007100 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	f023 0206 	bic.w	r2, r3, #6
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	645a      	str	r2, [r3, #68]	; 0x44
 80070fe:	e002      	b.n	8007106 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800710e:	4b44      	ldr	r3, [pc, #272]	; (8007220 <HAL_ADC_Start_DMA+0x204>)
 8007110:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	4a43      	ldr	r2, [pc, #268]	; (8007224 <HAL_ADC_Start_DMA+0x208>)
 8007118:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	4a42      	ldr	r2, [pc, #264]	; (8007228 <HAL_ADC_Start_DMA+0x20c>)
 8007120:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	4a41      	ldr	r2, [pc, #260]	; (800722c <HAL_ADC_Start_DMA+0x210>)
 8007128:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007132:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007142:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007152:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	334c      	adds	r3, #76	; 0x4c
 800715e:	4619      	mov	r1, r3
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f000 fee4 	bl	8007f30 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	2b00      	cmp	r3, #0
 8007172:	d12a      	bne.n	80071ca <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a2d      	ldr	r2, [pc, #180]	; (8007230 <HAL_ADC_Start_DMA+0x214>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d015      	beq.n	80071aa <HAL_ADC_Start_DMA+0x18e>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a2c      	ldr	r2, [pc, #176]	; (8007234 <HAL_ADC_Start_DMA+0x218>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d105      	bne.n	8007194 <HAL_ADC_Start_DMA+0x178>
 8007188:	4b25      	ldr	r3, [pc, #148]	; (8007220 <HAL_ADC_Start_DMA+0x204>)
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f003 031f 	and.w	r3, r3, #31
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a27      	ldr	r2, [pc, #156]	; (8007238 <HAL_ADC_Start_DMA+0x21c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d136      	bne.n	800720c <HAL_ADC_Start_DMA+0x1f0>
 800719e:	4b20      	ldr	r3, [pc, #128]	; (8007220 <HAL_ADC_Start_DMA+0x204>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f003 0310 	and.w	r3, r3, #16
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d130      	bne.n	800720c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d129      	bne.n	800720c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80071c6:	609a      	str	r2, [r3, #8]
 80071c8:	e020      	b.n	800720c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a18      	ldr	r2, [pc, #96]	; (8007230 <HAL_ADC_Start_DMA+0x214>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d11b      	bne.n	800720c <HAL_ADC_Start_DMA+0x1f0>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d114      	bne.n	800720c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80071f0:	609a      	str	r2, [r3, #8]
 80071f2:	e00b      	b.n	800720c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	f043 0210 	orr.w	r2, r3, #16
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007204:	f043 0201 	orr.w	r2, r3, #1
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000444 	.word	0x20000444
 800721c:	431bde83 	.word	0x431bde83
 8007220:	40012300 	.word	0x40012300
 8007224:	080076c9 	.word	0x080076c9
 8007228:	08007783 	.word	0x08007783
 800722c:	0800779f 	.word	0x0800779f
 8007230:	40012000 	.word	0x40012000
 8007234:	40012100 	.word	0x40012100
 8007238:	40012200 	.word	0x40012200

0800723c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_ADC_ConfigChannel+0x1c>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e105      	b.n	80074b4 <HAL_ADC_ConfigChannel+0x228>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b09      	cmp	r3, #9
 80072b6:	d925      	bls.n	8007304 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68d9      	ldr	r1, [r3, #12]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	4613      	mov	r3, r2
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	4413      	add	r3, r2
 80072cc:	3b1e      	subs	r3, #30
 80072ce:	2207      	movs	r2, #7
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	43da      	mvns	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	400a      	ands	r2, r1
 80072dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68d9      	ldr	r1, [r3, #12]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	4618      	mov	r0, r3
 80072f0:	4603      	mov	r3, r0
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	4403      	add	r3, r0
 80072f6:	3b1e      	subs	r3, #30
 80072f8:	409a      	lsls	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	60da      	str	r2, [r3, #12]
 8007302:	e022      	b.n	800734a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6919      	ldr	r1, [r3, #16]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	b29b      	uxth	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	4613      	mov	r3, r2
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	4413      	add	r3, r2
 8007318:	2207      	movs	r2, #7
 800731a:	fa02 f303 	lsl.w	r3, r2, r3
 800731e:	43da      	mvns	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	400a      	ands	r2, r1
 8007326:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6919      	ldr	r1, [r3, #16]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	4618      	mov	r0, r3
 800733a:	4603      	mov	r3, r0
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	4403      	add	r3, r0
 8007340:	409a      	lsls	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	2b06      	cmp	r3, #6
 8007350:	d824      	bhi.n	800739c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	3b05      	subs	r3, #5
 8007364:	221f      	movs	r2, #31
 8007366:	fa02 f303 	lsl.w	r3, r2, r3
 800736a:	43da      	mvns	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	400a      	ands	r2, r1
 8007372:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	b29b      	uxth	r3, r3
 8007380:	4618      	mov	r0, r3
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	3b05      	subs	r3, #5
 800738e:	fa00 f203 	lsl.w	r2, r0, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	635a      	str	r2, [r3, #52]	; 0x34
 800739a:	e04c      	b.n	8007436 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	2b0c      	cmp	r3, #12
 80073a2:	d824      	bhi.n	80073ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	3b23      	subs	r3, #35	; 0x23
 80073b6:	221f      	movs	r2, #31
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	43da      	mvns	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	400a      	ands	r2, r1
 80073c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	4618      	mov	r0, r3
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	3b23      	subs	r3, #35	; 0x23
 80073e0:	fa00 f203 	lsl.w	r2, r0, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	631a      	str	r2, [r3, #48]	; 0x30
 80073ec:	e023      	b.n	8007436 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	3b41      	subs	r3, #65	; 0x41
 8007400:	221f      	movs	r2, #31
 8007402:	fa02 f303 	lsl.w	r3, r2, r3
 8007406:	43da      	mvns	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	400a      	ands	r2, r1
 800740e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	4618      	mov	r0, r3
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	3b41      	subs	r3, #65	; 0x41
 800742a:	fa00 f203 	lsl.w	r2, r0, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007436:	4b22      	ldr	r3, [pc, #136]	; (80074c0 <HAL_ADC_ConfigChannel+0x234>)
 8007438:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a21      	ldr	r2, [pc, #132]	; (80074c4 <HAL_ADC_ConfigChannel+0x238>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d109      	bne.n	8007458 <HAL_ADC_ConfigChannel+0x1cc>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b12      	cmp	r3, #18
 800744a:	d105      	bne.n	8007458 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a19      	ldr	r2, [pc, #100]	; (80074c4 <HAL_ADC_ConfigChannel+0x238>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d123      	bne.n	80074aa <HAL_ADC_ConfigChannel+0x21e>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b10      	cmp	r3, #16
 8007468:	d003      	beq.n	8007472 <HAL_ADC_ConfigChannel+0x1e6>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b11      	cmp	r3, #17
 8007470:	d11b      	bne.n	80074aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b10      	cmp	r3, #16
 8007484:	d111      	bne.n	80074aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007486:	4b10      	ldr	r3, [pc, #64]	; (80074c8 <HAL_ADC_ConfigChannel+0x23c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a10      	ldr	r2, [pc, #64]	; (80074cc <HAL_ADC_ConfigChannel+0x240>)
 800748c:	fba2 2303 	umull	r2, r3, r2, r3
 8007490:	0c9a      	lsrs	r2, r3, #18
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800749c:	e002      	b.n	80074a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1f9      	bne.n	800749e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	40012300 	.word	0x40012300
 80074c4:	40012000 	.word	0x40012000
 80074c8:	20000444 	.word	0x20000444
 80074cc:	431bde83 	.word	0x431bde83

080074d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80074d8:	4b79      	ldr	r3, [pc, #484]	; (80076c0 <ADC_Init+0x1f0>)
 80074da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	431a      	orrs	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6859      	ldr	r1, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	021a      	lsls	r2, r3, #8
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007528:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6859      	ldr	r1, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689a      	ldr	r2, [r3, #8]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800754a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6899      	ldr	r1, [r3, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	4a58      	ldr	r2, [pc, #352]	; (80076c4 <ADC_Init+0x1f4>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d022      	beq.n	80075ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007576:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6899      	ldr	r1, [r3, #8]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6899      	ldr	r1, [r3, #8]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	609a      	str	r2, [r3, #8]
 80075ac:	e00f      	b.n	80075ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80075cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0202 	bic.w	r2, r2, #2
 80075dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6899      	ldr	r1, [r3, #8]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	7e1b      	ldrb	r3, [r3, #24]
 80075e8:	005a      	lsls	r2, r3, #1
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01b      	beq.n	8007634 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800760a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800761a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6859      	ldr	r1, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	3b01      	subs	r3, #1
 8007628:	035a      	lsls	r2, r3, #13
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	e007      	b.n	8007644 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007642:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007652:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	3b01      	subs	r3, #1
 8007660:	051a      	lsls	r2, r3, #20
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6899      	ldr	r1, [r3, #8]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007686:	025a      	lsls	r2, r3, #9
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800769e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6899      	ldr	r1, [r3, #8]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	029a      	lsls	r2, r3, #10
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	609a      	str	r2, [r3, #8]
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	40012300 	.word	0x40012300
 80076c4:	0f000001 	.word	0x0f000001

080076c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d13c      	bne.n	800775c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d12b      	bne.n	8007754 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007700:	2b00      	cmp	r3, #0
 8007702:	d127      	bne.n	8007754 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800770e:	2b00      	cmp	r3, #0
 8007710:	d006      	beq.n	8007720 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800771c:	2b00      	cmp	r3, #0
 800771e:	d119      	bne.n	8007754 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0220 	bic.w	r2, r2, #32
 800772e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007734:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d105      	bne.n	8007754 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774c:	f043 0201 	orr.w	r2, r3, #1
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f7ff fd71 	bl	800723c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800775a:	e00e      	b.n	800777a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007760:	f003 0310 	and.w	r3, r3, #16
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fd85 	bl	8007278 <HAL_ADC_ErrorCallback>
}
 800776e:	e004      	b.n	800777a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f7ff fd5d 	bl	8007250 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2240      	movs	r2, #64	; 0x40
 80077b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b6:	f043 0204 	orr.w	r2, r3, #4
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7ff fd5a 	bl	8007278 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077f0:	4b0c      	ldr	r3, [pc, #48]	; (8007824 <__NVIC_SetPriorityGrouping+0x44>)
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80077fc:	4013      	ands	r3, r2
 80077fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800780c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007812:	4a04      	ldr	r2, [pc, #16]	; (8007824 <__NVIC_SetPriorityGrouping+0x44>)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	60d3      	str	r3, [r2, #12]
}
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	e000ed00 	.word	0xe000ed00

08007828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007828:	b480      	push	{r7}
 800782a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <__NVIC_GetPriorityGrouping+0x18>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	0a1b      	lsrs	r3, r3, #8
 8007832:	f003 0307 	and.w	r3, r3, #7
}
 8007836:	4618      	mov	r0, r3
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	e000ed00 	.word	0xe000ed00

08007844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800784e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007852:	2b00      	cmp	r3, #0
 8007854:	db0b      	blt.n	800786e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	f003 021f 	and.w	r2, r3, #31
 800785c:	4907      	ldr	r1, [pc, #28]	; (800787c <__NVIC_EnableIRQ+0x38>)
 800785e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	2001      	movs	r0, #1
 8007866:	fa00 f202 	lsl.w	r2, r0, r2
 800786a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800786e:	bf00      	nop
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	e000e100 	.word	0xe000e100

08007880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	6039      	str	r1, [r7, #0]
 800788a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800788c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007890:	2b00      	cmp	r3, #0
 8007892:	db0a      	blt.n	80078aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	b2da      	uxtb	r2, r3
 8007898:	490c      	ldr	r1, [pc, #48]	; (80078cc <__NVIC_SetPriority+0x4c>)
 800789a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800789e:	0112      	lsls	r2, r2, #4
 80078a0:	b2d2      	uxtb	r2, r2
 80078a2:	440b      	add	r3, r1
 80078a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078a8:	e00a      	b.n	80078c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	4908      	ldr	r1, [pc, #32]	; (80078d0 <__NVIC_SetPriority+0x50>)
 80078b0:	79fb      	ldrb	r3, [r7, #7]
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	3b04      	subs	r3, #4
 80078b8:	0112      	lsls	r2, r2, #4
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	440b      	add	r3, r1
 80078be:	761a      	strb	r2, [r3, #24]
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	e000e100 	.word	0xe000e100
 80078d0:	e000ed00 	.word	0xe000ed00

080078d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b089      	sub	sp, #36	; 0x24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	f1c3 0307 	rsb	r3, r3, #7
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	bf28      	it	cs
 80078f2:	2304      	movcs	r3, #4
 80078f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	3304      	adds	r3, #4
 80078fa:	2b06      	cmp	r3, #6
 80078fc:	d902      	bls.n	8007904 <NVIC_EncodePriority+0x30>
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	3b03      	subs	r3, #3
 8007902:	e000      	b.n	8007906 <NVIC_EncodePriority+0x32>
 8007904:	2300      	movs	r3, #0
 8007906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007908:	f04f 32ff 	mov.w	r2, #4294967295
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	43da      	mvns	r2, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	401a      	ands	r2, r3
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800791c:	f04f 31ff 	mov.w	r1, #4294967295
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	fa01 f303 	lsl.w	r3, r1, r3
 8007926:	43d9      	mvns	r1, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800792c:	4313      	orrs	r3, r2
         );
}
 800792e:	4618      	mov	r0, r3
 8007930:	3724      	adds	r7, #36	; 0x24
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
	...

0800793c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3b01      	subs	r3, #1
 8007948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800794c:	d301      	bcc.n	8007952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800794e:	2301      	movs	r3, #1
 8007950:	e00f      	b.n	8007972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007952:	4a0a      	ldr	r2, [pc, #40]	; (800797c <SysTick_Config+0x40>)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3b01      	subs	r3, #1
 8007958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800795a:	210f      	movs	r1, #15
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	f7ff ff8e 	bl	8007880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007964:	4b05      	ldr	r3, [pc, #20]	; (800797c <SysTick_Config+0x40>)
 8007966:	2200      	movs	r2, #0
 8007968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800796a:	4b04      	ldr	r3, [pc, #16]	; (800797c <SysTick_Config+0x40>)
 800796c:	2207      	movs	r2, #7
 800796e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	e000e010 	.word	0xe000e010

08007980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff ff29 	bl	80077e0 <__NVIC_SetPriorityGrouping>
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007996:	b580      	push	{r7, lr}
 8007998:	b086      	sub	sp, #24
 800799a:	af00      	add	r7, sp, #0
 800799c:	4603      	mov	r3, r0
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	607a      	str	r2, [r7, #4]
 80079a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079a8:	f7ff ff3e 	bl	8007828 <__NVIC_GetPriorityGrouping>
 80079ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	6978      	ldr	r0, [r7, #20]
 80079b4:	f7ff ff8e 	bl	80078d4 <NVIC_EncodePriority>
 80079b8:	4602      	mov	r2, r0
 80079ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079be:	4611      	mov	r1, r2
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff ff5d 	bl	8007880 <__NVIC_SetPriority>
}
 80079c6:	bf00      	nop
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	4603      	mov	r3, r0
 80079d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff ff31 	bl	8007844 <__NVIC_EnableIRQ>
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b082      	sub	sp, #8
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff ffa2 	bl	800793c <SysTick_Config>
 80079f8:	4603      	mov	r3, r0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e014      	b.n	8007a3e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	791b      	ldrb	r3, [r3, #4]
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d105      	bne.n	8007a2a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7fe fcc5 	bl	80063b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	795b      	ldrb	r3, [r3, #5]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d101      	bne.n	8007a6a <HAL_DAC_Start_DMA+0x22>
 8007a66:	2302      	movs	r3, #2
 8007a68:	e0ab      	b.n	8007bc2 <HAL_DAC_Start_DMA+0x17a>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2202      	movs	r2, #2
 8007a74:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d12f      	bne.n	8007adc <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	4a52      	ldr	r2, [pc, #328]	; (8007bcc <HAL_DAC_Start_DMA+0x184>)
 8007a82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	4a51      	ldr	r2, [pc, #324]	; (8007bd0 <HAL_DAC_Start_DMA+0x188>)
 8007a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	4a50      	ldr	r2, [pc, #320]	; (8007bd4 <HAL_DAC_Start_DMA+0x18c>)
 8007a92:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007aa2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	2b08      	cmp	r3, #8
 8007aa8:	d013      	beq.n	8007ad2 <HAL_DAC_Start_DMA+0x8a>
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d845      	bhi.n	8007b3c <HAL_DAC_Start_DMA+0xf4>
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <HAL_DAC_Start_DMA+0x76>
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d005      	beq.n	8007ac8 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8007abc:	e03e      	b.n	8007b3c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	613b      	str	r3, [r7, #16]
        break;
 8007ac6:	e03c      	b.n	8007b42 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	330c      	adds	r3, #12
 8007ace:	613b      	str	r3, [r7, #16]
        break;
 8007ad0:	e037      	b.n	8007b42 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3310      	adds	r3, #16
 8007ad8:	613b      	str	r3, [r7, #16]
        break;
 8007ada:	e032      	b.n	8007b42 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	4a3d      	ldr	r2, [pc, #244]	; (8007bd8 <HAL_DAC_Start_DMA+0x190>)
 8007ae2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	4a3c      	ldr	r2, [pc, #240]	; (8007bdc <HAL_DAC_Start_DMA+0x194>)
 8007aea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	4a3b      	ldr	r2, [pc, #236]	; (8007be0 <HAL_DAC_Start_DMA+0x198>)
 8007af2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	2b08      	cmp	r3, #8
 8007b08:	d013      	beq.n	8007b32 <HAL_DAC_Start_DMA+0xea>
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d817      	bhi.n	8007b40 <HAL_DAC_Start_DMA+0xf8>
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_DAC_Start_DMA+0xd6>
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d005      	beq.n	8007b28 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8007b1c:	e010      	b.n	8007b40 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3314      	adds	r3, #20
 8007b24:	613b      	str	r3, [r7, #16]
        break;
 8007b26:	e00c      	b.n	8007b42 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3318      	adds	r3, #24
 8007b2e:	613b      	str	r3, [r7, #16]
        break;
 8007b30:	e007      	b.n	8007b42 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	331c      	adds	r3, #28
 8007b38:	613b      	str	r3, [r7, #16]
        break;
 8007b3a:	e002      	b.n	8007b42 <HAL_DAC_Start_DMA+0xfa>
        break;
 8007b3c:	bf00      	nop
 8007b3e:	e000      	b.n	8007b42 <HAL_DAC_Start_DMA+0xfa>
        break;
 8007b40:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d111      	bne.n	8007b6c <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6898      	ldr	r0, [r3, #8]
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	f000 f9e5 	bl	8007f30 <HAL_DMA_Start_IT>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]
 8007b6a:	e010      	b.n	8007b8e <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007b7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	68d8      	ldr	r0, [r3, #12]
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	f000 f9d3 	bl	8007f30 <HAL_DMA_Start_IT>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007b94:	7dfb      	ldrb	r3, [r7, #23]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10c      	bne.n	8007bb4 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6819      	ldr	r1, [r3, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f003 0310 	and.w	r3, r3, #16
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	409a      	lsls	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	e005      	b.n	8007bc0 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f043 0204 	orr.w	r2, r3, #4
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	08007cbf 	.word	0x08007cbf
 8007bd0:	08007ce1 	.word	0x08007ce1
 8007bd4:	08007cfd 	.word	0x08007cfd
 8007bd8:	08007d67 	.word	0x08007d67
 8007bdc:	08007d89 	.word	0x08007d89
 8007be0:	08007da5 	.word	0x08007da5

08007be4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	795b      	ldrb	r3, [r3, #5]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_DAC_ConfigChannel+0x18>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e03c      	b.n	8007cb2 <HAL_DAC_ConfigChannel+0x92>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2202      	movs	r2, #2
 8007c42:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f003 0310 	and.w	r3, r3, #16
 8007c52:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007c56:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5a:	43db      	mvns	r3, r3
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f003 0310 	and.w	r3, r3, #16
 8007c94:	22c0      	movs	r2, #192	; 0xc0
 8007c96:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9a:	43da      	mvns	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	400a      	ands	r2, r1
 8007ca2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f7ff ff89 	bl	8007be4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	711a      	strb	r2, [r3, #4]
}
 8007cd8:	bf00      	nop
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7ff ff82 	bl	8007bf8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007cf4:	bf00      	nop
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d08:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f043 0204 	orr.w	r2, r3, #4
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff ff78 	bl	8007c0c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	711a      	strb	r2, [r3, #4]
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b083      	sub	sp, #12
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007d32:	bf00      	nop
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f7ff ffd8 	bl	8007d2a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	711a      	strb	r2, [r3, #4]
}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d94:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7ff ffd1 	bl	8007d3e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007d9c:	bf00      	nop
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f043 0204 	orr.w	r2, r3, #4
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f7ff ffc7 	bl	8007d52 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	711a      	strb	r2, [r3, #4]
}
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007de0:	f7fe ff70 	bl	8006cc4 <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e099      	b.n	8007f24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0201 	bic.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e10:	e00f      	b.n	8007e32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e12:	f7fe ff57 	bl	8006cc4 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	2b05      	cmp	r3, #5
 8007e1e:	d908      	bls.n	8007e32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2203      	movs	r2, #3
 8007e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e078      	b.n	8007f24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e8      	bne.n	8007e12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	4b38      	ldr	r3, [pc, #224]	; (8007f2c <HAL_DMA_Init+0x158>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d107      	bne.n	8007e9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e94:	4313      	orrs	r3, r2
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f023 0307 	bic.w	r3, r3, #7
 8007eb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	d117      	bne.n	8007ef6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00e      	beq.n	8007ef6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fa6f 	bl	80083bc <DMA_CheckFifoParam>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d008      	beq.n	8007ef6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2240      	movs	r2, #64	; 0x40
 8007ee8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e016      	b.n	8007f24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fa26 	bl	8008350 <DMA_CalcBaseAndBitshift>
 8007f04:	4603      	mov	r3, r0
 8007f06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f0c:	223f      	movs	r2, #63	; 0x3f
 8007f0e:	409a      	lsls	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	f010803f 	.word	0xf010803f

08007f30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <HAL_DMA_Start_IT+0x26>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e040      	b.n	8007fd8 <HAL_DMA_Start_IT+0xa8>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d12f      	bne.n	8007fca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 f9b8 	bl	80082f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f88:	223f      	movs	r2, #63	; 0x3f
 8007f8a:	409a      	lsls	r2, r3
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0216 	orr.w	r2, r2, #22
 8007f9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0208 	orr.w	r2, r2, #8
 8007fb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0201 	orr.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	e005      	b.n	8007fd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007fec:	4b8e      	ldr	r3, [pc, #568]	; (8008228 <HAL_DMA_IRQHandler+0x248>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a8e      	ldr	r2, [pc, #568]	; (800822c <HAL_DMA_IRQHandler+0x24c>)
 8007ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff6:	0a9b      	lsrs	r3, r3, #10
 8007ff8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800a:	2208      	movs	r2, #8
 800800c:	409a      	lsls	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4013      	ands	r3, r2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d01a      	beq.n	800804c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d013      	beq.n	800804c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0204 	bic.w	r2, r2, #4
 8008032:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008038:	2208      	movs	r2, #8
 800803a:	409a      	lsls	r2, r3
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008044:	f043 0201 	orr.w	r2, r3, #1
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008050:	2201      	movs	r2, #1
 8008052:	409a      	lsls	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4013      	ands	r3, r2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d012      	beq.n	8008082 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00b      	beq.n	8008082 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800806e:	2201      	movs	r2, #1
 8008070:	409a      	lsls	r2, r3
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807a:	f043 0202 	orr.w	r2, r3, #2
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008086:	2204      	movs	r2, #4
 8008088:	409a      	lsls	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4013      	ands	r3, r2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d012      	beq.n	80080b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a4:	2204      	movs	r2, #4
 80080a6:	409a      	lsls	r2, r3
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b0:	f043 0204 	orr.w	r2, r3, #4
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080bc:	2210      	movs	r2, #16
 80080be:	409a      	lsls	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4013      	ands	r3, r2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d043      	beq.n	8008150 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0308 	and.w	r3, r3, #8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d03c      	beq.n	8008150 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080da:	2210      	movs	r2, #16
 80080dc:	409a      	lsls	r2, r3
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d018      	beq.n	8008122 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d108      	bne.n	8008110 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d024      	beq.n	8008150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
 800810e:	e01f      	b.n	8008150 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01b      	beq.n	8008150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
 8008120:	e016      	b.n	8008150 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	d107      	bne.n	8008140 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0208 	bic.w	r2, r2, #8
 800813e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008154:	2220      	movs	r2, #32
 8008156:	409a      	lsls	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4013      	ands	r3, r2
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 808f 	beq.w	8008280 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0310 	and.w	r3, r3, #16
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 8087 	beq.w	8008280 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008176:	2220      	movs	r2, #32
 8008178:	409a      	lsls	r2, r3
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b05      	cmp	r3, #5
 8008188:	d136      	bne.n	80081f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0216 	bic.w	r2, r2, #22
 8008198:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	695a      	ldr	r2, [r3, #20]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d103      	bne.n	80081ba <HAL_DMA_IRQHandler+0x1da>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f022 0208 	bic.w	r2, r2, #8
 80081c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ce:	223f      	movs	r2, #63	; 0x3f
 80081d0:	409a      	lsls	r2, r3
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d07e      	beq.n	80082ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
        }
        return;
 80081f6:	e079      	b.n	80082ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d01d      	beq.n	8008242 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10d      	bne.n	8008230 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008218:	2b00      	cmp	r3, #0
 800821a:	d031      	beq.n	8008280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	4798      	blx	r3
 8008224:	e02c      	b.n	8008280 <HAL_DMA_IRQHandler+0x2a0>
 8008226:	bf00      	nop
 8008228:	20000444 	.word	0x20000444
 800822c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d023      	beq.n	8008280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	4798      	blx	r3
 8008240:	e01e      	b.n	8008280 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10f      	bne.n	8008270 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0210 	bic.w	r2, r2, #16
 800825e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008284:	2b00      	cmp	r3, #0
 8008286:	d032      	beq.n	80082ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d022      	beq.n	80082da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2205      	movs	r2, #5
 8008298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0201 	bic.w	r2, r2, #1
 80082aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	3301      	adds	r3, #1
 80082b0:	60bb      	str	r3, [r7, #8]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d307      	bcc.n	80082c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1f2      	bne.n	80082ac <HAL_DMA_IRQHandler+0x2cc>
 80082c6:	e000      	b.n	80082ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80082c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
 80082ea:	e000      	b.n	80082ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80082ec:	bf00      	nop
    }
  }
}
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008310:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	2b40      	cmp	r3, #64	; 0x40
 8008320:	d108      	bne.n	8008334 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008332:	e007      	b.n	8008344 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	60da      	str	r2, [r3, #12]
}
 8008344:	bf00      	nop
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	3b10      	subs	r3, #16
 8008360:	4a14      	ldr	r2, [pc, #80]	; (80083b4 <DMA_CalcBaseAndBitshift+0x64>)
 8008362:	fba2 2303 	umull	r2, r3, r2, r3
 8008366:	091b      	lsrs	r3, r3, #4
 8008368:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800836a:	4a13      	ldr	r2, [pc, #76]	; (80083b8 <DMA_CalcBaseAndBitshift+0x68>)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b03      	cmp	r3, #3
 800837c:	d909      	bls.n	8008392 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008386:	f023 0303 	bic.w	r3, r3, #3
 800838a:	1d1a      	adds	r2, r3, #4
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	659a      	str	r2, [r3, #88]	; 0x58
 8008390:	e007      	b.n	80083a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800839a:	f023 0303 	bic.w	r3, r3, #3
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	aaaaaaab 	.word	0xaaaaaaab
 80083b8:	08015060 	.word	0x08015060

080083bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d11f      	bne.n	8008416 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d856      	bhi.n	800848a <DMA_CheckFifoParam+0xce>
 80083dc:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <DMA_CheckFifoParam+0x28>)
 80083de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e2:	bf00      	nop
 80083e4:	080083f5 	.word	0x080083f5
 80083e8:	08008407 	.word	0x08008407
 80083ec:	080083f5 	.word	0x080083f5
 80083f0:	0800848b 	.word	0x0800848b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d046      	beq.n	800848e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008404:	e043      	b.n	800848e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800840e:	d140      	bne.n	8008492 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008414:	e03d      	b.n	8008492 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800841e:	d121      	bne.n	8008464 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2b03      	cmp	r3, #3
 8008424:	d837      	bhi.n	8008496 <DMA_CheckFifoParam+0xda>
 8008426:	a201      	add	r2, pc, #4	; (adr r2, 800842c <DMA_CheckFifoParam+0x70>)
 8008428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842c:	0800843d 	.word	0x0800843d
 8008430:	08008443 	.word	0x08008443
 8008434:	0800843d 	.word	0x0800843d
 8008438:	08008455 	.word	0x08008455
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	73fb      	strb	r3, [r7, #15]
      break;
 8008440:	e030      	b.n	80084a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d025      	beq.n	800849a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008452:	e022      	b.n	800849a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800845c:	d11f      	bne.n	800849e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008462:	e01c      	b.n	800849e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b02      	cmp	r3, #2
 8008468:	d903      	bls.n	8008472 <DMA_CheckFifoParam+0xb6>
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b03      	cmp	r3, #3
 800846e:	d003      	beq.n	8008478 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008470:	e018      	b.n	80084a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	73fb      	strb	r3, [r7, #15]
      break;
 8008476:	e015      	b.n	80084a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00e      	beq.n	80084a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	73fb      	strb	r3, [r7, #15]
      break;
 8008488:	e00b      	b.n	80084a2 <DMA_CheckFifoParam+0xe6>
      break;
 800848a:	bf00      	nop
 800848c:	e00a      	b.n	80084a4 <DMA_CheckFifoParam+0xe8>
      break;
 800848e:	bf00      	nop
 8008490:	e008      	b.n	80084a4 <DMA_CheckFifoParam+0xe8>
      break;
 8008492:	bf00      	nop
 8008494:	e006      	b.n	80084a4 <DMA_CheckFifoParam+0xe8>
      break;
 8008496:	bf00      	nop
 8008498:	e004      	b.n	80084a4 <DMA_CheckFifoParam+0xe8>
      break;
 800849a:	bf00      	nop
 800849c:	e002      	b.n	80084a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800849e:	bf00      	nop
 80084a0:	e000      	b.n	80084a4 <DMA_CheckFifoParam+0xe8>
      break;
 80084a2:	bf00      	nop
    }
  } 
  
  return status; 
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop

080084b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b089      	sub	sp, #36	; 0x24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80084be:	2300      	movs	r3, #0
 80084c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084ca:	2300      	movs	r3, #0
 80084cc:	61fb      	str	r3, [r7, #28]
 80084ce:	e16b      	b.n	80087a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084d0:	2201      	movs	r2, #1
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	fa02 f303 	lsl.w	r3, r2, r3
 80084d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	4013      	ands	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	f040 815a 	bne.w	80087a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f003 0303 	and.w	r3, r3, #3
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d005      	beq.n	8008506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008502:	2b02      	cmp	r3, #2
 8008504:	d130      	bne.n	8008568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	2203      	movs	r2, #3
 8008512:	fa02 f303 	lsl.w	r3, r2, r3
 8008516:	43db      	mvns	r3, r3
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	4013      	ands	r3, r2
 800851c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68da      	ldr	r2, [r3, #12]
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	005b      	lsls	r3, r3, #1
 8008526:	fa02 f303 	lsl.w	r3, r2, r3
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	4313      	orrs	r3, r2
 800852e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800853c:	2201      	movs	r2, #1
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	fa02 f303 	lsl.w	r3, r2, r3
 8008544:	43db      	mvns	r3, r3
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	4013      	ands	r3, r2
 800854a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	091b      	lsrs	r3, r3, #4
 8008552:	f003 0201 	and.w	r2, r3, #1
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	fa02 f303 	lsl.w	r3, r2, r3
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	4313      	orrs	r3, r2
 8008560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f003 0303 	and.w	r3, r3, #3
 8008570:	2b03      	cmp	r3, #3
 8008572:	d017      	beq.n	80085a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	2203      	movs	r2, #3
 8008580:	fa02 f303 	lsl.w	r3, r2, r3
 8008584:	43db      	mvns	r3, r3
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	4013      	ands	r3, r2
 800858a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	fa02 f303 	lsl.w	r3, r2, r3
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	4313      	orrs	r3, r2
 800859c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f003 0303 	and.w	r3, r3, #3
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d123      	bne.n	80085f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	08da      	lsrs	r2, r3, #3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3208      	adds	r2, #8
 80085b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	220f      	movs	r2, #15
 80085c8:	fa02 f303 	lsl.w	r3, r2, r3
 80085cc:	43db      	mvns	r3, r3
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	4013      	ands	r3, r2
 80085d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	691a      	ldr	r2, [r3, #16]
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	f003 0307 	and.w	r3, r3, #7
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	08da      	lsrs	r2, r3, #3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	3208      	adds	r2, #8
 80085f2:	69b9      	ldr	r1, [r7, #24]
 80085f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	2203      	movs	r2, #3
 8008604:	fa02 f303 	lsl.w	r3, r2, r3
 8008608:	43db      	mvns	r3, r3
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	4013      	ands	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f003 0203 	and.w	r2, r3, #3
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	fa02 f303 	lsl.w	r3, r2, r3
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	4313      	orrs	r3, r2
 8008624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 80b4 	beq.w	80087a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800863a:	2300      	movs	r3, #0
 800863c:	60fb      	str	r3, [r7, #12]
 800863e:	4b60      	ldr	r3, [pc, #384]	; (80087c0 <HAL_GPIO_Init+0x30c>)
 8008640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008642:	4a5f      	ldr	r2, [pc, #380]	; (80087c0 <HAL_GPIO_Init+0x30c>)
 8008644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008648:	6453      	str	r3, [r2, #68]	; 0x44
 800864a:	4b5d      	ldr	r3, [pc, #372]	; (80087c0 <HAL_GPIO_Init+0x30c>)
 800864c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008656:	4a5b      	ldr	r2, [pc, #364]	; (80087c4 <HAL_GPIO_Init+0x310>)
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	089b      	lsrs	r3, r3, #2
 800865c:	3302      	adds	r3, #2
 800865e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	220f      	movs	r2, #15
 800866e:	fa02 f303 	lsl.w	r3, r2, r3
 8008672:	43db      	mvns	r3, r3
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	4013      	ands	r3, r2
 8008678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a52      	ldr	r2, [pc, #328]	; (80087c8 <HAL_GPIO_Init+0x314>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d02b      	beq.n	80086da <HAL_GPIO_Init+0x226>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a51      	ldr	r2, [pc, #324]	; (80087cc <HAL_GPIO_Init+0x318>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d025      	beq.n	80086d6 <HAL_GPIO_Init+0x222>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a50      	ldr	r2, [pc, #320]	; (80087d0 <HAL_GPIO_Init+0x31c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d01f      	beq.n	80086d2 <HAL_GPIO_Init+0x21e>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a4f      	ldr	r2, [pc, #316]	; (80087d4 <HAL_GPIO_Init+0x320>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d019      	beq.n	80086ce <HAL_GPIO_Init+0x21a>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a4e      	ldr	r2, [pc, #312]	; (80087d8 <HAL_GPIO_Init+0x324>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d013      	beq.n	80086ca <HAL_GPIO_Init+0x216>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a4d      	ldr	r2, [pc, #308]	; (80087dc <HAL_GPIO_Init+0x328>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00d      	beq.n	80086c6 <HAL_GPIO_Init+0x212>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a4c      	ldr	r2, [pc, #304]	; (80087e0 <HAL_GPIO_Init+0x32c>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d007      	beq.n	80086c2 <HAL_GPIO_Init+0x20e>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a4b      	ldr	r2, [pc, #300]	; (80087e4 <HAL_GPIO_Init+0x330>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d101      	bne.n	80086be <HAL_GPIO_Init+0x20a>
 80086ba:	2307      	movs	r3, #7
 80086bc:	e00e      	b.n	80086dc <HAL_GPIO_Init+0x228>
 80086be:	2308      	movs	r3, #8
 80086c0:	e00c      	b.n	80086dc <HAL_GPIO_Init+0x228>
 80086c2:	2306      	movs	r3, #6
 80086c4:	e00a      	b.n	80086dc <HAL_GPIO_Init+0x228>
 80086c6:	2305      	movs	r3, #5
 80086c8:	e008      	b.n	80086dc <HAL_GPIO_Init+0x228>
 80086ca:	2304      	movs	r3, #4
 80086cc:	e006      	b.n	80086dc <HAL_GPIO_Init+0x228>
 80086ce:	2303      	movs	r3, #3
 80086d0:	e004      	b.n	80086dc <HAL_GPIO_Init+0x228>
 80086d2:	2302      	movs	r3, #2
 80086d4:	e002      	b.n	80086dc <HAL_GPIO_Init+0x228>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <HAL_GPIO_Init+0x228>
 80086da:	2300      	movs	r3, #0
 80086dc:	69fa      	ldr	r2, [r7, #28]
 80086de:	f002 0203 	and.w	r2, r2, #3
 80086e2:	0092      	lsls	r2, r2, #2
 80086e4:	4093      	lsls	r3, r2
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086ec:	4935      	ldr	r1, [pc, #212]	; (80087c4 <HAL_GPIO_Init+0x310>)
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	089b      	lsrs	r3, r3, #2
 80086f2:	3302      	adds	r3, #2
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80086fa:	4b3b      	ldr	r3, [pc, #236]	; (80087e8 <HAL_GPIO_Init+0x334>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	43db      	mvns	r3, r3
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	4013      	ands	r3, r2
 8008708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	4313      	orrs	r3, r2
 800871c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800871e:	4a32      	ldr	r2, [pc, #200]	; (80087e8 <HAL_GPIO_Init+0x334>)
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008724:	4b30      	ldr	r3, [pc, #192]	; (80087e8 <HAL_GPIO_Init+0x334>)
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	43db      	mvns	r3, r3
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	4013      	ands	r3, r2
 8008732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d003      	beq.n	8008748 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	4313      	orrs	r3, r2
 8008746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008748:	4a27      	ldr	r2, [pc, #156]	; (80087e8 <HAL_GPIO_Init+0x334>)
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800874e:	4b26      	ldr	r3, [pc, #152]	; (80087e8 <HAL_GPIO_Init+0x334>)
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	43db      	mvns	r3, r3
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	4013      	ands	r3, r2
 800875c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d003      	beq.n	8008772 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008772:	4a1d      	ldr	r2, [pc, #116]	; (80087e8 <HAL_GPIO_Init+0x334>)
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008778:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <HAL_GPIO_Init+0x334>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	43db      	mvns	r3, r3
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	4013      	ands	r3, r2
 8008786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d003      	beq.n	800879c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008794:	69ba      	ldr	r2, [r7, #24]
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800879c:	4a12      	ldr	r2, [pc, #72]	; (80087e8 <HAL_GPIO_Init+0x334>)
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	3301      	adds	r3, #1
 80087a6:	61fb      	str	r3, [r7, #28]
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	2b0f      	cmp	r3, #15
 80087ac:	f67f ae90 	bls.w	80084d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	3724      	adds	r7, #36	; 0x24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	40023800 	.word	0x40023800
 80087c4:	40013800 	.word	0x40013800
 80087c8:	40020000 	.word	0x40020000
 80087cc:	40020400 	.word	0x40020400
 80087d0:	40020800 	.word	0x40020800
 80087d4:	40020c00 	.word	0x40020c00
 80087d8:	40021000 	.word	0x40021000
 80087dc:	40021400 	.word	0x40021400
 80087e0:	40021800 	.word	0x40021800
 80087e4:	40021c00 	.word	0x40021c00
 80087e8:	40013c00 	.word	0x40013c00

080087ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	887b      	ldrh	r3, [r7, #2]
 80087fe:	4013      	ands	r3, r2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008804:	2301      	movs	r3, #1
 8008806:	73fb      	strb	r3, [r7, #15]
 8008808:	e001      	b.n	800880e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	807b      	strh	r3, [r7, #2]
 8008828:	4613      	mov	r3, r2
 800882a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800882c:	787b      	ldrb	r3, [r7, #1]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008832:	887a      	ldrh	r2, [r7, #2]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008838:	e003      	b.n	8008842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800883a:	887b      	ldrh	r3, [r7, #2]
 800883c:	041a      	lsls	r2, r3, #16
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	619a      	str	r2, [r3, #24]
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800884e:	b480      	push	{r7}
 8008850:	b085      	sub	sp, #20
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	460b      	mov	r3, r1
 8008858:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008860:	887a      	ldrh	r2, [r7, #2]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4013      	ands	r3, r2
 8008866:	041a      	lsls	r2, r3, #16
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	43d9      	mvns	r1, r3
 800886c:	887b      	ldrh	r3, [r7, #2]
 800886e:	400b      	ands	r3, r1
 8008870:	431a      	orrs	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	619a      	str	r2, [r3, #24]
}
 8008876:	bf00      	nop
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
	...

08008884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e12b      	b.n	8008aee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d106      	bne.n	80088b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7fd fdfa 	bl	80064a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2224      	movs	r2, #36	; 0x24
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0201 	bic.w	r2, r2, #1
 80088c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80088e8:	f002 f870 	bl	800a9cc <HAL_RCC_GetPCLK1Freq>
 80088ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	4a81      	ldr	r2, [pc, #516]	; (8008af8 <HAL_I2C_Init+0x274>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d807      	bhi.n	8008908 <HAL_I2C_Init+0x84>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4a80      	ldr	r2, [pc, #512]	; (8008afc <HAL_I2C_Init+0x278>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	bf94      	ite	ls
 8008900:	2301      	movls	r3, #1
 8008902:	2300      	movhi	r3, #0
 8008904:	b2db      	uxtb	r3, r3
 8008906:	e006      	b.n	8008916 <HAL_I2C_Init+0x92>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4a7d      	ldr	r2, [pc, #500]	; (8008b00 <HAL_I2C_Init+0x27c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	bf94      	ite	ls
 8008910:	2301      	movls	r3, #1
 8008912:	2300      	movhi	r3, #0
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e0e7      	b.n	8008aee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4a78      	ldr	r2, [pc, #480]	; (8008b04 <HAL_I2C_Init+0x280>)
 8008922:	fba2 2303 	umull	r2, r3, r2, r3
 8008926:	0c9b      	lsrs	r3, r3, #18
 8008928:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	430a      	orrs	r2, r1
 800893c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	4a6a      	ldr	r2, [pc, #424]	; (8008af8 <HAL_I2C_Init+0x274>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d802      	bhi.n	8008958 <HAL_I2C_Init+0xd4>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	3301      	adds	r3, #1
 8008956:	e009      	b.n	800896c <HAL_I2C_Init+0xe8>
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800895e:	fb02 f303 	mul.w	r3, r2, r3
 8008962:	4a69      	ldr	r2, [pc, #420]	; (8008b08 <HAL_I2C_Init+0x284>)
 8008964:	fba2 2303 	umull	r2, r3, r2, r3
 8008968:	099b      	lsrs	r3, r3, #6
 800896a:	3301      	adds	r3, #1
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	6812      	ldr	r2, [r2, #0]
 8008970:	430b      	orrs	r3, r1
 8008972:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800897e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	495c      	ldr	r1, [pc, #368]	; (8008af8 <HAL_I2C_Init+0x274>)
 8008988:	428b      	cmp	r3, r1
 800898a:	d819      	bhi.n	80089c0 <HAL_I2C_Init+0x13c>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	1e59      	subs	r1, r3, #1
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	fbb1 f3f3 	udiv	r3, r1, r3
 800899a:	1c59      	adds	r1, r3, #1
 800899c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80089a0:	400b      	ands	r3, r1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00a      	beq.n	80089bc <HAL_I2C_Init+0x138>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	1e59      	subs	r1, r3, #1
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80089b4:	3301      	adds	r3, #1
 80089b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089ba:	e051      	b.n	8008a60 <HAL_I2C_Init+0x1dc>
 80089bc:	2304      	movs	r3, #4
 80089be:	e04f      	b.n	8008a60 <HAL_I2C_Init+0x1dc>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d111      	bne.n	80089ec <HAL_I2C_Init+0x168>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	1e58      	subs	r0, r3, #1
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6859      	ldr	r1, [r3, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	440b      	add	r3, r1
 80089d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80089da:	3301      	adds	r3, #1
 80089dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	bf0c      	ite	eq
 80089e4:	2301      	moveq	r3, #1
 80089e6:	2300      	movne	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	e012      	b.n	8008a12 <HAL_I2C_Init+0x18e>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	1e58      	subs	r0, r3, #1
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6859      	ldr	r1, [r3, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	440b      	add	r3, r1
 80089fa:	0099      	lsls	r1, r3, #2
 80089fc:	440b      	add	r3, r1
 80089fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a02:	3301      	adds	r3, #1
 8008a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	bf0c      	ite	eq
 8008a0c:	2301      	moveq	r3, #1
 8008a0e:	2300      	movne	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <HAL_I2C_Init+0x196>
 8008a16:	2301      	movs	r3, #1
 8008a18:	e022      	b.n	8008a60 <HAL_I2C_Init+0x1dc>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10e      	bne.n	8008a40 <HAL_I2C_Init+0x1bc>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	1e58      	subs	r0, r3, #1
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6859      	ldr	r1, [r3, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	440b      	add	r3, r1
 8008a30:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a34:	3301      	adds	r3, #1
 8008a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a3e:	e00f      	b.n	8008a60 <HAL_I2C_Init+0x1dc>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	1e58      	subs	r0, r3, #1
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6859      	ldr	r1, [r3, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	440b      	add	r3, r1
 8008a4e:	0099      	lsls	r1, r3, #2
 8008a50:	440b      	add	r3, r1
 8008a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a56:	3301      	adds	r3, #1
 8008a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	6809      	ldr	r1, [r1, #0]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	69da      	ldr	r2, [r3, #28]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008a8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6911      	ldr	r1, [r2, #16]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	68d2      	ldr	r2, [r2, #12]
 8008a9a:	4311      	orrs	r1, r2
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	6812      	ldr	r2, [r2, #0]
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	695a      	ldr	r2, [r3, #20]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f042 0201 	orr.w	r2, r2, #1
 8008ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	000186a0 	.word	0x000186a0
 8008afc:	001e847f 	.word	0x001e847f
 8008b00:	003d08ff 	.word	0x003d08ff
 8008b04:	431bde83 	.word	0x431bde83
 8008b08:	10624dd3 	.word	0x10624dd3

08008b0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	607a      	str	r2, [r7, #4]
 8008b16:	461a      	mov	r2, r3
 8008b18:	460b      	mov	r3, r1
 8008b1a:	817b      	strh	r3, [r7, #10]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b20:	f7fe f8d0 	bl	8006cc4 <HAL_GetTick>
 8008b24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	f040 80e0 	bne.w	8008cf4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	2319      	movs	r3, #25
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	4970      	ldr	r1, [pc, #448]	; (8008d00 <HAL_I2C_Master_Transmit+0x1f4>)
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f001 f8f6 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	e0d3      	b.n	8008cf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d101      	bne.n	8008b5c <HAL_I2C_Master_Transmit+0x50>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e0cc      	b.n	8008cf6 <HAL_I2C_Master_Transmit+0x1ea>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d007      	beq.n	8008b82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f042 0201 	orr.w	r2, r2, #1
 8008b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2221      	movs	r2, #33	; 0x21
 8008b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2210      	movs	r2, #16
 8008b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	893a      	ldrh	r2, [r7, #8]
 8008bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4a50      	ldr	r2, [pc, #320]	; (8008d04 <HAL_I2C_Master_Transmit+0x1f8>)
 8008bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008bc4:	8979      	ldrh	r1, [r7, #10]
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	6a3a      	ldr	r2, [r7, #32]
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 fde2 	bl	8009794 <I2C_MasterRequestWrite>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e08d      	b.n	8008cf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bda:	2300      	movs	r3, #0
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	613b      	str	r3, [r7, #16]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	613b      	str	r3, [r7, #16]
 8008bee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008bf0:	e066      	b.n	8008cc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	6a39      	ldr	r1, [r7, #32]
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f001 f970 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00d      	beq.n	8008c1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d107      	bne.n	8008c1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e06b      	b.n	8008cf6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c22:	781a      	ldrb	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d11b      	bne.n	8008c94 <HAL_I2C_Master_Transmit+0x188>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d017      	beq.n	8008c94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	781a      	ldrb	r2, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	3b01      	subs	r3, #1
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	6a39      	ldr	r1, [r7, #32]
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f001 f960 	bl	8009f5e <I2C_WaitOnBTFFlagUntilTimeout>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00d      	beq.n	8008cc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	d107      	bne.n	8008cbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e01a      	b.n	8008cf6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d194      	bne.n	8008bf2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	e000      	b.n	8008cf6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008cf4:	2302      	movs	r3, #2
  }
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	00100002 	.word	0x00100002
 8008d04:	ffff0000 	.word	0xffff0000

08008d08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08c      	sub	sp, #48	; 0x30
 8008d0c:	af02      	add	r7, sp, #8
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	607a      	str	r2, [r7, #4]
 8008d12:	461a      	mov	r2, r3
 8008d14:	460b      	mov	r3, r1
 8008d16:	817b      	strh	r3, [r7, #10]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d1c:	f7fd ffd2 	bl	8006cc4 <HAL_GetTick>
 8008d20:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	f040 820b 	bne.w	8009146 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	2319      	movs	r3, #25
 8008d36:	2201      	movs	r2, #1
 8008d38:	497c      	ldr	r1, [pc, #496]	; (8008f2c <HAL_I2C_Master_Receive+0x224>)
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 fff8 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008d46:	2302      	movs	r3, #2
 8008d48:	e1fe      	b.n	8009148 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d101      	bne.n	8008d58 <HAL_I2C_Master_Receive+0x50>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e1f7      	b.n	8009148 <HAL_I2C_Master_Receive+0x440>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d007      	beq.n	8008d7e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f042 0201 	orr.w	r2, r2, #1
 8008d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2222      	movs	r2, #34	; 0x22
 8008d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2210      	movs	r2, #16
 8008d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	893a      	ldrh	r2, [r7, #8]
 8008dae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4a5c      	ldr	r2, [pc, #368]	; (8008f30 <HAL_I2C_Master_Receive+0x228>)
 8008dbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008dc0:	8979      	ldrh	r1, [r7, #10]
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 fd66 	bl	8009898 <I2C_MasterRequestRead>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e1b8      	b.n	8009148 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d113      	bne.n	8008e06 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dde:	2300      	movs	r3, #0
 8008de0:	623b      	str	r3, [r7, #32]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	623b      	str	r3, [r7, #32]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	623b      	str	r3, [r7, #32]
 8008df2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	e18c      	b.n	8009120 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d11b      	bne.n	8008e46 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e1e:	2300      	movs	r3, #0
 8008e20:	61fb      	str	r3, [r7, #28]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	695b      	ldr	r3, [r3, #20]
 8008e28:	61fb      	str	r3, [r7, #28]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	61fb      	str	r3, [r7, #28]
 8008e32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	e16c      	b.n	8009120 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d11b      	bne.n	8008e86 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e6e:	2300      	movs	r3, #0
 8008e70:	61bb      	str	r3, [r7, #24]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	61bb      	str	r3, [r7, #24]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	61bb      	str	r3, [r7, #24]
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	e14c      	b.n	8009120 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e96:	2300      	movs	r3, #0
 8008e98:	617b      	str	r3, [r7, #20]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	617b      	str	r3, [r7, #20]
 8008eaa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008eac:	e138      	b.n	8009120 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	f200 80f1 	bhi.w	800909a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d123      	bne.n	8008f08 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f001 f88b 	bl	8009fe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e139      	b.n	8009148 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	691a      	ldr	r2, [r3, #16]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	b2d2      	uxtb	r2, r2
 8008ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	3b01      	subs	r3, #1
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f06:	e10b      	b.n	8009120 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d14e      	bne.n	8008fae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	2200      	movs	r2, #0
 8008f18:	4906      	ldr	r1, [pc, #24]	; (8008f34 <HAL_I2C_Master_Receive+0x22c>)
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 ff08 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d008      	beq.n	8008f38 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e10e      	b.n	8009148 <HAL_I2C_Master_Receive+0x440>
 8008f2a:	bf00      	nop
 8008f2c:	00100002 	.word	0x00100002
 8008f30:	ffff0000 	.word	0xffff0000
 8008f34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	691a      	ldr	r2, [r3, #16]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f52:	b2d2      	uxtb	r2, r2
 8008f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	3b01      	subs	r3, #1
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	691a      	ldr	r2, [r3, #16]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	b2d2      	uxtb	r2, r2
 8008f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f96:	3b01      	subs	r3, #1
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fac:	e0b8      	b.n	8009120 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	4966      	ldr	r1, [pc, #408]	; (8009150 <HAL_I2C_Master_Receive+0x448>)
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 feb9 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e0bf      	b.n	8009148 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	691a      	ldr	r2, [r3, #16]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe2:	b2d2      	uxtb	r2, r2
 8008fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009000:	b29b      	uxth	r3, r3
 8009002:	3b01      	subs	r3, #1
 8009004:	b29a      	uxth	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	2200      	movs	r2, #0
 8009012:	494f      	ldr	r1, [pc, #316]	; (8009150 <HAL_I2C_Master_Receive+0x448>)
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 fe8b 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e091      	b.n	8009148 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	691a      	ldr	r2, [r3, #16]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	b2d2      	uxtb	r2, r2
 8009040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009050:	3b01      	subs	r3, #1
 8009052:	b29a      	uxth	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800905c:	b29b      	uxth	r3, r3
 800905e:	3b01      	subs	r3, #1
 8009060:	b29a      	uxth	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	691a      	ldr	r2, [r3, #16]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	b2d2      	uxtb	r2, r2
 8009072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009082:	3b01      	subs	r3, #1
 8009084:	b29a      	uxth	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800908e:	b29b      	uxth	r3, r3
 8009090:	3b01      	subs	r3, #1
 8009092:	b29a      	uxth	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009098:	e042      	b.n	8009120 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800909a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800909c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 ff9e 	bl	8009fe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e04c      	b.n	8009148 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	691a      	ldr	r2, [r3, #16]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b8:	b2d2      	uxtb	r2, r2
 80090ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ca:	3b01      	subs	r3, #1
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	f003 0304 	and.w	r3, r3, #4
 80090ea:	2b04      	cmp	r3, #4
 80090ec:	d118      	bne.n	8009120 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	691a      	ldr	r2, [r3, #16]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f8:	b2d2      	uxtb	r2, r2
 80090fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910a:	3b01      	subs	r3, #1
 800910c:	b29a      	uxth	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009116:	b29b      	uxth	r3, r3
 8009118:	3b01      	subs	r3, #1
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009124:	2b00      	cmp	r3, #0
 8009126:	f47f aec2 	bne.w	8008eae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2220      	movs	r2, #32
 800912e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	e000      	b.n	8009148 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009146:	2302      	movs	r3, #2
  }
}
 8009148:	4618      	mov	r0, r3
 800914a:	3728      	adds	r7, #40	; 0x28
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	00010004 	.word	0x00010004

08009154 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af02      	add	r7, sp, #8
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	4608      	mov	r0, r1
 800915e:	4611      	mov	r1, r2
 8009160:	461a      	mov	r2, r3
 8009162:	4603      	mov	r3, r0
 8009164:	817b      	strh	r3, [r7, #10]
 8009166:	460b      	mov	r3, r1
 8009168:	813b      	strh	r3, [r7, #8]
 800916a:	4613      	mov	r3, r2
 800916c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800916e:	f7fd fda9 	bl	8006cc4 <HAL_GetTick>
 8009172:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b20      	cmp	r3, #32
 800917e:	f040 80d9 	bne.w	8009334 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	2319      	movs	r3, #25
 8009188:	2201      	movs	r2, #1
 800918a:	496d      	ldr	r1, [pc, #436]	; (8009340 <HAL_I2C_Mem_Write+0x1ec>)
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 fdcf 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009198:	2302      	movs	r3, #2
 800919a:	e0cc      	b.n	8009336 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d101      	bne.n	80091aa <HAL_I2C_Mem_Write+0x56>
 80091a6:	2302      	movs	r3, #2
 80091a8:	e0c5      	b.n	8009336 <HAL_I2C_Mem_Write+0x1e2>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d007      	beq.n	80091d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0201 	orr.w	r2, r2, #1
 80091ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2221      	movs	r2, #33	; 0x21
 80091e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2240      	movs	r2, #64	; 0x40
 80091ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6a3a      	ldr	r2, [r7, #32]
 80091fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009206:	b29a      	uxth	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	4a4d      	ldr	r2, [pc, #308]	; (8009344 <HAL_I2C_Mem_Write+0x1f0>)
 8009210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009212:	88f8      	ldrh	r0, [r7, #6]
 8009214:	893a      	ldrh	r2, [r7, #8]
 8009216:	8979      	ldrh	r1, [r7, #10]
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	4603      	mov	r3, r0
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 fc06 	bl	8009a34 <I2C_RequestMemoryWrite>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d052      	beq.n	80092d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e081      	b.n	8009336 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f000 fe50 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00d      	beq.n	800925e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	2b04      	cmp	r3, #4
 8009248:	d107      	bne.n	800925a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009258:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e06b      	b.n	8009336 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	781a      	ldrb	r2, [r3, #0]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009278:	3b01      	subs	r3, #1
 800927a:	b29a      	uxth	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009284:	b29b      	uxth	r3, r3
 8009286:	3b01      	subs	r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	f003 0304 	and.w	r3, r3, #4
 8009298:	2b04      	cmp	r3, #4
 800929a:	d11b      	bne.n	80092d4 <HAL_I2C_Mem_Write+0x180>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d017      	beq.n	80092d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	1c5a      	adds	r2, r3, #1
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092be:	3b01      	subs	r3, #1
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	3b01      	subs	r3, #1
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1aa      	bne.n	8009232 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 fe3c 	bl	8009f5e <I2C_WaitOnBTFFlagUntilTimeout>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00d      	beq.n	8009308 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	d107      	bne.n	8009304 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009302:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e016      	b.n	8009336 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2220      	movs	r2, #32
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	e000      	b.n	8009336 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009334:	2302      	movs	r3, #2
  }
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	00100002 	.word	0x00100002
 8009344:	ffff0000 	.word	0xffff0000

08009348 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08c      	sub	sp, #48	; 0x30
 800934c:	af02      	add	r7, sp, #8
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	4608      	mov	r0, r1
 8009352:	4611      	mov	r1, r2
 8009354:	461a      	mov	r2, r3
 8009356:	4603      	mov	r3, r0
 8009358:	817b      	strh	r3, [r7, #10]
 800935a:	460b      	mov	r3, r1
 800935c:	813b      	strh	r3, [r7, #8]
 800935e:	4613      	mov	r3, r2
 8009360:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009362:	f7fd fcaf 	bl	8006cc4 <HAL_GetTick>
 8009366:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b20      	cmp	r3, #32
 8009372:	f040 8208 	bne.w	8009786 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	2319      	movs	r3, #25
 800937c:	2201      	movs	r2, #1
 800937e:	497b      	ldr	r1, [pc, #492]	; (800956c <HAL_I2C_Mem_Read+0x224>)
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 fcd5 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800938c:	2302      	movs	r3, #2
 800938e:	e1fb      	b.n	8009788 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009396:	2b01      	cmp	r3, #1
 8009398:	d101      	bne.n	800939e <HAL_I2C_Mem_Read+0x56>
 800939a:	2302      	movs	r3, #2
 800939c:	e1f4      	b.n	8009788 <HAL_I2C_Mem_Read+0x440>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d007      	beq.n	80093c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0201 	orr.w	r2, r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2222      	movs	r2, #34	; 0x22
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2240      	movs	r2, #64	; 0x40
 80093e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80093f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4a5b      	ldr	r2, [pc, #364]	; (8009570 <HAL_I2C_Mem_Read+0x228>)
 8009404:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009406:	88f8      	ldrh	r0, [r7, #6]
 8009408:	893a      	ldrh	r2, [r7, #8]
 800940a:	8979      	ldrh	r1, [r7, #10]
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	9301      	str	r3, [sp, #4]
 8009410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	4603      	mov	r3, r0
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f000 fba2 	bl	8009b60 <I2C_RequestMemoryRead>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e1b0      	b.n	8009788 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942a:	2b00      	cmp	r3, #0
 800942c:	d113      	bne.n	8009456 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800942e:	2300      	movs	r3, #0
 8009430:	623b      	str	r3, [r7, #32]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	623b      	str	r3, [r7, #32]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	623b      	str	r3, [r7, #32]
 8009442:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	e184      	b.n	8009760 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800945a:	2b01      	cmp	r3, #1
 800945c:	d11b      	bne.n	8009496 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800946c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800946e:	2300      	movs	r3, #0
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	61fb      	str	r3, [r7, #28]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	61fb      	str	r3, [r7, #28]
 8009482:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	e164      	b.n	8009760 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949a:	2b02      	cmp	r3, #2
 800949c:	d11b      	bne.n	80094d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094be:	2300      	movs	r3, #0
 80094c0:	61bb      	str	r3, [r7, #24]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	61bb      	str	r3, [r7, #24]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	61bb      	str	r3, [r7, #24]
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	e144      	b.n	8009760 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094d6:	2300      	movs	r3, #0
 80094d8:	617b      	str	r3, [r7, #20]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	617b      	str	r3, [r7, #20]
 80094ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80094ec:	e138      	b.n	8009760 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	f200 80f1 	bhi.w	80096da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d123      	bne.n	8009548 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fd6b 	bl	8009fe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e139      	b.n	8009788 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691a      	ldr	r2, [r3, #16]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	b2d2      	uxtb	r2, r2
 8009520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009530:	3b01      	subs	r3, #1
 8009532:	b29a      	uxth	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800953c:	b29b      	uxth	r3, r3
 800953e:	3b01      	subs	r3, #1
 8009540:	b29a      	uxth	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009546:	e10b      	b.n	8009760 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954c:	2b02      	cmp	r3, #2
 800954e:	d14e      	bne.n	80095ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009556:	2200      	movs	r2, #0
 8009558:	4906      	ldr	r1, [pc, #24]	; (8009574 <HAL_I2C_Mem_Read+0x22c>)
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fbe8 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d008      	beq.n	8009578 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e10e      	b.n	8009788 <HAL_I2C_Mem_Read+0x440>
 800956a:	bf00      	nop
 800956c:	00100002 	.word	0x00100002
 8009570:	ffff0000 	.word	0xffff0000
 8009574:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	691a      	ldr	r2, [r3, #16]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009592:	b2d2      	uxtb	r2, r2
 8009594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a4:	3b01      	subs	r3, #1
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	3b01      	subs	r3, #1
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	691a      	ldr	r2, [r3, #16]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c4:	b2d2      	uxtb	r2, r2
 80095c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d6:	3b01      	subs	r3, #1
 80095d8:	b29a      	uxth	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095ec:	e0b8      	b.n	8009760 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f4:	2200      	movs	r2, #0
 80095f6:	4966      	ldr	r1, [pc, #408]	; (8009790 <HAL_I2C_Mem_Read+0x448>)
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 fb99 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e0bf      	b.n	8009788 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	691a      	ldr	r2, [r3, #16]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	b2d2      	uxtb	r2, r2
 8009624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009634:	3b01      	subs	r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009640:	b29b      	uxth	r3, r3
 8009642:	3b01      	subs	r3, #1
 8009644:	b29a      	uxth	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009650:	2200      	movs	r2, #0
 8009652:	494f      	ldr	r1, [pc, #316]	; (8009790 <HAL_I2C_Mem_Read+0x448>)
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 fb6b 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	e091      	b.n	8009788 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009672:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	691a      	ldr	r2, [r3, #16]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009690:	3b01      	subs	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800969c:	b29b      	uxth	r3, r3
 800969e:	3b01      	subs	r3, #1
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	691a      	ldr	r2, [r3, #16]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b0:	b2d2      	uxtb	r2, r2
 80096b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	3b01      	subs	r3, #1
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096d8:	e042      	b.n	8009760 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 fc7e 	bl	8009fe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e04c      	b.n	8009788 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	691a      	ldr	r2, [r3, #16]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f8:	b2d2      	uxtb	r2, r2
 80096fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800970a:	3b01      	subs	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009716:	b29b      	uxth	r3, r3
 8009718:	3b01      	subs	r3, #1
 800971a:	b29a      	uxth	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	f003 0304 	and.w	r3, r3, #4
 800972a:	2b04      	cmp	r3, #4
 800972c:	d118      	bne.n	8009760 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	691a      	ldr	r2, [r3, #16]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009738:	b2d2      	uxtb	r2, r2
 800973a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800974a:	3b01      	subs	r3, #1
 800974c:	b29a      	uxth	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009756:	b29b      	uxth	r3, r3
 8009758:	3b01      	subs	r3, #1
 800975a:	b29a      	uxth	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009764:	2b00      	cmp	r3, #0
 8009766:	f47f aec2 	bne.w	80094ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2220      	movs	r2, #32
 800976e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	e000      	b.n	8009788 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009786:	2302      	movs	r3, #2
  }
}
 8009788:	4618      	mov	r0, r3
 800978a:	3728      	adds	r7, #40	; 0x28
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	00010004 	.word	0x00010004

08009794 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af02      	add	r7, sp, #8
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	607a      	str	r2, [r7, #4]
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	460b      	mov	r3, r1
 80097a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2b08      	cmp	r3, #8
 80097ae:	d006      	beq.n	80097be <I2C_MasterRequestWrite+0x2a>
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d003      	beq.n	80097be <I2C_MasterRequestWrite+0x2a>
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097bc:	d108      	bne.n	80097d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	e00b      	b.n	80097e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d4:	2b12      	cmp	r3, #18
 80097d6:	d107      	bne.n	80097e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 fa9b 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00d      	beq.n	800981c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800980a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980e:	d103      	bne.n	8009818 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009816:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e035      	b.n	8009888 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009824:	d108      	bne.n	8009838 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009826:	897b      	ldrh	r3, [r7, #10]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	461a      	mov	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009834:	611a      	str	r2, [r3, #16]
 8009836:	e01b      	b.n	8009870 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009838:	897b      	ldrh	r3, [r7, #10]
 800983a:	11db      	asrs	r3, r3, #7
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f003 0306 	and.w	r3, r3, #6
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f063 030f 	orn	r3, r3, #15
 8009848:	b2da      	uxtb	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	490e      	ldr	r1, [pc, #56]	; (8009890 <I2C_MasterRequestWrite+0xfc>)
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 fac1 	bl	8009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e010      	b.n	8009888 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009866:	897b      	ldrh	r3, [r7, #10]
 8009868:	b2da      	uxtb	r2, r3
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	4907      	ldr	r1, [pc, #28]	; (8009894 <I2C_MasterRequestWrite+0x100>)
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 fab1 	bl	8009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e000      	b.n	8009888 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	00010008 	.word	0x00010008
 8009894:	00010002 	.word	0x00010002

08009898 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b088      	sub	sp, #32
 800989c:	af02      	add	r7, sp, #8
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	607a      	str	r2, [r7, #4]
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	460b      	mov	r3, r1
 80098a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2b08      	cmp	r3, #8
 80098c2:	d006      	beq.n	80098d2 <I2C_MasterRequestRead+0x3a>
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d003      	beq.n	80098d2 <I2C_MasterRequestRead+0x3a>
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098d0:	d108      	bne.n	80098e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	e00b      	b.n	80098fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e8:	2b11      	cmp	r3, #17
 80098ea:	d107      	bne.n	80098fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f000 fa11 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00d      	beq.n	8009930 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800991e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009922:	d103      	bne.n	800992c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800992a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e079      	b.n	8009a24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009938:	d108      	bne.n	800994c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800993a:	897b      	ldrh	r3, [r7, #10]
 800993c:	b2db      	uxtb	r3, r3
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	b2da      	uxtb	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	611a      	str	r2, [r3, #16]
 800994a:	e05f      	b.n	8009a0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800994c:	897b      	ldrh	r3, [r7, #10]
 800994e:	11db      	asrs	r3, r3, #7
 8009950:	b2db      	uxtb	r3, r3
 8009952:	f003 0306 	and.w	r3, r3, #6
 8009956:	b2db      	uxtb	r3, r3
 8009958:	f063 030f 	orn	r3, r3, #15
 800995c:	b2da      	uxtb	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	4930      	ldr	r1, [pc, #192]	; (8009a2c <I2C_MasterRequestRead+0x194>)
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fa37 	bl	8009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e054      	b.n	8009a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800997a:	897b      	ldrh	r3, [r7, #10]
 800997c:	b2da      	uxtb	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	4929      	ldr	r1, [pc, #164]	; (8009a30 <I2C_MasterRequestRead+0x198>)
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 fa27 	bl	8009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d001      	beq.n	800999a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e044      	b.n	8009a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800999a:	2300      	movs	r3, #0
 800999c:	613b      	str	r3, [r7, #16]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	613b      	str	r3, [r7, #16]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	613b      	str	r3, [r7, #16]
 80099ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 f9af 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00d      	beq.n	80099f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e6:	d103      	bne.n	80099f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e017      	b.n	8009a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80099f4:	897b      	ldrh	r3, [r7, #10]
 80099f6:	11db      	asrs	r3, r3, #7
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	f003 0306 	and.w	r3, r3, #6
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f063 030e 	orn	r3, r3, #14
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	4907      	ldr	r1, [pc, #28]	; (8009a30 <I2C_MasterRequestRead+0x198>)
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 f9e3 	bl	8009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e000      	b.n	8009a24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	00010008 	.word	0x00010008
 8009a30:	00010002 	.word	0x00010002

08009a34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	4611      	mov	r1, r2
 8009a40:	461a      	mov	r2, r3
 8009a42:	4603      	mov	r3, r0
 8009a44:	817b      	strh	r3, [r7, #10]
 8009a46:	460b      	mov	r3, r1
 8009a48:	813b      	strh	r3, [r7, #8]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 f960 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00d      	beq.n	8009a92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a84:	d103      	bne.n	8009a8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e05f      	b.n	8009b52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a92:	897b      	ldrh	r3, [r7, #10]
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	461a      	mov	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009aa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	6a3a      	ldr	r2, [r7, #32]
 8009aa6:	492d      	ldr	r1, [pc, #180]	; (8009b5c <I2C_RequestMemoryWrite+0x128>)
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f000 f998 	bl	8009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e04c      	b.n	8009b52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	617b      	str	r3, [r7, #20]
 8009acc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad0:	6a39      	ldr	r1, [r7, #32]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 fa02 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00d      	beq.n	8009afa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	2b04      	cmp	r3, #4
 8009ae4:	d107      	bne.n	8009af6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009af4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e02b      	b.n	8009b52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009afa:	88fb      	ldrh	r3, [r7, #6]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d105      	bne.n	8009b0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b00:	893b      	ldrh	r3, [r7, #8]
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	611a      	str	r2, [r3, #16]
 8009b0a:	e021      	b.n	8009b50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009b0c:	893b      	ldrh	r3, [r7, #8]
 8009b0e:	0a1b      	lsrs	r3, r3, #8
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b1c:	6a39      	ldr	r1, [r7, #32]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 f9dc 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00d      	beq.n	8009b46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	d107      	bne.n	8009b42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e005      	b.n	8009b52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b46:	893b      	ldrh	r3, [r7, #8]
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	00010002 	.word	0x00010002

08009b60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af02      	add	r7, sp, #8
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	4608      	mov	r0, r1
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	4603      	mov	r3, r0
 8009b70:	817b      	strh	r3, [r7, #10]
 8009b72:	460b      	mov	r3, r1
 8009b74:	813b      	strh	r3, [r7, #8]
 8009b76:	4613      	mov	r3, r2
 8009b78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 f8c2 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00d      	beq.n	8009bce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bc0:	d103      	bne.n	8009bca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	e0aa      	b.n	8009d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009bce:	897b      	ldrh	r3, [r7, #10]
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009bdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	6a3a      	ldr	r2, [r7, #32]
 8009be2:	4952      	ldr	r1, [pc, #328]	; (8009d2c <I2C_RequestMemoryRead+0x1cc>)
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f000 f8fa 	bl	8009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e097      	b.n	8009d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	617b      	str	r3, [r7, #20]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	617b      	str	r3, [r7, #20]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	617b      	str	r3, [r7, #20]
 8009c08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c0c:	6a39      	ldr	r1, [r7, #32]
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f000 f964 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00d      	beq.n	8009c36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	d107      	bne.n	8009c32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e076      	b.n	8009d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009c36:	88fb      	ldrh	r3, [r7, #6]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d105      	bne.n	8009c48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009c3c:	893b      	ldrh	r3, [r7, #8]
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	611a      	str	r2, [r3, #16]
 8009c46:	e021      	b.n	8009c8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009c48:	893b      	ldrh	r3, [r7, #8]
 8009c4a:	0a1b      	lsrs	r3, r3, #8
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c58:	6a39      	ldr	r1, [r7, #32]
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f93e 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00d      	beq.n	8009c82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	d107      	bne.n	8009c7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e050      	b.n	8009d24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009c82:	893b      	ldrh	r3, [r7, #8]
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c8e:	6a39      	ldr	r1, [r7, #32]
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f000 f923 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00d      	beq.n	8009cb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca0:	2b04      	cmp	r3, #4
 8009ca2:	d107      	bne.n	8009cb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e035      	b.n	8009d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 f82b 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00d      	beq.n	8009cfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cee:	d103      	bne.n	8009cf8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e013      	b.n	8009d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009cfc:	897b      	ldrh	r3, [r7, #10]
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	f043 0301 	orr.w	r3, r3, #1
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	6a3a      	ldr	r2, [r7, #32]
 8009d10:	4906      	ldr	r1, [pc, #24]	; (8009d2c <I2C_RequestMemoryRead+0x1cc>)
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f000 f863 	bl	8009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e000      	b.n	8009d24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	00010002 	.word	0x00010002

08009d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d40:	e025      	b.n	8009d8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d48:	d021      	beq.n	8009d8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d4a:	f7fc ffbb 	bl	8006cc4 <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d302      	bcc.n	8009d60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d116      	bne.n	8009d8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2220      	movs	r2, #32
 8009d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	f043 0220 	orr.w	r2, r3, #32
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e023      	b.n	8009dd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	0c1b      	lsrs	r3, r3, #16
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d10d      	bne.n	8009db4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	43da      	mvns	r2, r3
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	4013      	ands	r3, r2
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	bf0c      	ite	eq
 8009daa:	2301      	moveq	r3, #1
 8009dac:	2300      	movne	r3, #0
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	461a      	mov	r2, r3
 8009db2:	e00c      	b.n	8009dce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	43da      	mvns	r2, r3
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	bf0c      	ite	eq
 8009dc6:	2301      	moveq	r3, #1
 8009dc8:	2300      	movne	r3, #0
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	461a      	mov	r2, r3
 8009dce:	79fb      	ldrb	r3, [r7, #7]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d0b6      	beq.n	8009d42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	60b9      	str	r1, [r7, #8]
 8009de8:	607a      	str	r2, [r7, #4]
 8009dea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009dec:	e051      	b.n	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dfc:	d123      	bne.n	8009e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2220      	movs	r2, #32
 8009e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	f043 0204 	orr.w	r2, r3, #4
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e046      	b.n	8009ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4c:	d021      	beq.n	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e4e:	f7fc ff39 	bl	8006cc4 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d302      	bcc.n	8009e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d116      	bne.n	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7e:	f043 0220 	orr.w	r2, r3, #32
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e020      	b.n	8009ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	0c1b      	lsrs	r3, r3, #16
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d10c      	bne.n	8009eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	43da      	mvns	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	bf14      	ite	ne
 8009eae:	2301      	movne	r3, #1
 8009eb0:	2300      	moveq	r3, #0
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	e00b      	b.n	8009ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	43da      	mvns	r2, r3
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	bf14      	ite	ne
 8009ec8:	2301      	movne	r3, #1
 8009eca:	2300      	moveq	r3, #0
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d18d      	bne.n	8009dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ee8:	e02d      	b.n	8009f46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 f8ce 	bl	800a08c <I2C_IsAcknowledgeFailed>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e02d      	b.n	8009f56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f00:	d021      	beq.n	8009f46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f02:	f7fc fedf 	bl	8006cc4 <HAL_GetTick>
 8009f06:	4602      	mov	r2, r0
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d302      	bcc.n	8009f18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d116      	bne.n	8009f46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2220      	movs	r2, #32
 8009f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f32:	f043 0220 	orr.w	r2, r3, #32
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e007      	b.n	8009f56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	695b      	ldr	r3, [r3, #20]
 8009f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f50:	2b80      	cmp	r3, #128	; 0x80
 8009f52:	d1ca      	bne.n	8009eea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	60f8      	str	r0, [r7, #12]
 8009f66:	60b9      	str	r1, [r7, #8]
 8009f68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f6a:	e02d      	b.n	8009fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 f88d 	bl	800a08c <I2C_IsAcknowledgeFailed>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d001      	beq.n	8009f7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e02d      	b.n	8009fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f82:	d021      	beq.n	8009fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f84:	f7fc fe9e 	bl	8006cc4 <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d302      	bcc.n	8009f9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d116      	bne.n	8009fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb4:	f043 0220 	orr.w	r2, r3, #32
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e007      	b.n	8009fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d1ca      	bne.n	8009f6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009fec:	e042      	b.n	800a074 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	f003 0310 	and.w	r3, r3, #16
 8009ff8:	2b10      	cmp	r3, #16
 8009ffa:	d119      	bne.n	800a030 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f06f 0210 	mvn.w	r2, #16
 800a004:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2220      	movs	r2, #32
 800a010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e029      	b.n	800a084 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a030:	f7fc fe48 	bl	8006cc4 <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d302      	bcc.n	800a046 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d116      	bne.n	800a074 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2220      	movs	r2, #32
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a060:	f043 0220 	orr.w	r2, r3, #32
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e007      	b.n	800a084 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a07e:	2b40      	cmp	r3, #64	; 0x40
 800a080:	d1b5      	bne.n	8009fee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a09e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0a2:	d11b      	bne.n	800a0dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a0ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c8:	f043 0204 	orr.w	r2, r3, #4
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e000      	b.n	800a0de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
	...

0800a0ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e267      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	2b00      	cmp	r3, #0
 800a108:	d075      	beq.n	800a1f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a10a:	4b88      	ldr	r3, [pc, #544]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f003 030c 	and.w	r3, r3, #12
 800a112:	2b04      	cmp	r3, #4
 800a114:	d00c      	beq.n	800a130 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a116:	4b85      	ldr	r3, [pc, #532]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a11e:	2b08      	cmp	r3, #8
 800a120:	d112      	bne.n	800a148 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a122:	4b82      	ldr	r3, [pc, #520]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a12a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a12e:	d10b      	bne.n	800a148 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a130:	4b7e      	ldr	r3, [pc, #504]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d05b      	beq.n	800a1f4 <HAL_RCC_OscConfig+0x108>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d157      	bne.n	800a1f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e242      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a150:	d106      	bne.n	800a160 <HAL_RCC_OscConfig+0x74>
 800a152:	4b76      	ldr	r3, [pc, #472]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a75      	ldr	r2, [pc, #468]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	e01d      	b.n	800a19c <HAL_RCC_OscConfig+0xb0>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a168:	d10c      	bne.n	800a184 <HAL_RCC_OscConfig+0x98>
 800a16a:	4b70      	ldr	r3, [pc, #448]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a6f      	ldr	r2, [pc, #444]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	4b6d      	ldr	r3, [pc, #436]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a6c      	ldr	r2, [pc, #432]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a17c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a180:	6013      	str	r3, [r2, #0]
 800a182:	e00b      	b.n	800a19c <HAL_RCC_OscConfig+0xb0>
 800a184:	4b69      	ldr	r3, [pc, #420]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a68      	ldr	r2, [pc, #416]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a18a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	4b66      	ldr	r3, [pc, #408]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a65      	ldr	r2, [pc, #404]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a19a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d013      	beq.n	800a1cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1a4:	f7fc fd8e 	bl	8006cc4 <HAL_GetTick>
 800a1a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1aa:	e008      	b.n	800a1be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a1ac:	f7fc fd8a 	bl	8006cc4 <HAL_GetTick>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	2b64      	cmp	r3, #100	; 0x64
 800a1b8:	d901      	bls.n	800a1be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e207      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1be:	4b5b      	ldr	r3, [pc, #364]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d0f0      	beq.n	800a1ac <HAL_RCC_OscConfig+0xc0>
 800a1ca:	e014      	b.n	800a1f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1cc:	f7fc fd7a 	bl	8006cc4 <HAL_GetTick>
 800a1d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1d2:	e008      	b.n	800a1e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a1d4:	f7fc fd76 	bl	8006cc4 <HAL_GetTick>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	2b64      	cmp	r3, #100	; 0x64
 800a1e0:	d901      	bls.n	800a1e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e1f3      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1e6:	4b51      	ldr	r3, [pc, #324]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1f0      	bne.n	800a1d4 <HAL_RCC_OscConfig+0xe8>
 800a1f2:	e000      	b.n	800a1f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 0302 	and.w	r3, r3, #2
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d063      	beq.n	800a2ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a202:	4b4a      	ldr	r3, [pc, #296]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f003 030c 	and.w	r3, r3, #12
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00b      	beq.n	800a226 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a20e:	4b47      	ldr	r3, [pc, #284]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a216:	2b08      	cmp	r3, #8
 800a218:	d11c      	bne.n	800a254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a21a:	4b44      	ldr	r3, [pc, #272]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d116      	bne.n	800a254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a226:	4b41      	ldr	r3, [pc, #260]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0302 	and.w	r3, r3, #2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d005      	beq.n	800a23e <HAL_RCC_OscConfig+0x152>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	2b01      	cmp	r3, #1
 800a238:	d001      	beq.n	800a23e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	e1c7      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a23e:	4b3b      	ldr	r3, [pc, #236]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	00db      	lsls	r3, r3, #3
 800a24c:	4937      	ldr	r1, [pc, #220]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a252:	e03a      	b.n	800a2ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d020      	beq.n	800a29e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a25c:	4b34      	ldr	r3, [pc, #208]	; (800a330 <HAL_RCC_OscConfig+0x244>)
 800a25e:	2201      	movs	r2, #1
 800a260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a262:	f7fc fd2f 	bl	8006cc4 <HAL_GetTick>
 800a266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a268:	e008      	b.n	800a27c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a26a:	f7fc fd2b 	bl	8006cc4 <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	2b02      	cmp	r3, #2
 800a276:	d901      	bls.n	800a27c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e1a8      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a27c:	4b2b      	ldr	r3, [pc, #172]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0302 	and.w	r3, r3, #2
 800a284:	2b00      	cmp	r3, #0
 800a286:	d0f0      	beq.n	800a26a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a288:	4b28      	ldr	r3, [pc, #160]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	00db      	lsls	r3, r3, #3
 800a296:	4925      	ldr	r1, [pc, #148]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a298:	4313      	orrs	r3, r2
 800a29a:	600b      	str	r3, [r1, #0]
 800a29c:	e015      	b.n	800a2ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a29e:	4b24      	ldr	r3, [pc, #144]	; (800a330 <HAL_RCC_OscConfig+0x244>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a4:	f7fc fd0e 	bl	8006cc4 <HAL_GetTick>
 800a2a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2aa:	e008      	b.n	800a2be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a2ac:	f7fc fd0a 	bl	8006cc4 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d901      	bls.n	800a2be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e187      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2be:	4b1b      	ldr	r3, [pc, #108]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0302 	and.w	r3, r3, #2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1f0      	bne.n	800a2ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0308 	and.w	r3, r3, #8
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d036      	beq.n	800a344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	695b      	ldr	r3, [r3, #20]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d016      	beq.n	800a30c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2de:	4b15      	ldr	r3, [pc, #84]	; (800a334 <HAL_RCC_OscConfig+0x248>)
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2e4:	f7fc fcee 	bl	8006cc4 <HAL_GetTick>
 800a2e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2ea:	e008      	b.n	800a2fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a2ec:	f7fc fcea 	bl	8006cc4 <HAL_GetTick>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d901      	bls.n	800a2fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	e167      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2fe:	4b0b      	ldr	r3, [pc, #44]	; (800a32c <HAL_RCC_OscConfig+0x240>)
 800a300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0f0      	beq.n	800a2ec <HAL_RCC_OscConfig+0x200>
 800a30a:	e01b      	b.n	800a344 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a30c:	4b09      	ldr	r3, [pc, #36]	; (800a334 <HAL_RCC_OscConfig+0x248>)
 800a30e:	2200      	movs	r2, #0
 800a310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a312:	f7fc fcd7 	bl	8006cc4 <HAL_GetTick>
 800a316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a318:	e00e      	b.n	800a338 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a31a:	f7fc fcd3 	bl	8006cc4 <HAL_GetTick>
 800a31e:	4602      	mov	r2, r0
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	2b02      	cmp	r3, #2
 800a326:	d907      	bls.n	800a338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e150      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
 800a32c:	40023800 	.word	0x40023800
 800a330:	42470000 	.word	0x42470000
 800a334:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a338:	4b88      	ldr	r3, [pc, #544]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a33a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1ea      	bne.n	800a31a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0304 	and.w	r3, r3, #4
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 8097 	beq.w	800a480 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a352:	2300      	movs	r3, #0
 800a354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a356:	4b81      	ldr	r3, [pc, #516]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10f      	bne.n	800a382 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a362:	2300      	movs	r3, #0
 800a364:	60bb      	str	r3, [r7, #8]
 800a366:	4b7d      	ldr	r3, [pc, #500]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36a:	4a7c      	ldr	r2, [pc, #496]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a36c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a370:	6413      	str	r3, [r2, #64]	; 0x40
 800a372:	4b7a      	ldr	r3, [pc, #488]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a37a:	60bb      	str	r3, [r7, #8]
 800a37c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a37e:	2301      	movs	r3, #1
 800a380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a382:	4b77      	ldr	r3, [pc, #476]	; (800a560 <HAL_RCC_OscConfig+0x474>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d118      	bne.n	800a3c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a38e:	4b74      	ldr	r3, [pc, #464]	; (800a560 <HAL_RCC_OscConfig+0x474>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a73      	ldr	r2, [pc, #460]	; (800a560 <HAL_RCC_OscConfig+0x474>)
 800a394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a39a:	f7fc fc93 	bl	8006cc4 <HAL_GetTick>
 800a39e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3a0:	e008      	b.n	800a3b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3a2:	f7fc fc8f 	bl	8006cc4 <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d901      	bls.n	800a3b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e10c      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3b4:	4b6a      	ldr	r3, [pc, #424]	; (800a560 <HAL_RCC_OscConfig+0x474>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0f0      	beq.n	800a3a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d106      	bne.n	800a3d6 <HAL_RCC_OscConfig+0x2ea>
 800a3c8:	4b64      	ldr	r3, [pc, #400]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a3ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3cc:	4a63      	ldr	r2, [pc, #396]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a3ce:	f043 0301 	orr.w	r3, r3, #1
 800a3d2:	6713      	str	r3, [r2, #112]	; 0x70
 800a3d4:	e01c      	b.n	800a410 <HAL_RCC_OscConfig+0x324>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	2b05      	cmp	r3, #5
 800a3dc:	d10c      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x30c>
 800a3de:	4b5f      	ldr	r3, [pc, #380]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e2:	4a5e      	ldr	r2, [pc, #376]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a3e4:	f043 0304 	orr.w	r3, r3, #4
 800a3e8:	6713      	str	r3, [r2, #112]	; 0x70
 800a3ea:	4b5c      	ldr	r3, [pc, #368]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ee:	4a5b      	ldr	r2, [pc, #364]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a3f0:	f043 0301 	orr.w	r3, r3, #1
 800a3f4:	6713      	str	r3, [r2, #112]	; 0x70
 800a3f6:	e00b      	b.n	800a410 <HAL_RCC_OscConfig+0x324>
 800a3f8:	4b58      	ldr	r3, [pc, #352]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fc:	4a57      	ldr	r2, [pc, #348]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a3fe:	f023 0301 	bic.w	r3, r3, #1
 800a402:	6713      	str	r3, [r2, #112]	; 0x70
 800a404:	4b55      	ldr	r3, [pc, #340]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a408:	4a54      	ldr	r2, [pc, #336]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a40a:	f023 0304 	bic.w	r3, r3, #4
 800a40e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d015      	beq.n	800a444 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a418:	f7fc fc54 	bl	8006cc4 <HAL_GetTick>
 800a41c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a41e:	e00a      	b.n	800a436 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a420:	f7fc fc50 	bl	8006cc4 <HAL_GetTick>
 800a424:	4602      	mov	r2, r0
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a42e:	4293      	cmp	r3, r2
 800a430:	d901      	bls.n	800a436 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e0cb      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a436:	4b49      	ldr	r3, [pc, #292]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a43a:	f003 0302 	and.w	r3, r3, #2
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0ee      	beq.n	800a420 <HAL_RCC_OscConfig+0x334>
 800a442:	e014      	b.n	800a46e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a444:	f7fc fc3e 	bl	8006cc4 <HAL_GetTick>
 800a448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a44a:	e00a      	b.n	800a462 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a44c:	f7fc fc3a 	bl	8006cc4 <HAL_GetTick>
 800a450:	4602      	mov	r2, r0
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	f241 3288 	movw	r2, #5000	; 0x1388
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d901      	bls.n	800a462 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e0b5      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a462:	4b3e      	ldr	r3, [pc, #248]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a466:	f003 0302 	and.w	r3, r3, #2
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1ee      	bne.n	800a44c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a46e:	7dfb      	ldrb	r3, [r7, #23]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d105      	bne.n	800a480 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a474:	4b39      	ldr	r3, [pc, #228]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a478:	4a38      	ldr	r2, [pc, #224]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a47a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a47e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 80a1 	beq.w	800a5cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a48a:	4b34      	ldr	r3, [pc, #208]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	f003 030c 	and.w	r3, r3, #12
 800a492:	2b08      	cmp	r3, #8
 800a494:	d05c      	beq.n	800a550 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d141      	bne.n	800a522 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a49e:	4b31      	ldr	r3, [pc, #196]	; (800a564 <HAL_RCC_OscConfig+0x478>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4a4:	f7fc fc0e 	bl	8006cc4 <HAL_GetTick>
 800a4a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4aa:	e008      	b.n	800a4be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a4ac:	f7fc fc0a 	bl	8006cc4 <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d901      	bls.n	800a4be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e087      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4be:	4b27      	ldr	r3, [pc, #156]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1f0      	bne.n	800a4ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	69da      	ldr	r2, [r3, #28]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	019b      	lsls	r3, r3, #6
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e0:	085b      	lsrs	r3, r3, #1
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	041b      	lsls	r3, r3, #16
 800a4e6:	431a      	orrs	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	061b      	lsls	r3, r3, #24
 800a4ee:	491b      	ldr	r1, [pc, #108]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4f4:	4b1b      	ldr	r3, [pc, #108]	; (800a564 <HAL_RCC_OscConfig+0x478>)
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4fa:	f7fc fbe3 	bl	8006cc4 <HAL_GetTick>
 800a4fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a500:	e008      	b.n	800a514 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a502:	f7fc fbdf 	bl	8006cc4 <HAL_GetTick>
 800a506:	4602      	mov	r2, r0
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d901      	bls.n	800a514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a510:	2303      	movs	r3, #3
 800a512:	e05c      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a514:	4b11      	ldr	r3, [pc, #68]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d0f0      	beq.n	800a502 <HAL_RCC_OscConfig+0x416>
 800a520:	e054      	b.n	800a5cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a522:	4b10      	ldr	r3, [pc, #64]	; (800a564 <HAL_RCC_OscConfig+0x478>)
 800a524:	2200      	movs	r2, #0
 800a526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a528:	f7fc fbcc 	bl	8006cc4 <HAL_GetTick>
 800a52c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a52e:	e008      	b.n	800a542 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a530:	f7fc fbc8 	bl	8006cc4 <HAL_GetTick>
 800a534:	4602      	mov	r2, r0
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d901      	bls.n	800a542 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e045      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a542:	4b06      	ldr	r3, [pc, #24]	; (800a55c <HAL_RCC_OscConfig+0x470>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1f0      	bne.n	800a530 <HAL_RCC_OscConfig+0x444>
 800a54e:	e03d      	b.n	800a5cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d107      	bne.n	800a568 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e038      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
 800a55c:	40023800 	.word	0x40023800
 800a560:	40007000 	.word	0x40007000
 800a564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a568:	4b1b      	ldr	r3, [pc, #108]	; (800a5d8 <HAL_RCC_OscConfig+0x4ec>)
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d028      	beq.n	800a5c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a580:	429a      	cmp	r2, r3
 800a582:	d121      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a58e:	429a      	cmp	r2, r3
 800a590:	d11a      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a598:	4013      	ands	r3, r2
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a59e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d111      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ae:	085b      	lsrs	r3, r3, #1
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d107      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d001      	beq.n	800a5cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e000      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3718      	adds	r7, #24
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	40023800 	.word	0x40023800

0800a5dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e0cc      	b.n	800a78a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a5f0:	4b68      	ldr	r3, [pc, #416]	; (800a794 <HAL_RCC_ClockConfig+0x1b8>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d90c      	bls.n	800a618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5fe:	4b65      	ldr	r3, [pc, #404]	; (800a794 <HAL_RCC_ClockConfig+0x1b8>)
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	b2d2      	uxtb	r2, r2
 800a604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a606:	4b63      	ldr	r3, [pc, #396]	; (800a794 <HAL_RCC_ClockConfig+0x1b8>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 0307 	and.w	r3, r3, #7
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	429a      	cmp	r2, r3
 800a612:	d001      	beq.n	800a618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	e0b8      	b.n	800a78a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 0302 	and.w	r3, r3, #2
 800a620:	2b00      	cmp	r3, #0
 800a622:	d020      	beq.n	800a666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0304 	and.w	r3, r3, #4
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a630:	4b59      	ldr	r3, [pc, #356]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	4a58      	ldr	r2, [pc, #352]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a63a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0308 	and.w	r3, r3, #8
 800a644:	2b00      	cmp	r3, #0
 800a646:	d005      	beq.n	800a654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a648:	4b53      	ldr	r3, [pc, #332]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	4a52      	ldr	r2, [pc, #328]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a64e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a654:	4b50      	ldr	r3, [pc, #320]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	494d      	ldr	r1, [pc, #308]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a662:	4313      	orrs	r3, r2
 800a664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d044      	beq.n	800a6fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d107      	bne.n	800a68a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a67a:	4b47      	ldr	r3, [pc, #284]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a682:	2b00      	cmp	r3, #0
 800a684:	d119      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e07f      	b.n	800a78a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d003      	beq.n	800a69a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a696:	2b03      	cmp	r3, #3
 800a698:	d107      	bne.n	800a6aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a69a:	4b3f      	ldr	r3, [pc, #252]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d109      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e06f      	b.n	800a78a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6aa:	4b3b      	ldr	r3, [pc, #236]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0302 	and.w	r3, r3, #2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e067      	b.n	800a78a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6ba:	4b37      	ldr	r3, [pc, #220]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f023 0203 	bic.w	r2, r3, #3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	4934      	ldr	r1, [pc, #208]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a6cc:	f7fc fafa 	bl	8006cc4 <HAL_GetTick>
 800a6d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6d2:	e00a      	b.n	800a6ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6d4:	f7fc faf6 	bl	8006cc4 <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d901      	bls.n	800a6ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e04f      	b.n	800a78a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6ea:	4b2b      	ldr	r3, [pc, #172]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f003 020c 	and.w	r2, r3, #12
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d1eb      	bne.n	800a6d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a6fc:	4b25      	ldr	r3, [pc, #148]	; (800a794 <HAL_RCC_ClockConfig+0x1b8>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0307 	and.w	r3, r3, #7
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	429a      	cmp	r2, r3
 800a708:	d20c      	bcs.n	800a724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a70a:	4b22      	ldr	r3, [pc, #136]	; (800a794 <HAL_RCC_ClockConfig+0x1b8>)
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	b2d2      	uxtb	r2, r2
 800a710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a712:	4b20      	ldr	r3, [pc, #128]	; (800a794 <HAL_RCC_ClockConfig+0x1b8>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f003 0307 	and.w	r3, r3, #7
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d001      	beq.n	800a724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	e032      	b.n	800a78a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 0304 	and.w	r3, r3, #4
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d008      	beq.n	800a742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a730:	4b19      	ldr	r3, [pc, #100]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	4916      	ldr	r1, [pc, #88]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0308 	and.w	r3, r3, #8
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d009      	beq.n	800a762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a74e:	4b12      	ldr	r3, [pc, #72]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	00db      	lsls	r3, r3, #3
 800a75c:	490e      	ldr	r1, [pc, #56]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a762:	f000 f821 	bl	800a7a8 <HAL_RCC_GetSysClockFreq>
 800a766:	4602      	mov	r2, r0
 800a768:	4b0b      	ldr	r3, [pc, #44]	; (800a798 <HAL_RCC_ClockConfig+0x1bc>)
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	091b      	lsrs	r3, r3, #4
 800a76e:	f003 030f 	and.w	r3, r3, #15
 800a772:	490a      	ldr	r1, [pc, #40]	; (800a79c <HAL_RCC_ClockConfig+0x1c0>)
 800a774:	5ccb      	ldrb	r3, [r1, r3]
 800a776:	fa22 f303 	lsr.w	r3, r2, r3
 800a77a:	4a09      	ldr	r2, [pc, #36]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a77c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a77e:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <HAL_RCC_ClockConfig+0x1c8>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4618      	mov	r0, r3
 800a784:	f7fc fa5a 	bl	8006c3c <HAL_InitTick>

  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	40023c00 	.word	0x40023c00
 800a798:	40023800 	.word	0x40023800
 800a79c:	08015048 	.word	0x08015048
 800a7a0:	20000444 	.word	0x20000444
 800a7a4:	20000448 	.word	0x20000448

0800a7a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7ac:	b094      	sub	sp, #80	; 0x50
 800a7ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	647b      	str	r3, [r7, #68]	; 0x44
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7c0:	4b79      	ldr	r3, [pc, #484]	; (800a9a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	f003 030c 	and.w	r3, r3, #12
 800a7c8:	2b08      	cmp	r3, #8
 800a7ca:	d00d      	beq.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x40>
 800a7cc:	2b08      	cmp	r3, #8
 800a7ce:	f200 80e1 	bhi.w	800a994 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d002      	beq.n	800a7dc <HAL_RCC_GetSysClockFreq+0x34>
 800a7d6:	2b04      	cmp	r3, #4
 800a7d8:	d003      	beq.n	800a7e2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a7da:	e0db      	b.n	800a994 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a7dc:	4b73      	ldr	r3, [pc, #460]	; (800a9ac <HAL_RCC_GetSysClockFreq+0x204>)
 800a7de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a7e0:	e0db      	b.n	800a99a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a7e2:	4b73      	ldr	r3, [pc, #460]	; (800a9b0 <HAL_RCC_GetSysClockFreq+0x208>)
 800a7e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a7e6:	e0d8      	b.n	800a99a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a7e8:	4b6f      	ldr	r3, [pc, #444]	; (800a9a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a7f2:	4b6d      	ldr	r3, [pc, #436]	; (800a9a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d063      	beq.n	800a8c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7fe:	4b6a      	ldr	r3, [pc, #424]	; (800a9a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	099b      	lsrs	r3, r3, #6
 800a804:	2200      	movs	r2, #0
 800a806:	63bb      	str	r3, [r7, #56]	; 0x38
 800a808:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a810:	633b      	str	r3, [r7, #48]	; 0x30
 800a812:	2300      	movs	r3, #0
 800a814:	637b      	str	r3, [r7, #52]	; 0x34
 800a816:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a81a:	4622      	mov	r2, r4
 800a81c:	462b      	mov	r3, r5
 800a81e:	f04f 0000 	mov.w	r0, #0
 800a822:	f04f 0100 	mov.w	r1, #0
 800a826:	0159      	lsls	r1, r3, #5
 800a828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a82c:	0150      	lsls	r0, r2, #5
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	4621      	mov	r1, r4
 800a834:	1a51      	subs	r1, r2, r1
 800a836:	6139      	str	r1, [r7, #16]
 800a838:	4629      	mov	r1, r5
 800a83a:	eb63 0301 	sbc.w	r3, r3, r1
 800a83e:	617b      	str	r3, [r7, #20]
 800a840:	f04f 0200 	mov.w	r2, #0
 800a844:	f04f 0300 	mov.w	r3, #0
 800a848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a84c:	4659      	mov	r1, fp
 800a84e:	018b      	lsls	r3, r1, #6
 800a850:	4651      	mov	r1, sl
 800a852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a856:	4651      	mov	r1, sl
 800a858:	018a      	lsls	r2, r1, #6
 800a85a:	4651      	mov	r1, sl
 800a85c:	ebb2 0801 	subs.w	r8, r2, r1
 800a860:	4659      	mov	r1, fp
 800a862:	eb63 0901 	sbc.w	r9, r3, r1
 800a866:	f04f 0200 	mov.w	r2, #0
 800a86a:	f04f 0300 	mov.w	r3, #0
 800a86e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a87a:	4690      	mov	r8, r2
 800a87c:	4699      	mov	r9, r3
 800a87e:	4623      	mov	r3, r4
 800a880:	eb18 0303 	adds.w	r3, r8, r3
 800a884:	60bb      	str	r3, [r7, #8]
 800a886:	462b      	mov	r3, r5
 800a888:	eb49 0303 	adc.w	r3, r9, r3
 800a88c:	60fb      	str	r3, [r7, #12]
 800a88e:	f04f 0200 	mov.w	r2, #0
 800a892:	f04f 0300 	mov.w	r3, #0
 800a896:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a89a:	4629      	mov	r1, r5
 800a89c:	024b      	lsls	r3, r1, #9
 800a89e:	4621      	mov	r1, r4
 800a8a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	024a      	lsls	r2, r1, #9
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a8b8:	f7f6 f9b6 	bl	8000c28 <__aeabi_uldivmod>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8c4:	e058      	b.n	800a978 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8c6:	4b38      	ldr	r3, [pc, #224]	; (800a9a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	099b      	lsrs	r3, r3, #6
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a8d6:	623b      	str	r3, [r7, #32]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	627b      	str	r3, [r7, #36]	; 0x24
 800a8dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a8e0:	4642      	mov	r2, r8
 800a8e2:	464b      	mov	r3, r9
 800a8e4:	f04f 0000 	mov.w	r0, #0
 800a8e8:	f04f 0100 	mov.w	r1, #0
 800a8ec:	0159      	lsls	r1, r3, #5
 800a8ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a8f2:	0150      	lsls	r0, r2, #5
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4641      	mov	r1, r8
 800a8fa:	ebb2 0a01 	subs.w	sl, r2, r1
 800a8fe:	4649      	mov	r1, r9
 800a900:	eb63 0b01 	sbc.w	fp, r3, r1
 800a904:	f04f 0200 	mov.w	r2, #0
 800a908:	f04f 0300 	mov.w	r3, #0
 800a90c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a910:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a914:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a918:	ebb2 040a 	subs.w	r4, r2, sl
 800a91c:	eb63 050b 	sbc.w	r5, r3, fp
 800a920:	f04f 0200 	mov.w	r2, #0
 800a924:	f04f 0300 	mov.w	r3, #0
 800a928:	00eb      	lsls	r3, r5, #3
 800a92a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a92e:	00e2      	lsls	r2, r4, #3
 800a930:	4614      	mov	r4, r2
 800a932:	461d      	mov	r5, r3
 800a934:	4643      	mov	r3, r8
 800a936:	18e3      	adds	r3, r4, r3
 800a938:	603b      	str	r3, [r7, #0]
 800a93a:	464b      	mov	r3, r9
 800a93c:	eb45 0303 	adc.w	r3, r5, r3
 800a940:	607b      	str	r3, [r7, #4]
 800a942:	f04f 0200 	mov.w	r2, #0
 800a946:	f04f 0300 	mov.w	r3, #0
 800a94a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a94e:	4629      	mov	r1, r5
 800a950:	028b      	lsls	r3, r1, #10
 800a952:	4621      	mov	r1, r4
 800a954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a958:	4621      	mov	r1, r4
 800a95a:	028a      	lsls	r2, r1, #10
 800a95c:	4610      	mov	r0, r2
 800a95e:	4619      	mov	r1, r3
 800a960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a962:	2200      	movs	r2, #0
 800a964:	61bb      	str	r3, [r7, #24]
 800a966:	61fa      	str	r2, [r7, #28]
 800a968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a96c:	f7f6 f95c 	bl	8000c28 <__aeabi_uldivmod>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4613      	mov	r3, r2
 800a976:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a978:	4b0b      	ldr	r3, [pc, #44]	; (800a9a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	0c1b      	lsrs	r3, r3, #16
 800a97e:	f003 0303 	and.w	r3, r3, #3
 800a982:	3301      	adds	r3, #1
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a988:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a98a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a992:	e002      	b.n	800a99a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a994:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <HAL_RCC_GetSysClockFreq+0x204>)
 800a996:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a99a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3750      	adds	r7, #80	; 0x50
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9a6:	bf00      	nop
 800a9a8:	40023800 	.word	0x40023800
 800a9ac:	00f42400 	.word	0x00f42400
 800a9b0:	007a1200 	.word	0x007a1200

0800a9b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a9b8:	4b03      	ldr	r3, [pc, #12]	; (800a9c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	20000444 	.word	0x20000444

0800a9cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a9d0:	f7ff fff0 	bl	800a9b4 <HAL_RCC_GetHCLKFreq>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	0a9b      	lsrs	r3, r3, #10
 800a9dc:	f003 0307 	and.w	r3, r3, #7
 800a9e0:	4903      	ldr	r1, [pc, #12]	; (800a9f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9e2:	5ccb      	ldrb	r3, [r1, r3]
 800a9e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	40023800 	.word	0x40023800
 800a9f0:	08015058 	.word	0x08015058

0800a9f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a9f8:	f7ff ffdc 	bl	800a9b4 <HAL_RCC_GetHCLKFreq>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	0b5b      	lsrs	r3, r3, #13
 800aa04:	f003 0307 	and.w	r3, r3, #7
 800aa08:	4903      	ldr	r1, [pc, #12]	; (800aa18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa0a:	5ccb      	ldrb	r3, [r1, r3]
 800aa0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	40023800 	.word	0x40023800
 800aa18:	08015058 	.word	0x08015058

0800aa1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa24:	2300      	movs	r3, #0
 800aa26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d105      	bne.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d035      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aa44:	4b62      	ldr	r3, [pc, #392]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aa4a:	f7fc f93b 	bl	8006cc4 <HAL_GetTick>
 800aa4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aa50:	e008      	b.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800aa52:	f7fc f937 	bl	8006cc4 <HAL_GetTick>
 800aa56:	4602      	mov	r2, r0
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d901      	bls.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	e0b0      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aa64:	4b5b      	ldr	r3, [pc, #364]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1f0      	bne.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	019a      	lsls	r2, r3, #6
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	071b      	lsls	r3, r3, #28
 800aa7c:	4955      	ldr	r1, [pc, #340]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800aa84:	4b52      	ldr	r3, [pc, #328]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800aa86:	2201      	movs	r2, #1
 800aa88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aa8a:	f7fc f91b 	bl	8006cc4 <HAL_GetTick>
 800aa8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aa90:	e008      	b.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800aa92:	f7fc f917 	bl	8006cc4 <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d901      	bls.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e090      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aaa4:	4b4b      	ldr	r3, [pc, #300]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d0f0      	beq.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0302 	and.w	r3, r3, #2
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 8083 	beq.w	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800aabe:	2300      	movs	r3, #0
 800aac0:	60fb      	str	r3, [r7, #12]
 800aac2:	4b44      	ldr	r3, [pc, #272]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac6:	4a43      	ldr	r2, [pc, #268]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aacc:	6413      	str	r3, [r2, #64]	; 0x40
 800aace:	4b41      	ldr	r3, [pc, #260]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aad6:	60fb      	str	r3, [r7, #12]
 800aad8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800aada:	4b3f      	ldr	r3, [pc, #252]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a3e      	ldr	r2, [pc, #248]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800aae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aae4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aae6:	f7fc f8ed 	bl	8006cc4 <HAL_GetTick>
 800aaea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800aaec:	e008      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800aaee:	f7fc f8e9 	bl	8006cc4 <HAL_GetTick>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d901      	bls.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800aafc:	2303      	movs	r3, #3
 800aafe:	e062      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ab00:	4b35      	ldr	r3, [pc, #212]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d0f0      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ab0c:	4b31      	ldr	r3, [pc, #196]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab14:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d02f      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab24:	693a      	ldr	r2, [r7, #16]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d028      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab2a:	4b2a      	ldr	r3, [pc, #168]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab34:	4b29      	ldr	r3, [pc, #164]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ab36:	2201      	movs	r2, #1
 800ab38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ab3a:	4b28      	ldr	r3, [pc, #160]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ab40:	4a24      	ldr	r2, [pc, #144]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ab46:	4b23      	ldr	r3, [pc, #140]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab4a:	f003 0301 	and.w	r3, r3, #1
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d114      	bne.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ab52:	f7fc f8b7 	bl	8006cc4 <HAL_GetTick>
 800ab56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab58:	e00a      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab5a:	f7fc f8b3 	bl	8006cc4 <HAL_GetTick>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d901      	bls.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e02a      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab70:	4b18      	ldr	r3, [pc, #96]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab74:	f003 0302 	and.w	r3, r3, #2
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d0ee      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab88:	d10d      	bne.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800ab8a:	4b12      	ldr	r3, [pc, #72]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ab9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab9e:	490d      	ldr	r1, [pc, #52]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aba0:	4313      	orrs	r3, r2
 800aba2:	608b      	str	r3, [r1, #8]
 800aba4:	e005      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800aba6:	4b0b      	ldr	r3, [pc, #44]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	4a0a      	ldr	r2, [pc, #40]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800abb0:	6093      	str	r3, [r2, #8]
 800abb2:	4b08      	ldr	r3, [pc, #32]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abbe:	4905      	ldr	r1, [pc, #20]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abc0:	4313      	orrs	r3, r2
 800abc2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3718      	adds	r7, #24
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	42470068 	.word	0x42470068
 800abd4:	40023800 	.word	0x40023800
 800abd8:	40007000 	.word	0x40007000
 800abdc:	42470e40 	.word	0x42470e40

0800abe0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e066      	b.n	800acc4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	7f5b      	ldrb	r3, [r3, #29]
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d105      	bne.n	800ac0c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7fb fc94 	bl	8006534 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	22ca      	movs	r2, #202	; 0xca
 800ac18:	625a      	str	r2, [r3, #36]	; 0x24
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2253      	movs	r2, #83	; 0x53
 800ac20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 fa45 	bl	800b0b2 <RTC_EnterInitMode>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d12c      	bne.n	800ac8c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	6812      	ldr	r2, [r2, #0]
 800ac3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac44:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6899      	ldr	r1, [r3, #8]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	431a      	orrs	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	431a      	orrs	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	430a      	orrs	r2, r1
 800ac62:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	68d2      	ldr	r2, [r2, #12]
 800ac6c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6919      	ldr	r1, [r3, #16]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	041a      	lsls	r2, r3, #16
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	430a      	orrs	r2, r1
 800ac80:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fa4c 	bl	800b120 <RTC_ExitInitMode>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d113      	bne.n	800acba <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aca0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	699a      	ldr	r2, [r3, #24]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	430a      	orrs	r2, r1
 800acb2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	22ff      	movs	r2, #255	; 0xff
 800acc0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800accc:	b590      	push	{r4, r7, lr}
 800acce:	b087      	sub	sp, #28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800acd8:	2300      	movs	r3, #0
 800acda:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	7f1b      	ldrb	r3, [r3, #28]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d101      	bne.n	800ace8 <HAL_RTC_SetTime+0x1c>
 800ace4:	2302      	movs	r3, #2
 800ace6:	e087      	b.n	800adf8 <HAL_RTC_SetTime+0x12c>
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2201      	movs	r2, #1
 800acec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2202      	movs	r2, #2
 800acf2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d126      	bne.n	800ad48 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d102      	bne.n	800ad0e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 fa29 	bl	800b16a <RTC_ByteToBcd2>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	785b      	ldrb	r3, [r3, #1]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f000 fa22 	bl	800b16a <RTC_ByteToBcd2>
 800ad26:	4603      	mov	r3, r0
 800ad28:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ad2a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	789b      	ldrb	r3, [r3, #2]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 fa1a 	bl	800b16a <RTC_ByteToBcd2>
 800ad36:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ad38:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	78db      	ldrb	r3, [r3, #3]
 800ad40:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ad42:	4313      	orrs	r3, r2
 800ad44:	617b      	str	r3, [r7, #20]
 800ad46:	e018      	b.n	800ad7a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d102      	bne.n	800ad5c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	785b      	ldrb	r3, [r3, #1]
 800ad66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ad68:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ad6e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	78db      	ldrb	r3, [r3, #3]
 800ad74:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ad76:	4313      	orrs	r3, r2
 800ad78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	22ca      	movs	r2, #202	; 0xca
 800ad80:	625a      	str	r2, [r3, #36]	; 0x24
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2253      	movs	r2, #83	; 0x53
 800ad88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f000 f991 	bl	800b0b2 <RTC_EnterInitMode>
 800ad90:	4603      	mov	r3, r0
 800ad92:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ad94:	7cfb      	ldrb	r3, [r7, #19]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d120      	bne.n	800addc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ada4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ada8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689a      	ldr	r2, [r3, #8]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800adb8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	6899      	ldr	r1, [r3, #8]
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	68da      	ldr	r2, [r3, #12]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	431a      	orrs	r2, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f000 f9a4 	bl	800b120 <RTC_ExitInitMode>
 800add8:	4603      	mov	r3, r0
 800adda:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800addc:	7cfb      	ldrb	r3, [r7, #19]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d102      	bne.n	800ade8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2201      	movs	r2, #1
 800ade6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	22ff      	movs	r2, #255	; 0xff
 800adee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	771a      	strb	r2, [r3, #28]

  return status;
 800adf6:	7cfb      	ldrb	r3, [r7, #19]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	371c      	adds	r7, #28
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd90      	pop	{r4, r7, pc}

0800ae00 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ae32:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ae36:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	0c1b      	lsrs	r3, r3, #16
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae42:	b2da      	uxtb	r2, r3
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	0a1b      	lsrs	r3, r3, #8
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	0d9b      	lsrs	r3, r3, #22
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d11a      	bne.n	800aeb2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f000 f98f 	bl	800b1a4 <RTC_Bcd2ToByte>
 800ae86:	4603      	mov	r3, r0
 800ae88:	461a      	mov	r2, r3
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	785b      	ldrb	r3, [r3, #1]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f000 f986 	bl	800b1a4 <RTC_Bcd2ToByte>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	789b      	ldrb	r3, [r3, #2]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 f97d 	bl	800b1a4 <RTC_Bcd2ToByte>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	461a      	mov	r2, r3
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3718      	adds	r7, #24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aebc:	b590      	push	{r4, r7, lr}
 800aebe:	b087      	sub	sp, #28
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800aec8:	2300      	movs	r3, #0
 800aeca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	7f1b      	ldrb	r3, [r3, #28]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d101      	bne.n	800aed8 <HAL_RTC_SetDate+0x1c>
 800aed4:	2302      	movs	r3, #2
 800aed6:	e071      	b.n	800afbc <HAL_RTC_SetDate+0x100>
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2201      	movs	r2, #1
 800aedc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2202      	movs	r2, #2
 800aee2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10e      	bne.n	800af08 <HAL_RTC_SetDate+0x4c>
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	785b      	ldrb	r3, [r3, #1]
 800aeee:	f003 0310 	and.w	r3, r3, #16
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d008      	beq.n	800af08 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	785b      	ldrb	r3, [r3, #1]
 800aefa:	f023 0310 	bic.w	r3, r3, #16
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	330a      	adds	r3, #10
 800af02:	b2da      	uxtb	r2, r3
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d11c      	bne.n	800af48 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	78db      	ldrb	r3, [r3, #3]
 800af12:	4618      	mov	r0, r3
 800af14:	f000 f929 	bl	800b16a <RTC_ByteToBcd2>
 800af18:	4603      	mov	r3, r0
 800af1a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	785b      	ldrb	r3, [r3, #1]
 800af20:	4618      	mov	r0, r3
 800af22:	f000 f922 	bl	800b16a <RTC_ByteToBcd2>
 800af26:	4603      	mov	r3, r0
 800af28:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800af2a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	789b      	ldrb	r3, [r3, #2]
 800af30:	4618      	mov	r0, r3
 800af32:	f000 f91a 	bl	800b16a <RTC_ByteToBcd2>
 800af36:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800af38:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800af42:	4313      	orrs	r3, r2
 800af44:	617b      	str	r3, [r7, #20]
 800af46:	e00e      	b.n	800af66 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	78db      	ldrb	r3, [r3, #3]
 800af4c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	785b      	ldrb	r3, [r3, #1]
 800af52:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800af54:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800af5a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800af62:	4313      	orrs	r3, r2
 800af64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	22ca      	movs	r2, #202	; 0xca
 800af6c:	625a      	str	r2, [r3, #36]	; 0x24
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2253      	movs	r2, #83	; 0x53
 800af74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f000 f89b 	bl	800b0b2 <RTC_EnterInitMode>
 800af7c:	4603      	mov	r3, r0
 800af7e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800af80:	7cfb      	ldrb	r3, [r7, #19]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10c      	bne.n	800afa0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800af94:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f000 f8c2 	bl	800b120 <RTC_ExitInitMode>
 800af9c:	4603      	mov	r3, r0
 800af9e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800afa0:	7cfb      	ldrb	r3, [r7, #19]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d102      	bne.n	800afac <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2201      	movs	r2, #1
 800afaa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	22ff      	movs	r2, #255	; 0xff
 800afb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	771a      	strb	r2, [r3, #28]

  return status;
 800afba:	7cfb      	ldrb	r3, [r7, #19]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	371c      	adds	r7, #28
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd90      	pop	{r4, r7, pc}

0800afc4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800afde:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800afe2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	0c1b      	lsrs	r3, r3, #16
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	0a1b      	lsrs	r3, r3, #8
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	f003 031f 	and.w	r3, r3, #31
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b006:	b2da      	uxtb	r2, r3
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	0b5b      	lsrs	r3, r3, #13
 800b010:	b2db      	uxtb	r3, r3
 800b012:	f003 0307 	and.w	r3, r3, #7
 800b016:	b2da      	uxtb	r2, r3
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d11a      	bne.n	800b058 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	78db      	ldrb	r3, [r3, #3]
 800b026:	4618      	mov	r0, r3
 800b028:	f000 f8bc 	bl	800b1a4 <RTC_Bcd2ToByte>
 800b02c:	4603      	mov	r3, r0
 800b02e:	461a      	mov	r2, r3
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	785b      	ldrb	r3, [r3, #1]
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 f8b3 	bl	800b1a4 <RTC_Bcd2ToByte>
 800b03e:	4603      	mov	r3, r0
 800b040:	461a      	mov	r2, r3
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	789b      	ldrb	r3, [r3, #2]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 f8aa 	bl	800b1a4 <RTC_Bcd2ToByte>
 800b050:	4603      	mov	r3, r0
 800b052:	461a      	mov	r2, r3
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3718      	adds	r7, #24
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b084      	sub	sp, #16
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	68da      	ldr	r2, [r3, #12]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b07c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b07e:	f7fb fe21 	bl	8006cc4 <HAL_GetTick>
 800b082:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b084:	e009      	b.n	800b09a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b086:	f7fb fe1d 	bl	8006cc4 <HAL_GetTick>
 800b08a:	4602      	mov	r2, r0
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b094:	d901      	bls.n	800b09a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e007      	b.n	800b0aa <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	f003 0320 	and.w	r3, r3, #32
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d0ee      	beq.n	800b086 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d122      	bne.n	800b116 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68da      	ldr	r2, [r3, #12]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b0de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b0e0:	f7fb fdf0 	bl	8006cc4 <HAL_GetTick>
 800b0e4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b0e6:	e00c      	b.n	800b102 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b0e8:	f7fb fdec 	bl	8006cc4 <HAL_GetTick>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b0f6:	d904      	bls.n	800b102 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2204      	movs	r2, #4
 800b0fc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d102      	bne.n	800b116 <RTC_EnterInitMode+0x64>
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d1e8      	bne.n	800b0e8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b116:	7bfb      	ldrb	r3, [r7, #15]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b128:	2300      	movs	r3, #0
 800b12a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68da      	ldr	r2, [r3, #12]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b13a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	f003 0320 	and.w	r3, r3, #32
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10a      	bne.n	800b160 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f7ff ff89 	bl	800b062 <HAL_RTC_WaitForSynchro>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d004      	beq.n	800b160 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2204      	movs	r2, #4
 800b15a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b160:	7bfb      	ldrb	r3, [r7, #15]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b085      	sub	sp, #20
 800b16e:	af00      	add	r7, sp, #0
 800b170:	4603      	mov	r3, r0
 800b172:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800b174:	2300      	movs	r3, #0
 800b176:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800b178:	e005      	b.n	800b186 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
 800b17c:	3301      	adds	r3, #1
 800b17e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800b180:	79fb      	ldrb	r3, [r7, #7]
 800b182:	3b0a      	subs	r3, #10
 800b184:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b186:	79fb      	ldrb	r3, [r7, #7]
 800b188:	2b09      	cmp	r3, #9
 800b18a:	d8f6      	bhi.n	800b17a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
 800b18e:	011b      	lsls	r3, r3, #4
 800b190:	b2da      	uxtb	r2, r3
 800b192:	79fb      	ldrb	r3, [r7, #7]
 800b194:	4313      	orrs	r3, r2
 800b196:	b2db      	uxtb	r3, r3
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3714      	adds	r7, #20
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b1b2:	79fb      	ldrb	r3, [r7, #7]
 800b1b4:	091b      	lsrs	r3, r3, #4
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	0092      	lsls	r2, r2, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	005b      	lsls	r3, r3, #1
 800b1c0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800b1c2:	79fb      	ldrb	r3, [r7, #7]
 800b1c4:	f003 030f 	and.w	r3, r3, #15
 800b1c8:	b2da      	uxtb	r2, r3
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	b2db      	uxtb	r3, r3
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d101      	bne.n	800b1ee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e022      	b.n	800b234 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d105      	bne.n	800b206 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7fb f9c1 	bl	8006588 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2203      	movs	r2, #3
 800b20a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f814 	bl	800b23c <HAL_SD_InitCard>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d001      	beq.n	800b21e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e00a      	b.n	800b234 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2201      	movs	r2, #1
 800b22e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b23c:	b5b0      	push	{r4, r5, r7, lr}
 800b23e:	b08e      	sub	sp, #56	; 0x38
 800b240:	af04      	add	r7, sp, #16
 800b242:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b244:	2300      	movs	r3, #0
 800b246:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b248:	2300      	movs	r3, #0
 800b24a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b24c:	2300      	movs	r3, #0
 800b24e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b250:	2300      	movs	r3, #0
 800b252:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b254:	2300      	movs	r3, #0
 800b256:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b258:	2376      	movs	r3, #118	; 0x76
 800b25a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681d      	ldr	r5, [r3, #0]
 800b260:	466c      	mov	r4, sp
 800b262:	f107 0314 	add.w	r3, r7, #20
 800b266:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b26a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b26e:	f107 0308 	add.w	r3, r7, #8
 800b272:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b274:	4628      	mov	r0, r5
 800b276:	f001 ff61 	bl	800d13c <SDIO_Init>
 800b27a:	4603      	mov	r3, r0
 800b27c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	e04f      	b.n	800b32c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b28c:	4b29      	ldr	r3, [pc, #164]	; (800b334 <HAL_SD_InitCard+0xf8>)
 800b28e:	2200      	movs	r2, #0
 800b290:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4618      	mov	r0, r3
 800b298:	f001 ff99 	bl	800d1ce <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b29c:	4b25      	ldr	r3, [pc, #148]	; (800b334 <HAL_SD_InitCard+0xf8>)
 800b29e:	2201      	movs	r2, #1
 800b2a0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b2a2:	2002      	movs	r0, #2
 800b2a4:	f7fb fd42 	bl	8006d2c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fe69 	bl	800bf80 <SD_PowerON>
 800b2ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00b      	beq.n	800b2ce <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2c2:	6a3b      	ldr	r3, [r7, #32]
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e02e      	b.n	800b32c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fd88 	bl	800bde4 <SD_InitCard>
 800b2d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2d6:	6a3b      	ldr	r3, [r7, #32]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2e8:	6a3b      	ldr	r3, [r7, #32]
 800b2ea:	431a      	orrs	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e01b      	b.n	800b32c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f001 fff8 	bl	800d2f2 <SDMMC_CmdBlockLength>
 800b302:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b304:	6a3b      	ldr	r3, [r7, #32]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00f      	beq.n	800b32a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a0a      	ldr	r2, [pc, #40]	; (800b338 <HAL_SD_InitCard+0xfc>)
 800b310:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b316:	6a3b      	ldr	r3, [r7, #32]
 800b318:	431a      	orrs	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e000      	b.n	800b32c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3728      	adds	r7, #40	; 0x28
 800b330:	46bd      	mov	sp, r7
 800b332:	bdb0      	pop	{r4, r5, r7, pc}
 800b334:	422580a0 	.word	0x422580a0
 800b338:	004005ff 	.word	0x004005ff

0800b33c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b092      	sub	sp, #72	; 0x48
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b34a:	f7fb fcbb 	bl	8006cc4 <HAL_GetTick>
 800b34e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d107      	bne.n	800b36e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b362:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	e1bd      	b.n	800b6ea <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b374:	b2db      	uxtb	r3, r3
 800b376:	2b01      	cmp	r3, #1
 800b378:	f040 81b0 	bne.w	800b6dc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	441a      	add	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d907      	bls.n	800b3a0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b394:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	e1a4      	b.n	800b6ea <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2203      	movs	r2, #3
 800b3a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d002      	beq.n	800b3be <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ba:	025b      	lsls	r3, r3, #9
 800b3bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b3be:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	025b      	lsls	r3, r3, #9
 800b3c8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b3ca:	2390      	movs	r3, #144	; 0x90
 800b3cc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f107 0214 	add.w	r2, r7, #20
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f001 ff58 	bl	800d29a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d90a      	bls.n	800b406 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f001 ffbc 	bl	800d37a <SDMMC_CmdReadMultiBlock>
 800b402:	6478      	str	r0, [r7, #68]	; 0x44
 800b404:	e009      	b.n	800b41a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2201      	movs	r2, #1
 800b40a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b412:	4618      	mov	r0, r3
 800b414:	f001 ff8f 	bl	800d336 <SDMMC_CmdReadSingleBlock>
 800b418:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b41a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d012      	beq.n	800b446 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a7a      	ldr	r2, [pc, #488]	; (800b610 <HAL_SD_ReadBlocks+0x2d4>)
 800b426:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b42e:	431a      	orrs	r2, r3
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e151      	b.n	800b6ea <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b44a:	e061      	b.n	800b510 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b456:	2b00      	cmp	r3, #0
 800b458:	d03c      	beq.n	800b4d4 <HAL_SD_ReadBlocks+0x198>
 800b45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d039      	beq.n	800b4d4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b460:	2300      	movs	r3, #0
 800b462:	643b      	str	r3, [r7, #64]	; 0x40
 800b464:	e033      	b.n	800b4ce <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f001 fe91 	bl	800d192 <SDIO_ReadFIFO>
 800b470:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b474:	b2da      	uxtb	r2, r3
 800b476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b478:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b47c:	3301      	adds	r3, #1
 800b47e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b482:	3b01      	subs	r3, #1
 800b484:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b488:	0a1b      	lsrs	r3, r3, #8
 800b48a:	b2da      	uxtb	r2, r3
 800b48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b48e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b492:	3301      	adds	r3, #1
 800b494:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b498:	3b01      	subs	r3, #1
 800b49a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49e:	0c1b      	lsrs	r3, r3, #16
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b4:	0e1b      	lsrs	r3, r3, #24
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4be:	3301      	adds	r3, #1
 800b4c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800b4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	643b      	str	r3, [r7, #64]	; 0x40
 800b4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4d0:	2b07      	cmp	r3, #7
 800b4d2:	d9c8      	bls.n	800b466 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b4d4:	f7fb fbf6 	bl	8006cc4 <HAL_GetTick>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d902      	bls.n	800b4ea <HAL_SD_ReadBlocks+0x1ae>
 800b4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d112      	bne.n	800b510 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a48      	ldr	r2, [pc, #288]	; (800b610 <HAL_SD_ReadBlocks+0x2d4>)
 800b4f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b50c:	2303      	movs	r3, #3
 800b50e:	e0ec      	b.n	800b6ea <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b516:	f240 332a 	movw	r3, #810	; 0x32a
 800b51a:	4013      	ands	r3, r2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d095      	beq.n	800b44c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d022      	beq.n	800b574 <HAL_SD_ReadBlocks+0x238>
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d91f      	bls.n	800b574 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d01b      	beq.n	800b574 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4618      	mov	r0, r3
 800b542:	f001 ff81 	bl	800d448 <SDMMC_CmdStopTransfer>
 800b546:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d012      	beq.n	800b574 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a2f      	ldr	r2, [pc, #188]	; (800b610 <HAL_SD_ReadBlocks+0x2d4>)
 800b554:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b55a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b55c:	431a      	orrs	r2, r3
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2201      	movs	r2, #1
 800b566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2200      	movs	r2, #0
 800b56e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	e0ba      	b.n	800b6ea <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57a:	f003 0308 	and.w	r3, r3, #8
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d012      	beq.n	800b5a8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a22      	ldr	r2, [pc, #136]	; (800b610 <HAL_SD_ReadBlocks+0x2d4>)
 800b588:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58e:	f043 0208 	orr.w	r2, r3, #8
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e0a0      	b.n	800b6ea <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ae:	f003 0302 	and.w	r3, r3, #2
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d012      	beq.n	800b5dc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a15      	ldr	r2, [pc, #84]	; (800b610 <HAL_SD_ReadBlocks+0x2d4>)
 800b5bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c2:	f043 0202 	orr.w	r2, r3, #2
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e086      	b.n	800b6ea <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e2:	f003 0320 	and.w	r3, r3, #32
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d063      	beq.n	800b6b2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a08      	ldr	r2, [pc, #32]	; (800b610 <HAL_SD_ReadBlocks+0x2d4>)
 800b5f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f6:	f043 0220 	orr.w	r2, r3, #32
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2201      	movs	r2, #1
 800b602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	e06c      	b.n	800b6ea <HAL_SD_ReadBlocks+0x3ae>
 800b610:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4618      	mov	r0, r3
 800b61a:	f001 fdba 	bl	800d192 <SDIO_ReadFIFO>
 800b61e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800b620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b622:	b2da      	uxtb	r2, r3
 800b624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b626:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62a:	3301      	adds	r3, #1
 800b62c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b630:	3b01      	subs	r3, #1
 800b632:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b636:	0a1b      	lsrs	r3, r3, #8
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b63c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b640:	3301      	adds	r3, #1
 800b642:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b646:	3b01      	subs	r3, #1
 800b648:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64c:	0c1b      	lsrs	r3, r3, #16
 800b64e:	b2da      	uxtb	r2, r3
 800b650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b652:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b656:	3301      	adds	r3, #1
 800b658:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65c:	3b01      	subs	r3, #1
 800b65e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b662:	0e1b      	lsrs	r3, r3, #24
 800b664:	b2da      	uxtb	r2, r3
 800b666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b668:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b66c:	3301      	adds	r3, #1
 800b66e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b672:	3b01      	subs	r3, #1
 800b674:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b676:	f7fb fb25 	bl	8006cc4 <HAL_GetTick>
 800b67a:	4602      	mov	r2, r0
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b682:	429a      	cmp	r2, r3
 800b684:	d902      	bls.n	800b68c <HAL_SD_ReadBlocks+0x350>
 800b686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d112      	bne.n	800b6b2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a18      	ldr	r2, [pc, #96]	; (800b6f4 <HAL_SD_ReadBlocks+0x3b8>)
 800b692:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b698:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e01b      	b.n	800b6ea <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <HAL_SD_ReadBlocks+0x38a>
 800b6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1a6      	bne.n	800b614 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f240 523a 	movw	r2, #1338	; 0x53a
 800b6ce:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	e006      	b.n	800b6ea <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
  }
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3748      	adds	r7, #72	; 0x48
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	004005ff 	.word	0x004005ff

0800b6f8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b092      	sub	sp, #72	; 0x48
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b706:	f7fb fadd 	bl	8006cc4 <HAL_GetTick>
 800b70a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d107      	bne.n	800b72a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b726:	2301      	movs	r3, #1
 800b728:	e166      	b.n	800b9f8 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b730:	b2db      	uxtb	r3, r3
 800b732:	2b01      	cmp	r3, #1
 800b734:	f040 8159 	bne.w	800b9ea <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b73e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	441a      	add	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b748:	429a      	cmp	r2, r3
 800b74a:	d907      	bls.n	800b75c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b750:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	e14d      	b.n	800b9f8 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2203      	movs	r2, #3
 800b760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2200      	movs	r2, #0
 800b76a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b770:	2b01      	cmp	r3, #1
 800b772:	d002      	beq.n	800b77a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b776:	025b      	lsls	r3, r3, #9
 800b778:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b77a:	f04f 33ff 	mov.w	r3, #4294967295
 800b77e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	025b      	lsls	r3, r3, #9
 800b784:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b786:	2390      	movs	r3, #144	; 0x90
 800b788:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b78a:	2300      	movs	r3, #0
 800b78c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b78e:	2300      	movs	r3, #0
 800b790:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b792:	2301      	movs	r3, #1
 800b794:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f107 0218 	add.w	r2, r7, #24
 800b79e:	4611      	mov	r1, r2
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f001 fd7a 	bl	800d29a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d90a      	bls.n	800b7c2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f001 fe22 	bl	800d402 <SDMMC_CmdWriteMultiBlock>
 800b7be:	6478      	str	r0, [r7, #68]	; 0x44
 800b7c0:	e009      	b.n	800b7d6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2210      	movs	r2, #16
 800b7c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f001 fdf5 	bl	800d3be <SDMMC_CmdWriteSingleBlock>
 800b7d4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d012      	beq.n	800b802 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a87      	ldr	r2, [pc, #540]	; (800ba00 <HAL_SD_WriteBlocks+0x308>)
 800b7e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ea:	431a      	orrs	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e0fa      	b.n	800b9f8 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b806:	e065      	b.n	800b8d4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b80e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b812:	2b00      	cmp	r3, #0
 800b814:	d040      	beq.n	800b898 <HAL_SD_WriteBlocks+0x1a0>
 800b816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d03d      	beq.n	800b898 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800b81c:	2300      	movs	r3, #0
 800b81e:	643b      	str	r3, [r7, #64]	; 0x40
 800b820:	e037      	b.n	800b892 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800b822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82a:	3301      	adds	r3, #1
 800b82c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b830:	3b01      	subs	r3, #1
 800b832:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	021a      	lsls	r2, r3, #8
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b842:	3301      	adds	r3, #1
 800b844:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b848:	3b01      	subs	r3, #1
 800b84a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	041a      	lsls	r2, r3, #16
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	4313      	orrs	r3, r2
 800b856:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b85a:	3301      	adds	r3, #1
 800b85c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b860:	3b01      	subs	r3, #1
 800b862:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	061a      	lsls	r2, r3, #24
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b872:	3301      	adds	r3, #1
 800b874:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b878:	3b01      	subs	r3, #1
 800b87a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f107 0214 	add.w	r2, r7, #20
 800b884:	4611      	mov	r1, r2
 800b886:	4618      	mov	r0, r3
 800b888:	f001 fc90 	bl	800d1ac <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b88c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b88e:	3301      	adds	r3, #1
 800b890:	643b      	str	r3, [r7, #64]	; 0x40
 800b892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b894:	2b07      	cmp	r3, #7
 800b896:	d9c4      	bls.n	800b822 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b898:	f7fb fa14 	bl	8006cc4 <HAL_GetTick>
 800b89c:	4602      	mov	r2, r0
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	1ad3      	subs	r3, r2, r3
 800b8a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d902      	bls.n	800b8ae <HAL_SD_WriteBlocks+0x1b6>
 800b8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d112      	bne.n	800b8d4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a53      	ldr	r2, [pc, #332]	; (800ba00 <HAL_SD_WriteBlocks+0x308>)
 800b8b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b8d0:	2303      	movs	r3, #3
 800b8d2:	e091      	b.n	800b9f8 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8da:	f240 331a 	movw	r3, #794	; 0x31a
 800b8de:	4013      	ands	r3, r2
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d091      	beq.n	800b808 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d022      	beq.n	800b938 <HAL_SD_WriteBlocks+0x240>
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d91f      	bls.n	800b938 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d01b      	beq.n	800b938 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4618      	mov	r0, r3
 800b906:	f001 fd9f 	bl	800d448 <SDMMC_CmdStopTransfer>
 800b90a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b90c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d012      	beq.n	800b938 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a3a      	ldr	r2, [pc, #232]	; (800ba00 <HAL_SD_WriteBlocks+0x308>)
 800b918:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b91e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b920:	431a      	orrs	r2, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	e05f      	b.n	800b9f8 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b93e:	f003 0308 	and.w	r3, r3, #8
 800b942:	2b00      	cmp	r3, #0
 800b944:	d012      	beq.n	800b96c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a2d      	ldr	r2, [pc, #180]	; (800ba00 <HAL_SD_WriteBlocks+0x308>)
 800b94c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b952:	f043 0208 	orr.w	r2, r3, #8
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	e045      	b.n	800b9f8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b972:	f003 0302 	and.w	r3, r3, #2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d012      	beq.n	800b9a0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a20      	ldr	r2, [pc, #128]	; (800ba00 <HAL_SD_WriteBlocks+0x308>)
 800b980:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b986:	f043 0202 	orr.w	r2, r3, #2
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2201      	movs	r2, #1
 800b992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e02b      	b.n	800b9f8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a6:	f003 0310 	and.w	r3, r3, #16
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d012      	beq.n	800b9d4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a13      	ldr	r2, [pc, #76]	; (800ba00 <HAL_SD_WriteBlocks+0x308>)
 800b9b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ba:	f043 0210 	orr.w	r2, r3, #16
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e011      	b.n	800b9f8 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b9dc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	e006      	b.n	800b9f8 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
  }
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3748      	adds	r7, #72	; 0x48
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	004005ff 	.word	0x004005ff

0800ba04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba12:	0f9b      	lsrs	r3, r3, #30
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba1e:	0e9b      	lsrs	r3, r3, #26
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	f003 030f 	and.w	r3, r3, #15
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba30:	0e1b      	lsrs	r3, r3, #24
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f003 0303 	and.w	r3, r3, #3
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba42:	0c1b      	lsrs	r3, r3, #16
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba4e:	0a1b      	lsrs	r3, r3, #8
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba5a:	b2da      	uxtb	r2, r3
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba64:	0d1b      	lsrs	r3, r3, #20
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba70:	0c1b      	lsrs	r3, r3, #16
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	f003 030f 	and.w	r3, r3, #15
 800ba78:	b2da      	uxtb	r2, r3
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba82:	0bdb      	lsrs	r3, r3, #15
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	f003 0301 	and.w	r3, r3, #1
 800ba8a:	b2da      	uxtb	r2, r3
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba94:	0b9b      	lsrs	r3, r3, #14
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	f003 0301 	and.w	r3, r3, #1
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800baa6:	0b5b      	lsrs	r3, r3, #13
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bab8:	0b1b      	lsrs	r3, r3, #12
 800baba:	b2db      	uxtb	r3, r3
 800babc:	f003 0301 	and.w	r3, r3, #1
 800bac0:	b2da      	uxtb	r2, r3
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2200      	movs	r2, #0
 800baca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d163      	bne.n	800bb9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bad8:	009a      	lsls	r2, r3, #2
 800bada:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bade:	4013      	ands	r3, r2
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bae4:	0f92      	lsrs	r2, r2, #30
 800bae6:	431a      	orrs	r2, r3
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baf0:	0edb      	lsrs	r3, r3, #27
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	f003 0307 	and.w	r3, r3, #7
 800baf8:	b2da      	uxtb	r2, r3
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb02:	0e1b      	lsrs	r3, r3, #24
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	f003 0307 	and.w	r3, r3, #7
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb14:	0d5b      	lsrs	r3, r3, #21
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	f003 0307 	and.w	r3, r3, #7
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb26:	0c9b      	lsrs	r3, r3, #18
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	f003 0307 	and.w	r3, r3, #7
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb38:	0bdb      	lsrs	r3, r3, #15
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	f003 0307 	and.w	r3, r3, #7
 800bb40:	b2da      	uxtb	r2, r3
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	1c5a      	adds	r2, r3, #1
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	7e1b      	ldrb	r3, [r3, #24]
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	f003 0307 	and.w	r3, r3, #7
 800bb5a:	3302      	adds	r3, #2
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bb66:	fb03 f202 	mul.w	r2, r3, r2
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	7a1b      	ldrb	r3, [r3, #8]
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	f003 030f 	and.w	r3, r3, #15
 800bb78:	2201      	movs	r2, #1
 800bb7a:	409a      	lsls	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bb88:	0a52      	lsrs	r2, r2, #9
 800bb8a:	fb03 f202 	mul.w	r2, r3, r2
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb98:	661a      	str	r2, [r3, #96]	; 0x60
 800bb9a:	e031      	b.n	800bc00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d11d      	bne.n	800bbe0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bba8:	041b      	lsls	r3, r3, #16
 800bbaa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbb2:	0c1b      	lsrs	r3, r3, #16
 800bbb4:	431a      	orrs	r2, r3
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	029a      	lsls	r2, r3, #10
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbd4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	661a      	str	r2, [r3, #96]	; 0x60
 800bbde:	e00f      	b.n	800bc00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a58      	ldr	r2, [pc, #352]	; (800bd48 <HAL_SD_GetCardCSD+0x344>)
 800bbe6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e09d      	b.n	800bd3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc04:	0b9b      	lsrs	r3, r3, #14
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	f003 0301 	and.w	r3, r3, #1
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc16:	09db      	lsrs	r3, r3, #7
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc1e:	b2da      	uxtb	r2, r3
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc2e:	b2da      	uxtb	r2, r3
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc38:	0fdb      	lsrs	r3, r3, #31
 800bc3a:	b2da      	uxtb	r2, r3
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc44:	0f5b      	lsrs	r3, r3, #29
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	f003 0303 	and.w	r3, r3, #3
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc56:	0e9b      	lsrs	r3, r3, #26
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	f003 0307 	and.w	r3, r3, #7
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc68:	0d9b      	lsrs	r3, r3, #22
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	f003 030f 	and.w	r3, r3, #15
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc7a:	0d5b      	lsrs	r3, r3, #21
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	f003 0301 	and.w	r3, r3, #1
 800bc82:	b2da      	uxtb	r2, r3
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc96:	0c1b      	lsrs	r3, r3, #16
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	f003 0301 	and.w	r3, r3, #1
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcaa:	0bdb      	lsrs	r3, r3, #15
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcbe:	0b9b      	lsrs	r3, r3, #14
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	f003 0301 	and.w	r3, r3, #1
 800bcc6:	b2da      	uxtb	r2, r3
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd2:	0b5b      	lsrs	r3, r3, #13
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bce6:	0b1b      	lsrs	r3, r3, #12
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	f003 0301 	and.w	r3, r3, #1
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcfa:	0a9b      	lsrs	r3, r3, #10
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	f003 0303 	and.w	r3, r3, #3
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd0e:	0a1b      	lsrs	r3, r3, #8
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	f003 0303 	and.w	r3, r3, #3
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd22:	085b      	lsrs	r3, r3, #1
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd2a:	b2da      	uxtb	r2, r3
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	370c      	adds	r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr
 800bd48:	004005ff 	.word	0x004005ff

0800bd4c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bdac:	2300      	movs	r3, #0
 800bdae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bdb0:	f107 030c 	add.w	r3, r7, #12
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 f970 	bl	800c09c <SD_SendStatus>
 800bdbc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d005      	beq.n	800bdd0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	431a      	orrs	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	0a5b      	lsrs	r3, r3, #9
 800bdd4:	f003 030f 	and.w	r3, r3, #15
 800bdd8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bdda:	693b      	ldr	r3, [r7, #16]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bde4:	b5b0      	push	{r4, r5, r7, lr}
 800bde6:	b094      	sub	sp, #80	; 0x50
 800bde8:	af04      	add	r7, sp, #16
 800bdea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bdec:	2301      	movs	r3, #1
 800bdee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f001 f9f8 	bl	800d1ea <SDIO_GetPowerState>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800be00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800be04:	e0b8      	b.n	800bf78 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d02f      	beq.n	800be6e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4618      	mov	r0, r3
 800be14:	f001 fbdf 	bl	800d5d6 <SDMMC_CmdSendCID>
 800be18:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800be1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <SD_InitCard+0x40>
    {
      return errorstate;
 800be20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be22:	e0a9      	b.n	800bf78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2100      	movs	r1, #0
 800be2a:	4618      	mov	r0, r3
 800be2c:	f001 fa22 	bl	800d274 <SDIO_GetResponse>
 800be30:	4602      	mov	r2, r0
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2104      	movs	r1, #4
 800be3c:	4618      	mov	r0, r3
 800be3e:	f001 fa19 	bl	800d274 <SDIO_GetResponse>
 800be42:	4602      	mov	r2, r0
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2108      	movs	r1, #8
 800be4e:	4618      	mov	r0, r3
 800be50:	f001 fa10 	bl	800d274 <SDIO_GetResponse>
 800be54:	4602      	mov	r2, r0
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	210c      	movs	r1, #12
 800be60:	4618      	mov	r0, r3
 800be62:	f001 fa07 	bl	800d274 <SDIO_GetResponse>
 800be66:	4602      	mov	r2, r0
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be72:	2b03      	cmp	r3, #3
 800be74:	d00d      	beq.n	800be92 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f107 020e 	add.w	r2, r7, #14
 800be7e:	4611      	mov	r1, r2
 800be80:	4618      	mov	r0, r3
 800be82:	f001 fbe5 	bl	800d650 <SDMMC_CmdSetRelAdd>
 800be86:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800be88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <SD_InitCard+0xae>
    {
      return errorstate;
 800be8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be90:	e072      	b.n	800bf78 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be96:	2b03      	cmp	r3, #3
 800be98:	d036      	beq.n	800bf08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800be9a:	89fb      	ldrh	r3, [r7, #14]
 800be9c:	461a      	mov	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beaa:	041b      	lsls	r3, r3, #16
 800beac:	4619      	mov	r1, r3
 800beae:	4610      	mov	r0, r2
 800beb0:	f001 fbaf 	bl	800d612 <SDMMC_CmdSendCSD>
 800beb4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800beb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bebe:	e05b      	b.n	800bf78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2100      	movs	r1, #0
 800bec6:	4618      	mov	r0, r3
 800bec8:	f001 f9d4 	bl	800d274 <SDIO_GetResponse>
 800becc:	4602      	mov	r2, r0
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2104      	movs	r1, #4
 800bed8:	4618      	mov	r0, r3
 800beda:	f001 f9cb 	bl	800d274 <SDIO_GetResponse>
 800bede:	4602      	mov	r2, r0
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2108      	movs	r1, #8
 800beea:	4618      	mov	r0, r3
 800beec:	f001 f9c2 	bl	800d274 <SDIO_GetResponse>
 800bef0:	4602      	mov	r2, r0
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	210c      	movs	r1, #12
 800befc:	4618      	mov	r0, r3
 800befe:	f001 f9b9 	bl	800d274 <SDIO_GetResponse>
 800bf02:	4602      	mov	r2, r0
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2104      	movs	r1, #4
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f001 f9b0 	bl	800d274 <SDIO_GetResponse>
 800bf14:	4603      	mov	r3, r0
 800bf16:	0d1a      	lsrs	r2, r3, #20
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bf1c:	f107 0310 	add.w	r3, r7, #16
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7ff fd6e 	bl	800ba04 <HAL_SD_GetCardCSD>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bf32:	e021      	b.n	800bf78 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6819      	ldr	r1, [r3, #0]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf3c:	041b      	lsls	r3, r3, #16
 800bf3e:	2200      	movs	r2, #0
 800bf40:	461c      	mov	r4, r3
 800bf42:	4615      	mov	r5, r2
 800bf44:	4622      	mov	r2, r4
 800bf46:	462b      	mov	r3, r5
 800bf48:	4608      	mov	r0, r1
 800bf4a:	f001 fa9f 	bl	800d48c <SDMMC_CmdSelDesel>
 800bf4e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <SD_InitCard+0x176>
  {
    return errorstate;
 800bf56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf58:	e00e      	b.n	800bf78 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681d      	ldr	r5, [r3, #0]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	466c      	mov	r4, sp
 800bf62:	f103 0210 	add.w	r2, r3, #16
 800bf66:	ca07      	ldmia	r2, {r0, r1, r2}
 800bf68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bf6c:	3304      	adds	r3, #4
 800bf6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf70:	4628      	mov	r0, r5
 800bf72:	f001 f8e3 	bl	800d13c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3740      	adds	r7, #64	; 0x40
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bdb0      	pop	{r4, r5, r7, pc}

0800bf80 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	617b      	str	r3, [r7, #20]
 800bf90:	2300      	movs	r3, #0
 800bf92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f001 fa9a 	bl	800d4d2 <SDMMC_CmdGoIdleState>
 800bf9e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <SD_PowerON+0x2a>
  {
    return errorstate;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	e072      	b.n	800c090 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f001 faad 	bl	800d50e <SDMMC_CmdOperCond>
 800bfb4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00d      	beq.n	800bfd8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f001 fa83 	bl	800d4d2 <SDMMC_CmdGoIdleState>
 800bfcc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d004      	beq.n	800bfde <SD_PowerON+0x5e>
    {
      return errorstate;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	e05b      	b.n	800c090 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d137      	bne.n	800c056 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2100      	movs	r1, #0
 800bfec:	4618      	mov	r0, r3
 800bfee:	f001 faad 	bl	800d54c <SDMMC_CmdAppCommand>
 800bff2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d02d      	beq.n	800c056 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bffa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bffe:	e047      	b.n	800c090 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2100      	movs	r1, #0
 800c006:	4618      	mov	r0, r3
 800c008:	f001 faa0 	bl	800d54c <SDMMC_CmdAppCommand>
 800c00c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <SD_PowerON+0x98>
    {
      return errorstate;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	e03b      	b.n	800c090 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	491e      	ldr	r1, [pc, #120]	; (800c098 <SD_PowerON+0x118>)
 800c01e:	4618      	mov	r0, r3
 800c020:	f001 fab6 	bl	800d590 <SDMMC_CmdAppOperCommand>
 800c024:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d002      	beq.n	800c032 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c02c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c030:	e02e      	b.n	800c090 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2100      	movs	r1, #0
 800c038:	4618      	mov	r0, r3
 800c03a:	f001 f91b 	bl	800d274 <SDIO_GetResponse>
 800c03e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	0fdb      	lsrs	r3, r3, #31
 800c044:	2b01      	cmp	r3, #1
 800c046:	d101      	bne.n	800c04c <SD_PowerON+0xcc>
 800c048:	2301      	movs	r3, #1
 800c04a:	e000      	b.n	800c04e <SD_PowerON+0xce>
 800c04c:	2300      	movs	r3, #0
 800c04e:	613b      	str	r3, [r7, #16]

    count++;
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	3301      	adds	r3, #1
 800c054:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d802      	bhi.n	800c066 <SD_PowerON+0xe6>
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d0cc      	beq.n	800c000 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d902      	bls.n	800c076 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c074:	e00c      	b.n	800c090 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d003      	beq.n	800c088 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2201      	movs	r2, #1
 800c084:	645a      	str	r2, [r3, #68]	; 0x44
 800c086:	e002      	b.n	800c08e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3718      	adds	r7, #24
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	c1100000 	.word	0xc1100000

0800c09c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d102      	bne.n	800c0b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c0ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c0b0:	e018      	b.n	800c0e4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ba:	041b      	lsls	r3, r3, #16
 800c0bc:	4619      	mov	r1, r3
 800c0be:	4610      	mov	r0, r2
 800c0c0:	f001 fae7 	bl	800d692 <SDMMC_CmdSendStatus>
 800c0c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	e009      	b.n	800c0e4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f001 f8cc 	bl	800d274 <SDIO_GetResponse>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c0e2:	2300      	movs	r3, #0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d101      	bne.n	800c102 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	e038      	b.n	800c174 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d106      	bne.n	800c11c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f7fa fbf8 	bl	800690c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3308      	adds	r3, #8
 800c124:	4619      	mov	r1, r3
 800c126:	4610      	mov	r0, r2
 800c128:	f000 ff30 	bl	800cf8c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6818      	ldr	r0, [r3, #0]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	461a      	mov	r2, r3
 800c136:	68b9      	ldr	r1, [r7, #8]
 800c138:	f000 ff92 	bl	800d060 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6858      	ldr	r0, [r3, #4]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	689a      	ldr	r2, [r3, #8]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c148:	6879      	ldr	r1, [r7, #4]
 800c14a:	f000 ffbf 	bl	800d0cc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	6892      	ldr	r2, [r2, #8]
 800c156:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	6892      	ldr	r2, [r2, #8]
 800c162:	f041 0101 	orr.w	r1, r1, #1
 800c166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d101      	bne.n	800c18e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	e041      	b.n	800c212 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b00      	cmp	r3, #0
 800c198:	d106      	bne.n	800c1a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7fa fad8 	bl	8006758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	3304      	adds	r3, #4
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	f000 f95e 	bl	800c47c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3708      	adds	r7, #8
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
	...

0800c21c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d001      	beq.n	800c234 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	e046      	b.n	800c2c2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2202      	movs	r2, #2
 800c238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a23      	ldr	r2, [pc, #140]	; (800c2d0 <HAL_TIM_Base_Start+0xb4>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d022      	beq.n	800c28c <HAL_TIM_Base_Start+0x70>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c24e:	d01d      	beq.n	800c28c <HAL_TIM_Base_Start+0x70>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a1f      	ldr	r2, [pc, #124]	; (800c2d4 <HAL_TIM_Base_Start+0xb8>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d018      	beq.n	800c28c <HAL_TIM_Base_Start+0x70>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a1e      	ldr	r2, [pc, #120]	; (800c2d8 <HAL_TIM_Base_Start+0xbc>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d013      	beq.n	800c28c <HAL_TIM_Base_Start+0x70>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a1c      	ldr	r2, [pc, #112]	; (800c2dc <HAL_TIM_Base_Start+0xc0>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d00e      	beq.n	800c28c <HAL_TIM_Base_Start+0x70>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a1b      	ldr	r2, [pc, #108]	; (800c2e0 <HAL_TIM_Base_Start+0xc4>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d009      	beq.n	800c28c <HAL_TIM_Base_Start+0x70>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a19      	ldr	r2, [pc, #100]	; (800c2e4 <HAL_TIM_Base_Start+0xc8>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d004      	beq.n	800c28c <HAL_TIM_Base_Start+0x70>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a18      	ldr	r2, [pc, #96]	; (800c2e8 <HAL_TIM_Base_Start+0xcc>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d111      	bne.n	800c2b0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	f003 0307 	and.w	r3, r3, #7
 800c296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b06      	cmp	r3, #6
 800c29c:	d010      	beq.n	800c2c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f042 0201 	orr.w	r2, r2, #1
 800c2ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2ae:	e007      	b.n	800c2c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f042 0201 	orr.w	r2, r2, #1
 800c2be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	40010000 	.word	0x40010000
 800c2d4:	40000400 	.word	0x40000400
 800c2d8:	40000800 	.word	0x40000800
 800c2dc:	40000c00 	.word	0x40000c00
 800c2e0:	40010400 	.word	0x40010400
 800c2e4:	40014000 	.word	0x40014000
 800c2e8:	40001800 	.word	0x40001800

0800c2ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c300:	2b01      	cmp	r3, #1
 800c302:	d101      	bne.n	800c308 <HAL_TIM_ConfigClockSource+0x1c>
 800c304:	2302      	movs	r3, #2
 800c306:	e0b4      	b.n	800c472 <HAL_TIM_ConfigClockSource+0x186>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2202      	movs	r2, #2
 800c314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c32e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c340:	d03e      	beq.n	800c3c0 <HAL_TIM_ConfigClockSource+0xd4>
 800c342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c346:	f200 8087 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x16c>
 800c34a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c34e:	f000 8086 	beq.w	800c45e <HAL_TIM_ConfigClockSource+0x172>
 800c352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c356:	d87f      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x16c>
 800c358:	2b70      	cmp	r3, #112	; 0x70
 800c35a:	d01a      	beq.n	800c392 <HAL_TIM_ConfigClockSource+0xa6>
 800c35c:	2b70      	cmp	r3, #112	; 0x70
 800c35e:	d87b      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x16c>
 800c360:	2b60      	cmp	r3, #96	; 0x60
 800c362:	d050      	beq.n	800c406 <HAL_TIM_ConfigClockSource+0x11a>
 800c364:	2b60      	cmp	r3, #96	; 0x60
 800c366:	d877      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x16c>
 800c368:	2b50      	cmp	r3, #80	; 0x50
 800c36a:	d03c      	beq.n	800c3e6 <HAL_TIM_ConfigClockSource+0xfa>
 800c36c:	2b50      	cmp	r3, #80	; 0x50
 800c36e:	d873      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x16c>
 800c370:	2b40      	cmp	r3, #64	; 0x40
 800c372:	d058      	beq.n	800c426 <HAL_TIM_ConfigClockSource+0x13a>
 800c374:	2b40      	cmp	r3, #64	; 0x40
 800c376:	d86f      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x16c>
 800c378:	2b30      	cmp	r3, #48	; 0x30
 800c37a:	d064      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x15a>
 800c37c:	2b30      	cmp	r3, #48	; 0x30
 800c37e:	d86b      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x16c>
 800c380:	2b20      	cmp	r3, #32
 800c382:	d060      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x15a>
 800c384:	2b20      	cmp	r3, #32
 800c386:	d867      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x16c>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d05c      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x15a>
 800c38c:	2b10      	cmp	r3, #16
 800c38e:	d05a      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x15a>
 800c390:	e062      	b.n	800c458 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6818      	ldr	r0, [r3, #0]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	6899      	ldr	r1, [r3, #8]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	f000 f985 	bl	800c6b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c3b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	609a      	str	r2, [r3, #8]
      break;
 800c3be:	e04f      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6818      	ldr	r0, [r3, #0]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	6899      	ldr	r1, [r3, #8]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	f000 f96e 	bl	800c6b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	689a      	ldr	r2, [r3, #8]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3e2:	609a      	str	r2, [r3, #8]
      break;
 800c3e4:	e03c      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6818      	ldr	r0, [r3, #0]
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	6859      	ldr	r1, [r3, #4]
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	f000 f8e2 	bl	800c5bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2150      	movs	r1, #80	; 0x50
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 f93b 	bl	800c67a <TIM_ITRx_SetConfig>
      break;
 800c404:	e02c      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6818      	ldr	r0, [r3, #0]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	6859      	ldr	r1, [r3, #4]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	461a      	mov	r2, r3
 800c414:	f000 f901 	bl	800c61a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2160      	movs	r1, #96	; 0x60
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 f92b 	bl	800c67a <TIM_ITRx_SetConfig>
      break;
 800c424:	e01c      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6818      	ldr	r0, [r3, #0]
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	6859      	ldr	r1, [r3, #4]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	461a      	mov	r2, r3
 800c434:	f000 f8c2 	bl	800c5bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2140      	movs	r1, #64	; 0x40
 800c43e:	4618      	mov	r0, r3
 800c440:	f000 f91b 	bl	800c67a <TIM_ITRx_SetConfig>
      break;
 800c444:	e00c      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4619      	mov	r1, r3
 800c450:	4610      	mov	r0, r2
 800c452:	f000 f912 	bl	800c67a <TIM_ITRx_SetConfig>
      break;
 800c456:	e003      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	73fb      	strb	r3, [r7, #15]
      break;
 800c45c:	e000      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c45e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c470:	7bfb      	ldrb	r3, [r7, #15]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
	...

0800c47c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b085      	sub	sp, #20
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a40      	ldr	r2, [pc, #256]	; (800c590 <TIM_Base_SetConfig+0x114>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d013      	beq.n	800c4bc <TIM_Base_SetConfig+0x40>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c49a:	d00f      	beq.n	800c4bc <TIM_Base_SetConfig+0x40>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a3d      	ldr	r2, [pc, #244]	; (800c594 <TIM_Base_SetConfig+0x118>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d00b      	beq.n	800c4bc <TIM_Base_SetConfig+0x40>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4a3c      	ldr	r2, [pc, #240]	; (800c598 <TIM_Base_SetConfig+0x11c>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d007      	beq.n	800c4bc <TIM_Base_SetConfig+0x40>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a3b      	ldr	r2, [pc, #236]	; (800c59c <TIM_Base_SetConfig+0x120>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d003      	beq.n	800c4bc <TIM_Base_SetConfig+0x40>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4a3a      	ldr	r2, [pc, #232]	; (800c5a0 <TIM_Base_SetConfig+0x124>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d108      	bne.n	800c4ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4a2f      	ldr	r2, [pc, #188]	; (800c590 <TIM_Base_SetConfig+0x114>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d02b      	beq.n	800c52e <TIM_Base_SetConfig+0xb2>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4dc:	d027      	beq.n	800c52e <TIM_Base_SetConfig+0xb2>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a2c      	ldr	r2, [pc, #176]	; (800c594 <TIM_Base_SetConfig+0x118>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d023      	beq.n	800c52e <TIM_Base_SetConfig+0xb2>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a2b      	ldr	r2, [pc, #172]	; (800c598 <TIM_Base_SetConfig+0x11c>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d01f      	beq.n	800c52e <TIM_Base_SetConfig+0xb2>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4a2a      	ldr	r2, [pc, #168]	; (800c59c <TIM_Base_SetConfig+0x120>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d01b      	beq.n	800c52e <TIM_Base_SetConfig+0xb2>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a29      	ldr	r2, [pc, #164]	; (800c5a0 <TIM_Base_SetConfig+0x124>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d017      	beq.n	800c52e <TIM_Base_SetConfig+0xb2>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a28      	ldr	r2, [pc, #160]	; (800c5a4 <TIM_Base_SetConfig+0x128>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d013      	beq.n	800c52e <TIM_Base_SetConfig+0xb2>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a27      	ldr	r2, [pc, #156]	; (800c5a8 <TIM_Base_SetConfig+0x12c>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d00f      	beq.n	800c52e <TIM_Base_SetConfig+0xb2>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a26      	ldr	r2, [pc, #152]	; (800c5ac <TIM_Base_SetConfig+0x130>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d00b      	beq.n	800c52e <TIM_Base_SetConfig+0xb2>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4a25      	ldr	r2, [pc, #148]	; (800c5b0 <TIM_Base_SetConfig+0x134>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d007      	beq.n	800c52e <TIM_Base_SetConfig+0xb2>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4a24      	ldr	r2, [pc, #144]	; (800c5b4 <TIM_Base_SetConfig+0x138>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d003      	beq.n	800c52e <TIM_Base_SetConfig+0xb2>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4a23      	ldr	r2, [pc, #140]	; (800c5b8 <TIM_Base_SetConfig+0x13c>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d108      	bne.n	800c540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	695b      	ldr	r3, [r3, #20]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	689a      	ldr	r2, [r3, #8]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a0a      	ldr	r2, [pc, #40]	; (800c590 <TIM_Base_SetConfig+0x114>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d003      	beq.n	800c574 <TIM_Base_SetConfig+0xf8>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a0c      	ldr	r2, [pc, #48]	; (800c5a0 <TIM_Base_SetConfig+0x124>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d103      	bne.n	800c57c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	691a      	ldr	r2, [r3, #16]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	615a      	str	r2, [r3, #20]
}
 800c582:	bf00      	nop
 800c584:	3714      	adds	r7, #20
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr
 800c58e:	bf00      	nop
 800c590:	40010000 	.word	0x40010000
 800c594:	40000400 	.word	0x40000400
 800c598:	40000800 	.word	0x40000800
 800c59c:	40000c00 	.word	0x40000c00
 800c5a0:	40010400 	.word	0x40010400
 800c5a4:	40014000 	.word	0x40014000
 800c5a8:	40014400 	.word	0x40014400
 800c5ac:	40014800 	.word	0x40014800
 800c5b0:	40001800 	.word	0x40001800
 800c5b4:	40001c00 	.word	0x40001c00
 800c5b8:	40002000 	.word	0x40002000

0800c5bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b087      	sub	sp, #28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6a1b      	ldr	r3, [r3, #32]
 800c5cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6a1b      	ldr	r3, [r3, #32]
 800c5d2:	f023 0201 	bic.w	r2, r3, #1
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	699b      	ldr	r3, [r3, #24]
 800c5de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	011b      	lsls	r3, r3, #4
 800c5ec:	693a      	ldr	r2, [r7, #16]
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	f023 030a 	bic.w	r3, r3, #10
 800c5f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	621a      	str	r2, [r3, #32]
}
 800c60e:	bf00      	nop
 800c610:	371c      	adds	r7, #28
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c61a:	b480      	push	{r7}
 800c61c:	b087      	sub	sp, #28
 800c61e:	af00      	add	r7, sp, #0
 800c620:	60f8      	str	r0, [r7, #12]
 800c622:	60b9      	str	r1, [r7, #8]
 800c624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6a1b      	ldr	r3, [r3, #32]
 800c62a:	f023 0210 	bic.w	r2, r3, #16
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6a1b      	ldr	r3, [r3, #32]
 800c63c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	031b      	lsls	r3, r3, #12
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c656:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	011b      	lsls	r3, r3, #4
 800c65c:	693a      	ldr	r2, [r7, #16]
 800c65e:	4313      	orrs	r3, r2
 800c660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	693a      	ldr	r2, [r7, #16]
 800c66c:	621a      	str	r2, [r3, #32]
}
 800c66e:	bf00      	nop
 800c670:	371c      	adds	r7, #28
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c67a:	b480      	push	{r7}
 800c67c:	b085      	sub	sp, #20
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	4313      	orrs	r3, r2
 800c698:	f043 0307 	orr.w	r3, r3, #7
 800c69c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	609a      	str	r2, [r3, #8]
}
 800c6a4:	bf00      	nop
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	021a      	lsls	r2, r3, #8
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	431a      	orrs	r2, r3
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	697a      	ldr	r2, [r7, #20]
 800c6e2:	609a      	str	r2, [r3, #8]
}
 800c6e4:	bf00      	nop
 800c6e6:	371c      	adds	r7, #28
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c700:	2b01      	cmp	r3, #1
 800c702:	d101      	bne.n	800c708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c704:	2302      	movs	r3, #2
 800c706:	e05a      	b.n	800c7be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2202      	movs	r2, #2
 800c714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c72e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	4313      	orrs	r3, r2
 800c738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a21      	ldr	r2, [pc, #132]	; (800c7cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d022      	beq.n	800c792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c754:	d01d      	beq.n	800c792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a1d      	ldr	r2, [pc, #116]	; (800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d018      	beq.n	800c792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a1b      	ldr	r2, [pc, #108]	; (800c7d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d013      	beq.n	800c792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a1a      	ldr	r2, [pc, #104]	; (800c7d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d00e      	beq.n	800c792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a18      	ldr	r2, [pc, #96]	; (800c7dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d009      	beq.n	800c792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a17      	ldr	r2, [pc, #92]	; (800c7e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d004      	beq.n	800c792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a15      	ldr	r2, [pc, #84]	; (800c7e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d10c      	bne.n	800c7ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68ba      	ldr	r2, [r7, #8]
 800c7aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3714      	adds	r7, #20
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	40010000 	.word	0x40010000
 800c7d0:	40000400 	.word	0x40000400
 800c7d4:	40000800 	.word	0x40000800
 800c7d8:	40000c00 	.word	0x40000c00
 800c7dc:	40010400 	.word	0x40010400
 800c7e0:	40014000 	.word	0x40014000
 800c7e4:	40001800 	.word	0x40001800

0800c7e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d101      	bne.n	800c7fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e03f      	b.n	800c87a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c800:	b2db      	uxtb	r3, r3
 800c802:	2b00      	cmp	r3, #0
 800c804:	d106      	bne.n	800c814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7f9 ffc4 	bl	800679c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2224      	movs	r2, #36	; 0x24
 800c818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68da      	ldr	r2, [r3, #12]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c82a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f939 	bl	800caa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	691a      	ldr	r2, [r3, #16]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	695a      	ldr	r2, [r3, #20]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68da      	ldr	r2, [r3, #12]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2220      	movs	r2, #32
 800c86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2220      	movs	r2, #32
 800c874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b08a      	sub	sp, #40	; 0x28
 800c886:	af02      	add	r7, sp, #8
 800c888:	60f8      	str	r0, [r7, #12]
 800c88a:	60b9      	str	r1, [r7, #8]
 800c88c:	603b      	str	r3, [r7, #0]
 800c88e:	4613      	mov	r3, r2
 800c890:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c892:	2300      	movs	r3, #0
 800c894:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	2b20      	cmp	r3, #32
 800c8a0:	f040 808c 	bne.w	800c9bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d002      	beq.n	800c8b0 <HAL_UART_Receive+0x2e>
 800c8aa:	88fb      	ldrh	r3, [r7, #6]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d101      	bne.n	800c8b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e084      	b.n	800c9be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d101      	bne.n	800c8c2 <HAL_UART_Receive+0x40>
 800c8be:	2302      	movs	r3, #2
 800c8c0:	e07d      	b.n	800c9be <HAL_UART_Receive+0x13c>
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2222      	movs	r2, #34	; 0x22
 800c8d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c8de:	f7fa f9f1 	bl	8006cc4 <HAL_GetTick>
 800c8e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	88fa      	ldrh	r2, [r7, #6]
 800c8e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	88fa      	ldrh	r2, [r7, #6]
 800c8ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8f8:	d108      	bne.n	800c90c <HAL_UART_Receive+0x8a>
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d104      	bne.n	800c90c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800c902:	2300      	movs	r3, #0
 800c904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	61bb      	str	r3, [r7, #24]
 800c90a:	e003      	b.n	800c914 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c910:	2300      	movs	r3, #0
 800c912:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800c91c:	e043      	b.n	800c9a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	2200      	movs	r2, #0
 800c926:	2120      	movs	r1, #32
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f000 f84c 	bl	800c9c6 <UART_WaitOnFlagUntilTimeout>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800c934:	2303      	movs	r3, #3
 800c936:	e042      	b.n	800c9be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10c      	bne.n	800c958 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	b29b      	uxth	r3, r3
 800c946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	3302      	adds	r3, #2
 800c954:	61bb      	str	r3, [r7, #24]
 800c956:	e01f      	b.n	800c998 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c960:	d007      	beq.n	800c972 <HAL_UART_Receive+0xf0>
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10a      	bne.n	800c980 <HAL_UART_Receive+0xfe>
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d106      	bne.n	800c980 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	701a      	strb	r2, [r3, #0]
 800c97e:	e008      	b.n	800c992 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	b2db      	uxtb	r3, r3
 800c988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c98c:	b2da      	uxtb	r2, r3
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	3301      	adds	r3, #1
 800c996:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1b6      	bne.n	800c91e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2220      	movs	r2, #32
 800c9b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	e000      	b.n	800c9be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800c9bc:	2302      	movs	r3, #2
  }
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3720      	adds	r7, #32
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b090      	sub	sp, #64	; 0x40
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	60f8      	str	r0, [r7, #12]
 800c9ce:	60b9      	str	r1, [r7, #8]
 800c9d0:	603b      	str	r3, [r7, #0]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9d6:	e050      	b.n	800ca7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9de:	d04c      	beq.n	800ca7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c9e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d007      	beq.n	800c9f6 <UART_WaitOnFlagUntilTimeout+0x30>
 800c9e6:	f7fa f96d 	bl	8006cc4 <HAL_GetTick>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d241      	bcs.n	800ca7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	330c      	adds	r3, #12
 800c9fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca00:	e853 3f00 	ldrex	r3, [r3]
 800ca04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ca0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	330c      	adds	r3, #12
 800ca14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca16:	637a      	str	r2, [r7, #52]	; 0x34
 800ca18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca1e:	e841 2300 	strex	r3, r2, [r1]
 800ca22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ca24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1e5      	bne.n	800c9f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3314      	adds	r3, #20
 800ca30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	e853 3f00 	ldrex	r3, [r3]
 800ca38:	613b      	str	r3, [r7, #16]
   return(result);
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	f023 0301 	bic.w	r3, r3, #1
 800ca40:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	3314      	adds	r3, #20
 800ca48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca4a:	623a      	str	r2, [r7, #32]
 800ca4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca4e:	69f9      	ldr	r1, [r7, #28]
 800ca50:	6a3a      	ldr	r2, [r7, #32]
 800ca52:	e841 2300 	strex	r3, r2, [r1]
 800ca56:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d1e5      	bne.n	800ca2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2220      	movs	r2, #32
 800ca62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2220      	movs	r2, #32
 800ca6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ca76:	2303      	movs	r3, #3
 800ca78:	e00f      	b.n	800ca9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	4013      	ands	r3, r2
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	bf0c      	ite	eq
 800ca8a:	2301      	moveq	r3, #1
 800ca8c:	2300      	movne	r3, #0
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	461a      	mov	r2, r3
 800ca92:	79fb      	ldrb	r3, [r7, #7]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d09f      	beq.n	800c9d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3740      	adds	r7, #64	; 0x40
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
	...

0800caa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800caa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800caa8:	b0c0      	sub	sp, #256	; 0x100
 800caaa:	af00      	add	r7, sp, #0
 800caac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	691b      	ldr	r3, [r3, #16]
 800cab8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cabc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cac0:	68d9      	ldr	r1, [r3, #12]
 800cac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	ea40 0301 	orr.w	r3, r0, r1
 800cacc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cad2:	689a      	ldr	r2, [r3, #8]
 800cad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	431a      	orrs	r2, r3
 800cadc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cae0:	695b      	ldr	r3, [r3, #20]
 800cae2:	431a      	orrs	r2, r3
 800cae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cae8:	69db      	ldr	r3, [r3, #28]
 800caea:	4313      	orrs	r3, r2
 800caec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800caf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cafc:	f021 010c 	bic.w	r1, r1, #12
 800cb00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cb0a:	430b      	orrs	r3, r1
 800cb0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cb0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	695b      	ldr	r3, [r3, #20]
 800cb16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cb1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb1e:	6999      	ldr	r1, [r3, #24]
 800cb20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	ea40 0301 	orr.w	r3, r0, r1
 800cb2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cb2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	4b8f      	ldr	r3, [pc, #572]	; (800cd70 <UART_SetConfig+0x2cc>)
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d005      	beq.n	800cb44 <UART_SetConfig+0xa0>
 800cb38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	4b8d      	ldr	r3, [pc, #564]	; (800cd74 <UART_SetConfig+0x2d0>)
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d104      	bne.n	800cb4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cb44:	f7fd ff56 	bl	800a9f4 <HAL_RCC_GetPCLK2Freq>
 800cb48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cb4c:	e003      	b.n	800cb56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cb4e:	f7fd ff3d 	bl	800a9cc <HAL_RCC_GetPCLK1Freq>
 800cb52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb5a:	69db      	ldr	r3, [r3, #28]
 800cb5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb60:	f040 810c 	bne.w	800cd7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cb64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cb6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cb72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cb76:	4622      	mov	r2, r4
 800cb78:	462b      	mov	r3, r5
 800cb7a:	1891      	adds	r1, r2, r2
 800cb7c:	65b9      	str	r1, [r7, #88]	; 0x58
 800cb7e:	415b      	adcs	r3, r3
 800cb80:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cb86:	4621      	mov	r1, r4
 800cb88:	eb12 0801 	adds.w	r8, r2, r1
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	eb43 0901 	adc.w	r9, r3, r1
 800cb92:	f04f 0200 	mov.w	r2, #0
 800cb96:	f04f 0300 	mov.w	r3, #0
 800cb9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cba6:	4690      	mov	r8, r2
 800cba8:	4699      	mov	r9, r3
 800cbaa:	4623      	mov	r3, r4
 800cbac:	eb18 0303 	adds.w	r3, r8, r3
 800cbb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cbb4:	462b      	mov	r3, r5
 800cbb6:	eb49 0303 	adc.w	r3, r9, r3
 800cbba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cbbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cbca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cbce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	18db      	adds	r3, r3, r3
 800cbd6:	653b      	str	r3, [r7, #80]	; 0x50
 800cbd8:	4613      	mov	r3, r2
 800cbda:	eb42 0303 	adc.w	r3, r2, r3
 800cbde:	657b      	str	r3, [r7, #84]	; 0x54
 800cbe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cbe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cbe8:	f7f4 f81e 	bl	8000c28 <__aeabi_uldivmod>
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	4b61      	ldr	r3, [pc, #388]	; (800cd78 <UART_SetConfig+0x2d4>)
 800cbf2:	fba3 2302 	umull	r2, r3, r3, r2
 800cbf6:	095b      	lsrs	r3, r3, #5
 800cbf8:	011c      	lsls	r4, r3, #4
 800cbfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cc04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cc08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cc0c:	4642      	mov	r2, r8
 800cc0e:	464b      	mov	r3, r9
 800cc10:	1891      	adds	r1, r2, r2
 800cc12:	64b9      	str	r1, [r7, #72]	; 0x48
 800cc14:	415b      	adcs	r3, r3
 800cc16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cc1c:	4641      	mov	r1, r8
 800cc1e:	eb12 0a01 	adds.w	sl, r2, r1
 800cc22:	4649      	mov	r1, r9
 800cc24:	eb43 0b01 	adc.w	fp, r3, r1
 800cc28:	f04f 0200 	mov.w	r2, #0
 800cc2c:	f04f 0300 	mov.w	r3, #0
 800cc30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cc34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cc38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cc3c:	4692      	mov	sl, r2
 800cc3e:	469b      	mov	fp, r3
 800cc40:	4643      	mov	r3, r8
 800cc42:	eb1a 0303 	adds.w	r3, sl, r3
 800cc46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cc4a:	464b      	mov	r3, r9
 800cc4c:	eb4b 0303 	adc.w	r3, fp, r3
 800cc50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cc54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cc60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cc64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cc68:	460b      	mov	r3, r1
 800cc6a:	18db      	adds	r3, r3, r3
 800cc6c:	643b      	str	r3, [r7, #64]	; 0x40
 800cc6e:	4613      	mov	r3, r2
 800cc70:	eb42 0303 	adc.w	r3, r2, r3
 800cc74:	647b      	str	r3, [r7, #68]	; 0x44
 800cc76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cc7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cc7e:	f7f3 ffd3 	bl	8000c28 <__aeabi_uldivmod>
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	4611      	mov	r1, r2
 800cc88:	4b3b      	ldr	r3, [pc, #236]	; (800cd78 <UART_SetConfig+0x2d4>)
 800cc8a:	fba3 2301 	umull	r2, r3, r3, r1
 800cc8e:	095b      	lsrs	r3, r3, #5
 800cc90:	2264      	movs	r2, #100	; 0x64
 800cc92:	fb02 f303 	mul.w	r3, r2, r3
 800cc96:	1acb      	subs	r3, r1, r3
 800cc98:	00db      	lsls	r3, r3, #3
 800cc9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cc9e:	4b36      	ldr	r3, [pc, #216]	; (800cd78 <UART_SetConfig+0x2d4>)
 800cca0:	fba3 2302 	umull	r2, r3, r3, r2
 800cca4:	095b      	lsrs	r3, r3, #5
 800cca6:	005b      	lsls	r3, r3, #1
 800cca8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ccac:	441c      	add	r4, r3
 800ccae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ccb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ccbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ccc0:	4642      	mov	r2, r8
 800ccc2:	464b      	mov	r3, r9
 800ccc4:	1891      	adds	r1, r2, r2
 800ccc6:	63b9      	str	r1, [r7, #56]	; 0x38
 800ccc8:	415b      	adcs	r3, r3
 800ccca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cccc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ccd0:	4641      	mov	r1, r8
 800ccd2:	1851      	adds	r1, r2, r1
 800ccd4:	6339      	str	r1, [r7, #48]	; 0x30
 800ccd6:	4649      	mov	r1, r9
 800ccd8:	414b      	adcs	r3, r1
 800ccda:	637b      	str	r3, [r7, #52]	; 0x34
 800ccdc:	f04f 0200 	mov.w	r2, #0
 800cce0:	f04f 0300 	mov.w	r3, #0
 800cce4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cce8:	4659      	mov	r1, fp
 800ccea:	00cb      	lsls	r3, r1, #3
 800ccec:	4651      	mov	r1, sl
 800ccee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ccf2:	4651      	mov	r1, sl
 800ccf4:	00ca      	lsls	r2, r1, #3
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	4642      	mov	r2, r8
 800ccfe:	189b      	adds	r3, r3, r2
 800cd00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cd04:	464b      	mov	r3, r9
 800cd06:	460a      	mov	r2, r1
 800cd08:	eb42 0303 	adc.w	r3, r2, r3
 800cd0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cd10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cd1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cd20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cd24:	460b      	mov	r3, r1
 800cd26:	18db      	adds	r3, r3, r3
 800cd28:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd2a:	4613      	mov	r3, r2
 800cd2c:	eb42 0303 	adc.w	r3, r2, r3
 800cd30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cd36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cd3a:	f7f3 ff75 	bl	8000c28 <__aeabi_uldivmod>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	460b      	mov	r3, r1
 800cd42:	4b0d      	ldr	r3, [pc, #52]	; (800cd78 <UART_SetConfig+0x2d4>)
 800cd44:	fba3 1302 	umull	r1, r3, r3, r2
 800cd48:	095b      	lsrs	r3, r3, #5
 800cd4a:	2164      	movs	r1, #100	; 0x64
 800cd4c:	fb01 f303 	mul.w	r3, r1, r3
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	00db      	lsls	r3, r3, #3
 800cd54:	3332      	adds	r3, #50	; 0x32
 800cd56:	4a08      	ldr	r2, [pc, #32]	; (800cd78 <UART_SetConfig+0x2d4>)
 800cd58:	fba2 2303 	umull	r2, r3, r2, r3
 800cd5c:	095b      	lsrs	r3, r3, #5
 800cd5e:	f003 0207 	and.w	r2, r3, #7
 800cd62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4422      	add	r2, r4
 800cd6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cd6c:	e106      	b.n	800cf7c <UART_SetConfig+0x4d8>
 800cd6e:	bf00      	nop
 800cd70:	40011000 	.word	0x40011000
 800cd74:	40011400 	.word	0x40011400
 800cd78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd80:	2200      	movs	r2, #0
 800cd82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cd86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cd8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cd8e:	4642      	mov	r2, r8
 800cd90:	464b      	mov	r3, r9
 800cd92:	1891      	adds	r1, r2, r2
 800cd94:	6239      	str	r1, [r7, #32]
 800cd96:	415b      	adcs	r3, r3
 800cd98:	627b      	str	r3, [r7, #36]	; 0x24
 800cd9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cd9e:	4641      	mov	r1, r8
 800cda0:	1854      	adds	r4, r2, r1
 800cda2:	4649      	mov	r1, r9
 800cda4:	eb43 0501 	adc.w	r5, r3, r1
 800cda8:	f04f 0200 	mov.w	r2, #0
 800cdac:	f04f 0300 	mov.w	r3, #0
 800cdb0:	00eb      	lsls	r3, r5, #3
 800cdb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cdb6:	00e2      	lsls	r2, r4, #3
 800cdb8:	4614      	mov	r4, r2
 800cdba:	461d      	mov	r5, r3
 800cdbc:	4643      	mov	r3, r8
 800cdbe:	18e3      	adds	r3, r4, r3
 800cdc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cdc4:	464b      	mov	r3, r9
 800cdc6:	eb45 0303 	adc.w	r3, r5, r3
 800cdca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cdce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cdda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cdde:	f04f 0200 	mov.w	r2, #0
 800cde2:	f04f 0300 	mov.w	r3, #0
 800cde6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cdea:	4629      	mov	r1, r5
 800cdec:	008b      	lsls	r3, r1, #2
 800cdee:	4621      	mov	r1, r4
 800cdf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	008a      	lsls	r2, r1, #2
 800cdf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cdfc:	f7f3 ff14 	bl	8000c28 <__aeabi_uldivmod>
 800ce00:	4602      	mov	r2, r0
 800ce02:	460b      	mov	r3, r1
 800ce04:	4b60      	ldr	r3, [pc, #384]	; (800cf88 <UART_SetConfig+0x4e4>)
 800ce06:	fba3 2302 	umull	r2, r3, r3, r2
 800ce0a:	095b      	lsrs	r3, r3, #5
 800ce0c:	011c      	lsls	r4, r3, #4
 800ce0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce12:	2200      	movs	r2, #0
 800ce14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ce18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ce1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ce20:	4642      	mov	r2, r8
 800ce22:	464b      	mov	r3, r9
 800ce24:	1891      	adds	r1, r2, r2
 800ce26:	61b9      	str	r1, [r7, #24]
 800ce28:	415b      	adcs	r3, r3
 800ce2a:	61fb      	str	r3, [r7, #28]
 800ce2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ce30:	4641      	mov	r1, r8
 800ce32:	1851      	adds	r1, r2, r1
 800ce34:	6139      	str	r1, [r7, #16]
 800ce36:	4649      	mov	r1, r9
 800ce38:	414b      	adcs	r3, r1
 800ce3a:	617b      	str	r3, [r7, #20]
 800ce3c:	f04f 0200 	mov.w	r2, #0
 800ce40:	f04f 0300 	mov.w	r3, #0
 800ce44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ce48:	4659      	mov	r1, fp
 800ce4a:	00cb      	lsls	r3, r1, #3
 800ce4c:	4651      	mov	r1, sl
 800ce4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce52:	4651      	mov	r1, sl
 800ce54:	00ca      	lsls	r2, r1, #3
 800ce56:	4610      	mov	r0, r2
 800ce58:	4619      	mov	r1, r3
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	4642      	mov	r2, r8
 800ce5e:	189b      	adds	r3, r3, r2
 800ce60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ce64:	464b      	mov	r3, r9
 800ce66:	460a      	mov	r2, r1
 800ce68:	eb42 0303 	adc.w	r3, r2, r3
 800ce6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ce70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ce7c:	f04f 0200 	mov.w	r2, #0
 800ce80:	f04f 0300 	mov.w	r3, #0
 800ce84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ce88:	4649      	mov	r1, r9
 800ce8a:	008b      	lsls	r3, r1, #2
 800ce8c:	4641      	mov	r1, r8
 800ce8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce92:	4641      	mov	r1, r8
 800ce94:	008a      	lsls	r2, r1, #2
 800ce96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ce9a:	f7f3 fec5 	bl	8000c28 <__aeabi_uldivmod>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	4611      	mov	r1, r2
 800cea4:	4b38      	ldr	r3, [pc, #224]	; (800cf88 <UART_SetConfig+0x4e4>)
 800cea6:	fba3 2301 	umull	r2, r3, r3, r1
 800ceaa:	095b      	lsrs	r3, r3, #5
 800ceac:	2264      	movs	r2, #100	; 0x64
 800ceae:	fb02 f303 	mul.w	r3, r2, r3
 800ceb2:	1acb      	subs	r3, r1, r3
 800ceb4:	011b      	lsls	r3, r3, #4
 800ceb6:	3332      	adds	r3, #50	; 0x32
 800ceb8:	4a33      	ldr	r2, [pc, #204]	; (800cf88 <UART_SetConfig+0x4e4>)
 800ceba:	fba2 2303 	umull	r2, r3, r2, r3
 800cebe:	095b      	lsrs	r3, r3, #5
 800cec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cec4:	441c      	add	r4, r3
 800cec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ceca:	2200      	movs	r2, #0
 800cecc:	673b      	str	r3, [r7, #112]	; 0x70
 800cece:	677a      	str	r2, [r7, #116]	; 0x74
 800ced0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ced4:	4642      	mov	r2, r8
 800ced6:	464b      	mov	r3, r9
 800ced8:	1891      	adds	r1, r2, r2
 800ceda:	60b9      	str	r1, [r7, #8]
 800cedc:	415b      	adcs	r3, r3
 800cede:	60fb      	str	r3, [r7, #12]
 800cee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cee4:	4641      	mov	r1, r8
 800cee6:	1851      	adds	r1, r2, r1
 800cee8:	6039      	str	r1, [r7, #0]
 800ceea:	4649      	mov	r1, r9
 800ceec:	414b      	adcs	r3, r1
 800ceee:	607b      	str	r3, [r7, #4]
 800cef0:	f04f 0200 	mov.w	r2, #0
 800cef4:	f04f 0300 	mov.w	r3, #0
 800cef8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cefc:	4659      	mov	r1, fp
 800cefe:	00cb      	lsls	r3, r1, #3
 800cf00:	4651      	mov	r1, sl
 800cf02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cf06:	4651      	mov	r1, sl
 800cf08:	00ca      	lsls	r2, r1, #3
 800cf0a:	4610      	mov	r0, r2
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	4603      	mov	r3, r0
 800cf10:	4642      	mov	r2, r8
 800cf12:	189b      	adds	r3, r3, r2
 800cf14:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf16:	464b      	mov	r3, r9
 800cf18:	460a      	mov	r2, r1
 800cf1a:	eb42 0303 	adc.w	r3, r2, r3
 800cf1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	663b      	str	r3, [r7, #96]	; 0x60
 800cf2a:	667a      	str	r2, [r7, #100]	; 0x64
 800cf2c:	f04f 0200 	mov.w	r2, #0
 800cf30:	f04f 0300 	mov.w	r3, #0
 800cf34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cf38:	4649      	mov	r1, r9
 800cf3a:	008b      	lsls	r3, r1, #2
 800cf3c:	4641      	mov	r1, r8
 800cf3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cf42:	4641      	mov	r1, r8
 800cf44:	008a      	lsls	r2, r1, #2
 800cf46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cf4a:	f7f3 fe6d 	bl	8000c28 <__aeabi_uldivmod>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	4b0d      	ldr	r3, [pc, #52]	; (800cf88 <UART_SetConfig+0x4e4>)
 800cf54:	fba3 1302 	umull	r1, r3, r3, r2
 800cf58:	095b      	lsrs	r3, r3, #5
 800cf5a:	2164      	movs	r1, #100	; 0x64
 800cf5c:	fb01 f303 	mul.w	r3, r1, r3
 800cf60:	1ad3      	subs	r3, r2, r3
 800cf62:	011b      	lsls	r3, r3, #4
 800cf64:	3332      	adds	r3, #50	; 0x32
 800cf66:	4a08      	ldr	r2, [pc, #32]	; (800cf88 <UART_SetConfig+0x4e4>)
 800cf68:	fba2 2303 	umull	r2, r3, r2, r3
 800cf6c:	095b      	lsrs	r3, r3, #5
 800cf6e:	f003 020f 	and.w	r2, r3, #15
 800cf72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4422      	add	r2, r4
 800cf7a:	609a      	str	r2, [r3, #8]
}
 800cf7c:	bf00      	nop
 800cf7e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cf82:	46bd      	mov	sp, r7
 800cf84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf88:	51eb851f 	.word	0x51eb851f

0800cf8c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b087      	sub	sp, #28
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa0:	683a      	ldr	r2, [r7, #0]
 800cfa2:	6812      	ldr	r2, [r2, #0]
 800cfa4:	f023 0101 	bic.w	r1, r3, #1
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	2b08      	cmp	r3, #8
 800cfb4:	d102      	bne.n	800cfbc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800cfb6:	2340      	movs	r3, #64	; 0x40
 800cfb8:	617b      	str	r3, [r7, #20]
 800cfba:	e001      	b.n	800cfc0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800cfcc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800cfd2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800cfd8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800cfde:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800cfe4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800cfea:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800cff0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800cff6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800cffc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800d002:	4313      	orrs	r3, r2
 800d004:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	699b      	ldr	r3, [r3, #24]
 800d00a:	693a      	ldr	r2, [r7, #16]
 800d00c:	4313      	orrs	r3, r2
 800d00e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	4313      	orrs	r3, r2
 800d018:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800d01a:	4b10      	ldr	r3, [pc, #64]	; (800d05c <FSMC_NORSRAM_Init+0xd0>)
 800d01c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d024:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d02c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	43db      	mvns	r3, r3
 800d03c:	ea02 0103 	and.w	r1, r2, r3
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	4319      	orrs	r1, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	371c      	adds	r7, #28
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	0008fb7f 	.word	0x0008fb7f

0800d060 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	1c5a      	adds	r2, r3, #1
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d076:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	011b      	lsls	r3, r3, #4
 800d084:	431a      	orrs	r2, r3
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	021b      	lsls	r3, r3, #8
 800d08c:	431a      	orrs	r2, r3
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	041b      	lsls	r3, r3, #16
 800d094:	431a      	orrs	r2, r3
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	691b      	ldr	r3, [r3, #16]
 800d09a:	3b01      	subs	r3, #1
 800d09c:	051b      	lsls	r3, r3, #20
 800d09e:	431a      	orrs	r2, r3
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	3b02      	subs	r3, #2
 800d0a6:	061b      	lsls	r3, r3, #24
 800d0a8:	431a      	orrs	r2, r3
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	699b      	ldr	r3, [r3, #24]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	3201      	adds	r2, #1
 800d0b4:	4319      	orrs	r1, r3
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3714      	adds	r7, #20
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
	...

0800d0cc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	607a      	str	r2, [r7, #4]
 800d0d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0e0:	d11d      	bne.n	800d11e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d0ea:	4b13      	ldr	r3, [pc, #76]	; (800d138 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	6811      	ldr	r1, [r2, #0]
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	6852      	ldr	r2, [r2, #4]
 800d0f6:	0112      	lsls	r2, r2, #4
 800d0f8:	4311      	orrs	r1, r2
 800d0fa:	68ba      	ldr	r2, [r7, #8]
 800d0fc:	6892      	ldr	r2, [r2, #8]
 800d0fe:	0212      	lsls	r2, r2, #8
 800d100:	4311      	orrs	r1, r2
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	6992      	ldr	r2, [r2, #24]
 800d106:	4311      	orrs	r1, r2
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	68d2      	ldr	r2, [r2, #12]
 800d10c:	0412      	lsls	r2, r2, #16
 800d10e:	430a      	orrs	r2, r1
 800d110:	ea43 0102 	orr.w	r1, r3, r2
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d11c:	e005      	b.n	800d12a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800d12a:	2300      	movs	r3, #0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr
 800d138:	cff00000 	.word	0xcff00000

0800d13c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d13c:	b084      	sub	sp, #16
 800d13e:	b480      	push	{r7}
 800d140:	b085      	sub	sp, #20
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
 800d146:	f107 001c 	add.w	r0, r7, #28
 800d14a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d14e:	2300      	movs	r3, #0
 800d150:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d152:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d154:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d156:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d15a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d15e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d162:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d166:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d176:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	431a      	orrs	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d182:	2300      	movs	r3, #0
}
 800d184:	4618      	mov	r0, r3
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	b004      	add	sp, #16
 800d190:	4770      	bx	lr

0800d192 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d192:	b480      	push	{r7}
 800d194:	b083      	sub	sp, #12
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	370c      	adds	r7, #12
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d1ce:	b480      	push	{r7}
 800d1d0:	b083      	sub	sp, #12
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2203      	movs	r2, #3
 800d1da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	370c      	adds	r7, #12
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr

0800d1ea <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b083      	sub	sp, #12
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f003 0303 	and.w	r3, r3, #3
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	370c      	adds	r7, #12
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr

0800d206 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d206:	b480      	push	{r7}
 800d208:	b085      	sub	sp, #20
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
 800d20e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d210:	2300      	movs	r3, #0
 800d212:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d224:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d22a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d230:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	4313      	orrs	r3, r2
 800d236:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d240:	f023 030f 	bic.w	r3, r3, #15
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	431a      	orrs	r2, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3714      	adds	r7, #20
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d25a:	b480      	push	{r7}
 800d25c:	b083      	sub	sp, #12
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	691b      	ldr	r3, [r3, #16]
 800d266:	b2db      	uxtb	r3, r3
}
 800d268:	4618      	mov	r0, r3
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	3314      	adds	r3, #20
 800d282:	461a      	mov	r2, r3
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	4413      	add	r3, r2
 800d288:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
}  
 800d28e:	4618      	mov	r0, r3
 800d290:	3714      	adds	r7, #20
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr

0800d29a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d29a:	b480      	push	{r7}
 800d29c:	b085      	sub	sp, #20
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
 800d2a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	685a      	ldr	r2, [r3, #4]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d2c0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d2c6:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d2cc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	431a      	orrs	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d2e4:	2300      	movs	r3, #0

}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3714      	adds	r7, #20
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr

0800d2f2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b088      	sub	sp, #32
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
 800d2fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d300:	2310      	movs	r3, #16
 800d302:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d304:	2340      	movs	r3, #64	; 0x40
 800d306:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d308:	2300      	movs	r3, #0
 800d30a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d30c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d310:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d312:	f107 0308 	add.w	r3, r7, #8
 800d316:	4619      	mov	r1, r3
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7ff ff74 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d31e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d322:	2110      	movs	r1, #16
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 f9d7 	bl	800d6d8 <SDMMC_GetCmdResp1>
 800d32a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d32c:	69fb      	ldr	r3, [r7, #28]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3720      	adds	r7, #32
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b088      	sub	sp, #32
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
 800d33e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d344:	2311      	movs	r3, #17
 800d346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d348:	2340      	movs	r3, #64	; 0x40
 800d34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d34c:	2300      	movs	r3, #0
 800d34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d354:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d356:	f107 0308 	add.w	r3, r7, #8
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7ff ff52 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d362:	f241 3288 	movw	r2, #5000	; 0x1388
 800d366:	2111      	movs	r1, #17
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 f9b5 	bl	800d6d8 <SDMMC_GetCmdResp1>
 800d36e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d370:	69fb      	ldr	r3, [r7, #28]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3720      	adds	r7, #32
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b088      	sub	sp, #32
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d388:	2312      	movs	r3, #18
 800d38a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d38c:	2340      	movs	r3, #64	; 0x40
 800d38e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d390:	2300      	movs	r3, #0
 800d392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d398:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d39a:	f107 0308 	add.w	r3, r7, #8
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff ff30 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d3a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3aa:	2112      	movs	r1, #18
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 f993 	bl	800d6d8 <SDMMC_GetCmdResp1>
 800d3b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3b4:	69fb      	ldr	r3, [r7, #28]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3720      	adds	r7, #32
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}

0800d3be <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d3be:	b580      	push	{r7, lr}
 800d3c0:	b088      	sub	sp, #32
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
 800d3c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d3cc:	2318      	movs	r3, #24
 800d3ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d3d0:	2340      	movs	r3, #64	; 0x40
 800d3d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3de:	f107 0308 	add.w	r3, r7, #8
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7ff ff0e 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d3ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3ee:	2118      	movs	r1, #24
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 f971 	bl	800d6d8 <SDMMC_GetCmdResp1>
 800d3f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3f8:	69fb      	ldr	r3, [r7, #28]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3720      	adds	r7, #32
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d402:	b580      	push	{r7, lr}
 800d404:	b088      	sub	sp, #32
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
 800d40a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d410:	2319      	movs	r3, #25
 800d412:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d414:	2340      	movs	r3, #64	; 0x40
 800d416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d418:	2300      	movs	r3, #0
 800d41a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d41c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d420:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d422:	f107 0308 	add.w	r3, r7, #8
 800d426:	4619      	mov	r1, r3
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f7ff feec 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d42e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d432:	2119      	movs	r1, #25
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 f94f 	bl	800d6d8 <SDMMC_GetCmdResp1>
 800d43a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d43c:	69fb      	ldr	r3, [r7, #28]
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3720      	adds	r7, #32
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
	...

0800d448 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d450:	2300      	movs	r3, #0
 800d452:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d454:	230c      	movs	r3, #12
 800d456:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d458:	2340      	movs	r3, #64	; 0x40
 800d45a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d45c:	2300      	movs	r3, #0
 800d45e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d464:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d466:	f107 0308 	add.w	r3, r7, #8
 800d46a:	4619      	mov	r1, r3
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7ff feca 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d472:	4a05      	ldr	r2, [pc, #20]	; (800d488 <SDMMC_CmdStopTransfer+0x40>)
 800d474:	210c      	movs	r1, #12
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 f92e 	bl	800d6d8 <SDMMC_GetCmdResp1>
 800d47c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d47e:	69fb      	ldr	r3, [r7, #28]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3720      	adds	r7, #32
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	05f5e100 	.word	0x05f5e100

0800d48c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b08a      	sub	sp, #40	; 0x28
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d49c:	2307      	movs	r3, #7
 800d49e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4a0:	2340      	movs	r3, #64	; 0x40
 800d4a2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4ac:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4ae:	f107 0310 	add.w	r3, r7, #16
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7ff fea6 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d4ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4be:	2107      	movs	r1, #7
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f000 f909 	bl	800d6d8 <SDMMC_GetCmdResp1>
 800d4c6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3728      	adds	r7, #40	; 0x28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b088      	sub	sp, #32
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4f0:	f107 0308 	add.w	r3, r7, #8
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f7ff fe85 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 fb23 	bl	800db48 <SDMMC_GetCmdError>
 800d502:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d504:	69fb      	ldr	r3, [r7, #28]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3720      	adds	r7, #32
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b088      	sub	sp, #32
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d516:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d51a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d51c:	2308      	movs	r3, #8
 800d51e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d520:	2340      	movs	r3, #64	; 0x40
 800d522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d524:	2300      	movs	r3, #0
 800d526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d52c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d52e:	f107 0308 	add.w	r3, r7, #8
 800d532:	4619      	mov	r1, r3
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7ff fe66 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 fab6 	bl	800daac <SDMMC_GetCmdResp7>
 800d540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d542:	69fb      	ldr	r3, [r7, #28]
}
 800d544:	4618      	mov	r0, r3
 800d546:	3720      	adds	r7, #32
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b088      	sub	sp, #32
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d55a:	2337      	movs	r3, #55	; 0x37
 800d55c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d55e:	2340      	movs	r3, #64	; 0x40
 800d560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d562:	2300      	movs	r3, #0
 800d564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d56a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d56c:	f107 0308 	add.w	r3, r7, #8
 800d570:	4619      	mov	r1, r3
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7ff fe47 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d578:	f241 3288 	movw	r2, #5000	; 0x1388
 800d57c:	2137      	movs	r1, #55	; 0x37
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f8aa 	bl	800d6d8 <SDMMC_GetCmdResp1>
 800d584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d586:	69fb      	ldr	r3, [r7, #28]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3720      	adds	r7, #32
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b088      	sub	sp, #32
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d5a6:	2329      	movs	r3, #41	; 0x29
 800d5a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5aa:	2340      	movs	r3, #64	; 0x40
 800d5ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5b8:	f107 0308 	add.w	r3, r7, #8
 800d5bc:	4619      	mov	r1, r3
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7ff fe21 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f9bd 	bl	800d944 <SDMMC_GetCmdResp3>
 800d5ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5cc:	69fb      	ldr	r3, [r7, #28]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3720      	adds	r7, #32
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b088      	sub	sp, #32
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d5e2:	2302      	movs	r3, #2
 800d5e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d5e6:	23c0      	movs	r3, #192	; 0xc0
 800d5e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5f4:	f107 0308 	add.w	r3, r7, #8
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f7ff fe03 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 f957 	bl	800d8b4 <SDMMC_GetCmdResp2>
 800d606:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d608:	69fb      	ldr	r3, [r7, #28]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3720      	adds	r7, #32
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b088      	sub	sp, #32
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d620:	2309      	movs	r3, #9
 800d622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d624:	23c0      	movs	r3, #192	; 0xc0
 800d626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d628:	2300      	movs	r3, #0
 800d62a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d62c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d630:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d632:	f107 0308 	add.w	r3, r7, #8
 800d636:	4619      	mov	r1, r3
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7ff fde4 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 f938 	bl	800d8b4 <SDMMC_GetCmdResp2>
 800d644:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d646:	69fb      	ldr	r3, [r7, #28]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3720      	adds	r7, #32
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b088      	sub	sp, #32
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d65a:	2300      	movs	r3, #0
 800d65c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d65e:	2303      	movs	r3, #3
 800d660:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d662:	2340      	movs	r3, #64	; 0x40
 800d664:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d666:	2300      	movs	r3, #0
 800d668:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d66a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d66e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d670:	f107 0308 	add.w	r3, r7, #8
 800d674:	4619      	mov	r1, r3
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f7ff fdc5 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d67c:	683a      	ldr	r2, [r7, #0]
 800d67e:	2103      	movs	r1, #3
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f99d 	bl	800d9c0 <SDMMC_GetCmdResp6>
 800d686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d688:	69fb      	ldr	r3, [r7, #28]
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3720      	adds	r7, #32
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b088      	sub	sp, #32
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
 800d69a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d6a0:	230d      	movs	r3, #13
 800d6a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6a4:	2340      	movs	r3, #64	; 0x40
 800d6a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6b2:	f107 0308 	add.w	r3, r7, #8
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f7ff fda4 	bl	800d206 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d6be:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6c2:	210d      	movs	r1, #13
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f807 	bl	800d6d8 <SDMMC_GetCmdResp1>
 800d6ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6cc:	69fb      	ldr	r3, [r7, #28]
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3720      	adds	r7, #32
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
	...

0800d6d8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b088      	sub	sp, #32
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	607a      	str	r2, [r7, #4]
 800d6e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d6e6:	4b70      	ldr	r3, [pc, #448]	; (800d8a8 <SDMMC_GetCmdResp1+0x1d0>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a70      	ldr	r2, [pc, #448]	; (800d8ac <SDMMC_GetCmdResp1+0x1d4>)
 800d6ec:	fba2 2303 	umull	r2, r3, r2, r3
 800d6f0:	0a5a      	lsrs	r2, r3, #9
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	fb02 f303 	mul.w	r3, r2, r3
 800d6f8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	1e5a      	subs	r2, r3, #1
 800d6fe:	61fa      	str	r2, [r7, #28]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d102      	bne.n	800d70a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d708:	e0c9      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d70e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d716:	2b00      	cmp	r3, #0
 800d718:	d0ef      	beq.n	800d6fa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d720:	2b00      	cmp	r3, #0
 800d722:	d1ea      	bne.n	800d6fa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d728:	f003 0304 	and.w	r3, r3, #4
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d004      	beq.n	800d73a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2204      	movs	r2, #4
 800d734:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d736:	2304      	movs	r3, #4
 800d738:	e0b1      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d73e:	f003 0301 	and.w	r3, r3, #1
 800d742:	2b00      	cmp	r3, #0
 800d744:	d004      	beq.n	800d750 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2201      	movs	r2, #1
 800d74a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d74c:	2301      	movs	r3, #1
 800d74e:	e0a6      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	22c5      	movs	r2, #197	; 0xc5
 800d754:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f7ff fd7f 	bl	800d25a <SDIO_GetCommandResponse>
 800d75c:	4603      	mov	r3, r0
 800d75e:	461a      	mov	r2, r3
 800d760:	7afb      	ldrb	r3, [r7, #11]
 800d762:	4293      	cmp	r3, r2
 800d764:	d001      	beq.n	800d76a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d766:	2301      	movs	r3, #1
 800d768:	e099      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d76a:	2100      	movs	r1, #0
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f7ff fd81 	bl	800d274 <SDIO_GetResponse>
 800d772:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d774:	697a      	ldr	r2, [r7, #20]
 800d776:	4b4e      	ldr	r3, [pc, #312]	; (800d8b0 <SDMMC_GetCmdResp1+0x1d8>)
 800d778:	4013      	ands	r3, r2
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d101      	bne.n	800d782 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d77e:	2300      	movs	r3, #0
 800d780:	e08d      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	2b00      	cmp	r3, #0
 800d786:	da02      	bge.n	800d78e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d788:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d78c:	e087      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d794:	2b00      	cmp	r3, #0
 800d796:	d001      	beq.n	800d79c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d798:	2340      	movs	r3, #64	; 0x40
 800d79a:	e080      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d7a6:	2380      	movs	r3, #128	; 0x80
 800d7a8:	e079      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d002      	beq.n	800d7ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d7b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d7b8:	e071      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d002      	beq.n	800d7ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d7c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7c8:	e069      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d002      	beq.n	800d7da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d7d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7d8:	e061      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d7e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d7e8:	e059      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d002      	beq.n	800d7fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d7f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7f8:	e051      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d800:	2b00      	cmp	r3, #0
 800d802:	d002      	beq.n	800d80a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d808:	e049      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d810:	2b00      	cmp	r3, #0
 800d812:	d002      	beq.n	800d81a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d814:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d818:	e041      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d820:	2b00      	cmp	r3, #0
 800d822:	d002      	beq.n	800d82a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d828:	e039      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d830:	2b00      	cmp	r3, #0
 800d832:	d002      	beq.n	800d83a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d838:	e031      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d840:	2b00      	cmp	r3, #0
 800d842:	d002      	beq.n	800d84a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d844:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d848:	e029      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d854:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d858:	e021      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d860:	2b00      	cmp	r3, #0
 800d862:	d002      	beq.n	800d86a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d864:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d868:	e019      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d870:	2b00      	cmp	r3, #0
 800d872:	d002      	beq.n	800d87a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d874:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d878:	e011      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d880:	2b00      	cmp	r3, #0
 800d882:	d002      	beq.n	800d88a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d884:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d888:	e009      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	f003 0308 	and.w	r3, r3, #8
 800d890:	2b00      	cmp	r3, #0
 800d892:	d002      	beq.n	800d89a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d894:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d898:	e001      	b.n	800d89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d89a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3720      	adds	r7, #32
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	20000444 	.word	0x20000444
 800d8ac:	10624dd3 	.word	0x10624dd3
 800d8b0:	fdffe008 	.word	0xfdffe008

0800d8b4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d8bc:	4b1f      	ldr	r3, [pc, #124]	; (800d93c <SDMMC_GetCmdResp2+0x88>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a1f      	ldr	r2, [pc, #124]	; (800d940 <SDMMC_GetCmdResp2+0x8c>)
 800d8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8c6:	0a5b      	lsrs	r3, r3, #9
 800d8c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8cc:	fb02 f303 	mul.w	r3, r2, r3
 800d8d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	1e5a      	subs	r2, r3, #1
 800d8d6:	60fa      	str	r2, [r7, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d102      	bne.n	800d8e2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d8e0:	e026      	b.n	800d930 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d0ef      	beq.n	800d8d2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d1ea      	bne.n	800d8d2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d900:	f003 0304 	and.w	r3, r3, #4
 800d904:	2b00      	cmp	r3, #0
 800d906:	d004      	beq.n	800d912 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2204      	movs	r2, #4
 800d90c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d90e:	2304      	movs	r3, #4
 800d910:	e00e      	b.n	800d930 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d916:	f003 0301 	and.w	r3, r3, #1
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d004      	beq.n	800d928 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2201      	movs	r2, #1
 800d922:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d924:	2301      	movs	r3, #1
 800d926:	e003      	b.n	800d930 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	22c5      	movs	r2, #197	; 0xc5
 800d92c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3714      	adds	r7, #20
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	20000444 	.word	0x20000444
 800d940:	10624dd3 	.word	0x10624dd3

0800d944 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d94c:	4b1a      	ldr	r3, [pc, #104]	; (800d9b8 <SDMMC_GetCmdResp3+0x74>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a1a      	ldr	r2, [pc, #104]	; (800d9bc <SDMMC_GetCmdResp3+0x78>)
 800d952:	fba2 2303 	umull	r2, r3, r2, r3
 800d956:	0a5b      	lsrs	r3, r3, #9
 800d958:	f241 3288 	movw	r2, #5000	; 0x1388
 800d95c:	fb02 f303 	mul.w	r3, r2, r3
 800d960:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	1e5a      	subs	r2, r3, #1
 800d966:	60fa      	str	r2, [r7, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d102      	bne.n	800d972 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d96c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d970:	e01b      	b.n	800d9aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d976:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d0ef      	beq.n	800d962 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d1ea      	bne.n	800d962 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d990:	f003 0304 	and.w	r3, r3, #4
 800d994:	2b00      	cmp	r3, #0
 800d996:	d004      	beq.n	800d9a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2204      	movs	r2, #4
 800d99c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d99e:	2304      	movs	r3, #4
 800d9a0:	e003      	b.n	800d9aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	22c5      	movs	r2, #197	; 0xc5
 800d9a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3714      	adds	r7, #20
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	20000444 	.word	0x20000444
 800d9bc:	10624dd3 	.word	0x10624dd3

0800d9c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b088      	sub	sp, #32
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	607a      	str	r2, [r7, #4]
 800d9cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d9ce:	4b35      	ldr	r3, [pc, #212]	; (800daa4 <SDMMC_GetCmdResp6+0xe4>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4a35      	ldr	r2, [pc, #212]	; (800daa8 <SDMMC_GetCmdResp6+0xe8>)
 800d9d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d9d8:	0a5b      	lsrs	r3, r3, #9
 800d9da:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9de:	fb02 f303 	mul.w	r3, r2, r3
 800d9e2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	1e5a      	subs	r2, r3, #1
 800d9e8:	61fa      	str	r2, [r7, #28]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d102      	bne.n	800d9f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9f2:	e052      	b.n	800da9a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800da00:	2b00      	cmp	r3, #0
 800da02:	d0ef      	beq.n	800d9e4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d1ea      	bne.n	800d9e4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da12:	f003 0304 	and.w	r3, r3, #4
 800da16:	2b00      	cmp	r3, #0
 800da18:	d004      	beq.n	800da24 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2204      	movs	r2, #4
 800da1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da20:	2304      	movs	r3, #4
 800da22:	e03a      	b.n	800da9a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d004      	beq.n	800da3a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2201      	movs	r2, #1
 800da34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da36:	2301      	movs	r3, #1
 800da38:	e02f      	b.n	800da9a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800da3a:	68f8      	ldr	r0, [r7, #12]
 800da3c:	f7ff fc0d 	bl	800d25a <SDIO_GetCommandResponse>
 800da40:	4603      	mov	r3, r0
 800da42:	461a      	mov	r2, r3
 800da44:	7afb      	ldrb	r3, [r7, #11]
 800da46:	4293      	cmp	r3, r2
 800da48:	d001      	beq.n	800da4e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e025      	b.n	800da9a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	22c5      	movs	r2, #197	; 0xc5
 800da52:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800da54:	2100      	movs	r1, #0
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f7ff fc0c 	bl	800d274 <SDIO_GetResponse>
 800da5c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800da64:	2b00      	cmp	r3, #0
 800da66:	d106      	bne.n	800da76 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	0c1b      	lsrs	r3, r3, #16
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800da72:	2300      	movs	r3, #0
 800da74:	e011      	b.n	800da9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d002      	beq.n	800da86 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da84:	e009      	b.n	800da9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d002      	beq.n	800da96 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da94:	e001      	b.n	800da9a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3720      	adds	r7, #32
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	20000444 	.word	0x20000444
 800daa8:	10624dd3 	.word	0x10624dd3

0800daac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dab4:	4b22      	ldr	r3, [pc, #136]	; (800db40 <SDMMC_GetCmdResp7+0x94>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a22      	ldr	r2, [pc, #136]	; (800db44 <SDMMC_GetCmdResp7+0x98>)
 800daba:	fba2 2303 	umull	r2, r3, r2, r3
 800dabe:	0a5b      	lsrs	r3, r3, #9
 800dac0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dac4:	fb02 f303 	mul.w	r3, r2, r3
 800dac8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	1e5a      	subs	r2, r3, #1
 800dace:	60fa      	str	r2, [r7, #12]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d102      	bne.n	800dada <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dad8:	e02c      	b.n	800db34 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dade:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d0ef      	beq.n	800daca <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1ea      	bne.n	800daca <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daf8:	f003 0304 	and.w	r3, r3, #4
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d004      	beq.n	800db0a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2204      	movs	r2, #4
 800db04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db06:	2304      	movs	r3, #4
 800db08:	e014      	b.n	800db34 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db0e:	f003 0301 	and.w	r3, r3, #1
 800db12:	2b00      	cmp	r3, #0
 800db14:	d004      	beq.n	800db20 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2201      	movs	r2, #1
 800db1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db1c:	2301      	movs	r3, #1
 800db1e:	e009      	b.n	800db34 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d002      	beq.n	800db32 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2240      	movs	r2, #64	; 0x40
 800db30:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800db32:	2300      	movs	r3, #0
  
}
 800db34:	4618      	mov	r0, r3
 800db36:	3714      	adds	r7, #20
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr
 800db40:	20000444 	.word	0x20000444
 800db44:	10624dd3 	.word	0x10624dd3

0800db48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db50:	4b11      	ldr	r3, [pc, #68]	; (800db98 <SDMMC_GetCmdError+0x50>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4a11      	ldr	r2, [pc, #68]	; (800db9c <SDMMC_GetCmdError+0x54>)
 800db56:	fba2 2303 	umull	r2, r3, r2, r3
 800db5a:	0a5b      	lsrs	r3, r3, #9
 800db5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800db60:	fb02 f303 	mul.w	r3, r2, r3
 800db64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	1e5a      	subs	r2, r3, #1
 800db6a:	60fa      	str	r2, [r7, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d102      	bne.n	800db76 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db74:	e009      	b.n	800db8a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d0f1      	beq.n	800db66 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	22c5      	movs	r2, #197	; 0xc5
 800db86:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	20000444 	.word	0x20000444
 800db9c:	10624dd3 	.word	0x10624dd3

0800dba0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dba4:	4904      	ldr	r1, [pc, #16]	; (800dbb8 <MX_FATFS_Init+0x18>)
 800dba6:	4805      	ldr	r0, [pc, #20]	; (800dbbc <MX_FATFS_Init+0x1c>)
 800dba8:	f002 fff2 	bl	8010b90 <FATFS_LinkDriver>
 800dbac:	4603      	mov	r3, r0
 800dbae:	461a      	mov	r2, r3
 800dbb0:	4b03      	ldr	r3, [pc, #12]	; (800dbc0 <MX_FATFS_Init+0x20>)
 800dbb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dbb4:	bf00      	nop
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	20000a84 	.word	0x20000a84
 800dbbc:	08015068 	.word	0x08015068
 800dbc0:	20000a80 	.word	0x20000a80

0800dbc4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dbc8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dbde:	f000 f86b 	bl	800dcb8 <BSP_SD_IsDetected>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d001      	beq.n	800dbec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e005      	b.n	800dbf8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800dbec:	4804      	ldr	r0, [pc, #16]	; (800dc00 <BSP_SD_Init+0x2c>)
 800dbee:	f7fd faf5 	bl	800b1dc <HAL_SD_Init>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800dbf6:	79fb      	ldrb	r3, [r7, #7]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	20000784 	.word	0x20000784

0800dc04 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af02      	add	r7, sp, #8
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800dc12:	2300      	movs	r3, #0
 800dc14:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	68f9      	ldr	r1, [r7, #12]
 800dc20:	4806      	ldr	r0, [pc, #24]	; (800dc3c <BSP_SD_ReadBlocks+0x38>)
 800dc22:	f7fd fb8b 	bl	800b33c <HAL_SD_ReadBlocks>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d001      	beq.n	800dc30 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dc30:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3718      	adds	r7, #24
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	20000784 	.word	0x20000784

0800dc40 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b088      	sub	sp, #32
 800dc44:	af02      	add	r7, sp, #8
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	68ba      	ldr	r2, [r7, #8]
 800dc5a:	68f9      	ldr	r1, [r7, #12]
 800dc5c:	4806      	ldr	r0, [pc, #24]	; (800dc78 <BSP_SD_WriteBlocks+0x38>)
 800dc5e:	f7fd fd4b 	bl	800b6f8 <HAL_SD_WriteBlocks>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d001      	beq.n	800dc6c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dc6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3718      	adds	r7, #24
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	20000784 	.word	0x20000784

0800dc7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dc80:	4805      	ldr	r0, [pc, #20]	; (800dc98 <BSP_SD_GetCardState+0x1c>)
 800dc82:	f7fe f88f 	bl	800bda4 <HAL_SD_GetCardState>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b04      	cmp	r3, #4
 800dc8a:	bf14      	ite	ne
 800dc8c:	2301      	movne	r3, #1
 800dc8e:	2300      	moveq	r3, #0
 800dc90:	b2db      	uxtb	r3, r3
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	20000784 	.word	0x20000784

0800dc9c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800dca4:	6879      	ldr	r1, [r7, #4]
 800dca6:	4803      	ldr	r0, [pc, #12]	; (800dcb4 <BSP_SD_GetCardInfo+0x18>)
 800dca8:	f7fe f850 	bl	800bd4c <HAL_SD_GetCardInfo>
}
 800dcac:	bf00      	nop
 800dcae:	3708      	adds	r7, #8
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	20000784 	.word	0x20000784

0800dcb8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800dcc2:	79fb      	ldrb	r3, [r7, #7]
 800dcc4:	b2db      	uxtb	r3, r3
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	370c      	adds	r7, #12
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr
	...

0800dcd4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	4603      	mov	r3, r0
 800dcdc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dcde:	4b0b      	ldr	r3, [pc, #44]	; (800dd0c <SD_CheckStatus+0x38>)
 800dce0:	2201      	movs	r2, #1
 800dce2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dce4:	f7ff ffca 	bl	800dc7c <BSP_SD_GetCardState>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d107      	bne.n	800dcfe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dcee:	4b07      	ldr	r3, [pc, #28]	; (800dd0c <SD_CheckStatus+0x38>)
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	f023 0301 	bic.w	r3, r3, #1
 800dcf8:	b2da      	uxtb	r2, r3
 800dcfa:	4b04      	ldr	r3, [pc, #16]	; (800dd0c <SD_CheckStatus+0x38>)
 800dcfc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dcfe:	4b03      	ldr	r3, [pc, #12]	; (800dd0c <SD_CheckStatus+0x38>)
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	b2db      	uxtb	r3, r3
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	2000044d 	.word	0x2000044d

0800dd10 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	4603      	mov	r3, r0
 800dd18:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dd1a:	4b0b      	ldr	r3, [pc, #44]	; (800dd48 <SD_initialize+0x38>)
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dd20:	f7ff ff58 	bl	800dbd4 <BSP_SD_Init>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d107      	bne.n	800dd3a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800dd2a:	79fb      	ldrb	r3, [r7, #7]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7ff ffd1 	bl	800dcd4 <SD_CheckStatus>
 800dd32:	4603      	mov	r3, r0
 800dd34:	461a      	mov	r2, r3
 800dd36:	4b04      	ldr	r3, [pc, #16]	; (800dd48 <SD_initialize+0x38>)
 800dd38:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dd3a:	4b03      	ldr	r3, [pc, #12]	; (800dd48 <SD_initialize+0x38>)
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	b2db      	uxtb	r3, r3
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	2000044d 	.word	0x2000044d

0800dd4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	4603      	mov	r3, r0
 800dd54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dd56:	79fb      	ldrb	r3, [r7, #7]
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7ff ffbb 	bl	800dcd4 <SD_CheckStatus>
 800dd5e:	4603      	mov	r3, r0
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3708      	adds	r7, #8
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60b9      	str	r1, [r7, #8]
 800dd70:	607a      	str	r2, [r7, #4]
 800dd72:	603b      	str	r3, [r7, #0]
 800dd74:	4603      	mov	r3, r0
 800dd76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800dd7c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd80:	683a      	ldr	r2, [r7, #0]
 800dd82:	6879      	ldr	r1, [r7, #4]
 800dd84:	68b8      	ldr	r0, [r7, #8]
 800dd86:	f7ff ff3d 	bl	800dc04 <BSP_SD_ReadBlocks>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d107      	bne.n	800dda0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dd90:	bf00      	nop
 800dd92:	f7ff ff73 	bl	800dc7c <BSP_SD_GetCardState>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d1fa      	bne.n	800dd92 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3718      	adds	r7, #24
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b086      	sub	sp, #24
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
 800ddb4:	603b      	str	r3, [r7, #0]
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ddbe:	f04f 33ff 	mov.w	r3, #4294967295
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	6879      	ldr	r1, [r7, #4]
 800ddc6:	68b8      	ldr	r0, [r7, #8]
 800ddc8:	f7ff ff3a 	bl	800dc40 <BSP_SD_WriteBlocks>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d107      	bne.n	800dde2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ddd2:	bf00      	nop
 800ddd4:	f7ff ff52 	bl	800dc7c <BSP_SD_GetCardState>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d1fa      	bne.n	800ddd4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ddde:	2300      	movs	r3, #0
 800dde0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dde2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3718      	adds	r7, #24
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b08c      	sub	sp, #48	; 0x30
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	603a      	str	r2, [r7, #0]
 800ddf6:	71fb      	strb	r3, [r7, #7]
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800de02:	4b25      	ldr	r3, [pc, #148]	; (800de98 <SD_ioctl+0xac>)
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	b2db      	uxtb	r3, r3
 800de08:	f003 0301 	and.w	r3, r3, #1
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <SD_ioctl+0x28>
 800de10:	2303      	movs	r3, #3
 800de12:	e03c      	b.n	800de8e <SD_ioctl+0xa2>

  switch (cmd)
 800de14:	79bb      	ldrb	r3, [r7, #6]
 800de16:	2b03      	cmp	r3, #3
 800de18:	d834      	bhi.n	800de84 <SD_ioctl+0x98>
 800de1a:	a201      	add	r2, pc, #4	; (adr r2, 800de20 <SD_ioctl+0x34>)
 800de1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de20:	0800de31 	.word	0x0800de31
 800de24:	0800de39 	.word	0x0800de39
 800de28:	0800de51 	.word	0x0800de51
 800de2c:	0800de6b 	.word	0x0800de6b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800de30:	2300      	movs	r3, #0
 800de32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de36:	e028      	b.n	800de8a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800de38:	f107 030c 	add.w	r3, r7, #12
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7ff ff2d 	bl	800dc9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800de42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de4e:	e01c      	b.n	800de8a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de50:	f107 030c 	add.w	r3, r7, #12
 800de54:	4618      	mov	r0, r3
 800de56:	f7ff ff21 	bl	800dc9c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800de5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800de62:	2300      	movs	r3, #0
 800de64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de68:	e00f      	b.n	800de8a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de6a:	f107 030c 	add.w	r3, r7, #12
 800de6e:	4618      	mov	r0, r3
 800de70:	f7ff ff14 	bl	800dc9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800de74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de76:	0a5a      	lsrs	r2, r3, #9
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de7c:	2300      	movs	r3, #0
 800de7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de82:	e002      	b.n	800de8a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800de84:	2304      	movs	r3, #4
 800de86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800de8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3730      	adds	r7, #48	; 0x30
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	2000044d 	.word	0x2000044d

0800de9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	4603      	mov	r3, r0
 800dea4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dea6:	79fb      	ldrb	r3, [r7, #7]
 800dea8:	4a08      	ldr	r2, [pc, #32]	; (800decc <disk_status+0x30>)
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	4413      	add	r3, r2
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	79fa      	ldrb	r2, [r7, #7]
 800deb4:	4905      	ldr	r1, [pc, #20]	; (800decc <disk_status+0x30>)
 800deb6:	440a      	add	r2, r1
 800deb8:	7a12      	ldrb	r2, [r2, #8]
 800deba:	4610      	mov	r0, r2
 800debc:	4798      	blx	r3
 800debe:	4603      	mov	r3, r0
 800dec0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	20002d18 	.word	0x20002d18

0800ded0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	4603      	mov	r3, r0
 800ded8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800deda:	2300      	movs	r3, #0
 800dedc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dede:	79fb      	ldrb	r3, [r7, #7]
 800dee0:	4a0d      	ldr	r2, [pc, #52]	; (800df18 <disk_initialize+0x48>)
 800dee2:	5cd3      	ldrb	r3, [r2, r3]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d111      	bne.n	800df0c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800dee8:	79fb      	ldrb	r3, [r7, #7]
 800deea:	4a0b      	ldr	r2, [pc, #44]	; (800df18 <disk_initialize+0x48>)
 800deec:	2101      	movs	r1, #1
 800deee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800def0:	79fb      	ldrb	r3, [r7, #7]
 800def2:	4a09      	ldr	r2, [pc, #36]	; (800df18 <disk_initialize+0x48>)
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	4413      	add	r3, r2
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	79fa      	ldrb	r2, [r7, #7]
 800defe:	4906      	ldr	r1, [pc, #24]	; (800df18 <disk_initialize+0x48>)
 800df00:	440a      	add	r2, r1
 800df02:	7a12      	ldrb	r2, [r2, #8]
 800df04:	4610      	mov	r0, r2
 800df06:	4798      	blx	r3
 800df08:	4603      	mov	r3, r0
 800df0a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	20002d18 	.word	0x20002d18

0800df1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800df1c:	b590      	push	{r4, r7, lr}
 800df1e:	b087      	sub	sp, #28
 800df20:	af00      	add	r7, sp, #0
 800df22:	60b9      	str	r1, [r7, #8]
 800df24:	607a      	str	r2, [r7, #4]
 800df26:	603b      	str	r3, [r7, #0]
 800df28:	4603      	mov	r3, r0
 800df2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800df2c:	7bfb      	ldrb	r3, [r7, #15]
 800df2e:	4a0a      	ldr	r2, [pc, #40]	; (800df58 <disk_read+0x3c>)
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4413      	add	r3, r2
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	689c      	ldr	r4, [r3, #8]
 800df38:	7bfb      	ldrb	r3, [r7, #15]
 800df3a:	4a07      	ldr	r2, [pc, #28]	; (800df58 <disk_read+0x3c>)
 800df3c:	4413      	add	r3, r2
 800df3e:	7a18      	ldrb	r0, [r3, #8]
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	68b9      	ldr	r1, [r7, #8]
 800df46:	47a0      	blx	r4
 800df48:	4603      	mov	r3, r0
 800df4a:	75fb      	strb	r3, [r7, #23]
  return res;
 800df4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	371c      	adds	r7, #28
 800df52:	46bd      	mov	sp, r7
 800df54:	bd90      	pop	{r4, r7, pc}
 800df56:	bf00      	nop
 800df58:	20002d18 	.word	0x20002d18

0800df5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800df5c:	b590      	push	{r4, r7, lr}
 800df5e:	b087      	sub	sp, #28
 800df60:	af00      	add	r7, sp, #0
 800df62:	60b9      	str	r1, [r7, #8]
 800df64:	607a      	str	r2, [r7, #4]
 800df66:	603b      	str	r3, [r7, #0]
 800df68:	4603      	mov	r3, r0
 800df6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800df6c:	7bfb      	ldrb	r3, [r7, #15]
 800df6e:	4a0a      	ldr	r2, [pc, #40]	; (800df98 <disk_write+0x3c>)
 800df70:	009b      	lsls	r3, r3, #2
 800df72:	4413      	add	r3, r2
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	68dc      	ldr	r4, [r3, #12]
 800df78:	7bfb      	ldrb	r3, [r7, #15]
 800df7a:	4a07      	ldr	r2, [pc, #28]	; (800df98 <disk_write+0x3c>)
 800df7c:	4413      	add	r3, r2
 800df7e:	7a18      	ldrb	r0, [r3, #8]
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	68b9      	ldr	r1, [r7, #8]
 800df86:	47a0      	blx	r4
 800df88:	4603      	mov	r3, r0
 800df8a:	75fb      	strb	r3, [r7, #23]
  return res;
 800df8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	371c      	adds	r7, #28
 800df92:	46bd      	mov	sp, r7
 800df94:	bd90      	pop	{r4, r7, pc}
 800df96:	bf00      	nop
 800df98:	20002d18 	.word	0x20002d18

0800df9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	603a      	str	r2, [r7, #0]
 800dfa6:	71fb      	strb	r3, [r7, #7]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800dfac:	79fb      	ldrb	r3, [r7, #7]
 800dfae:	4a09      	ldr	r2, [pc, #36]	; (800dfd4 <disk_ioctl+0x38>)
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	4413      	add	r3, r2
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	691b      	ldr	r3, [r3, #16]
 800dfb8:	79fa      	ldrb	r2, [r7, #7]
 800dfba:	4906      	ldr	r1, [pc, #24]	; (800dfd4 <disk_ioctl+0x38>)
 800dfbc:	440a      	add	r2, r1
 800dfbe:	7a10      	ldrb	r0, [r2, #8]
 800dfc0:	79b9      	ldrb	r1, [r7, #6]
 800dfc2:	683a      	ldr	r2, [r7, #0]
 800dfc4:	4798      	blx	r3
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	73fb      	strb	r3, [r7, #15]
  return res;
 800dfca:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3710      	adds	r7, #16
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	20002d18 	.word	0x20002d18

0800dfd8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800dfe8:	89fb      	ldrh	r3, [r7, #14]
 800dfea:	021b      	lsls	r3, r3, #8
 800dfec:	b21a      	sxth	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	b21b      	sxth	r3, r3
 800dff4:	4313      	orrs	r3, r2
 800dff6:	b21b      	sxth	r3, r3
 800dff8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800dffa:	89fb      	ldrh	r3, [r7, #14]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3714      	adds	r7, #20
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e008:	b480      	push	{r7}
 800e00a:	b085      	sub	sp, #20
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	3303      	adds	r3, #3
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	021b      	lsls	r3, r3, #8
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	3202      	adds	r2, #2
 800e020:	7812      	ldrb	r2, [r2, #0]
 800e022:	4313      	orrs	r3, r2
 800e024:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	021b      	lsls	r3, r3, #8
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	3201      	adds	r2, #1
 800e02e:	7812      	ldrb	r2, [r2, #0]
 800e030:	4313      	orrs	r3, r2
 800e032:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	021b      	lsls	r3, r3, #8
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	7812      	ldrb	r2, [r2, #0]
 800e03c:	4313      	orrs	r3, r2
 800e03e:	60fb      	str	r3, [r7, #12]
	return rv;
 800e040:	68fb      	ldr	r3, [r7, #12]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3714      	adds	r7, #20
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr

0800e04e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e04e:	b480      	push	{r7}
 800e050:	b083      	sub	sp, #12
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
 800e056:	460b      	mov	r3, r1
 800e058:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	1c5a      	adds	r2, r3, #1
 800e05e:	607a      	str	r2, [r7, #4]
 800e060:	887a      	ldrh	r2, [r7, #2]
 800e062:	b2d2      	uxtb	r2, r2
 800e064:	701a      	strb	r2, [r3, #0]
 800e066:	887b      	ldrh	r3, [r7, #2]
 800e068:	0a1b      	lsrs	r3, r3, #8
 800e06a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	1c5a      	adds	r2, r3, #1
 800e070:	607a      	str	r2, [r7, #4]
 800e072:	887a      	ldrh	r2, [r7, #2]
 800e074:	b2d2      	uxtb	r2, r2
 800e076:	701a      	strb	r2, [r3, #0]
}
 800e078:	bf00      	nop
 800e07a:	370c      	adds	r7, #12
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	1c5a      	adds	r2, r3, #1
 800e092:	607a      	str	r2, [r7, #4]
 800e094:	683a      	ldr	r2, [r7, #0]
 800e096:	b2d2      	uxtb	r2, r2
 800e098:	701a      	strb	r2, [r3, #0]
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	0a1b      	lsrs	r3, r3, #8
 800e09e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	1c5a      	adds	r2, r3, #1
 800e0a4:	607a      	str	r2, [r7, #4]
 800e0a6:	683a      	ldr	r2, [r7, #0]
 800e0a8:	b2d2      	uxtb	r2, r2
 800e0aa:	701a      	strb	r2, [r3, #0]
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	0a1b      	lsrs	r3, r3, #8
 800e0b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	1c5a      	adds	r2, r3, #1
 800e0b6:	607a      	str	r2, [r7, #4]
 800e0b8:	683a      	ldr	r2, [r7, #0]
 800e0ba:	b2d2      	uxtb	r2, r2
 800e0bc:	701a      	strb	r2, [r3, #0]
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	0a1b      	lsrs	r3, r3, #8
 800e0c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	1c5a      	adds	r2, r3, #1
 800e0c8:	607a      	str	r2, [r7, #4]
 800e0ca:	683a      	ldr	r2, [r7, #0]
 800e0cc:	b2d2      	uxtb	r2, r2
 800e0ce:	701a      	strb	r2, [r3, #0]
}
 800e0d0:	bf00      	nop
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e0dc:	b480      	push	{r7}
 800e0de:	b087      	sub	sp, #28
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00d      	beq.n	800e112 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e0f6:	693a      	ldr	r2, [r7, #16]
 800e0f8:	1c53      	adds	r3, r2, #1
 800e0fa:	613b      	str	r3, [r7, #16]
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	1c59      	adds	r1, r3, #1
 800e100:	6179      	str	r1, [r7, #20]
 800e102:	7812      	ldrb	r2, [r2, #0]
 800e104:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	3b01      	subs	r3, #1
 800e10a:	607b      	str	r3, [r7, #4]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d1f1      	bne.n	800e0f6 <mem_cpy+0x1a>
	}
}
 800e112:	bf00      	nop
 800e114:	371c      	adds	r7, #28
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr

0800e11e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e11e:	b480      	push	{r7}
 800e120:	b087      	sub	sp, #28
 800e122:	af00      	add	r7, sp, #0
 800e124:	60f8      	str	r0, [r7, #12]
 800e126:	60b9      	str	r1, [r7, #8]
 800e128:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	1c5a      	adds	r2, r3, #1
 800e132:	617a      	str	r2, [r7, #20]
 800e134:	68ba      	ldr	r2, [r7, #8]
 800e136:	b2d2      	uxtb	r2, r2
 800e138:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	3b01      	subs	r3, #1
 800e13e:	607b      	str	r3, [r7, #4]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d1f3      	bne.n	800e12e <mem_set+0x10>
}
 800e146:	bf00      	nop
 800e148:	bf00      	nop
 800e14a:	371c      	adds	r7, #28
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr

0800e154 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e154:	b480      	push	{r7}
 800e156:	b089      	sub	sp, #36	; 0x24
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	61fb      	str	r3, [r7, #28]
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e168:	2300      	movs	r3, #0
 800e16a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	1c5a      	adds	r2, r3, #1
 800e170:	61fa      	str	r2, [r7, #28]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	4619      	mov	r1, r3
 800e176:	69bb      	ldr	r3, [r7, #24]
 800e178:	1c5a      	adds	r2, r3, #1
 800e17a:	61ba      	str	r2, [r7, #24]
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	1acb      	subs	r3, r1, r3
 800e180:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	3b01      	subs	r3, #1
 800e186:	607b      	str	r3, [r7, #4]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d002      	beq.n	800e194 <mem_cmp+0x40>
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d0eb      	beq.n	800e16c <mem_cmp+0x18>

	return r;
 800e194:	697b      	ldr	r3, [r7, #20]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3724      	adds	r7, #36	; 0x24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr

0800e1a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e1a2:	b480      	push	{r7}
 800e1a4:	b083      	sub	sp, #12
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
 800e1aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e1ac:	e002      	b.n	800e1b4 <chk_chr+0x12>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	607b      	str	r3, [r7, #4]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d005      	beq.n	800e1c8 <chk_chr+0x26>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	461a      	mov	r2, r3
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d1f2      	bne.n	800e1ae <chk_chr+0xc>
	return *str;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	60bb      	str	r3, [r7, #8]
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	60fb      	str	r3, [r7, #12]
 800e1ea:	e029      	b.n	800e240 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e1ec:	4a27      	ldr	r2, [pc, #156]	; (800e28c <chk_lock+0xb4>)
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	011b      	lsls	r3, r3, #4
 800e1f2:	4413      	add	r3, r2
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d01d      	beq.n	800e236 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e1fa:	4a24      	ldr	r2, [pc, #144]	; (800e28c <chk_lock+0xb4>)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	011b      	lsls	r3, r3, #4
 800e200:	4413      	add	r3, r2
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d116      	bne.n	800e23a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e20c:	4a1f      	ldr	r2, [pc, #124]	; (800e28c <chk_lock+0xb4>)
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	011b      	lsls	r3, r3, #4
 800e212:	4413      	add	r3, r2
 800e214:	3304      	adds	r3, #4
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d10c      	bne.n	800e23a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e220:	4a1a      	ldr	r2, [pc, #104]	; (800e28c <chk_lock+0xb4>)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	011b      	lsls	r3, r3, #4
 800e226:	4413      	add	r3, r2
 800e228:	3308      	adds	r3, #8
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e230:	429a      	cmp	r2, r3
 800e232:	d102      	bne.n	800e23a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e234:	e007      	b.n	800e246 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e236:	2301      	movs	r3, #1
 800e238:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3301      	adds	r3, #1
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b01      	cmp	r3, #1
 800e244:	d9d2      	bls.n	800e1ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2b02      	cmp	r3, #2
 800e24a:	d109      	bne.n	800e260 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d102      	bne.n	800e258 <chk_lock+0x80>
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	2b02      	cmp	r3, #2
 800e256:	d101      	bne.n	800e25c <chk_lock+0x84>
 800e258:	2300      	movs	r3, #0
 800e25a:	e010      	b.n	800e27e <chk_lock+0xa6>
 800e25c:	2312      	movs	r3, #18
 800e25e:	e00e      	b.n	800e27e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d108      	bne.n	800e278 <chk_lock+0xa0>
 800e266:	4a09      	ldr	r2, [pc, #36]	; (800e28c <chk_lock+0xb4>)
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	011b      	lsls	r3, r3, #4
 800e26c:	4413      	add	r3, r2
 800e26e:	330c      	adds	r3, #12
 800e270:	881b      	ldrh	r3, [r3, #0]
 800e272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e276:	d101      	bne.n	800e27c <chk_lock+0xa4>
 800e278:	2310      	movs	r3, #16
 800e27a:	e000      	b.n	800e27e <chk_lock+0xa6>
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3714      	adds	r7, #20
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	20002af8 	.word	0x20002af8

0800e290 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e290:	b480      	push	{r7}
 800e292:	b083      	sub	sp, #12
 800e294:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e296:	2300      	movs	r3, #0
 800e298:	607b      	str	r3, [r7, #4]
 800e29a:	e002      	b.n	800e2a2 <enq_lock+0x12>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	607b      	str	r3, [r7, #4]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d806      	bhi.n	800e2b6 <enq_lock+0x26>
 800e2a8:	4a09      	ldr	r2, [pc, #36]	; (800e2d0 <enq_lock+0x40>)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	011b      	lsls	r3, r3, #4
 800e2ae:	4413      	add	r3, r2
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d1f2      	bne.n	800e29c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2b02      	cmp	r3, #2
 800e2ba:	bf14      	ite	ne
 800e2bc:	2301      	movne	r3, #1
 800e2be:	2300      	moveq	r3, #0
 800e2c0:	b2db      	uxtb	r3, r3
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	370c      	adds	r7, #12
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop
 800e2d0:	20002af8 	.word	0x20002af8

0800e2d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b085      	sub	sp, #20
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e2de:	2300      	movs	r3, #0
 800e2e0:	60fb      	str	r3, [r7, #12]
 800e2e2:	e01f      	b.n	800e324 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e2e4:	4a41      	ldr	r2, [pc, #260]	; (800e3ec <inc_lock+0x118>)
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	011b      	lsls	r3, r3, #4
 800e2ea:	4413      	add	r3, r2
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d113      	bne.n	800e31e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e2f6:	4a3d      	ldr	r2, [pc, #244]	; (800e3ec <inc_lock+0x118>)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	011b      	lsls	r3, r3, #4
 800e2fc:	4413      	add	r3, r2
 800e2fe:	3304      	adds	r3, #4
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e306:	429a      	cmp	r2, r3
 800e308:	d109      	bne.n	800e31e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e30a:	4a38      	ldr	r2, [pc, #224]	; (800e3ec <inc_lock+0x118>)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	011b      	lsls	r3, r3, #4
 800e310:	4413      	add	r3, r2
 800e312:	3308      	adds	r3, #8
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d006      	beq.n	800e32c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	3301      	adds	r3, #1
 800e322:	60fb      	str	r3, [r7, #12]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2b01      	cmp	r3, #1
 800e328:	d9dc      	bls.n	800e2e4 <inc_lock+0x10>
 800e32a:	e000      	b.n	800e32e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e32c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2b02      	cmp	r3, #2
 800e332:	d132      	bne.n	800e39a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e334:	2300      	movs	r3, #0
 800e336:	60fb      	str	r3, [r7, #12]
 800e338:	e002      	b.n	800e340 <inc_lock+0x6c>
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	3301      	adds	r3, #1
 800e33e:	60fb      	str	r3, [r7, #12]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2b01      	cmp	r3, #1
 800e344:	d806      	bhi.n	800e354 <inc_lock+0x80>
 800e346:	4a29      	ldr	r2, [pc, #164]	; (800e3ec <inc_lock+0x118>)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	011b      	lsls	r3, r3, #4
 800e34c:	4413      	add	r3, r2
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d1f2      	bne.n	800e33a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2b02      	cmp	r3, #2
 800e358:	d101      	bne.n	800e35e <inc_lock+0x8a>
 800e35a:	2300      	movs	r3, #0
 800e35c:	e040      	b.n	800e3e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	4922      	ldr	r1, [pc, #136]	; (800e3ec <inc_lock+0x118>)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	011b      	lsls	r3, r3, #4
 800e368:	440b      	add	r3, r1
 800e36a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	689a      	ldr	r2, [r3, #8]
 800e370:	491e      	ldr	r1, [pc, #120]	; (800e3ec <inc_lock+0x118>)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	011b      	lsls	r3, r3, #4
 800e376:	440b      	add	r3, r1
 800e378:	3304      	adds	r3, #4
 800e37a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	695a      	ldr	r2, [r3, #20]
 800e380:	491a      	ldr	r1, [pc, #104]	; (800e3ec <inc_lock+0x118>)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	011b      	lsls	r3, r3, #4
 800e386:	440b      	add	r3, r1
 800e388:	3308      	adds	r3, #8
 800e38a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e38c:	4a17      	ldr	r2, [pc, #92]	; (800e3ec <inc_lock+0x118>)
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	011b      	lsls	r3, r3, #4
 800e392:	4413      	add	r3, r2
 800e394:	330c      	adds	r3, #12
 800e396:	2200      	movs	r2, #0
 800e398:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d009      	beq.n	800e3b4 <inc_lock+0xe0>
 800e3a0:	4a12      	ldr	r2, [pc, #72]	; (800e3ec <inc_lock+0x118>)
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	011b      	lsls	r3, r3, #4
 800e3a6:	4413      	add	r3, r2
 800e3a8:	330c      	adds	r3, #12
 800e3aa:	881b      	ldrh	r3, [r3, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d001      	beq.n	800e3b4 <inc_lock+0xe0>
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	e015      	b.n	800e3e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d108      	bne.n	800e3cc <inc_lock+0xf8>
 800e3ba:	4a0c      	ldr	r2, [pc, #48]	; (800e3ec <inc_lock+0x118>)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	011b      	lsls	r3, r3, #4
 800e3c0:	4413      	add	r3, r2
 800e3c2:	330c      	adds	r3, #12
 800e3c4:	881b      	ldrh	r3, [r3, #0]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	e001      	b.n	800e3d0 <inc_lock+0xfc>
 800e3cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3d0:	4906      	ldr	r1, [pc, #24]	; (800e3ec <inc_lock+0x118>)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	011b      	lsls	r3, r3, #4
 800e3d6:	440b      	add	r3, r1
 800e3d8:	330c      	adds	r3, #12
 800e3da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3301      	adds	r3, #1
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3714      	adds	r7, #20
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr
 800e3ec:	20002af8 	.word	0x20002af8

0800e3f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	3b01      	subs	r3, #1
 800e3fc:	607b      	str	r3, [r7, #4]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2b01      	cmp	r3, #1
 800e402:	d825      	bhi.n	800e450 <dec_lock+0x60>
		n = Files[i].ctr;
 800e404:	4a17      	ldr	r2, [pc, #92]	; (800e464 <dec_lock+0x74>)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	011b      	lsls	r3, r3, #4
 800e40a:	4413      	add	r3, r2
 800e40c:	330c      	adds	r3, #12
 800e40e:	881b      	ldrh	r3, [r3, #0]
 800e410:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e412:	89fb      	ldrh	r3, [r7, #14]
 800e414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e418:	d101      	bne.n	800e41e <dec_lock+0x2e>
 800e41a:	2300      	movs	r3, #0
 800e41c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e41e:	89fb      	ldrh	r3, [r7, #14]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d002      	beq.n	800e42a <dec_lock+0x3a>
 800e424:	89fb      	ldrh	r3, [r7, #14]
 800e426:	3b01      	subs	r3, #1
 800e428:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e42a:	4a0e      	ldr	r2, [pc, #56]	; (800e464 <dec_lock+0x74>)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	011b      	lsls	r3, r3, #4
 800e430:	4413      	add	r3, r2
 800e432:	330c      	adds	r3, #12
 800e434:	89fa      	ldrh	r2, [r7, #14]
 800e436:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e438:	89fb      	ldrh	r3, [r7, #14]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d105      	bne.n	800e44a <dec_lock+0x5a>
 800e43e:	4a09      	ldr	r2, [pc, #36]	; (800e464 <dec_lock+0x74>)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	011b      	lsls	r3, r3, #4
 800e444:	4413      	add	r3, r2
 800e446:	2200      	movs	r2, #0
 800e448:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e44a:	2300      	movs	r3, #0
 800e44c:	737b      	strb	r3, [r7, #13]
 800e44e:	e001      	b.n	800e454 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e450:	2302      	movs	r3, #2
 800e452:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e454:	7b7b      	ldrb	r3, [r7, #13]
}
 800e456:	4618      	mov	r0, r3
 800e458:	3714      	adds	r7, #20
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	20002af8 	.word	0x20002af8

0800e468 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e470:	2300      	movs	r3, #0
 800e472:	60fb      	str	r3, [r7, #12]
 800e474:	e010      	b.n	800e498 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e476:	4a0d      	ldr	r2, [pc, #52]	; (800e4ac <clear_lock+0x44>)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	011b      	lsls	r3, r3, #4
 800e47c:	4413      	add	r3, r2
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	429a      	cmp	r2, r3
 800e484:	d105      	bne.n	800e492 <clear_lock+0x2a>
 800e486:	4a09      	ldr	r2, [pc, #36]	; (800e4ac <clear_lock+0x44>)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	011b      	lsls	r3, r3, #4
 800e48c:	4413      	add	r3, r2
 800e48e:	2200      	movs	r2, #0
 800e490:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	3301      	adds	r3, #1
 800e496:	60fb      	str	r3, [r7, #12]
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d9eb      	bls.n	800e476 <clear_lock+0xe>
	}
}
 800e49e:	bf00      	nop
 800e4a0:	bf00      	nop
 800e4a2:	3714      	adds	r7, #20
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	20002af8 	.word	0x20002af8

0800e4b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b086      	sub	sp, #24
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	78db      	ldrb	r3, [r3, #3]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d034      	beq.n	800e52e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	7858      	ldrb	r0, [r3, #1]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	697a      	ldr	r2, [r7, #20]
 800e4d8:	f7ff fd40 	bl	800df5c <disk_write>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d002      	beq.n	800e4e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	73fb      	strb	r3, [r7, #15]
 800e4e6:	e022      	b.n	800e52e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4f2:	697a      	ldr	r2, [r7, #20]
 800e4f4:	1ad2      	subs	r2, r2, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a1b      	ldr	r3, [r3, #32]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d217      	bcs.n	800e52e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	789b      	ldrb	r3, [r3, #2]
 800e502:	613b      	str	r3, [r7, #16]
 800e504:	e010      	b.n	800e528 <sync_window+0x78>
					wsect += fs->fsize;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a1b      	ldr	r3, [r3, #32]
 800e50a:	697a      	ldr	r2, [r7, #20]
 800e50c:	4413      	add	r3, r2
 800e50e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	7858      	ldrb	r0, [r3, #1]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e51a:	2301      	movs	r3, #1
 800e51c:	697a      	ldr	r2, [r7, #20]
 800e51e:	f7ff fd1d 	bl	800df5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	3b01      	subs	r3, #1
 800e526:	613b      	str	r3, [r7, #16]
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d8eb      	bhi.n	800e506 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e530:	4618      	mov	r0, r3
 800e532:	3718      	adds	r7, #24
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b084      	sub	sp, #16
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e542:	2300      	movs	r3, #0
 800e544:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d01b      	beq.n	800e588 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f7ff ffad 	bl	800e4b0 <sync_window>
 800e556:	4603      	mov	r3, r0
 800e558:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e55a:	7bfb      	ldrb	r3, [r7, #15]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d113      	bne.n	800e588 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	7858      	ldrb	r0, [r3, #1]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e56a:	2301      	movs	r3, #1
 800e56c:	683a      	ldr	r2, [r7, #0]
 800e56e:	f7ff fcd5 	bl	800df1c <disk_read>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d004      	beq.n	800e582 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e578:	f04f 33ff 	mov.w	r3, #4294967295
 800e57c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e57e:	2301      	movs	r3, #1
 800e580:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800e588:	7bfb      	ldrb	r3, [r7, #15]
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
	...

0800e594 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7ff ff87 	bl	800e4b0 <sync_window>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e5a6:	7bfb      	ldrb	r3, [r7, #15]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d159      	bne.n	800e660 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	2b03      	cmp	r3, #3
 800e5b2:	d149      	bne.n	800e648 <sync_fs+0xb4>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	791b      	ldrb	r3, [r3, #4]
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d145      	bne.n	800e648 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	899b      	ldrh	r3, [r3, #12]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	f7ff fda8 	bl	800e11e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	3338      	adds	r3, #56	; 0x38
 800e5d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e5d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7ff fd37 	bl	800e04e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	3338      	adds	r3, #56	; 0x38
 800e5e4:	4921      	ldr	r1, [pc, #132]	; (800e66c <sync_fs+0xd8>)
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7ff fd4c 	bl	800e084 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	3338      	adds	r3, #56	; 0x38
 800e5f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e5f4:	491e      	ldr	r1, [pc, #120]	; (800e670 <sync_fs+0xdc>)
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7ff fd44 	bl	800e084 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	3338      	adds	r3, #56	; 0x38
 800e600:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	699b      	ldr	r3, [r3, #24]
 800e608:	4619      	mov	r1, r3
 800e60a:	4610      	mov	r0, r2
 800e60c:	f7ff fd3a 	bl	800e084 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	3338      	adds	r3, #56	; 0x38
 800e614:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	695b      	ldr	r3, [r3, #20]
 800e61c:	4619      	mov	r1, r3
 800e61e:	4610      	mov	r0, r2
 800e620:	f7ff fd30 	bl	800e084 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e628:	1c5a      	adds	r2, r3, #1
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	7858      	ldrb	r0, [r3, #1]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e63c:	2301      	movs	r3, #1
 800e63e:	f7ff fc8d 	bl	800df5c <disk_write>
			fs->fsi_flag = 0;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2200      	movs	r2, #0
 800e646:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	785b      	ldrb	r3, [r3, #1]
 800e64c:	2200      	movs	r2, #0
 800e64e:	2100      	movs	r1, #0
 800e650:	4618      	mov	r0, r3
 800e652:	f7ff fca3 	bl	800df9c <disk_ioctl>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d001      	beq.n	800e660 <sync_fs+0xcc>
 800e65c:	2301      	movs	r3, #1
 800e65e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e660:	7bfb      	ldrb	r3, [r7, #15]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	41615252 	.word	0x41615252
 800e670:	61417272 	.word	0x61417272

0800e674 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	3b02      	subs	r3, #2
 800e682:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	69db      	ldr	r3, [r3, #28]
 800e688:	3b02      	subs	r3, #2
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d301      	bcc.n	800e694 <clust2sect+0x20>
 800e690:	2300      	movs	r3, #0
 800e692:	e008      	b.n	800e6a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	895b      	ldrh	r3, [r3, #10]
 800e698:	461a      	mov	r2, r3
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	fb03 f202 	mul.w	r2, r3, r2
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a4:	4413      	add	r3, r2
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	370c      	adds	r7, #12
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr

0800e6b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b086      	sub	sp, #24
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	6078      	str	r0, [r7, #4]
 800e6ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d904      	bls.n	800e6d2 <get_fat+0x20>
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	69db      	ldr	r3, [r3, #28]
 800e6cc:	683a      	ldr	r2, [r7, #0]
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d302      	bcc.n	800e6d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	617b      	str	r3, [r7, #20]
 800e6d6:	e0bb      	b.n	800e850 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	2b03      	cmp	r3, #3
 800e6e4:	f000 8083 	beq.w	800e7ee <get_fat+0x13c>
 800e6e8:	2b03      	cmp	r3, #3
 800e6ea:	f300 80a7 	bgt.w	800e83c <get_fat+0x18a>
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	d002      	beq.n	800e6f8 <get_fat+0x46>
 800e6f2:	2b02      	cmp	r3, #2
 800e6f4:	d056      	beq.n	800e7a4 <get_fat+0xf2>
 800e6f6:	e0a1      	b.n	800e83c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	60fb      	str	r3, [r7, #12]
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	085b      	lsrs	r3, r3, #1
 800e700:	68fa      	ldr	r2, [r7, #12]
 800e702:	4413      	add	r3, r2
 800e704:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	899b      	ldrh	r3, [r3, #12]
 800e70e:	4619      	mov	r1, r3
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	fbb3 f3f1 	udiv	r3, r3, r1
 800e716:	4413      	add	r3, r2
 800e718:	4619      	mov	r1, r3
 800e71a:	6938      	ldr	r0, [r7, #16]
 800e71c:	f7ff ff0c 	bl	800e538 <move_window>
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	f040 808d 	bne.w	800e842 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	1c5a      	adds	r2, r3, #1
 800e72c:	60fa      	str	r2, [r7, #12]
 800e72e:	693a      	ldr	r2, [r7, #16]
 800e730:	8992      	ldrh	r2, [r2, #12]
 800e732:	fbb3 f1f2 	udiv	r1, r3, r2
 800e736:	fb01 f202 	mul.w	r2, r1, r2
 800e73a:	1a9b      	subs	r3, r3, r2
 800e73c:	693a      	ldr	r2, [r7, #16]
 800e73e:	4413      	add	r3, r2
 800e740:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e744:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	899b      	ldrh	r3, [r3, #12]
 800e74e:	4619      	mov	r1, r3
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	fbb3 f3f1 	udiv	r3, r3, r1
 800e756:	4413      	add	r3, r2
 800e758:	4619      	mov	r1, r3
 800e75a:	6938      	ldr	r0, [r7, #16]
 800e75c:	f7ff feec 	bl	800e538 <move_window>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d16f      	bne.n	800e846 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	899b      	ldrh	r3, [r3, #12]
 800e76a:	461a      	mov	r2, r3
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e772:	fb01 f202 	mul.w	r2, r1, r2
 800e776:	1a9b      	subs	r3, r3, r2
 800e778:	693a      	ldr	r2, [r7, #16]
 800e77a:	4413      	add	r3, r2
 800e77c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e780:	021b      	lsls	r3, r3, #8
 800e782:	461a      	mov	r2, r3
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	4313      	orrs	r3, r2
 800e788:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	f003 0301 	and.w	r3, r3, #1
 800e790:	2b00      	cmp	r3, #0
 800e792:	d002      	beq.n	800e79a <get_fat+0xe8>
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	091b      	lsrs	r3, r3, #4
 800e798:	e002      	b.n	800e7a0 <get_fat+0xee>
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7a0:	617b      	str	r3, [r7, #20]
			break;
 800e7a2:	e055      	b.n	800e850 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	899b      	ldrh	r3, [r3, #12]
 800e7ac:	085b      	lsrs	r3, r3, #1
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e7b8:	4413      	add	r3, r2
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	6938      	ldr	r0, [r7, #16]
 800e7be:	f7ff febb 	bl	800e538 <move_window>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d140      	bne.n	800e84a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	005b      	lsls	r3, r3, #1
 800e7d2:	693a      	ldr	r2, [r7, #16]
 800e7d4:	8992      	ldrh	r2, [r2, #12]
 800e7d6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e7da:	fb00 f202 	mul.w	r2, r0, r2
 800e7de:	1a9b      	subs	r3, r3, r2
 800e7e0:	440b      	add	r3, r1
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7ff fbf8 	bl	800dfd8 <ld_word>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	617b      	str	r3, [r7, #20]
			break;
 800e7ec:	e030      	b.n	800e850 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	899b      	ldrh	r3, [r3, #12]
 800e7f6:	089b      	lsrs	r3, r3, #2
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800e802:	4413      	add	r3, r2
 800e804:	4619      	mov	r1, r3
 800e806:	6938      	ldr	r0, [r7, #16]
 800e808:	f7ff fe96 	bl	800e538 <move_window>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d11d      	bne.n	800e84e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	693a      	ldr	r2, [r7, #16]
 800e81e:	8992      	ldrh	r2, [r2, #12]
 800e820:	fbb3 f0f2 	udiv	r0, r3, r2
 800e824:	fb00 f202 	mul.w	r2, r0, r2
 800e828:	1a9b      	subs	r3, r3, r2
 800e82a:	440b      	add	r3, r1
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7ff fbeb 	bl	800e008 <ld_dword>
 800e832:	4603      	mov	r3, r0
 800e834:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e838:	617b      	str	r3, [r7, #20]
			break;
 800e83a:	e009      	b.n	800e850 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e83c:	2301      	movs	r3, #1
 800e83e:	617b      	str	r3, [r7, #20]
 800e840:	e006      	b.n	800e850 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e842:	bf00      	nop
 800e844:	e004      	b.n	800e850 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e846:	bf00      	nop
 800e848:	e002      	b.n	800e850 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e84a:	bf00      	nop
 800e84c:	e000      	b.n	800e850 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e84e:	bf00      	nop
		}
	}

	return val;
 800e850:	697b      	ldr	r3, [r7, #20]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3718      	adds	r7, #24
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e85a:	b590      	push	{r4, r7, lr}
 800e85c:	b089      	sub	sp, #36	; 0x24
 800e85e:	af00      	add	r7, sp, #0
 800e860:	60f8      	str	r0, [r7, #12]
 800e862:	60b9      	str	r1, [r7, #8]
 800e864:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e866:	2302      	movs	r3, #2
 800e868:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	f240 8109 	bls.w	800ea84 <put_fat+0x22a>
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	69db      	ldr	r3, [r3, #28]
 800e876:	68ba      	ldr	r2, [r7, #8]
 800e878:	429a      	cmp	r2, r3
 800e87a:	f080 8103 	bcs.w	800ea84 <put_fat+0x22a>
		switch (fs->fs_type) {
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	2b03      	cmp	r3, #3
 800e884:	f000 80b6 	beq.w	800e9f4 <put_fat+0x19a>
 800e888:	2b03      	cmp	r3, #3
 800e88a:	f300 80fb 	bgt.w	800ea84 <put_fat+0x22a>
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d003      	beq.n	800e89a <put_fat+0x40>
 800e892:	2b02      	cmp	r3, #2
 800e894:	f000 8083 	beq.w	800e99e <put_fat+0x144>
 800e898:	e0f4      	b.n	800ea84 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	61bb      	str	r3, [r7, #24]
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	085b      	lsrs	r3, r3, #1
 800e8a2:	69ba      	ldr	r2, [r7, #24]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	899b      	ldrh	r3, [r3, #12]
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e8b8:	4413      	add	r3, r2
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f7ff fe3b 	bl	800e538 <move_window>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e8c6:	7ffb      	ldrb	r3, [r7, #31]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f040 80d4 	bne.w	800ea76 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	1c5a      	adds	r2, r3, #1
 800e8d8:	61ba      	str	r2, [r7, #24]
 800e8da:	68fa      	ldr	r2, [r7, #12]
 800e8dc:	8992      	ldrh	r2, [r2, #12]
 800e8de:	fbb3 f0f2 	udiv	r0, r3, r2
 800e8e2:	fb00 f202 	mul.w	r2, r0, r2
 800e8e6:	1a9b      	subs	r3, r3, r2
 800e8e8:	440b      	add	r3, r1
 800e8ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	f003 0301 	and.w	r3, r3, #1
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d00d      	beq.n	800e912 <put_fat+0xb8>
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	b25b      	sxtb	r3, r3
 800e8fc:	f003 030f 	and.w	r3, r3, #15
 800e900:	b25a      	sxtb	r2, r3
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	b2db      	uxtb	r3, r3
 800e906:	011b      	lsls	r3, r3, #4
 800e908:	b25b      	sxtb	r3, r3
 800e90a:	4313      	orrs	r3, r2
 800e90c:	b25b      	sxtb	r3, r3
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	e001      	b.n	800e916 <put_fat+0xbc>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	b2db      	uxtb	r3, r3
 800e916:	697a      	ldr	r2, [r7, #20]
 800e918:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2201      	movs	r2, #1
 800e91e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	899b      	ldrh	r3, [r3, #12]
 800e928:	4619      	mov	r1, r3
 800e92a:	69bb      	ldr	r3, [r7, #24]
 800e92c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e930:	4413      	add	r3, r2
 800e932:	4619      	mov	r1, r3
 800e934:	68f8      	ldr	r0, [r7, #12]
 800e936:	f7ff fdff 	bl	800e538 <move_window>
 800e93a:	4603      	mov	r3, r0
 800e93c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e93e:	7ffb      	ldrb	r3, [r7, #31]
 800e940:	2b00      	cmp	r3, #0
 800e942:	f040 809a 	bne.w	800ea7a <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	899b      	ldrh	r3, [r3, #12]
 800e950:	461a      	mov	r2, r3
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	fbb3 f0f2 	udiv	r0, r3, r2
 800e958:	fb00 f202 	mul.w	r2, r0, r2
 800e95c:	1a9b      	subs	r3, r3, r2
 800e95e:	440b      	add	r3, r1
 800e960:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	f003 0301 	and.w	r3, r3, #1
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d003      	beq.n	800e974 <put_fat+0x11a>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	091b      	lsrs	r3, r3, #4
 800e970:	b2db      	uxtb	r3, r3
 800e972:	e00e      	b.n	800e992 <put_fat+0x138>
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	b25b      	sxtb	r3, r3
 800e97a:	f023 030f 	bic.w	r3, r3, #15
 800e97e:	b25a      	sxtb	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	0a1b      	lsrs	r3, r3, #8
 800e984:	b25b      	sxtb	r3, r3
 800e986:	f003 030f 	and.w	r3, r3, #15
 800e98a:	b25b      	sxtb	r3, r3
 800e98c:	4313      	orrs	r3, r2
 800e98e:	b25b      	sxtb	r3, r3
 800e990:	b2db      	uxtb	r3, r3
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2201      	movs	r2, #1
 800e99a:	70da      	strb	r2, [r3, #3]
			break;
 800e99c:	e072      	b.n	800ea84 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	899b      	ldrh	r3, [r3, #12]
 800e9a6:	085b      	lsrs	r3, r3, #1
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9b2:	4413      	add	r3, r2
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	f7ff fdbe 	bl	800e538 <move_window>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e9c0:	7ffb      	ldrb	r3, [r7, #31]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d15b      	bne.n	800ea7e <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	005b      	lsls	r3, r3, #1
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	8992      	ldrh	r2, [r2, #12]
 800e9d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800e9d8:	fb00 f202 	mul.w	r2, r0, r2
 800e9dc:	1a9b      	subs	r3, r3, r2
 800e9de:	440b      	add	r3, r1
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	b292      	uxth	r2, r2
 800e9e4:	4611      	mov	r1, r2
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7ff fb31 	bl	800e04e <st_word>
			fs->wflag = 1;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	70da      	strb	r2, [r3, #3]
			break;
 800e9f2:	e047      	b.n	800ea84 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	899b      	ldrh	r3, [r3, #12]
 800e9fc:	089b      	lsrs	r3, r3, #2
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	4619      	mov	r1, r3
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea08:	4413      	add	r3, r2
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f7ff fd93 	bl	800e538 <move_window>
 800ea12:	4603      	mov	r3, r0
 800ea14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea16:	7ffb      	ldrb	r3, [r7, #31]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d132      	bne.n	800ea82 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	8992      	ldrh	r2, [r2, #12]
 800ea30:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea34:	fb00 f202 	mul.w	r2, r0, r2
 800ea38:	1a9b      	subs	r3, r3, r2
 800ea3a:	440b      	add	r3, r1
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7ff fae3 	bl	800e008 <ld_dword>
 800ea42:	4603      	mov	r3, r0
 800ea44:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ea48:	4323      	orrs	r3, r4
 800ea4a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	009b      	lsls	r3, r3, #2
 800ea56:	68fa      	ldr	r2, [r7, #12]
 800ea58:	8992      	ldrh	r2, [r2, #12]
 800ea5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea5e:	fb00 f202 	mul.w	r2, r0, r2
 800ea62:	1a9b      	subs	r3, r3, r2
 800ea64:	440b      	add	r3, r1
 800ea66:	6879      	ldr	r1, [r7, #4]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7ff fb0b 	bl	800e084 <st_dword>
			fs->wflag = 1;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2201      	movs	r2, #1
 800ea72:	70da      	strb	r2, [r3, #3]
			break;
 800ea74:	e006      	b.n	800ea84 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ea76:	bf00      	nop
 800ea78:	e004      	b.n	800ea84 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ea7a:	bf00      	nop
 800ea7c:	e002      	b.n	800ea84 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ea7e:	bf00      	nop
 800ea80:	e000      	b.n	800ea84 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ea82:	bf00      	nop
		}
	}
	return res;
 800ea84:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3724      	adds	r7, #36	; 0x24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd90      	pop	{r4, r7, pc}

0800ea8e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ea8e:	b580      	push	{r7, lr}
 800ea90:	b088      	sub	sp, #32
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	60f8      	str	r0, [r7, #12]
 800ea96:	60b9      	str	r1, [r7, #8]
 800ea98:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d904      	bls.n	800eab4 <remove_chain+0x26>
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	69db      	ldr	r3, [r3, #28]
 800eaae:	68ba      	ldr	r2, [r7, #8]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d301      	bcc.n	800eab8 <remove_chain+0x2a>
 800eab4:	2302      	movs	r3, #2
 800eab6:	e04b      	b.n	800eb50 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d00c      	beq.n	800ead8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800eabe:	f04f 32ff 	mov.w	r2, #4294967295
 800eac2:	6879      	ldr	r1, [r7, #4]
 800eac4:	69b8      	ldr	r0, [r7, #24]
 800eac6:	f7ff fec8 	bl	800e85a <put_fat>
 800eaca:	4603      	mov	r3, r0
 800eacc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800eace:	7ffb      	ldrb	r3, [r7, #31]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d001      	beq.n	800ead8 <remove_chain+0x4a>
 800ead4:	7ffb      	ldrb	r3, [r7, #31]
 800ead6:	e03b      	b.n	800eb50 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ead8:	68b9      	ldr	r1, [r7, #8]
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f7ff fde9 	bl	800e6b2 <get_fat>
 800eae0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d031      	beq.n	800eb4c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	2b01      	cmp	r3, #1
 800eaec:	d101      	bne.n	800eaf2 <remove_chain+0x64>
 800eaee:	2302      	movs	r3, #2
 800eaf0:	e02e      	b.n	800eb50 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf8:	d101      	bne.n	800eafe <remove_chain+0x70>
 800eafa:	2301      	movs	r3, #1
 800eafc:	e028      	b.n	800eb50 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800eafe:	2200      	movs	r2, #0
 800eb00:	68b9      	ldr	r1, [r7, #8]
 800eb02:	69b8      	ldr	r0, [r7, #24]
 800eb04:	f7ff fea9 	bl	800e85a <put_fat>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800eb0c:	7ffb      	ldrb	r3, [r7, #31]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d001      	beq.n	800eb16 <remove_chain+0x88>
 800eb12:	7ffb      	ldrb	r3, [r7, #31]
 800eb14:	e01c      	b.n	800eb50 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	699a      	ldr	r2, [r3, #24]
 800eb1a:	69bb      	ldr	r3, [r7, #24]
 800eb1c:	69db      	ldr	r3, [r3, #28]
 800eb1e:	3b02      	subs	r3, #2
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d20b      	bcs.n	800eb3c <remove_chain+0xae>
			fs->free_clst++;
 800eb24:	69bb      	ldr	r3, [r7, #24]
 800eb26:	699b      	ldr	r3, [r3, #24]
 800eb28:	1c5a      	adds	r2, r3, #1
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	791b      	ldrb	r3, [r3, #4]
 800eb32:	f043 0301 	orr.w	r3, r3, #1
 800eb36:	b2da      	uxtb	r2, r3
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	69db      	ldr	r3, [r3, #28]
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d3c6      	bcc.n	800ead8 <remove_chain+0x4a>
 800eb4a:	e000      	b.n	800eb4e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800eb4c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3720      	adds	r7, #32
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b088      	sub	sp, #32
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d10d      	bne.n	800eb8a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	695b      	ldr	r3, [r3, #20]
 800eb72:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d004      	beq.n	800eb84 <create_chain+0x2c>
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	69db      	ldr	r3, [r3, #28]
 800eb7e:	69ba      	ldr	r2, [r7, #24]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d31b      	bcc.n	800ebbc <create_chain+0x64>
 800eb84:	2301      	movs	r3, #1
 800eb86:	61bb      	str	r3, [r7, #24]
 800eb88:	e018      	b.n	800ebbc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800eb8a:	6839      	ldr	r1, [r7, #0]
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f7ff fd90 	bl	800e6b2 <get_fat>
 800eb92:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d801      	bhi.n	800eb9e <create_chain+0x46>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e070      	b.n	800ec80 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba4:	d101      	bne.n	800ebaa <create_chain+0x52>
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	e06a      	b.n	800ec80 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	69db      	ldr	r3, [r3, #28]
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d201      	bcs.n	800ebb8 <create_chain+0x60>
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	e063      	b.n	800ec80 <create_chain+0x128>
		scl = clst;
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	69db      	ldr	r3, [r3, #28]
 800ebca:	69fa      	ldr	r2, [r7, #28]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d307      	bcc.n	800ebe0 <create_chain+0x88>
				ncl = 2;
 800ebd0:	2302      	movs	r3, #2
 800ebd2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ebd4:	69fa      	ldr	r2, [r7, #28]
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d901      	bls.n	800ebe0 <create_chain+0x88>
 800ebdc:	2300      	movs	r3, #0
 800ebde:	e04f      	b.n	800ec80 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ebe0:	69f9      	ldr	r1, [r7, #28]
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f7ff fd65 	bl	800e6b2 <get_fat>
 800ebe8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d00e      	beq.n	800ec0e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d003      	beq.n	800ebfe <create_chain+0xa6>
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebfc:	d101      	bne.n	800ec02 <create_chain+0xaa>
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	e03e      	b.n	800ec80 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ec02:	69fa      	ldr	r2, [r7, #28]
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d1da      	bne.n	800ebc0 <create_chain+0x68>
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	e038      	b.n	800ec80 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ec0e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ec10:	f04f 32ff 	mov.w	r2, #4294967295
 800ec14:	69f9      	ldr	r1, [r7, #28]
 800ec16:	6938      	ldr	r0, [r7, #16]
 800ec18:	f7ff fe1f 	bl	800e85a <put_fat>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ec20:	7dfb      	ldrb	r3, [r7, #23]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d109      	bne.n	800ec3a <create_chain+0xe2>
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d006      	beq.n	800ec3a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ec2c:	69fa      	ldr	r2, [r7, #28]
 800ec2e:	6839      	ldr	r1, [r7, #0]
 800ec30:	6938      	ldr	r0, [r7, #16]
 800ec32:	f7ff fe12 	bl	800e85a <put_fat>
 800ec36:	4603      	mov	r3, r0
 800ec38:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ec3a:	7dfb      	ldrb	r3, [r7, #23]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d116      	bne.n	800ec6e <create_chain+0x116>
		fs->last_clst = ncl;
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	69fa      	ldr	r2, [r7, #28]
 800ec44:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	699a      	ldr	r2, [r3, #24]
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	69db      	ldr	r3, [r3, #28]
 800ec4e:	3b02      	subs	r3, #2
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d804      	bhi.n	800ec5e <create_chain+0x106>
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	1e5a      	subs	r2, r3, #1
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	791b      	ldrb	r3, [r3, #4]
 800ec62:	f043 0301 	orr.w	r3, r3, #1
 800ec66:	b2da      	uxtb	r2, r3
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	711a      	strb	r2, [r3, #4]
 800ec6c:	e007      	b.n	800ec7e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ec6e:	7dfb      	ldrb	r3, [r7, #23]
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d102      	bne.n	800ec7a <create_chain+0x122>
 800ec74:	f04f 33ff 	mov.w	r3, #4294967295
 800ec78:	e000      	b.n	800ec7c <create_chain+0x124>
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ec7e:	69fb      	ldr	r3, [r7, #28]
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3720      	adds	r7, #32
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b087      	sub	sp, #28
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	899b      	ldrh	r3, [r3, #12]
 800eca4:	461a      	mov	r2, r3
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	8952      	ldrh	r2, [r2, #10]
 800ecb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecb4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	1d1a      	adds	r2, r3, #4
 800ecba:	613a      	str	r2, [r7, #16]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d101      	bne.n	800ecca <clmt_clust+0x42>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	e010      	b.n	800ecec <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ecca:	697a      	ldr	r2, [r7, #20]
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d307      	bcc.n	800ece2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ecd2:	697a      	ldr	r2, [r7, #20]
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	617b      	str	r3, [r7, #20]
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	3304      	adds	r3, #4
 800ecde:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ece0:	e7e9      	b.n	800ecb6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ece2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	4413      	add	r3, r2
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	371c      	adds	r7, #28
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b086      	sub	sp, #24
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed0e:	d204      	bcs.n	800ed1a <dir_sdi+0x22>
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	f003 031f 	and.w	r3, r3, #31
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d001      	beq.n	800ed1e <dir_sdi+0x26>
		return FR_INT_ERR;
 800ed1a:	2302      	movs	r3, #2
 800ed1c:	e071      	b.n	800ee02 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	683a      	ldr	r2, [r7, #0]
 800ed22:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d106      	bne.n	800ed3e <dir_sdi+0x46>
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d902      	bls.n	800ed3e <dir_sdi+0x46>
		clst = fs->dirbase;
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10c      	bne.n	800ed5e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	095b      	lsrs	r3, r3, #5
 800ed48:	693a      	ldr	r2, [r7, #16]
 800ed4a:	8912      	ldrh	r2, [r2, #8]
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d301      	bcc.n	800ed54 <dir_sdi+0x5c>
 800ed50:	2302      	movs	r3, #2
 800ed52:	e056      	b.n	800ee02 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	61da      	str	r2, [r3, #28]
 800ed5c:	e02d      	b.n	800edba <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	895b      	ldrh	r3, [r3, #10]
 800ed62:	461a      	mov	r2, r3
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	899b      	ldrh	r3, [r3, #12]
 800ed68:	fb02 f303 	mul.w	r3, r2, r3
 800ed6c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ed6e:	e019      	b.n	800eda4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6979      	ldr	r1, [r7, #20]
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7ff fc9c 	bl	800e6b2 <get_fat>
 800ed7a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed82:	d101      	bne.n	800ed88 <dir_sdi+0x90>
 800ed84:	2301      	movs	r3, #1
 800ed86:	e03c      	b.n	800ee02 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d904      	bls.n	800ed98 <dir_sdi+0xa0>
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	69db      	ldr	r3, [r3, #28]
 800ed92:	697a      	ldr	r2, [r7, #20]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d301      	bcc.n	800ed9c <dir_sdi+0xa4>
 800ed98:	2302      	movs	r3, #2
 800ed9a:	e032      	b.n	800ee02 <dir_sdi+0x10a>
			ofs -= csz;
 800ed9c:	683a      	ldr	r2, [r7, #0]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	1ad3      	subs	r3, r2, r3
 800eda2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eda4:	683a      	ldr	r2, [r7, #0]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d2e1      	bcs.n	800ed70 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800edac:	6979      	ldr	r1, [r7, #20]
 800edae:	6938      	ldr	r0, [r7, #16]
 800edb0:	f7ff fc60 	bl	800e674 <clust2sect>
 800edb4:	4602      	mov	r2, r0
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	697a      	ldr	r2, [r7, #20]
 800edbe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	69db      	ldr	r3, [r3, #28]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d101      	bne.n	800edcc <dir_sdi+0xd4>
 800edc8:	2302      	movs	r3, #2
 800edca:	e01a      	b.n	800ee02 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	69da      	ldr	r2, [r3, #28]
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	899b      	ldrh	r3, [r3, #12]
 800edd4:	4619      	mov	r1, r3
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	fbb3 f3f1 	udiv	r3, r3, r1
 800eddc:	441a      	add	r2, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	899b      	ldrh	r3, [r3, #12]
 800edec:	461a      	mov	r2, r3
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	fbb3 f0f2 	udiv	r0, r3, r2
 800edf4:	fb00 f202 	mul.w	r2, r0, r2
 800edf8:	1a9b      	subs	r3, r3, r2
 800edfa:	18ca      	adds	r2, r1, r3
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ee00:	2300      	movs	r3, #0
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3718      	adds	r7, #24
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b086      	sub	sp, #24
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
 800ee12:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	695b      	ldr	r3, [r3, #20]
 800ee1e:	3320      	adds	r3, #32
 800ee20:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	69db      	ldr	r3, [r3, #28]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d003      	beq.n	800ee32 <dir_next+0x28>
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ee30:	d301      	bcc.n	800ee36 <dir_next+0x2c>
 800ee32:	2304      	movs	r3, #4
 800ee34:	e0bb      	b.n	800efae <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	899b      	ldrh	r3, [r3, #12]
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee42:	fb01 f202 	mul.w	r2, r1, r2
 800ee46:	1a9b      	subs	r3, r3, r2
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f040 809d 	bne.w	800ef88 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	69db      	ldr	r3, [r3, #28]
 800ee52:	1c5a      	adds	r2, r3, #1
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	699b      	ldr	r3, [r3, #24]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d10b      	bne.n	800ee78 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	095b      	lsrs	r3, r3, #5
 800ee64:	68fa      	ldr	r2, [r7, #12]
 800ee66:	8912      	ldrh	r2, [r2, #8]
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	f0c0 808d 	bcc.w	800ef88 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2200      	movs	r2, #0
 800ee72:	61da      	str	r2, [r3, #28]
 800ee74:	2304      	movs	r3, #4
 800ee76:	e09a      	b.n	800efae <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	899b      	ldrh	r3, [r3, #12]
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	8952      	ldrh	r2, [r2, #10]
 800ee88:	3a01      	subs	r2, #1
 800ee8a:	4013      	ands	r3, r2
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d17b      	bne.n	800ef88 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	699b      	ldr	r3, [r3, #24]
 800ee96:	4619      	mov	r1, r3
 800ee98:	4610      	mov	r0, r2
 800ee9a:	f7ff fc0a 	bl	800e6b2 <get_fat>
 800ee9e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d801      	bhi.n	800eeaa <dir_next+0xa0>
 800eea6:	2302      	movs	r3, #2
 800eea8:	e081      	b.n	800efae <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeb0:	d101      	bne.n	800eeb6 <dir_next+0xac>
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e07b      	b.n	800efae <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	69db      	ldr	r3, [r3, #28]
 800eeba:	697a      	ldr	r2, [r7, #20]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d359      	bcc.n	800ef74 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d104      	bne.n	800eed0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	61da      	str	r2, [r3, #28]
 800eecc:	2304      	movs	r3, #4
 800eece:	e06e      	b.n	800efae <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800eed0:	687a      	ldr	r2, [r7, #4]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	699b      	ldr	r3, [r3, #24]
 800eed6:	4619      	mov	r1, r3
 800eed8:	4610      	mov	r0, r2
 800eeda:	f7ff fe3d 	bl	800eb58 <create_chain>
 800eede:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d101      	bne.n	800eeea <dir_next+0xe0>
 800eee6:	2307      	movs	r3, #7
 800eee8:	e061      	b.n	800efae <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d101      	bne.n	800eef4 <dir_next+0xea>
 800eef0:	2302      	movs	r3, #2
 800eef2:	e05c      	b.n	800efae <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eefa:	d101      	bne.n	800ef00 <dir_next+0xf6>
 800eefc:	2301      	movs	r3, #1
 800eefe:	e056      	b.n	800efae <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f7ff fad5 	bl	800e4b0 <sync_window>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d001      	beq.n	800ef10 <dir_next+0x106>
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	e04e      	b.n	800efae <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	899b      	ldrh	r3, [r3, #12]
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	2100      	movs	r1, #0
 800ef1e:	f7ff f8fe 	bl	800e11e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ef22:	2300      	movs	r3, #0
 800ef24:	613b      	str	r3, [r7, #16]
 800ef26:	6979      	ldr	r1, [r7, #20]
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	f7ff fba3 	bl	800e674 <clust2sect>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	635a      	str	r2, [r3, #52]	; 0x34
 800ef34:	e012      	b.n	800ef5c <dir_next+0x152>
						fs->wflag = 1;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	f7ff fab7 	bl	800e4b0 <sync_window>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d001      	beq.n	800ef4c <dir_next+0x142>
 800ef48:	2301      	movs	r3, #1
 800ef4a:	e030      	b.n	800efae <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	3301      	adds	r3, #1
 800ef50:	613b      	str	r3, [r7, #16]
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef56:	1c5a      	adds	r2, r3, #1
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	635a      	str	r2, [r3, #52]	; 0x34
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	895b      	ldrh	r3, [r3, #10]
 800ef60:	461a      	mov	r2, r3
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d3e6      	bcc.n	800ef36 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	1ad2      	subs	r2, r2, r3
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	697a      	ldr	r2, [r7, #20]
 800ef78:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ef7a:	6979      	ldr	r1, [r7, #20]
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f7ff fb79 	bl	800e674 <clust2sect>
 800ef82:	4602      	mov	r2, r0
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	68ba      	ldr	r2, [r7, #8]
 800ef8c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	899b      	ldrh	r3, [r3, #12]
 800ef98:	461a      	mov	r2, r3
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800efa0:	fb00 f202 	mul.w	r2, r0, r2
 800efa4:	1a9b      	subs	r3, r3, r2
 800efa6:	18ca      	adds	r2, r1, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800efac:	2300      	movs	r3, #0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3718      	adds	r7, #24
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b086      	sub	sp, #24
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
 800efbe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800efc6:	2100      	movs	r1, #0
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f7ff fe95 	bl	800ecf8 <dir_sdi>
 800efce:	4603      	mov	r3, r0
 800efd0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800efd2:	7dfb      	ldrb	r3, [r7, #23]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d12b      	bne.n	800f030 <dir_alloc+0x7a>
		n = 0;
 800efd8:	2300      	movs	r3, #0
 800efda:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	69db      	ldr	r3, [r3, #28]
 800efe0:	4619      	mov	r1, r3
 800efe2:	68f8      	ldr	r0, [r7, #12]
 800efe4:	f7ff faa8 	bl	800e538 <move_window>
 800efe8:	4603      	mov	r3, r0
 800efea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800efec:	7dfb      	ldrb	r3, [r7, #23]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d11d      	bne.n	800f02e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6a1b      	ldr	r3, [r3, #32]
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	2be5      	cmp	r3, #229	; 0xe5
 800effa:	d004      	beq.n	800f006 <dir_alloc+0x50>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6a1b      	ldr	r3, [r3, #32]
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d107      	bne.n	800f016 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	3301      	adds	r3, #1
 800f00a:	613b      	str	r3, [r7, #16]
 800f00c:	693a      	ldr	r2, [r7, #16]
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	429a      	cmp	r2, r3
 800f012:	d102      	bne.n	800f01a <dir_alloc+0x64>
 800f014:	e00c      	b.n	800f030 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f016:	2300      	movs	r3, #0
 800f018:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f01a:	2101      	movs	r1, #1
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7ff fef4 	bl	800ee0a <dir_next>
 800f022:	4603      	mov	r3, r0
 800f024:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f026:	7dfb      	ldrb	r3, [r7, #23]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d0d7      	beq.n	800efdc <dir_alloc+0x26>
 800f02c:	e000      	b.n	800f030 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f02e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f030:	7dfb      	ldrb	r3, [r7, #23]
 800f032:	2b04      	cmp	r3, #4
 800f034:	d101      	bne.n	800f03a <dir_alloc+0x84>
 800f036:	2307      	movs	r3, #7
 800f038:	75fb      	strb	r3, [r7, #23]
	return res;
 800f03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3718      	adds	r7, #24
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	331a      	adds	r3, #26
 800f052:	4618      	mov	r0, r3
 800f054:	f7fe ffc0 	bl	800dfd8 <ld_word>
 800f058:	4603      	mov	r3, r0
 800f05a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	2b03      	cmp	r3, #3
 800f062:	d109      	bne.n	800f078 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	3314      	adds	r3, #20
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fe ffb5 	bl	800dfd8 <ld_word>
 800f06e:	4603      	mov	r3, r0
 800f070:	041b      	lsls	r3, r3, #16
 800f072:	68fa      	ldr	r2, [r7, #12]
 800f074:	4313      	orrs	r3, r2
 800f076:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f078:	68fb      	ldr	r3, [r7, #12]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3710      	adds	r7, #16
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}

0800f082 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f082:	b580      	push	{r7, lr}
 800f084:	b084      	sub	sp, #16
 800f086:	af00      	add	r7, sp, #0
 800f088:	60f8      	str	r0, [r7, #12]
 800f08a:	60b9      	str	r1, [r7, #8]
 800f08c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	331a      	adds	r3, #26
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	b292      	uxth	r2, r2
 800f096:	4611      	mov	r1, r2
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fe ffd8 	bl	800e04e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	2b03      	cmp	r3, #3
 800f0a4:	d109      	bne.n	800f0ba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	f103 0214 	add.w	r2, r3, #20
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	0c1b      	lsrs	r3, r3, #16
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	4610      	mov	r0, r2
 800f0b6:	f7fe ffca 	bl	800e04e <st_word>
	}
}
 800f0ba:	bf00      	nop
 800f0bc:	3710      	adds	r7, #16
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
	...

0800f0c4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f0c4:	b590      	push	{r4, r7, lr}
 800f0c6:	b087      	sub	sp, #28
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	331a      	adds	r3, #26
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fe ff80 	bl	800dfd8 <ld_word>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d001      	beq.n	800f0e2 <cmp_lfn+0x1e>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	e059      	b.n	800f196 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0ea:	1e5a      	subs	r2, r3, #1
 800f0ec:	4613      	mov	r3, r2
 800f0ee:	005b      	lsls	r3, r3, #1
 800f0f0:	4413      	add	r3, r2
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	4413      	add	r3, r2
 800f0f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	81fb      	strh	r3, [r7, #14]
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	613b      	str	r3, [r7, #16]
 800f100:	e033      	b.n	800f16a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f102:	4a27      	ldr	r2, [pc, #156]	; (800f1a0 <cmp_lfn+0xdc>)
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	4413      	add	r3, r2
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	461a      	mov	r2, r3
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	4413      	add	r3, r2
 800f110:	4618      	mov	r0, r3
 800f112:	f7fe ff61 	bl	800dfd8 <ld_word>
 800f116:	4603      	mov	r3, r0
 800f118:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f11a:	89fb      	ldrh	r3, [r7, #14]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d01a      	beq.n	800f156 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	2bfe      	cmp	r3, #254	; 0xfe
 800f124:	d812      	bhi.n	800f14c <cmp_lfn+0x88>
 800f126:	89bb      	ldrh	r3, [r7, #12]
 800f128:	4618      	mov	r0, r3
 800f12a:	f001 fd7d 	bl	8010c28 <ff_wtoupper>
 800f12e:	4603      	mov	r3, r0
 800f130:	461c      	mov	r4, r3
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	1c5a      	adds	r2, r3, #1
 800f136:	617a      	str	r2, [r7, #20]
 800f138:	005b      	lsls	r3, r3, #1
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	4413      	add	r3, r2
 800f13e:	881b      	ldrh	r3, [r3, #0]
 800f140:	4618      	mov	r0, r3
 800f142:	f001 fd71 	bl	8010c28 <ff_wtoupper>
 800f146:	4603      	mov	r3, r0
 800f148:	429c      	cmp	r4, r3
 800f14a:	d001      	beq.n	800f150 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f14c:	2300      	movs	r3, #0
 800f14e:	e022      	b.n	800f196 <cmp_lfn+0xd2>
			}
			wc = uc;
 800f150:	89bb      	ldrh	r3, [r7, #12]
 800f152:	81fb      	strh	r3, [r7, #14]
 800f154:	e006      	b.n	800f164 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f156:	89bb      	ldrh	r3, [r7, #12]
 800f158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d001      	beq.n	800f164 <cmp_lfn+0xa0>
 800f160:	2300      	movs	r3, #0
 800f162:	e018      	b.n	800f196 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	3301      	adds	r3, #1
 800f168:	613b      	str	r3, [r7, #16]
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	2b0c      	cmp	r3, #12
 800f16e:	d9c8      	bls.n	800f102 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d00b      	beq.n	800f194 <cmp_lfn+0xd0>
 800f17c:	89fb      	ldrh	r3, [r7, #14]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d008      	beq.n	800f194 <cmp_lfn+0xd0>
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	005b      	lsls	r3, r3, #1
 800f186:	687a      	ldr	r2, [r7, #4]
 800f188:	4413      	add	r3, r2
 800f18a:	881b      	ldrh	r3, [r3, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d001      	beq.n	800f194 <cmp_lfn+0xd0>
 800f190:	2300      	movs	r3, #0
 800f192:	e000      	b.n	800f196 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f194:	2301      	movs	r3, #1
}
 800f196:	4618      	mov	r0, r3
 800f198:	371c      	adds	r7, #28
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd90      	pop	{r4, r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	080150fc 	.word	0x080150fc

0800f1a4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b088      	sub	sp, #32
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	4611      	mov	r1, r2
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	71fb      	strb	r3, [r7, #7]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	330d      	adds	r3, #13
 800f1be:	79ba      	ldrb	r2, [r7, #6]
 800f1c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	330b      	adds	r3, #11
 800f1c6:	220f      	movs	r2, #15
 800f1c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	330c      	adds	r3, #12
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	331a      	adds	r3, #26
 800f1d6:	2100      	movs	r1, #0
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7fe ff38 	bl	800e04e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f1de:	79fb      	ldrb	r3, [r7, #7]
 800f1e0:	1e5a      	subs	r2, r3, #1
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	005b      	lsls	r3, r3, #1
 800f1e6:	4413      	add	r3, r2
 800f1e8:	009b      	lsls	r3, r3, #2
 800f1ea:	4413      	add	r3, r2
 800f1ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	82fb      	strh	r3, [r7, #22]
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f1f6:	8afb      	ldrh	r3, [r7, #22]
 800f1f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d007      	beq.n	800f210 <put_lfn+0x6c>
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	1c5a      	adds	r2, r3, #1
 800f204:	61fa      	str	r2, [r7, #28]
 800f206:	005b      	lsls	r3, r3, #1
 800f208:	68fa      	ldr	r2, [r7, #12]
 800f20a:	4413      	add	r3, r2
 800f20c:	881b      	ldrh	r3, [r3, #0]
 800f20e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f210:	4a17      	ldr	r2, [pc, #92]	; (800f270 <put_lfn+0xcc>)
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	4413      	add	r3, r2
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	461a      	mov	r2, r3
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	4413      	add	r3, r2
 800f21e:	8afa      	ldrh	r2, [r7, #22]
 800f220:	4611      	mov	r1, r2
 800f222:	4618      	mov	r0, r3
 800f224:	f7fe ff13 	bl	800e04e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f228:	8afb      	ldrh	r3, [r7, #22]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d102      	bne.n	800f234 <put_lfn+0x90>
 800f22e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f232:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	3301      	adds	r3, #1
 800f238:	61bb      	str	r3, [r7, #24]
 800f23a:	69bb      	ldr	r3, [r7, #24]
 800f23c:	2b0c      	cmp	r3, #12
 800f23e:	d9da      	bls.n	800f1f6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f240:	8afb      	ldrh	r3, [r7, #22]
 800f242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f246:	4293      	cmp	r3, r2
 800f248:	d006      	beq.n	800f258 <put_lfn+0xb4>
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	005b      	lsls	r3, r3, #1
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	4413      	add	r3, r2
 800f252:	881b      	ldrh	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d103      	bne.n	800f260 <put_lfn+0xbc>
 800f258:	79fb      	ldrb	r3, [r7, #7]
 800f25a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f25e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	79fa      	ldrb	r2, [r7, #7]
 800f264:	701a      	strb	r2, [r3, #0]
}
 800f266:	bf00      	nop
 800f268:	3720      	adds	r7, #32
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	bf00      	nop
 800f270:	080150fc 	.word	0x080150fc

0800f274 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b08c      	sub	sp, #48	; 0x30
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f282:	220b      	movs	r2, #11
 800f284:	68b9      	ldr	r1, [r7, #8]
 800f286:	68f8      	ldr	r0, [r7, #12]
 800f288:	f7fe ff28 	bl	800e0dc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	2b05      	cmp	r3, #5
 800f290:	d92b      	bls.n	800f2ea <gen_numname+0x76>
		sr = seq;
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f296:	e022      	b.n	800f2de <gen_numname+0x6a>
			wc = *lfn++;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	1c9a      	adds	r2, r3, #2
 800f29c:	607a      	str	r2, [r7, #4]
 800f29e:	881b      	ldrh	r3, [r3, #0]
 800f2a0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2a6:	e017      	b.n	800f2d8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	005a      	lsls	r2, r3, #1
 800f2ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2ae:	f003 0301 	and.w	r3, r3, #1
 800f2b2:	4413      	add	r3, r2
 800f2b4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f2b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2b8:	085b      	lsrs	r3, r3, #1
 800f2ba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d005      	beq.n	800f2d2 <gen_numname+0x5e>
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f2cc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f2d0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2da:	2b0f      	cmp	r3, #15
 800f2dc:	d9e4      	bls.n	800f2a8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d1d8      	bne.n	800f298 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f2ea:	2307      	movs	r3, #7
 800f2ec:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	f003 030f 	and.w	r3, r3, #15
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	3330      	adds	r3, #48	; 0x30
 800f2fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f2fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f302:	2b39      	cmp	r3, #57	; 0x39
 800f304:	d904      	bls.n	800f310 <gen_numname+0x9c>
 800f306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f30a:	3307      	adds	r3, #7
 800f30c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f312:	1e5a      	subs	r2, r3, #1
 800f314:	62ba      	str	r2, [r7, #40]	; 0x28
 800f316:	3330      	adds	r3, #48	; 0x30
 800f318:	443b      	add	r3, r7
 800f31a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f31e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	091b      	lsrs	r3, r3, #4
 800f326:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d1df      	bne.n	800f2ee <gen_numname+0x7a>
	ns[i] = '~';
 800f32e:	f107 0214 	add.w	r2, r7, #20
 800f332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f334:	4413      	add	r3, r2
 800f336:	227e      	movs	r2, #126	; 0x7e
 800f338:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f33a:	2300      	movs	r3, #0
 800f33c:	627b      	str	r3, [r7, #36]	; 0x24
 800f33e:	e002      	b.n	800f346 <gen_numname+0xd2>
 800f340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f342:	3301      	adds	r3, #1
 800f344:	627b      	str	r3, [r7, #36]	; 0x24
 800f346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d205      	bcs.n	800f35a <gen_numname+0xe6>
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f352:	4413      	add	r3, r2
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	2b20      	cmp	r3, #32
 800f358:	d1f2      	bne.n	800f340 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	2b07      	cmp	r3, #7
 800f35e:	d807      	bhi.n	800f370 <gen_numname+0xfc>
 800f360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f362:	1c5a      	adds	r2, r3, #1
 800f364:	62ba      	str	r2, [r7, #40]	; 0x28
 800f366:	3330      	adds	r3, #48	; 0x30
 800f368:	443b      	add	r3, r7
 800f36a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f36e:	e000      	b.n	800f372 <gen_numname+0xfe>
 800f370:	2120      	movs	r1, #32
 800f372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f374:	1c5a      	adds	r2, r3, #1
 800f376:	627a      	str	r2, [r7, #36]	; 0x24
 800f378:	68fa      	ldr	r2, [r7, #12]
 800f37a:	4413      	add	r3, r2
 800f37c:	460a      	mov	r2, r1
 800f37e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f382:	2b07      	cmp	r3, #7
 800f384:	d9e9      	bls.n	800f35a <gen_numname+0xe6>
}
 800f386:	bf00      	nop
 800f388:	bf00      	nop
 800f38a:	3730      	adds	r7, #48	; 0x30
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f390:	b480      	push	{r7}
 800f392:	b085      	sub	sp, #20
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f398:	2300      	movs	r3, #0
 800f39a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f39c:	230b      	movs	r3, #11
 800f39e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f3a0:	7bfb      	ldrb	r3, [r7, #15]
 800f3a2:	b2da      	uxtb	r2, r3
 800f3a4:	0852      	lsrs	r2, r2, #1
 800f3a6:	01db      	lsls	r3, r3, #7
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	b2da      	uxtb	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	1c59      	adds	r1, r3, #1
 800f3b0:	6079      	str	r1, [r7, #4]
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	4413      	add	r3, r2
 800f3b6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	60bb      	str	r3, [r7, #8]
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d1ed      	bne.n	800f3a0 <sum_sfn+0x10>
	return sum;
 800f3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3714      	adds	r7, #20
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr

0800f3d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f3d2:	b580      	push	{r7, lr}
 800f3d4:	b086      	sub	sp, #24
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f7ff fc88 	bl	800ecf8 <dir_sdi>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f3ec:	7dfb      	ldrb	r3, [r7, #23]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d001      	beq.n	800f3f6 <dir_find+0x24>
 800f3f2:	7dfb      	ldrb	r3, [r7, #23]
 800f3f4:	e0a9      	b.n	800f54a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f3f6:	23ff      	movs	r3, #255	; 0xff
 800f3f8:	753b      	strb	r3, [r7, #20]
 800f3fa:	7d3b      	ldrb	r3, [r7, #20]
 800f3fc:	757b      	strb	r3, [r7, #21]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f04f 32ff 	mov.w	r2, #4294967295
 800f404:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	69db      	ldr	r3, [r3, #28]
 800f40a:	4619      	mov	r1, r3
 800f40c:	6938      	ldr	r0, [r7, #16]
 800f40e:	f7ff f893 	bl	800e538 <move_window>
 800f412:	4603      	mov	r3, r0
 800f414:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f416:	7dfb      	ldrb	r3, [r7, #23]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f040 8090 	bne.w	800f53e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6a1b      	ldr	r3, [r3, #32]
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f426:	7dbb      	ldrb	r3, [r7, #22]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d102      	bne.n	800f432 <dir_find+0x60>
 800f42c:	2304      	movs	r3, #4
 800f42e:	75fb      	strb	r3, [r7, #23]
 800f430:	e08a      	b.n	800f548 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6a1b      	ldr	r3, [r3, #32]
 800f436:	330b      	adds	r3, #11
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f43e:	73fb      	strb	r3, [r7, #15]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	7bfa      	ldrb	r2, [r7, #15]
 800f444:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f446:	7dbb      	ldrb	r3, [r7, #22]
 800f448:	2be5      	cmp	r3, #229	; 0xe5
 800f44a:	d007      	beq.n	800f45c <dir_find+0x8a>
 800f44c:	7bfb      	ldrb	r3, [r7, #15]
 800f44e:	f003 0308 	and.w	r3, r3, #8
 800f452:	2b00      	cmp	r3, #0
 800f454:	d009      	beq.n	800f46a <dir_find+0x98>
 800f456:	7bfb      	ldrb	r3, [r7, #15]
 800f458:	2b0f      	cmp	r3, #15
 800f45a:	d006      	beq.n	800f46a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f45c:	23ff      	movs	r3, #255	; 0xff
 800f45e:	757b      	strb	r3, [r7, #21]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f04f 32ff 	mov.w	r2, #4294967295
 800f466:	631a      	str	r2, [r3, #48]	; 0x30
 800f468:	e05e      	b.n	800f528 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
 800f46c:	2b0f      	cmp	r3, #15
 800f46e:	d136      	bne.n	800f4de <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d154      	bne.n	800f528 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f47e:	7dbb      	ldrb	r3, [r7, #22]
 800f480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f484:	2b00      	cmp	r3, #0
 800f486:	d00d      	beq.n	800f4a4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6a1b      	ldr	r3, [r3, #32]
 800f48c:	7b5b      	ldrb	r3, [r3, #13]
 800f48e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f490:	7dbb      	ldrb	r3, [r7, #22]
 800f492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f496:	75bb      	strb	r3, [r7, #22]
 800f498:	7dbb      	ldrb	r3, [r7, #22]
 800f49a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	695a      	ldr	r2, [r3, #20]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f4a4:	7dba      	ldrb	r2, [r7, #22]
 800f4a6:	7d7b      	ldrb	r3, [r7, #21]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d115      	bne.n	800f4d8 <dir_find+0x106>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6a1b      	ldr	r3, [r3, #32]
 800f4b0:	330d      	adds	r3, #13
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	7d3a      	ldrb	r2, [r7, #20]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d10e      	bne.n	800f4d8 <dir_find+0x106>
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	691a      	ldr	r2, [r3, #16]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6a1b      	ldr	r3, [r3, #32]
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	4610      	mov	r0, r2
 800f4c6:	f7ff fdfd 	bl	800f0c4 <cmp_lfn>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d003      	beq.n	800f4d8 <dir_find+0x106>
 800f4d0:	7d7b      	ldrb	r3, [r7, #21]
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	e000      	b.n	800f4da <dir_find+0x108>
 800f4d8:	23ff      	movs	r3, #255	; 0xff
 800f4da:	757b      	strb	r3, [r7, #21]
 800f4dc:	e024      	b.n	800f528 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f4de:	7d7b      	ldrb	r3, [r7, #21]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d109      	bne.n	800f4f8 <dir_find+0x126>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a1b      	ldr	r3, [r3, #32]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7ff ff51 	bl	800f390 <sum_sfn>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	7d3b      	ldrb	r3, [r7, #20]
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d024      	beq.n	800f542 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f4fe:	f003 0301 	and.w	r3, r3, #1
 800f502:	2b00      	cmp	r3, #0
 800f504:	d10a      	bne.n	800f51c <dir_find+0x14a>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6a18      	ldr	r0, [r3, #32]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	3324      	adds	r3, #36	; 0x24
 800f50e:	220b      	movs	r2, #11
 800f510:	4619      	mov	r1, r3
 800f512:	f7fe fe1f 	bl	800e154 <mem_cmp>
 800f516:	4603      	mov	r3, r0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d014      	beq.n	800f546 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f51c:	23ff      	movs	r3, #255	; 0xff
 800f51e:	757b      	strb	r3, [r7, #21]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f04f 32ff 	mov.w	r2, #4294967295
 800f526:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f528:	2100      	movs	r1, #0
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7ff fc6d 	bl	800ee0a <dir_next>
 800f530:	4603      	mov	r3, r0
 800f532:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f534:	7dfb      	ldrb	r3, [r7, #23]
 800f536:	2b00      	cmp	r3, #0
 800f538:	f43f af65 	beq.w	800f406 <dir_find+0x34>
 800f53c:	e004      	b.n	800f548 <dir_find+0x176>
		if (res != FR_OK) break;
 800f53e:	bf00      	nop
 800f540:	e002      	b.n	800f548 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f542:	bf00      	nop
 800f544:	e000      	b.n	800f548 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f546:	bf00      	nop

	return res;
 800f548:	7dfb      	ldrb	r3, [r7, #23]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3718      	adds	r7, #24
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
	...

0800f554 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b08c      	sub	sp, #48	; 0x30
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f568:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d001      	beq.n	800f574 <dir_register+0x20>
 800f570:	2306      	movs	r3, #6
 800f572:	e0e0      	b.n	800f736 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f574:	2300      	movs	r3, #0
 800f576:	627b      	str	r3, [r7, #36]	; 0x24
 800f578:	e002      	b.n	800f580 <dir_register+0x2c>
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	3301      	adds	r3, #1
 800f57e:	627b      	str	r3, [r7, #36]	; 0x24
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	691a      	ldr	r2, [r3, #16]
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f586:	005b      	lsls	r3, r3, #1
 800f588:	4413      	add	r3, r2
 800f58a:	881b      	ldrh	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d1f4      	bne.n	800f57a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f596:	f107 030c 	add.w	r3, r7, #12
 800f59a:	220c      	movs	r2, #12
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fe fd9d 	bl	800e0dc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f5a2:	7dfb      	ldrb	r3, [r7, #23]
 800f5a4:	f003 0301 	and.w	r3, r3, #1
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d032      	beq.n	800f612 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2240      	movs	r2, #64	; 0x40
 800f5b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5b8:	e016      	b.n	800f5e8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	691a      	ldr	r2, [r3, #16]
 800f5c4:	f107 010c 	add.w	r1, r7, #12
 800f5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ca:	f7ff fe53 	bl	800f274 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f7ff feff 	bl	800f3d2 <dir_find>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f5da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d106      	bne.n	800f5f0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ea:	2b63      	cmp	r3, #99	; 0x63
 800f5ec:	d9e5      	bls.n	800f5ba <dir_register+0x66>
 800f5ee:	e000      	b.n	800f5f2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f5f0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f4:	2b64      	cmp	r3, #100	; 0x64
 800f5f6:	d101      	bne.n	800f5fc <dir_register+0xa8>
 800f5f8:	2307      	movs	r3, #7
 800f5fa:	e09c      	b.n	800f736 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f5fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f600:	2b04      	cmp	r3, #4
 800f602:	d002      	beq.n	800f60a <dir_register+0xb6>
 800f604:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f608:	e095      	b.n	800f736 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f60a:	7dfa      	ldrb	r2, [r7, #23]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f612:	7dfb      	ldrb	r3, [r7, #23]
 800f614:	f003 0302 	and.w	r3, r3, #2
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d007      	beq.n	800f62c <dir_register+0xd8>
 800f61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61e:	330c      	adds	r3, #12
 800f620:	4a47      	ldr	r2, [pc, #284]	; (800f740 <dir_register+0x1ec>)
 800f622:	fba2 2303 	umull	r2, r3, r2, r3
 800f626:	089b      	lsrs	r3, r3, #2
 800f628:	3301      	adds	r3, #1
 800f62a:	e000      	b.n	800f62e <dir_register+0xda>
 800f62c:	2301      	movs	r3, #1
 800f62e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f630:	6a39      	ldr	r1, [r7, #32]
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f7ff fcbf 	bl	800efb6 <dir_alloc>
 800f638:	4603      	mov	r3, r0
 800f63a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f63e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f642:	2b00      	cmp	r3, #0
 800f644:	d148      	bne.n	800f6d8 <dir_register+0x184>
 800f646:	6a3b      	ldr	r3, [r7, #32]
 800f648:	3b01      	subs	r3, #1
 800f64a:	623b      	str	r3, [r7, #32]
 800f64c:	6a3b      	ldr	r3, [r7, #32]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d042      	beq.n	800f6d8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	695a      	ldr	r2, [r3, #20]
 800f656:	6a3b      	ldr	r3, [r7, #32]
 800f658:	015b      	lsls	r3, r3, #5
 800f65a:	1ad3      	subs	r3, r2, r3
 800f65c:	4619      	mov	r1, r3
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f7ff fb4a 	bl	800ecf8 <dir_sdi>
 800f664:	4603      	mov	r3, r0
 800f666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f66a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d132      	bne.n	800f6d8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	3324      	adds	r3, #36	; 0x24
 800f676:	4618      	mov	r0, r3
 800f678:	f7ff fe8a 	bl	800f390 <sum_sfn>
 800f67c:	4603      	mov	r3, r0
 800f67e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	69db      	ldr	r3, [r3, #28]
 800f684:	4619      	mov	r1, r3
 800f686:	69f8      	ldr	r0, [r7, #28]
 800f688:	f7fe ff56 	bl	800e538 <move_window>
 800f68c:	4603      	mov	r3, r0
 800f68e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f696:	2b00      	cmp	r3, #0
 800f698:	d11d      	bne.n	800f6d6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f69a:	69fb      	ldr	r3, [r7, #28]
 800f69c:	6918      	ldr	r0, [r3, #16]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6a19      	ldr	r1, [r3, #32]
 800f6a2:	6a3b      	ldr	r3, [r7, #32]
 800f6a4:	b2da      	uxtb	r2, r3
 800f6a6:	7efb      	ldrb	r3, [r7, #27]
 800f6a8:	f7ff fd7c 	bl	800f1a4 <put_lfn>
				fs->wflag = 1;
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7ff fba8 	bl	800ee0a <dir_next>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f6c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d107      	bne.n	800f6d8 <dir_register+0x184>
 800f6c8:	6a3b      	ldr	r3, [r7, #32]
 800f6ca:	3b01      	subs	r3, #1
 800f6cc:	623b      	str	r3, [r7, #32]
 800f6ce:	6a3b      	ldr	r3, [r7, #32]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1d5      	bne.n	800f680 <dir_register+0x12c>
 800f6d4:	e000      	b.n	800f6d8 <dir_register+0x184>
				if (res != FR_OK) break;
 800f6d6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f6d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d128      	bne.n	800f732 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	69db      	ldr	r3, [r3, #28]
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	69f8      	ldr	r0, [r7, #28]
 800f6e8:	f7fe ff26 	bl	800e538 <move_window>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f6f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d11b      	bne.n	800f732 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6a1b      	ldr	r3, [r3, #32]
 800f6fe:	2220      	movs	r2, #32
 800f700:	2100      	movs	r1, #0
 800f702:	4618      	mov	r0, r3
 800f704:	f7fe fd0b 	bl	800e11e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6a18      	ldr	r0, [r3, #32]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	3324      	adds	r3, #36	; 0x24
 800f710:	220b      	movs	r2, #11
 800f712:	4619      	mov	r1, r3
 800f714:	f7fe fce2 	bl	800e0dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6a1b      	ldr	r3, [r3, #32]
 800f722:	330c      	adds	r3, #12
 800f724:	f002 0218 	and.w	r2, r2, #24
 800f728:	b2d2      	uxtb	r2, r2
 800f72a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	2201      	movs	r2, #1
 800f730:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f736:	4618      	mov	r0, r3
 800f738:	3730      	adds	r7, #48	; 0x30
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	4ec4ec4f 	.word	0x4ec4ec4f

0800f744 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b08a      	sub	sp, #40	; 0x28
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	613b      	str	r3, [r7, #16]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	691b      	ldr	r3, [r3, #16]
 800f75a:	60fb      	str	r3, [r7, #12]
 800f75c:	2300      	movs	r3, #0
 800f75e:	617b      	str	r3, [r7, #20]
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f764:	69bb      	ldr	r3, [r7, #24]
 800f766:	1c5a      	adds	r2, r3, #1
 800f768:	61ba      	str	r2, [r7, #24]
 800f76a:	693a      	ldr	r2, [r7, #16]
 800f76c:	4413      	add	r3, r2
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f774:	2b1f      	cmp	r3, #31
 800f776:	d940      	bls.n	800f7fa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f77a:	2b2f      	cmp	r3, #47	; 0x2f
 800f77c:	d006      	beq.n	800f78c <create_name+0x48>
 800f77e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f780:	2b5c      	cmp	r3, #92	; 0x5c
 800f782:	d110      	bne.n	800f7a6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f784:	e002      	b.n	800f78c <create_name+0x48>
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	3301      	adds	r3, #1
 800f78a:	61bb      	str	r3, [r7, #24]
 800f78c:	693a      	ldr	r2, [r7, #16]
 800f78e:	69bb      	ldr	r3, [r7, #24]
 800f790:	4413      	add	r3, r2
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	2b2f      	cmp	r3, #47	; 0x2f
 800f796:	d0f6      	beq.n	800f786 <create_name+0x42>
 800f798:	693a      	ldr	r2, [r7, #16]
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	4413      	add	r3, r2
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	2b5c      	cmp	r3, #92	; 0x5c
 800f7a2:	d0f0      	beq.n	800f786 <create_name+0x42>
			break;
 800f7a4:	e02a      	b.n	800f7fc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	2bfe      	cmp	r3, #254	; 0xfe
 800f7aa:	d901      	bls.n	800f7b0 <create_name+0x6c>
 800f7ac:	2306      	movs	r3, #6
 800f7ae:	e17d      	b.n	800faac <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f7b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7b2:	b2db      	uxtb	r3, r3
 800f7b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f7b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7b8:	2101      	movs	r1, #1
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f001 f9f8 	bl	8010bb0 <ff_convert>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f7c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d101      	bne.n	800f7ce <create_name+0x8a>
 800f7ca:	2306      	movs	r3, #6
 800f7cc:	e16e      	b.n	800faac <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f7ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7d0:	2b7f      	cmp	r3, #127	; 0x7f
 800f7d2:	d809      	bhi.n	800f7e8 <create_name+0xa4>
 800f7d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	488d      	ldr	r0, [pc, #564]	; (800fa10 <create_name+0x2cc>)
 800f7da:	f7fe fce2 	bl	800e1a2 <chk_chr>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d001      	beq.n	800f7e8 <create_name+0xa4>
 800f7e4:	2306      	movs	r3, #6
 800f7e6:	e161      	b.n	800faac <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	1c5a      	adds	r2, r3, #1
 800f7ec:	617a      	str	r2, [r7, #20]
 800f7ee:	005b      	lsls	r3, r3, #1
 800f7f0:	68fa      	ldr	r2, [r7, #12]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f7f6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f7f8:	e7b4      	b.n	800f764 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f7fa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f7fc:	693a      	ldr	r2, [r7, #16]
 800f7fe:	69bb      	ldr	r3, [r7, #24]
 800f800:	441a      	add	r2, r3
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f808:	2b1f      	cmp	r3, #31
 800f80a:	d801      	bhi.n	800f810 <create_name+0xcc>
 800f80c:	2304      	movs	r3, #4
 800f80e:	e000      	b.n	800f812 <create_name+0xce>
 800f810:	2300      	movs	r3, #0
 800f812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f816:	e011      	b.n	800f83c <create_name+0xf8>
		w = lfn[di - 1];
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f81e:	3b01      	subs	r3, #1
 800f820:	005b      	lsls	r3, r3, #1
 800f822:	68fa      	ldr	r2, [r7, #12]
 800f824:	4413      	add	r3, r2
 800f826:	881b      	ldrh	r3, [r3, #0]
 800f828:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f82a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f82c:	2b20      	cmp	r3, #32
 800f82e:	d002      	beq.n	800f836 <create_name+0xf2>
 800f830:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f832:	2b2e      	cmp	r3, #46	; 0x2e
 800f834:	d106      	bne.n	800f844 <create_name+0x100>
		di--;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	3b01      	subs	r3, #1
 800f83a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d1ea      	bne.n	800f818 <create_name+0xd4>
 800f842:	e000      	b.n	800f846 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f844:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	005b      	lsls	r3, r3, #1
 800f84a:	68fa      	ldr	r2, [r7, #12]
 800f84c:	4413      	add	r3, r2
 800f84e:	2200      	movs	r2, #0
 800f850:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d101      	bne.n	800f85c <create_name+0x118>
 800f858:	2306      	movs	r3, #6
 800f85a:	e127      	b.n	800faac <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	3324      	adds	r3, #36	; 0x24
 800f860:	220b      	movs	r2, #11
 800f862:	2120      	movs	r1, #32
 800f864:	4618      	mov	r0, r3
 800f866:	f7fe fc5a 	bl	800e11e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f86a:	2300      	movs	r3, #0
 800f86c:	61bb      	str	r3, [r7, #24]
 800f86e:	e002      	b.n	800f876 <create_name+0x132>
 800f870:	69bb      	ldr	r3, [r7, #24]
 800f872:	3301      	adds	r3, #1
 800f874:	61bb      	str	r3, [r7, #24]
 800f876:	69bb      	ldr	r3, [r7, #24]
 800f878:	005b      	lsls	r3, r3, #1
 800f87a:	68fa      	ldr	r2, [r7, #12]
 800f87c:	4413      	add	r3, r2
 800f87e:	881b      	ldrh	r3, [r3, #0]
 800f880:	2b20      	cmp	r3, #32
 800f882:	d0f5      	beq.n	800f870 <create_name+0x12c>
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	005b      	lsls	r3, r3, #1
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	4413      	add	r3, r2
 800f88c:	881b      	ldrh	r3, [r3, #0]
 800f88e:	2b2e      	cmp	r3, #46	; 0x2e
 800f890:	d0ee      	beq.n	800f870 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f892:	69bb      	ldr	r3, [r7, #24]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d009      	beq.n	800f8ac <create_name+0x168>
 800f898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f89c:	f043 0303 	orr.w	r3, r3, #3
 800f8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f8a4:	e002      	b.n	800f8ac <create_name+0x168>
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	3b01      	subs	r3, #1
 800f8aa:	617b      	str	r3, [r7, #20]
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d009      	beq.n	800f8c6 <create_name+0x182>
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f8b8:	3b01      	subs	r3, #1
 800f8ba:	005b      	lsls	r3, r3, #1
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	4413      	add	r3, r2
 800f8c0:	881b      	ldrh	r3, [r3, #0]
 800f8c2:	2b2e      	cmp	r3, #46	; 0x2e
 800f8c4:	d1ef      	bne.n	800f8a6 <create_name+0x162>

	i = b = 0; ni = 8;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	623b      	str	r3, [r7, #32]
 800f8d0:	2308      	movs	r3, #8
 800f8d2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	1c5a      	adds	r2, r3, #1
 800f8d8:	61ba      	str	r2, [r7, #24]
 800f8da:	005b      	lsls	r3, r3, #1
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	4413      	add	r3, r2
 800f8e0:	881b      	ldrh	r3, [r3, #0]
 800f8e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f8e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f000 8090 	beq.w	800fa0c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f8ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8ee:	2b20      	cmp	r3, #32
 800f8f0:	d006      	beq.n	800f900 <create_name+0x1bc>
 800f8f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8f4:	2b2e      	cmp	r3, #46	; 0x2e
 800f8f6:	d10a      	bne.n	800f90e <create_name+0x1ca>
 800f8f8:	69ba      	ldr	r2, [r7, #24]
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d006      	beq.n	800f90e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f904:	f043 0303 	orr.w	r3, r3, #3
 800f908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f90c:	e07d      	b.n	800fa0a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f90e:	6a3a      	ldr	r2, [r7, #32]
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	429a      	cmp	r2, r3
 800f914:	d203      	bcs.n	800f91e <create_name+0x1da>
 800f916:	69ba      	ldr	r2, [r7, #24]
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d123      	bne.n	800f966 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	2b0b      	cmp	r3, #11
 800f922:	d106      	bne.n	800f932 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f928:	f043 0303 	orr.w	r3, r3, #3
 800f92c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f930:	e075      	b.n	800fa1e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f932:	69ba      	ldr	r2, [r7, #24]
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	429a      	cmp	r2, r3
 800f938:	d005      	beq.n	800f946 <create_name+0x202>
 800f93a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f93e:	f043 0303 	orr.w	r3, r3, #3
 800f942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f946:	69ba      	ldr	r2, [r7, #24]
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d866      	bhi.n	800fa1c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	61bb      	str	r3, [r7, #24]
 800f952:	2308      	movs	r3, #8
 800f954:	623b      	str	r3, [r7, #32]
 800f956:	230b      	movs	r3, #11
 800f958:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f95a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f964:	e051      	b.n	800fa0a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f966:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f968:	2b7f      	cmp	r3, #127	; 0x7f
 800f96a:	d914      	bls.n	800f996 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f96c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f96e:	2100      	movs	r1, #0
 800f970:	4618      	mov	r0, r3
 800f972:	f001 f91d 	bl	8010bb0 <ff_convert>
 800f976:	4603      	mov	r3, r0
 800f978:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f97a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d004      	beq.n	800f98a <create_name+0x246>
 800f980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f982:	3b80      	subs	r3, #128	; 0x80
 800f984:	4a23      	ldr	r2, [pc, #140]	; (800fa14 <create_name+0x2d0>)
 800f986:	5cd3      	ldrb	r3, [r2, r3]
 800f988:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f98a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f98e:	f043 0302 	orr.w	r3, r3, #2
 800f992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d007      	beq.n	800f9ac <create_name+0x268>
 800f99c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f99e:	4619      	mov	r1, r3
 800f9a0:	481d      	ldr	r0, [pc, #116]	; (800fa18 <create_name+0x2d4>)
 800f9a2:	f7fe fbfe 	bl	800e1a2 <chk_chr>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d008      	beq.n	800f9be <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f9ac:	235f      	movs	r3, #95	; 0x5f
 800f9ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9b4:	f043 0303 	orr.w	r3, r3, #3
 800f9b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f9bc:	e01b      	b.n	800f9f6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f9be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9c0:	2b40      	cmp	r3, #64	; 0x40
 800f9c2:	d909      	bls.n	800f9d8 <create_name+0x294>
 800f9c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9c6:	2b5a      	cmp	r3, #90	; 0x5a
 800f9c8:	d806      	bhi.n	800f9d8 <create_name+0x294>
					b |= 2;
 800f9ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9ce:	f043 0302 	orr.w	r3, r3, #2
 800f9d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f9d6:	e00e      	b.n	800f9f6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f9d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9da:	2b60      	cmp	r3, #96	; 0x60
 800f9dc:	d90b      	bls.n	800f9f6 <create_name+0x2b2>
 800f9de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9e0:	2b7a      	cmp	r3, #122	; 0x7a
 800f9e2:	d808      	bhi.n	800f9f6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f9e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9e8:	f043 0301 	orr.w	r3, r3, #1
 800f9ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f9f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9f2:	3b20      	subs	r3, #32
 800f9f4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f9f6:	6a3b      	ldr	r3, [r7, #32]
 800f9f8:	1c5a      	adds	r2, r3, #1
 800f9fa:	623a      	str	r2, [r7, #32]
 800f9fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f9fe:	b2d1      	uxtb	r1, r2
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	4413      	add	r3, r2
 800fa04:	460a      	mov	r2, r1
 800fa06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800fa0a:	e763      	b.n	800f8d4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800fa0c:	bf00      	nop
 800fa0e:	e006      	b.n	800fa1e <create_name+0x2da>
 800fa10:	08014664 	.word	0x08014664
 800fa14:	0801507c 	.word	0x0801507c
 800fa18:	08014670 	.word	0x08014670
			if (si > di) break;			/* No extension */
 800fa1c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fa24:	2be5      	cmp	r3, #229	; 0xe5
 800fa26:	d103      	bne.n	800fa30 <create_name+0x2ec>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2205      	movs	r2, #5
 800fa2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	2b08      	cmp	r3, #8
 800fa34:	d104      	bne.n	800fa40 <create_name+0x2fc>
 800fa36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fa40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa44:	f003 030c 	and.w	r3, r3, #12
 800fa48:	2b0c      	cmp	r3, #12
 800fa4a:	d005      	beq.n	800fa58 <create_name+0x314>
 800fa4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa50:	f003 0303 	and.w	r3, r3, #3
 800fa54:	2b03      	cmp	r3, #3
 800fa56:	d105      	bne.n	800fa64 <create_name+0x320>
 800fa58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa5c:	f043 0302 	orr.w	r3, r3, #2
 800fa60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fa64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa68:	f003 0302 	and.w	r3, r3, #2
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d117      	bne.n	800faa0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800fa70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa74:	f003 0303 	and.w	r3, r3, #3
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	d105      	bne.n	800fa88 <create_name+0x344>
 800fa7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa80:	f043 0310 	orr.w	r3, r3, #16
 800fa84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fa88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa8c:	f003 030c 	and.w	r3, r3, #12
 800fa90:	2b04      	cmp	r3, #4
 800fa92:	d105      	bne.n	800faa0 <create_name+0x35c>
 800fa94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa98:	f043 0308 	orr.w	r3, r3, #8
 800fa9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800faa6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800faaa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800faac:	4618      	mov	r0, r3
 800faae:	3728      	adds	r7, #40	; 0x28
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b086      	sub	sp, #24
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fac8:	e002      	b.n	800fad0 <follow_path+0x1c>
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	3301      	adds	r3, #1
 800face:	603b      	str	r3, [r7, #0]
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	2b2f      	cmp	r3, #47	; 0x2f
 800fad6:	d0f8      	beq.n	800faca <follow_path+0x16>
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	2b5c      	cmp	r3, #92	; 0x5c
 800fade:	d0f4      	beq.n	800faca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	2200      	movs	r2, #0
 800fae4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	2b1f      	cmp	r3, #31
 800faec:	d80a      	bhi.n	800fb04 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2280      	movs	r2, #128	; 0x80
 800faf2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800faf6:	2100      	movs	r1, #0
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f7ff f8fd 	bl	800ecf8 <dir_sdi>
 800fafe:	4603      	mov	r3, r0
 800fb00:	75fb      	strb	r3, [r7, #23]
 800fb02:	e048      	b.n	800fb96 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb04:	463b      	mov	r3, r7
 800fb06:	4619      	mov	r1, r3
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7ff fe1b 	bl	800f744 <create_name>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb12:	7dfb      	ldrb	r3, [r7, #23]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d139      	bne.n	800fb8c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff fc5a 	bl	800f3d2 <dir_find>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fb2a:	7dfb      	ldrb	r3, [r7, #23]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d00a      	beq.n	800fb46 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fb30:	7dfb      	ldrb	r3, [r7, #23]
 800fb32:	2b04      	cmp	r3, #4
 800fb34:	d12c      	bne.n	800fb90 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fb36:	7afb      	ldrb	r3, [r7, #11]
 800fb38:	f003 0304 	and.w	r3, r3, #4
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d127      	bne.n	800fb90 <follow_path+0xdc>
 800fb40:	2305      	movs	r3, #5
 800fb42:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fb44:	e024      	b.n	800fb90 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb46:	7afb      	ldrb	r3, [r7, #11]
 800fb48:	f003 0304 	and.w	r3, r3, #4
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d121      	bne.n	800fb94 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	799b      	ldrb	r3, [r3, #6]
 800fb54:	f003 0310 	and.w	r3, r3, #16
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d102      	bne.n	800fb62 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fb5c:	2305      	movs	r3, #5
 800fb5e:	75fb      	strb	r3, [r7, #23]
 800fb60:	e019      	b.n	800fb96 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	695b      	ldr	r3, [r3, #20]
 800fb6c:	68fa      	ldr	r2, [r7, #12]
 800fb6e:	8992      	ldrh	r2, [r2, #12]
 800fb70:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb74:	fb00 f202 	mul.w	r2, r0, r2
 800fb78:	1a9b      	subs	r3, r3, r2
 800fb7a:	440b      	add	r3, r1
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	68f8      	ldr	r0, [r7, #12]
 800fb80:	f7ff fa60 	bl	800f044 <ld_clust>
 800fb84:	4602      	mov	r2, r0
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb8a:	e7bb      	b.n	800fb04 <follow_path+0x50>
			if (res != FR_OK) break;
 800fb8c:	bf00      	nop
 800fb8e:	e002      	b.n	800fb96 <follow_path+0xe2>
				break;
 800fb90:	bf00      	nop
 800fb92:	e000      	b.n	800fb96 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb94:	bf00      	nop
			}
		}
	}

	return res;
 800fb96:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3718      	adds	r7, #24
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b087      	sub	sp, #28
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fba8:	f04f 33ff 	mov.w	r3, #4294967295
 800fbac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d031      	beq.n	800fc1a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	617b      	str	r3, [r7, #20]
 800fbbc:	e002      	b.n	800fbc4 <get_ldnumber+0x24>
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	617b      	str	r3, [r7, #20]
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	2b1f      	cmp	r3, #31
 800fbca:	d903      	bls.n	800fbd4 <get_ldnumber+0x34>
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	2b3a      	cmp	r3, #58	; 0x3a
 800fbd2:	d1f4      	bne.n	800fbbe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	2b3a      	cmp	r3, #58	; 0x3a
 800fbda:	d11c      	bne.n	800fc16 <get_ldnumber+0x76>
			tp = *path;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	1c5a      	adds	r2, r3, #1
 800fbe6:	60fa      	str	r2, [r7, #12]
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	3b30      	subs	r3, #48	; 0x30
 800fbec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	2b09      	cmp	r3, #9
 800fbf2:	d80e      	bhi.n	800fc12 <get_ldnumber+0x72>
 800fbf4:	68fa      	ldr	r2, [r7, #12]
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d10a      	bne.n	800fc12 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d107      	bne.n	800fc12 <get_ldnumber+0x72>
					vol = (int)i;
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	617b      	str	r3, [r7, #20]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	697a      	ldr	r2, [r7, #20]
 800fc10:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	e002      	b.n	800fc1c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fc16:	2300      	movs	r3, #0
 800fc18:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fc1a:	693b      	ldr	r3, [r7, #16]
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	371c      	adds	r7, #28
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr

0800fc28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	70da      	strb	r2, [r3, #3]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f04f 32ff 	mov.w	r2, #4294967295
 800fc3e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fc40:	6839      	ldr	r1, [r7, #0]
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f7fe fc78 	bl	800e538 <move_window>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d001      	beq.n	800fc52 <check_fs+0x2a>
 800fc4e:	2304      	movs	r3, #4
 800fc50:	e038      	b.n	800fcc4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	3338      	adds	r3, #56	; 0x38
 800fc56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7fe f9bc 	bl	800dfd8 <ld_word>
 800fc60:	4603      	mov	r3, r0
 800fc62:	461a      	mov	r2, r3
 800fc64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d001      	beq.n	800fc70 <check_fs+0x48>
 800fc6c:	2303      	movs	r3, #3
 800fc6e:	e029      	b.n	800fcc4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fc76:	2be9      	cmp	r3, #233	; 0xe9
 800fc78:	d009      	beq.n	800fc8e <check_fs+0x66>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fc80:	2beb      	cmp	r3, #235	; 0xeb
 800fc82:	d11e      	bne.n	800fcc2 <check_fs+0x9a>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fc8a:	2b90      	cmp	r3, #144	; 0x90
 800fc8c:	d119      	bne.n	800fcc2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	3338      	adds	r3, #56	; 0x38
 800fc92:	3336      	adds	r3, #54	; 0x36
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7fe f9b7 	bl	800e008 <ld_dword>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fca0:	4a0a      	ldr	r2, [pc, #40]	; (800fccc <check_fs+0xa4>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d101      	bne.n	800fcaa <check_fs+0x82>
 800fca6:	2300      	movs	r3, #0
 800fca8:	e00c      	b.n	800fcc4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	3338      	adds	r3, #56	; 0x38
 800fcae:	3352      	adds	r3, #82	; 0x52
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7fe f9a9 	bl	800e008 <ld_dword>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	4a05      	ldr	r2, [pc, #20]	; (800fcd0 <check_fs+0xa8>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d101      	bne.n	800fcc2 <check_fs+0x9a>
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	e000      	b.n	800fcc4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fcc2:	2302      	movs	r3, #2
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3708      	adds	r7, #8
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	00544146 	.word	0x00544146
 800fcd0:	33544146 	.word	0x33544146

0800fcd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b096      	sub	sp, #88	; 0x58
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	4613      	mov	r3, r2
 800fce0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	2200      	movs	r2, #0
 800fce6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fce8:	68f8      	ldr	r0, [r7, #12]
 800fcea:	f7ff ff59 	bl	800fba0 <get_ldnumber>
 800fcee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fcf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	da01      	bge.n	800fcfa <find_volume+0x26>
 800fcf6:	230b      	movs	r3, #11
 800fcf8:	e265      	b.n	80101c6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fcfa:	4a9f      	ldr	r2, [pc, #636]	; (800ff78 <find_volume+0x2a4>)
 800fcfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd02:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d101      	bne.n	800fd0e <find_volume+0x3a>
 800fd0a:	230c      	movs	r3, #12
 800fd0c:	e25b      	b.n	80101c6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fd14:	79fb      	ldrb	r3, [r7, #7]
 800fd16:	f023 0301 	bic.w	r3, r3, #1
 800fd1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d01a      	beq.n	800fd5a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd26:	785b      	ldrb	r3, [r3, #1]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fe f8b7 	bl	800de9c <disk_status>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fd34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd38:	f003 0301 	and.w	r3, r3, #1
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d10c      	bne.n	800fd5a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fd40:	79fb      	ldrb	r3, [r7, #7]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d007      	beq.n	800fd56 <find_volume+0x82>
 800fd46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd4a:	f003 0304 	and.w	r3, r3, #4
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fd52:	230a      	movs	r3, #10
 800fd54:	e237      	b.n	80101c6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800fd56:	2300      	movs	r3, #0
 800fd58:	e235      	b.n	80101c6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd62:	b2da      	uxtb	r2, r3
 800fd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6a:	785b      	ldrb	r3, [r3, #1]
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7fe f8af 	bl	800ded0 <disk_initialize>
 800fd72:	4603      	mov	r3, r0
 800fd74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fd78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd7c:	f003 0301 	and.w	r3, r3, #1
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d001      	beq.n	800fd88 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fd84:	2303      	movs	r3, #3
 800fd86:	e21e      	b.n	80101c6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fd88:	79fb      	ldrb	r3, [r7, #7]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d007      	beq.n	800fd9e <find_volume+0xca>
 800fd8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd92:	f003 0304 	and.w	r3, r3, #4
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d001      	beq.n	800fd9e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fd9a:	230a      	movs	r3, #10
 800fd9c:	e213      	b.n	80101c6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda0:	7858      	ldrb	r0, [r3, #1]
 800fda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda4:	330c      	adds	r3, #12
 800fda6:	461a      	mov	r2, r3
 800fda8:	2102      	movs	r1, #2
 800fdaa:	f7fe f8f7 	bl	800df9c <disk_ioctl>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d001      	beq.n	800fdb8 <find_volume+0xe4>
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	e206      	b.n	80101c6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdba:	899b      	ldrh	r3, [r3, #12]
 800fdbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdc0:	d80d      	bhi.n	800fdde <find_volume+0x10a>
 800fdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc4:	899b      	ldrh	r3, [r3, #12]
 800fdc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdca:	d308      	bcc.n	800fdde <find_volume+0x10a>
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdce:	899b      	ldrh	r3, [r3, #12]
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd4:	899b      	ldrh	r3, [r3, #12]
 800fdd6:	3b01      	subs	r3, #1
 800fdd8:	4013      	ands	r3, r2
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d001      	beq.n	800fde2 <find_volume+0x10e>
 800fdde:	2301      	movs	r3, #1
 800fde0:	e1f1      	b.n	80101c6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fde2:	2300      	movs	r3, #0
 800fde4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fde6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fde8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fdea:	f7ff ff1d 	bl	800fc28 <check_fs>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fdf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdf8:	2b02      	cmp	r3, #2
 800fdfa:	d149      	bne.n	800fe90 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	643b      	str	r3, [r7, #64]	; 0x40
 800fe00:	e01e      	b.n	800fe40 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fe02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe04:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fe08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe0a:	011b      	lsls	r3, r3, #4
 800fe0c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fe10:	4413      	add	r3, r2
 800fe12:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fe14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe16:	3304      	adds	r3, #4
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d006      	beq.n	800fe2c <find_volume+0x158>
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe20:	3308      	adds	r3, #8
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7fe f8f0 	bl	800e008 <ld_dword>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	e000      	b.n	800fe2e <find_volume+0x15a>
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	3358      	adds	r3, #88	; 0x58
 800fe34:	443b      	add	r3, r7
 800fe36:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	643b      	str	r3, [r7, #64]	; 0x40
 800fe40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe42:	2b03      	cmp	r3, #3
 800fe44:	d9dd      	bls.n	800fe02 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fe46:	2300      	movs	r3, #0
 800fe48:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fe4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d002      	beq.n	800fe56 <find_volume+0x182>
 800fe50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe52:	3b01      	subs	r3, #1
 800fe54:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fe56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe58:	009b      	lsls	r3, r3, #2
 800fe5a:	3358      	adds	r3, #88	; 0x58
 800fe5c:	443b      	add	r3, r7
 800fe5e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fe62:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fe64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d005      	beq.n	800fe76 <find_volume+0x1a2>
 800fe6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe6e:	f7ff fedb 	bl	800fc28 <check_fs>
 800fe72:	4603      	mov	r3, r0
 800fe74:	e000      	b.n	800fe78 <find_volume+0x1a4>
 800fe76:	2303      	movs	r3, #3
 800fe78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fe7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d905      	bls.n	800fe90 <find_volume+0x1bc>
 800fe84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe86:	3301      	adds	r3, #1
 800fe88:	643b      	str	r3, [r7, #64]	; 0x40
 800fe8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe8c:	2b03      	cmp	r3, #3
 800fe8e:	d9e2      	bls.n	800fe56 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fe90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe94:	2b04      	cmp	r3, #4
 800fe96:	d101      	bne.n	800fe9c <find_volume+0x1c8>
 800fe98:	2301      	movs	r3, #1
 800fe9a:	e194      	b.n	80101c6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fe9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d901      	bls.n	800fea8 <find_volume+0x1d4>
 800fea4:	230d      	movs	r3, #13
 800fea6:	e18e      	b.n	80101c6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feaa:	3338      	adds	r3, #56	; 0x38
 800feac:	330b      	adds	r3, #11
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fe f892 	bl	800dfd8 <ld_word>
 800feb4:	4603      	mov	r3, r0
 800feb6:	461a      	mov	r2, r3
 800feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feba:	899b      	ldrh	r3, [r3, #12]
 800febc:	429a      	cmp	r2, r3
 800febe:	d001      	beq.n	800fec4 <find_volume+0x1f0>
 800fec0:	230d      	movs	r3, #13
 800fec2:	e180      	b.n	80101c6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec6:	3338      	adds	r3, #56	; 0x38
 800fec8:	3316      	adds	r3, #22
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fe f884 	bl	800dfd8 <ld_word>
 800fed0:	4603      	mov	r3, r0
 800fed2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d106      	bne.n	800fee8 <find_volume+0x214>
 800feda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fedc:	3338      	adds	r3, #56	; 0x38
 800fede:	3324      	adds	r3, #36	; 0x24
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7fe f891 	bl	800e008 <ld_dword>
 800fee6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800feec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800feee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefa:	789b      	ldrb	r3, [r3, #2]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d005      	beq.n	800ff0c <find_volume+0x238>
 800ff00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff02:	789b      	ldrb	r3, [r3, #2]
 800ff04:	2b02      	cmp	r3, #2
 800ff06:	d001      	beq.n	800ff0c <find_volume+0x238>
 800ff08:	230d      	movs	r3, #13
 800ff0a:	e15c      	b.n	80101c6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ff0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0e:	789b      	ldrb	r3, [r3, #2]
 800ff10:	461a      	mov	r2, r3
 800ff12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff14:	fb02 f303 	mul.w	r3, r2, r3
 800ff18:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ff1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff20:	b29a      	uxth	r2, r3
 800ff22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ff26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff28:	895b      	ldrh	r3, [r3, #10]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d008      	beq.n	800ff40 <find_volume+0x26c>
 800ff2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff30:	895b      	ldrh	r3, [r3, #10]
 800ff32:	461a      	mov	r2, r3
 800ff34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff36:	895b      	ldrh	r3, [r3, #10]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	4013      	ands	r3, r2
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d001      	beq.n	800ff44 <find_volume+0x270>
 800ff40:	230d      	movs	r3, #13
 800ff42:	e140      	b.n	80101c6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ff44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff46:	3338      	adds	r3, #56	; 0x38
 800ff48:	3311      	adds	r3, #17
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7fe f844 	bl	800dfd8 <ld_word>
 800ff50:	4603      	mov	r3, r0
 800ff52:	461a      	mov	r2, r3
 800ff54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ff58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5a:	891b      	ldrh	r3, [r3, #8]
 800ff5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff5e:	8992      	ldrh	r2, [r2, #12]
 800ff60:	0952      	lsrs	r2, r2, #5
 800ff62:	b292      	uxth	r2, r2
 800ff64:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff68:	fb01 f202 	mul.w	r2, r1, r2
 800ff6c:	1a9b      	subs	r3, r3, r2
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d003      	beq.n	800ff7c <find_volume+0x2a8>
 800ff74:	230d      	movs	r3, #13
 800ff76:	e126      	b.n	80101c6 <find_volume+0x4f2>
 800ff78:	20002af0 	.word	0x20002af0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ff7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7e:	3338      	adds	r3, #56	; 0x38
 800ff80:	3313      	adds	r3, #19
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fe f828 	bl	800dfd8 <ld_word>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ff8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d106      	bne.n	800ffa0 <find_volume+0x2cc>
 800ff92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff94:	3338      	adds	r3, #56	; 0x38
 800ff96:	3320      	adds	r3, #32
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7fe f835 	bl	800e008 <ld_dword>
 800ff9e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ffa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa2:	3338      	adds	r3, #56	; 0x38
 800ffa4:	330e      	adds	r3, #14
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7fe f816 	bl	800dfd8 <ld_word>
 800ffac:	4603      	mov	r3, r0
 800ffae:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ffb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d101      	bne.n	800ffba <find_volume+0x2e6>
 800ffb6:	230d      	movs	r3, #13
 800ffb8:	e105      	b.n	80101c6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ffba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ffbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffbe:	4413      	add	r3, r2
 800ffc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffc2:	8911      	ldrh	r1, [r2, #8]
 800ffc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffc6:	8992      	ldrh	r2, [r2, #12]
 800ffc8:	0952      	lsrs	r2, r2, #5
 800ffca:	b292      	uxth	r2, r2
 800ffcc:	fbb1 f2f2 	udiv	r2, r1, r2
 800ffd0:	b292      	uxth	r2, r2
 800ffd2:	4413      	add	r3, r2
 800ffd4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ffd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d201      	bcs.n	800ffe2 <find_volume+0x30e>
 800ffde:	230d      	movs	r3, #13
 800ffe0:	e0f1      	b.n	80101c6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ffe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe6:	1ad3      	subs	r3, r2, r3
 800ffe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffea:	8952      	ldrh	r2, [r2, #10]
 800ffec:	fbb3 f3f2 	udiv	r3, r3, r2
 800fff0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d101      	bne.n	800fffc <find_volume+0x328>
 800fff8:	230d      	movs	r3, #13
 800fffa:	e0e4      	b.n	80101c6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800fffc:	2303      	movs	r3, #3
 800fffe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010004:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010008:	4293      	cmp	r3, r2
 801000a:	d802      	bhi.n	8010012 <find_volume+0x33e>
 801000c:	2302      	movs	r3, #2
 801000e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010014:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010018:	4293      	cmp	r3, r2
 801001a:	d802      	bhi.n	8010022 <find_volume+0x34e>
 801001c:	2301      	movs	r3, #1
 801001e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010024:	1c9a      	adds	r2, r3, #2
 8010026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010028:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801002a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801002e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010030:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010034:	441a      	add	r2, r3
 8010036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010038:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801003a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801003c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003e:	441a      	add	r2, r3
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010048:	2b03      	cmp	r3, #3
 801004a:	d11e      	bne.n	801008a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801004c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004e:	3338      	adds	r3, #56	; 0x38
 8010050:	332a      	adds	r3, #42	; 0x2a
 8010052:	4618      	mov	r0, r3
 8010054:	f7fd ffc0 	bl	800dfd8 <ld_word>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	d001      	beq.n	8010062 <find_volume+0x38e>
 801005e:	230d      	movs	r3, #13
 8010060:	e0b1      	b.n	80101c6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010064:	891b      	ldrh	r3, [r3, #8]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d001      	beq.n	801006e <find_volume+0x39a>
 801006a:	230d      	movs	r3, #13
 801006c:	e0ab      	b.n	80101c6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801006e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010070:	3338      	adds	r3, #56	; 0x38
 8010072:	332c      	adds	r3, #44	; 0x2c
 8010074:	4618      	mov	r0, r3
 8010076:	f7fd ffc7 	bl	800e008 <ld_dword>
 801007a:	4602      	mov	r2, r0
 801007c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010082:	69db      	ldr	r3, [r3, #28]
 8010084:	009b      	lsls	r3, r3, #2
 8010086:	647b      	str	r3, [r7, #68]	; 0x44
 8010088:	e01f      	b.n	80100ca <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801008a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008c:	891b      	ldrh	r3, [r3, #8]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d101      	bne.n	8010096 <find_volume+0x3c2>
 8010092:	230d      	movs	r3, #13
 8010094:	e097      	b.n	80101c6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801009a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801009c:	441a      	add	r2, r3
 801009e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80100a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100a6:	2b02      	cmp	r3, #2
 80100a8:	d103      	bne.n	80100b2 <find_volume+0x3de>
 80100aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ac:	69db      	ldr	r3, [r3, #28]
 80100ae:	005b      	lsls	r3, r3, #1
 80100b0:	e00a      	b.n	80100c8 <find_volume+0x3f4>
 80100b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b4:	69da      	ldr	r2, [r3, #28]
 80100b6:	4613      	mov	r3, r2
 80100b8:	005b      	lsls	r3, r3, #1
 80100ba:	4413      	add	r3, r2
 80100bc:	085a      	lsrs	r2, r3, #1
 80100be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c0:	69db      	ldr	r3, [r3, #28]
 80100c2:	f003 0301 	and.w	r3, r3, #1
 80100c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80100c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80100ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100cc:	6a1a      	ldr	r2, [r3, #32]
 80100ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d0:	899b      	ldrh	r3, [r3, #12]
 80100d2:	4619      	mov	r1, r3
 80100d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100d6:	440b      	add	r3, r1
 80100d8:	3b01      	subs	r3, #1
 80100da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80100dc:	8989      	ldrh	r1, [r1, #12]
 80100de:	fbb3 f3f1 	udiv	r3, r3, r1
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d201      	bcs.n	80100ea <find_volume+0x416>
 80100e6:	230d      	movs	r3, #13
 80100e8:	e06d      	b.n	80101c6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	f04f 32ff 	mov.w	r2, #4294967295
 80100f0:	619a      	str	r2, [r3, #24]
 80100f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f4:	699a      	ldr	r2, [r3, #24]
 80100f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80100fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fc:	2280      	movs	r2, #128	; 0x80
 80100fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010100:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010104:	2b03      	cmp	r3, #3
 8010106:	d149      	bne.n	801019c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801010a:	3338      	adds	r3, #56	; 0x38
 801010c:	3330      	adds	r3, #48	; 0x30
 801010e:	4618      	mov	r0, r3
 8010110:	f7fd ff62 	bl	800dfd8 <ld_word>
 8010114:	4603      	mov	r3, r0
 8010116:	2b01      	cmp	r3, #1
 8010118:	d140      	bne.n	801019c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801011a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801011c:	3301      	adds	r3, #1
 801011e:	4619      	mov	r1, r3
 8010120:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010122:	f7fe fa09 	bl	800e538 <move_window>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d137      	bne.n	801019c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801012c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012e:	2200      	movs	r2, #0
 8010130:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010134:	3338      	adds	r3, #56	; 0x38
 8010136:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801013a:	4618      	mov	r0, r3
 801013c:	f7fd ff4c 	bl	800dfd8 <ld_word>
 8010140:	4603      	mov	r3, r0
 8010142:	461a      	mov	r2, r3
 8010144:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010148:	429a      	cmp	r2, r3
 801014a:	d127      	bne.n	801019c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801014c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014e:	3338      	adds	r3, #56	; 0x38
 8010150:	4618      	mov	r0, r3
 8010152:	f7fd ff59 	bl	800e008 <ld_dword>
 8010156:	4603      	mov	r3, r0
 8010158:	4a1d      	ldr	r2, [pc, #116]	; (80101d0 <find_volume+0x4fc>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d11e      	bne.n	801019c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801015e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010160:	3338      	adds	r3, #56	; 0x38
 8010162:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010166:	4618      	mov	r0, r3
 8010168:	f7fd ff4e 	bl	800e008 <ld_dword>
 801016c:	4603      	mov	r3, r0
 801016e:	4a19      	ldr	r2, [pc, #100]	; (80101d4 <find_volume+0x500>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d113      	bne.n	801019c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010176:	3338      	adds	r3, #56	; 0x38
 8010178:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801017c:	4618      	mov	r0, r3
 801017e:	f7fd ff43 	bl	800e008 <ld_dword>
 8010182:	4602      	mov	r2, r0
 8010184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010186:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018a:	3338      	adds	r3, #56	; 0x38
 801018c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010190:	4618      	mov	r0, r3
 8010192:	f7fd ff39 	bl	800e008 <ld_dword>
 8010196:	4602      	mov	r2, r0
 8010198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801019c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80101a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80101a4:	4b0c      	ldr	r3, [pc, #48]	; (80101d8 <find_volume+0x504>)
 80101a6:	881b      	ldrh	r3, [r3, #0]
 80101a8:	3301      	adds	r3, #1
 80101aa:	b29a      	uxth	r2, r3
 80101ac:	4b0a      	ldr	r3, [pc, #40]	; (80101d8 <find_volume+0x504>)
 80101ae:	801a      	strh	r2, [r3, #0]
 80101b0:	4b09      	ldr	r3, [pc, #36]	; (80101d8 <find_volume+0x504>)
 80101b2:	881a      	ldrh	r2, [r3, #0]
 80101b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80101b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ba:	4a08      	ldr	r2, [pc, #32]	; (80101dc <find_volume+0x508>)
 80101bc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80101be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101c0:	f7fe f952 	bl	800e468 <clear_lock>
#endif
	return FR_OK;
 80101c4:	2300      	movs	r3, #0
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	3758      	adds	r7, #88	; 0x58
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
 80101ce:	bf00      	nop
 80101d0:	41615252 	.word	0x41615252
 80101d4:	61417272 	.word	0x61417272
 80101d8:	20002af4 	.word	0x20002af4
 80101dc:	20002b18 	.word	0x20002b18

080101e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80101ea:	2309      	movs	r3, #9
 80101ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d01c      	beq.n	801022e <validate+0x4e>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d018      	beq.n	801022e <validate+0x4e>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d013      	beq.n	801022e <validate+0x4e>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	889a      	ldrh	r2, [r3, #4]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	88db      	ldrh	r3, [r3, #6]
 8010210:	429a      	cmp	r2, r3
 8010212:	d10c      	bne.n	801022e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	785b      	ldrb	r3, [r3, #1]
 801021a:	4618      	mov	r0, r3
 801021c:	f7fd fe3e 	bl	800de9c <disk_status>
 8010220:	4603      	mov	r3, r0
 8010222:	f003 0301 	and.w	r3, r3, #1
 8010226:	2b00      	cmp	r3, #0
 8010228:	d101      	bne.n	801022e <validate+0x4e>
			res = FR_OK;
 801022a:	2300      	movs	r3, #0
 801022c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801022e:	7bfb      	ldrb	r3, [r7, #15]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d102      	bne.n	801023a <validate+0x5a>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	e000      	b.n	801023c <validate+0x5c>
 801023a:	2300      	movs	r3, #0
 801023c:	683a      	ldr	r2, [r7, #0]
 801023e:	6013      	str	r3, [r2, #0]
	return res;
 8010240:	7bfb      	ldrb	r3, [r7, #15]
}
 8010242:	4618      	mov	r0, r3
 8010244:	3710      	adds	r7, #16
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
	...

0801024c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b088      	sub	sp, #32
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	60b9      	str	r1, [r7, #8]
 8010256:	4613      	mov	r3, r2
 8010258:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801025e:	f107 0310 	add.w	r3, r7, #16
 8010262:	4618      	mov	r0, r3
 8010264:	f7ff fc9c 	bl	800fba0 <get_ldnumber>
 8010268:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801026a:	69fb      	ldr	r3, [r7, #28]
 801026c:	2b00      	cmp	r3, #0
 801026e:	da01      	bge.n	8010274 <f_mount+0x28>
 8010270:	230b      	movs	r3, #11
 8010272:	e02b      	b.n	80102cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010274:	4a17      	ldr	r2, [pc, #92]	; (80102d4 <f_mount+0x88>)
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801027c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d005      	beq.n	8010290 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010284:	69b8      	ldr	r0, [r7, #24]
 8010286:	f7fe f8ef 	bl	800e468 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	2200      	movs	r2, #0
 801028e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d002      	beq.n	801029c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2200      	movs	r2, #0
 801029a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801029c:	68fa      	ldr	r2, [r7, #12]
 801029e:	490d      	ldr	r1, [pc, #52]	; (80102d4 <f_mount+0x88>)
 80102a0:	69fb      	ldr	r3, [r7, #28]
 80102a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d002      	beq.n	80102b2 <f_mount+0x66>
 80102ac:	79fb      	ldrb	r3, [r7, #7]
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d001      	beq.n	80102b6 <f_mount+0x6a>
 80102b2:	2300      	movs	r3, #0
 80102b4:	e00a      	b.n	80102cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80102b6:	f107 010c 	add.w	r1, r7, #12
 80102ba:	f107 0308 	add.w	r3, r7, #8
 80102be:	2200      	movs	r2, #0
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7ff fd07 	bl	800fcd4 <find_volume>
 80102c6:	4603      	mov	r3, r0
 80102c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80102ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3720      	adds	r7, #32
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	20002af0 	.word	0x20002af0

080102d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b09a      	sub	sp, #104	; 0x68
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	4613      	mov	r3, r2
 80102e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d101      	bne.n	80102f0 <f_open+0x18>
 80102ec:	2309      	movs	r3, #9
 80102ee:	e1bb      	b.n	8010668 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80102f0:	79fb      	ldrb	r3, [r7, #7]
 80102f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80102f8:	79fa      	ldrb	r2, [r7, #7]
 80102fa:	f107 0114 	add.w	r1, r7, #20
 80102fe:	f107 0308 	add.w	r3, r7, #8
 8010302:	4618      	mov	r0, r3
 8010304:	f7ff fce6 	bl	800fcd4 <find_volume>
 8010308:	4603      	mov	r3, r0
 801030a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801030e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010312:	2b00      	cmp	r3, #0
 8010314:	f040 819f 	bne.w	8010656 <f_open+0x37e>
		dj.obj.fs = fs;
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801031c:	68ba      	ldr	r2, [r7, #8]
 801031e:	f107 0318 	add.w	r3, r7, #24
 8010322:	4611      	mov	r1, r2
 8010324:	4618      	mov	r0, r3
 8010326:	f7ff fbc5 	bl	800fab4 <follow_path>
 801032a:	4603      	mov	r3, r0
 801032c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010330:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010334:	2b00      	cmp	r3, #0
 8010336:	d11a      	bne.n	801036e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010338:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801033c:	b25b      	sxtb	r3, r3
 801033e:	2b00      	cmp	r3, #0
 8010340:	da03      	bge.n	801034a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010342:	2306      	movs	r3, #6
 8010344:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010348:	e011      	b.n	801036e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801034a:	79fb      	ldrb	r3, [r7, #7]
 801034c:	f023 0301 	bic.w	r3, r3, #1
 8010350:	2b00      	cmp	r3, #0
 8010352:	bf14      	ite	ne
 8010354:	2301      	movne	r3, #1
 8010356:	2300      	moveq	r3, #0
 8010358:	b2db      	uxtb	r3, r3
 801035a:	461a      	mov	r2, r3
 801035c:	f107 0318 	add.w	r3, r7, #24
 8010360:	4611      	mov	r1, r2
 8010362:	4618      	mov	r0, r3
 8010364:	f7fd ff38 	bl	800e1d8 <chk_lock>
 8010368:	4603      	mov	r3, r0
 801036a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801036e:	79fb      	ldrb	r3, [r7, #7]
 8010370:	f003 031c 	and.w	r3, r3, #28
 8010374:	2b00      	cmp	r3, #0
 8010376:	d07f      	beq.n	8010478 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010378:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801037c:	2b00      	cmp	r3, #0
 801037e:	d017      	beq.n	80103b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010380:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010384:	2b04      	cmp	r3, #4
 8010386:	d10e      	bne.n	80103a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010388:	f7fd ff82 	bl	800e290 <enq_lock>
 801038c:	4603      	mov	r3, r0
 801038e:	2b00      	cmp	r3, #0
 8010390:	d006      	beq.n	80103a0 <f_open+0xc8>
 8010392:	f107 0318 	add.w	r3, r7, #24
 8010396:	4618      	mov	r0, r3
 8010398:	f7ff f8dc 	bl	800f554 <dir_register>
 801039c:	4603      	mov	r3, r0
 801039e:	e000      	b.n	80103a2 <f_open+0xca>
 80103a0:	2312      	movs	r3, #18
 80103a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80103a6:	79fb      	ldrb	r3, [r7, #7]
 80103a8:	f043 0308 	orr.w	r3, r3, #8
 80103ac:	71fb      	strb	r3, [r7, #7]
 80103ae:	e010      	b.n	80103d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80103b0:	7fbb      	ldrb	r3, [r7, #30]
 80103b2:	f003 0311 	and.w	r3, r3, #17
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d003      	beq.n	80103c2 <f_open+0xea>
					res = FR_DENIED;
 80103ba:	2307      	movs	r3, #7
 80103bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80103c0:	e007      	b.n	80103d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80103c2:	79fb      	ldrb	r3, [r7, #7]
 80103c4:	f003 0304 	and.w	r3, r3, #4
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d002      	beq.n	80103d2 <f_open+0xfa>
 80103cc:	2308      	movs	r3, #8
 80103ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80103d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d168      	bne.n	80104ac <f_open+0x1d4>
 80103da:	79fb      	ldrb	r3, [r7, #7]
 80103dc:	f003 0308 	and.w	r3, r3, #8
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d063      	beq.n	80104ac <f_open+0x1d4>
				dw = GET_FATTIME();
 80103e4:	f7fd fbee 	bl	800dbc4 <get_fattime>
 80103e8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80103ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ec:	330e      	adds	r3, #14
 80103ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7fd fe47 	bl	800e084 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80103f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f8:	3316      	adds	r3, #22
 80103fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7fd fe41 	bl	800e084 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010404:	330b      	adds	r3, #11
 8010406:	2220      	movs	r2, #32
 8010408:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801040e:	4611      	mov	r1, r2
 8010410:	4618      	mov	r0, r3
 8010412:	f7fe fe17 	bl	800f044 <ld_clust>
 8010416:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801041c:	2200      	movs	r2, #0
 801041e:	4618      	mov	r0, r3
 8010420:	f7fe fe2f 	bl	800f082 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010426:	331c      	adds	r3, #28
 8010428:	2100      	movs	r1, #0
 801042a:	4618      	mov	r0, r3
 801042c:	f7fd fe2a 	bl	800e084 <st_dword>
					fs->wflag = 1;
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	2201      	movs	r2, #1
 8010434:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010438:	2b00      	cmp	r3, #0
 801043a:	d037      	beq.n	80104ac <f_open+0x1d4>
						dw = fs->winsect;
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010440:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8010442:	f107 0318 	add.w	r3, r7, #24
 8010446:	2200      	movs	r2, #0
 8010448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801044a:	4618      	mov	r0, r3
 801044c:	f7fe fb1f 	bl	800ea8e <remove_chain>
 8010450:	4603      	mov	r3, r0
 8010452:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010456:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801045a:	2b00      	cmp	r3, #0
 801045c:	d126      	bne.n	80104ac <f_open+0x1d4>
							res = move_window(fs, dw);
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010462:	4618      	mov	r0, r3
 8010464:	f7fe f868 	bl	800e538 <move_window>
 8010468:	4603      	mov	r3, r0
 801046a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010472:	3a01      	subs	r2, #1
 8010474:	615a      	str	r2, [r3, #20]
 8010476:	e019      	b.n	80104ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010478:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801047c:	2b00      	cmp	r3, #0
 801047e:	d115      	bne.n	80104ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010480:	7fbb      	ldrb	r3, [r7, #30]
 8010482:	f003 0310 	and.w	r3, r3, #16
 8010486:	2b00      	cmp	r3, #0
 8010488:	d003      	beq.n	8010492 <f_open+0x1ba>
					res = FR_NO_FILE;
 801048a:	2304      	movs	r3, #4
 801048c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010490:	e00c      	b.n	80104ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010492:	79fb      	ldrb	r3, [r7, #7]
 8010494:	f003 0302 	and.w	r3, r3, #2
 8010498:	2b00      	cmp	r3, #0
 801049a:	d007      	beq.n	80104ac <f_open+0x1d4>
 801049c:	7fbb      	ldrb	r3, [r7, #30]
 801049e:	f003 0301 	and.w	r3, r3, #1
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d002      	beq.n	80104ac <f_open+0x1d4>
						res = FR_DENIED;
 80104a6:	2307      	movs	r3, #7
 80104a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80104ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d128      	bne.n	8010506 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80104b4:	79fb      	ldrb	r3, [r7, #7]
 80104b6:	f003 0308 	and.w	r3, r3, #8
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d003      	beq.n	80104c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80104be:	79fb      	ldrb	r3, [r7, #7]
 80104c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80104ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80104d4:	79fb      	ldrb	r3, [r7, #7]
 80104d6:	f023 0301 	bic.w	r3, r3, #1
 80104da:	2b00      	cmp	r3, #0
 80104dc:	bf14      	ite	ne
 80104de:	2301      	movne	r3, #1
 80104e0:	2300      	moveq	r3, #0
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	461a      	mov	r2, r3
 80104e6:	f107 0318 	add.w	r3, r7, #24
 80104ea:	4611      	mov	r1, r2
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7fd fef1 	bl	800e2d4 <inc_lock>
 80104f2:	4602      	mov	r2, r0
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	691b      	ldr	r3, [r3, #16]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d102      	bne.n	8010506 <f_open+0x22e>
 8010500:	2302      	movs	r3, #2
 8010502:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010506:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801050a:	2b00      	cmp	r3, #0
 801050c:	f040 80a3 	bne.w	8010656 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010514:	4611      	mov	r1, r2
 8010516:	4618      	mov	r0, r3
 8010518:	f7fe fd94 	bl	800f044 <ld_clust>
 801051c:	4602      	mov	r2, r0
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010524:	331c      	adds	r3, #28
 8010526:	4618      	mov	r0, r3
 8010528:	f7fd fd6e 	bl	800e008 <ld_dword>
 801052c:	4602      	mov	r2, r0
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2200      	movs	r2, #0
 8010536:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010538:	697a      	ldr	r2, [r7, #20]
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	88da      	ldrh	r2, [r3, #6]
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	79fa      	ldrb	r2, [r7, #7]
 801054a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2200      	movs	r2, #0
 8010550:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2200      	movs	r2, #0
 8010556:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2200      	movs	r2, #0
 801055c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	3330      	adds	r3, #48	; 0x30
 8010562:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010566:	2100      	movs	r1, #0
 8010568:	4618      	mov	r0, r3
 801056a:	f7fd fdd8 	bl	800e11e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801056e:	79fb      	ldrb	r3, [r7, #7]
 8010570:	f003 0320 	and.w	r3, r3, #32
 8010574:	2b00      	cmp	r3, #0
 8010576:	d06e      	beq.n	8010656 <f_open+0x37e>
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d06a      	beq.n	8010656 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	68da      	ldr	r2, [r3, #12]
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	895b      	ldrh	r3, [r3, #10]
 801058c:	461a      	mov	r2, r3
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	899b      	ldrh	r3, [r3, #12]
 8010592:	fb02 f303 	mul.w	r3, r2, r3
 8010596:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	689b      	ldr	r3, [r3, #8]
 801059c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	68db      	ldr	r3, [r3, #12]
 80105a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105a4:	e016      	b.n	80105d4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fe f881 	bl	800e6b2 <get_fat>
 80105b0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80105b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d802      	bhi.n	80105be <f_open+0x2e6>
 80105b8:	2302      	movs	r3, #2
 80105ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80105be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105c4:	d102      	bne.n	80105cc <f_open+0x2f4>
 80105c6:	2301      	movs	r3, #1
 80105c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80105cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80105ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105d0:	1ad3      	subs	r3, r2, r3
 80105d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d103      	bne.n	80105e4 <f_open+0x30c>
 80105dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80105de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d8e0      	bhi.n	80105a6 <f_open+0x2ce>
				}
				fp->clust = clst;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80105e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80105ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d131      	bne.n	8010656 <f_open+0x37e>
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	899b      	ldrh	r3, [r3, #12]
 80105f6:	461a      	mov	r2, r3
 80105f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80105fe:	fb01 f202 	mul.w	r2, r1, r2
 8010602:	1a9b      	subs	r3, r3, r2
 8010604:	2b00      	cmp	r3, #0
 8010606:	d026      	beq.n	8010656 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801060c:	4618      	mov	r0, r3
 801060e:	f7fe f831 	bl	800e674 <clust2sect>
 8010612:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010616:	2b00      	cmp	r3, #0
 8010618:	d103      	bne.n	8010622 <f_open+0x34a>
						res = FR_INT_ERR;
 801061a:	2302      	movs	r3, #2
 801061c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010620:	e019      	b.n	8010656 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	899b      	ldrh	r3, [r3, #12]
 8010626:	461a      	mov	r2, r3
 8010628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801062a:	fbb3 f2f2 	udiv	r2, r3, r2
 801062e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010630:	441a      	add	r2, r3
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010636:	697b      	ldr	r3, [r7, #20]
 8010638:	7858      	ldrb	r0, [r3, #1]
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	6a1a      	ldr	r2, [r3, #32]
 8010644:	2301      	movs	r3, #1
 8010646:	f7fd fc69 	bl	800df1c <disk_read>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <f_open+0x37e>
 8010650:	2301      	movs	r3, #1
 8010652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010656:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801065a:	2b00      	cmp	r3, #0
 801065c:	d002      	beq.n	8010664 <f_open+0x38c>
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2200      	movs	r2, #0
 8010662:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010664:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010668:	4618      	mov	r0, r3
 801066a:	3768      	adds	r7, #104	; 0x68
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b08e      	sub	sp, #56	; 0x38
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	607a      	str	r2, [r7, #4]
 801067c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	2200      	movs	r2, #0
 8010686:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f107 0214 	add.w	r2, r7, #20
 801068e:	4611      	mov	r1, r2
 8010690:	4618      	mov	r0, r3
 8010692:	f7ff fda5 	bl	80101e0 <validate>
 8010696:	4603      	mov	r3, r0
 8010698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801069c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d107      	bne.n	80106b4 <f_read+0x44>
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	7d5b      	ldrb	r3, [r3, #21]
 80106a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80106ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d002      	beq.n	80106ba <f_read+0x4a>
 80106b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106b8:	e135      	b.n	8010926 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	7d1b      	ldrb	r3, [r3, #20]
 80106be:	f003 0301 	and.w	r3, r3, #1
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d101      	bne.n	80106ca <f_read+0x5a>
 80106c6:	2307      	movs	r3, #7
 80106c8:	e12d      	b.n	8010926 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	68da      	ldr	r2, [r3, #12]
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	699b      	ldr	r3, [r3, #24]
 80106d2:	1ad3      	subs	r3, r2, r3
 80106d4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	6a3b      	ldr	r3, [r7, #32]
 80106da:	429a      	cmp	r2, r3
 80106dc:	f240 811e 	bls.w	801091c <f_read+0x2ac>
 80106e0:	6a3b      	ldr	r3, [r7, #32]
 80106e2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80106e4:	e11a      	b.n	801091c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	699b      	ldr	r3, [r3, #24]
 80106ea:	697a      	ldr	r2, [r7, #20]
 80106ec:	8992      	ldrh	r2, [r2, #12]
 80106ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80106f2:	fb01 f202 	mul.w	r2, r1, r2
 80106f6:	1a9b      	subs	r3, r3, r2
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f040 80d5 	bne.w	80108a8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	699b      	ldr	r3, [r3, #24]
 8010702:	697a      	ldr	r2, [r7, #20]
 8010704:	8992      	ldrh	r2, [r2, #12]
 8010706:	fbb3 f3f2 	udiv	r3, r3, r2
 801070a:	697a      	ldr	r2, [r7, #20]
 801070c:	8952      	ldrh	r2, [r2, #10]
 801070e:	3a01      	subs	r2, #1
 8010710:	4013      	ands	r3, r2
 8010712:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010714:	69fb      	ldr	r3, [r7, #28]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d12f      	bne.n	801077a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	699b      	ldr	r3, [r3, #24]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d103      	bne.n	801072a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	689b      	ldr	r3, [r3, #8]
 8010726:	633b      	str	r3, [r7, #48]	; 0x30
 8010728:	e013      	b.n	8010752 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801072e:	2b00      	cmp	r3, #0
 8010730:	d007      	beq.n	8010742 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	699b      	ldr	r3, [r3, #24]
 8010736:	4619      	mov	r1, r3
 8010738:	68f8      	ldr	r0, [r7, #12]
 801073a:	f7fe faa5 	bl	800ec88 <clmt_clust>
 801073e:	6338      	str	r0, [r7, #48]	; 0x30
 8010740:	e007      	b.n	8010752 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010742:	68fa      	ldr	r2, [r7, #12]
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	69db      	ldr	r3, [r3, #28]
 8010748:	4619      	mov	r1, r3
 801074a:	4610      	mov	r0, r2
 801074c:	f7fd ffb1 	bl	800e6b2 <get_fat>
 8010750:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010754:	2b01      	cmp	r3, #1
 8010756:	d804      	bhi.n	8010762 <f_read+0xf2>
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2202      	movs	r2, #2
 801075c:	755a      	strb	r2, [r3, #21]
 801075e:	2302      	movs	r3, #2
 8010760:	e0e1      	b.n	8010926 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010768:	d104      	bne.n	8010774 <f_read+0x104>
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2201      	movs	r2, #1
 801076e:	755a      	strb	r2, [r3, #21]
 8010770:	2301      	movs	r3, #1
 8010772:	e0d8      	b.n	8010926 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010778:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801077a:	697a      	ldr	r2, [r7, #20]
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	69db      	ldr	r3, [r3, #28]
 8010780:	4619      	mov	r1, r3
 8010782:	4610      	mov	r0, r2
 8010784:	f7fd ff76 	bl	800e674 <clust2sect>
 8010788:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d104      	bne.n	801079a <f_read+0x12a>
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2202      	movs	r2, #2
 8010794:	755a      	strb	r2, [r3, #21]
 8010796:	2302      	movs	r3, #2
 8010798:	e0c5      	b.n	8010926 <f_read+0x2b6>
			sect += csect;
 801079a:	69ba      	ldr	r2, [r7, #24]
 801079c:	69fb      	ldr	r3, [r7, #28]
 801079e:	4413      	add	r3, r2
 80107a0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	899b      	ldrh	r3, [r3, #12]
 80107a6:	461a      	mov	r2, r3
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80107ae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80107b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d041      	beq.n	801083a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80107b6:	69fa      	ldr	r2, [r7, #28]
 80107b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ba:	4413      	add	r3, r2
 80107bc:	697a      	ldr	r2, [r7, #20]
 80107be:	8952      	ldrh	r2, [r2, #10]
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d905      	bls.n	80107d0 <f_read+0x160>
					cc = fs->csize - csect;
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	895b      	ldrh	r3, [r3, #10]
 80107c8:	461a      	mov	r2, r3
 80107ca:	69fb      	ldr	r3, [r7, #28]
 80107cc:	1ad3      	subs	r3, r2, r3
 80107ce:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	7858      	ldrb	r0, [r3, #1]
 80107d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d6:	69ba      	ldr	r2, [r7, #24]
 80107d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80107da:	f7fd fb9f 	bl	800df1c <disk_read>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d004      	beq.n	80107ee <f_read+0x17e>
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2201      	movs	r2, #1
 80107e8:	755a      	strb	r2, [r3, #21]
 80107ea:	2301      	movs	r3, #1
 80107ec:	e09b      	b.n	8010926 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	7d1b      	ldrb	r3, [r3, #20]
 80107f2:	b25b      	sxtb	r3, r3
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	da18      	bge.n	801082a <f_read+0x1ba>
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	6a1a      	ldr	r2, [r3, #32]
 80107fc:	69bb      	ldr	r3, [r7, #24]
 80107fe:	1ad3      	subs	r3, r2, r3
 8010800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010802:	429a      	cmp	r2, r3
 8010804:	d911      	bls.n	801082a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	6a1a      	ldr	r2, [r3, #32]
 801080a:	69bb      	ldr	r3, [r7, #24]
 801080c:	1ad3      	subs	r3, r2, r3
 801080e:	697a      	ldr	r2, [r7, #20]
 8010810:	8992      	ldrh	r2, [r2, #12]
 8010812:	fb02 f303 	mul.w	r3, r2, r3
 8010816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010818:	18d0      	adds	r0, r2, r3
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	899b      	ldrh	r3, [r3, #12]
 8010824:	461a      	mov	r2, r3
 8010826:	f7fd fc59 	bl	800e0dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	899b      	ldrh	r3, [r3, #12]
 801082e:	461a      	mov	r2, r3
 8010830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010832:	fb02 f303 	mul.w	r3, r2, r3
 8010836:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010838:	e05c      	b.n	80108f4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	6a1b      	ldr	r3, [r3, #32]
 801083e:	69ba      	ldr	r2, [r7, #24]
 8010840:	429a      	cmp	r2, r3
 8010842:	d02e      	beq.n	80108a2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	7d1b      	ldrb	r3, [r3, #20]
 8010848:	b25b      	sxtb	r3, r3
 801084a:	2b00      	cmp	r3, #0
 801084c:	da18      	bge.n	8010880 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	7858      	ldrb	r0, [r3, #1]
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	6a1a      	ldr	r2, [r3, #32]
 801085c:	2301      	movs	r3, #1
 801085e:	f7fd fb7d 	bl	800df5c <disk_write>
 8010862:	4603      	mov	r3, r0
 8010864:	2b00      	cmp	r3, #0
 8010866:	d004      	beq.n	8010872 <f_read+0x202>
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2201      	movs	r2, #1
 801086c:	755a      	strb	r2, [r3, #21]
 801086e:	2301      	movs	r3, #1
 8010870:	e059      	b.n	8010926 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	7d1b      	ldrb	r3, [r3, #20]
 8010876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801087a:	b2da      	uxtb	r2, r3
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	7858      	ldrb	r0, [r3, #1]
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801088a:	2301      	movs	r3, #1
 801088c:	69ba      	ldr	r2, [r7, #24]
 801088e:	f7fd fb45 	bl	800df1c <disk_read>
 8010892:	4603      	mov	r3, r0
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <f_read+0x232>
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2201      	movs	r2, #1
 801089c:	755a      	strb	r2, [r3, #21]
 801089e:	2301      	movs	r3, #1
 80108a0:	e041      	b.n	8010926 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	69ba      	ldr	r2, [r7, #24]
 80108a6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80108a8:	697b      	ldr	r3, [r7, #20]
 80108aa:	899b      	ldrh	r3, [r3, #12]
 80108ac:	4618      	mov	r0, r3
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	699b      	ldr	r3, [r3, #24]
 80108b2:	697a      	ldr	r2, [r7, #20]
 80108b4:	8992      	ldrh	r2, [r2, #12]
 80108b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80108ba:	fb01 f202 	mul.w	r2, r1, r2
 80108be:	1a9b      	subs	r3, r3, r2
 80108c0:	1ac3      	subs	r3, r0, r3
 80108c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80108c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d901      	bls.n	80108d0 <f_read+0x260>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	699b      	ldr	r3, [r3, #24]
 80108da:	697a      	ldr	r2, [r7, #20]
 80108dc:	8992      	ldrh	r2, [r2, #12]
 80108de:	fbb3 f0f2 	udiv	r0, r3, r2
 80108e2:	fb00 f202 	mul.w	r2, r0, r2
 80108e6:	1a9b      	subs	r3, r3, r2
 80108e8:	440b      	add	r3, r1
 80108ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108ec:	4619      	mov	r1, r3
 80108ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108f0:	f7fd fbf4 	bl	800e0dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80108f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f8:	4413      	add	r3, r2
 80108fa:	627b      	str	r3, [r7, #36]	; 0x24
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	699a      	ldr	r2, [r3, #24]
 8010900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010902:	441a      	add	r2, r3
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	619a      	str	r2, [r3, #24]
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090e:	441a      	add	r2, r3
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	601a      	str	r2, [r3, #0]
 8010914:	687a      	ldr	r2, [r7, #4]
 8010916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010918:	1ad3      	subs	r3, r2, r3
 801091a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2b00      	cmp	r3, #0
 8010920:	f47f aee1 	bne.w	80106e6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010924:	2300      	movs	r3, #0
}
 8010926:	4618      	mov	r0, r3
 8010928:	3738      	adds	r7, #56	; 0x38
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801092e:	b580      	push	{r7, lr}
 8010930:	b086      	sub	sp, #24
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f107 0208 	add.w	r2, r7, #8
 801093c:	4611      	mov	r1, r2
 801093e:	4618      	mov	r0, r3
 8010940:	f7ff fc4e 	bl	80101e0 <validate>
 8010944:	4603      	mov	r3, r0
 8010946:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010948:	7dfb      	ldrb	r3, [r7, #23]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d168      	bne.n	8010a20 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	7d1b      	ldrb	r3, [r3, #20]
 8010952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010956:	2b00      	cmp	r3, #0
 8010958:	d062      	beq.n	8010a20 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	7d1b      	ldrb	r3, [r3, #20]
 801095e:	b25b      	sxtb	r3, r3
 8010960:	2b00      	cmp	r3, #0
 8010962:	da15      	bge.n	8010990 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	7858      	ldrb	r0, [r3, #1]
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6a1a      	ldr	r2, [r3, #32]
 8010972:	2301      	movs	r3, #1
 8010974:	f7fd faf2 	bl	800df5c <disk_write>
 8010978:	4603      	mov	r3, r0
 801097a:	2b00      	cmp	r3, #0
 801097c:	d001      	beq.n	8010982 <f_sync+0x54>
 801097e:	2301      	movs	r3, #1
 8010980:	e04f      	b.n	8010a22 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	7d1b      	ldrb	r3, [r3, #20]
 8010986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801098a:	b2da      	uxtb	r2, r3
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010990:	f7fd f918 	bl	800dbc4 <get_fattime>
 8010994:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010996:	68ba      	ldr	r2, [r7, #8]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801099c:	4619      	mov	r1, r3
 801099e:	4610      	mov	r0, r2
 80109a0:	f7fd fdca 	bl	800e538 <move_window>
 80109a4:	4603      	mov	r3, r0
 80109a6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80109a8:	7dfb      	ldrb	r3, [r7, #23]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d138      	bne.n	8010a20 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109b2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	330b      	adds	r3, #11
 80109b8:	781a      	ldrb	r2, [r3, #0]
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	330b      	adds	r3, #11
 80109be:	f042 0220 	orr.w	r2, r2, #32
 80109c2:	b2d2      	uxtb	r2, r2
 80109c4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6818      	ldr	r0, [r3, #0]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	689b      	ldr	r3, [r3, #8]
 80109ce:	461a      	mov	r2, r3
 80109d0:	68f9      	ldr	r1, [r7, #12]
 80109d2:	f7fe fb56 	bl	800f082 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f103 021c 	add.w	r2, r3, #28
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	4619      	mov	r1, r3
 80109e2:	4610      	mov	r0, r2
 80109e4:	f7fd fb4e 	bl	800e084 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	3316      	adds	r3, #22
 80109ec:	6939      	ldr	r1, [r7, #16]
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7fd fb48 	bl	800e084 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	3312      	adds	r3, #18
 80109f8:	2100      	movs	r1, #0
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7fd fb27 	bl	800e04e <st_word>
					fs->wflag = 1;
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	2201      	movs	r2, #1
 8010a04:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7fd fdc3 	bl	800e594 <sync_fs>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	7d1b      	ldrb	r3, [r3, #20]
 8010a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a1a:	b2da      	uxtb	r2, r3
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3718      	adds	r7, #24
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b084      	sub	sp, #16
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f7ff ff7b 	bl	801092e <f_sync>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010a3c:	7bfb      	ldrb	r3, [r7, #15]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d118      	bne.n	8010a74 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f107 0208 	add.w	r2, r7, #8
 8010a48:	4611      	mov	r1, r2
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7ff fbc8 	bl	80101e0 <validate>
 8010a50:	4603      	mov	r3, r0
 8010a52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010a54:	7bfb      	ldrb	r3, [r7, #15]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d10c      	bne.n	8010a74 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	691b      	ldr	r3, [r3, #16]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7fd fcc6 	bl	800e3f0 <dec_lock>
 8010a64:	4603      	mov	r3, r0
 8010a66:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010a68:	7bfb      	ldrb	r3, [r7, #15]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d102      	bne.n	8010a74 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2200      	movs	r2, #0
 8010a72:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3710      	adds	r7, #16
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}

08010a7e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010a7e:	b580      	push	{r7, lr}
 8010a80:	b088      	sub	sp, #32
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	60f8      	str	r0, [r7, #12]
 8010a86:	60b9      	str	r1, [r7, #8]
 8010a88:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010a92:	e01b      	b.n	8010acc <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8010a94:	f107 0310 	add.w	r3, r7, #16
 8010a98:	f107 0114 	add.w	r1, r7, #20
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f7ff fde6 	bl	8010670 <f_read>
		if (rc != 1) break;
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d116      	bne.n	8010ad8 <f_gets+0x5a>
		c = s[0];
 8010aaa:	7d3b      	ldrb	r3, [r7, #20]
 8010aac:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8010aae:	7dfb      	ldrb	r3, [r7, #23]
 8010ab0:	2b0d      	cmp	r3, #13
 8010ab2:	d100      	bne.n	8010ab6 <f_gets+0x38>
 8010ab4:	e00a      	b.n	8010acc <f_gets+0x4e>
		*p++ = c;
 8010ab6:	69bb      	ldr	r3, [r7, #24]
 8010ab8:	1c5a      	adds	r2, r3, #1
 8010aba:	61ba      	str	r2, [r7, #24]
 8010abc:	7dfa      	ldrb	r2, [r7, #23]
 8010abe:	701a      	strb	r2, [r3, #0]
		n++;
 8010ac0:	69fb      	ldr	r3, [r7, #28]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8010ac6:	7dfb      	ldrb	r3, [r7, #23]
 8010ac8:	2b0a      	cmp	r3, #10
 8010aca:	d007      	beq.n	8010adc <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	3b01      	subs	r3, #1
 8010ad0:	69fa      	ldr	r2, [r7, #28]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	dbde      	blt.n	8010a94 <f_gets+0x16>
 8010ad6:	e002      	b.n	8010ade <f_gets+0x60>
		if (rc != 1) break;
 8010ad8:	bf00      	nop
 8010ada:	e000      	b.n	8010ade <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8010adc:	bf00      	nop
	}
	*p = 0;
 8010ade:	69bb      	ldr	r3, [r7, #24]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8010ae4:	69fb      	ldr	r3, [r7, #28]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d001      	beq.n	8010aee <f_gets+0x70>
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	e000      	b.n	8010af0 <f_gets+0x72>
 8010aee:	2300      	movs	r3, #0
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3720      	adds	r7, #32
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b087      	sub	sp, #28
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	4613      	mov	r3, r2
 8010b04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010b06:	2301      	movs	r3, #1
 8010b08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010b0e:	4b1f      	ldr	r3, [pc, #124]	; (8010b8c <FATFS_LinkDriverEx+0x94>)
 8010b10:	7a5b      	ldrb	r3, [r3, #9]
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d131      	bne.n	8010b7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010b18:	4b1c      	ldr	r3, [pc, #112]	; (8010b8c <FATFS_LinkDriverEx+0x94>)
 8010b1a:	7a5b      	ldrb	r3, [r3, #9]
 8010b1c:	b2db      	uxtb	r3, r3
 8010b1e:	461a      	mov	r2, r3
 8010b20:	4b1a      	ldr	r3, [pc, #104]	; (8010b8c <FATFS_LinkDriverEx+0x94>)
 8010b22:	2100      	movs	r1, #0
 8010b24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010b26:	4b19      	ldr	r3, [pc, #100]	; (8010b8c <FATFS_LinkDriverEx+0x94>)
 8010b28:	7a5b      	ldrb	r3, [r3, #9]
 8010b2a:	b2db      	uxtb	r3, r3
 8010b2c:	4a17      	ldr	r2, [pc, #92]	; (8010b8c <FATFS_LinkDriverEx+0x94>)
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	4413      	add	r3, r2
 8010b32:	68fa      	ldr	r2, [r7, #12]
 8010b34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010b36:	4b15      	ldr	r3, [pc, #84]	; (8010b8c <FATFS_LinkDriverEx+0x94>)
 8010b38:	7a5b      	ldrb	r3, [r3, #9]
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	4b13      	ldr	r3, [pc, #76]	; (8010b8c <FATFS_LinkDriverEx+0x94>)
 8010b40:	4413      	add	r3, r2
 8010b42:	79fa      	ldrb	r2, [r7, #7]
 8010b44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010b46:	4b11      	ldr	r3, [pc, #68]	; (8010b8c <FATFS_LinkDriverEx+0x94>)
 8010b48:	7a5b      	ldrb	r3, [r3, #9]
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	1c5a      	adds	r2, r3, #1
 8010b4e:	b2d1      	uxtb	r1, r2
 8010b50:	4a0e      	ldr	r2, [pc, #56]	; (8010b8c <FATFS_LinkDriverEx+0x94>)
 8010b52:	7251      	strb	r1, [r2, #9]
 8010b54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010b56:	7dbb      	ldrb	r3, [r7, #22]
 8010b58:	3330      	adds	r3, #48	; 0x30
 8010b5a:	b2da      	uxtb	r2, r3
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	3301      	adds	r3, #1
 8010b64:	223a      	movs	r2, #58	; 0x3a
 8010b66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	3302      	adds	r3, #2
 8010b6c:	222f      	movs	r2, #47	; 0x2f
 8010b6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	3303      	adds	r3, #3
 8010b74:	2200      	movs	r2, #0
 8010b76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	371c      	adds	r7, #28
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop
 8010b8c:	20002d18 	.word	0x20002d18

08010b90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	6839      	ldr	r1, [r7, #0]
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f7ff ffaa 	bl	8010af8 <FATFS_LinkDriverEx>
 8010ba4:	4603      	mov	r3, r0
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3708      	adds	r7, #8
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
	...

08010bb0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	b085      	sub	sp, #20
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	6039      	str	r1, [r7, #0]
 8010bba:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010bbc:	88fb      	ldrh	r3, [r7, #6]
 8010bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8010bc0:	d802      	bhi.n	8010bc8 <ff_convert+0x18>
		c = chr;
 8010bc2:	88fb      	ldrh	r3, [r7, #6]
 8010bc4:	81fb      	strh	r3, [r7, #14]
 8010bc6:	e025      	b.n	8010c14 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d00b      	beq.n	8010be6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010bce:	88fb      	ldrh	r3, [r7, #6]
 8010bd0:	2bff      	cmp	r3, #255	; 0xff
 8010bd2:	d805      	bhi.n	8010be0 <ff_convert+0x30>
 8010bd4:	88fb      	ldrh	r3, [r7, #6]
 8010bd6:	3b80      	subs	r3, #128	; 0x80
 8010bd8:	4a12      	ldr	r2, [pc, #72]	; (8010c24 <ff_convert+0x74>)
 8010bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bde:	e000      	b.n	8010be2 <ff_convert+0x32>
 8010be0:	2300      	movs	r3, #0
 8010be2:	81fb      	strh	r3, [r7, #14]
 8010be4:	e016      	b.n	8010c14 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010be6:	2300      	movs	r3, #0
 8010be8:	81fb      	strh	r3, [r7, #14]
 8010bea:	e009      	b.n	8010c00 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010bec:	89fb      	ldrh	r3, [r7, #14]
 8010bee:	4a0d      	ldr	r2, [pc, #52]	; (8010c24 <ff_convert+0x74>)
 8010bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bf4:	88fa      	ldrh	r2, [r7, #6]
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	d006      	beq.n	8010c08 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010bfa:	89fb      	ldrh	r3, [r7, #14]
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	81fb      	strh	r3, [r7, #14]
 8010c00:	89fb      	ldrh	r3, [r7, #14]
 8010c02:	2b7f      	cmp	r3, #127	; 0x7f
 8010c04:	d9f2      	bls.n	8010bec <ff_convert+0x3c>
 8010c06:	e000      	b.n	8010c0a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010c08:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010c0a:	89fb      	ldrh	r3, [r7, #14]
 8010c0c:	3380      	adds	r3, #128	; 0x80
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010c14:	89fb      	ldrh	r3, [r7, #14]
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3714      	adds	r7, #20
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr
 8010c22:	bf00      	nop
 8010c24:	0801510c 	.word	0x0801510c

08010c28 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b087      	sub	sp, #28
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	4603      	mov	r3, r0
 8010c30:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010c32:	88fb      	ldrh	r3, [r7, #6]
 8010c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c38:	d201      	bcs.n	8010c3e <ff_wtoupper+0x16>
 8010c3a:	4b3e      	ldr	r3, [pc, #248]	; (8010d34 <ff_wtoupper+0x10c>)
 8010c3c:	e000      	b.n	8010c40 <ff_wtoupper+0x18>
 8010c3e:	4b3e      	ldr	r3, [pc, #248]	; (8010d38 <ff_wtoupper+0x110>)
 8010c40:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	1c9a      	adds	r2, r3, #2
 8010c46:	617a      	str	r2, [r7, #20]
 8010c48:	881b      	ldrh	r3, [r3, #0]
 8010c4a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010c4c:	8a7b      	ldrh	r3, [r7, #18]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d068      	beq.n	8010d24 <ff_wtoupper+0xfc>
 8010c52:	88fa      	ldrh	r2, [r7, #6]
 8010c54:	8a7b      	ldrh	r3, [r7, #18]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d364      	bcc.n	8010d24 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	1c9a      	adds	r2, r3, #2
 8010c5e:	617a      	str	r2, [r7, #20]
 8010c60:	881b      	ldrh	r3, [r3, #0]
 8010c62:	823b      	strh	r3, [r7, #16]
 8010c64:	8a3b      	ldrh	r3, [r7, #16]
 8010c66:	0a1b      	lsrs	r3, r3, #8
 8010c68:	81fb      	strh	r3, [r7, #14]
 8010c6a:	8a3b      	ldrh	r3, [r7, #16]
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010c70:	88fa      	ldrh	r2, [r7, #6]
 8010c72:	8a79      	ldrh	r1, [r7, #18]
 8010c74:	8a3b      	ldrh	r3, [r7, #16]
 8010c76:	440b      	add	r3, r1
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	da49      	bge.n	8010d10 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010c7c:	89fb      	ldrh	r3, [r7, #14]
 8010c7e:	2b08      	cmp	r3, #8
 8010c80:	d84f      	bhi.n	8010d22 <ff_wtoupper+0xfa>
 8010c82:	a201      	add	r2, pc, #4	; (adr r2, 8010c88 <ff_wtoupper+0x60>)
 8010c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c88:	08010cad 	.word	0x08010cad
 8010c8c:	08010cbf 	.word	0x08010cbf
 8010c90:	08010cd5 	.word	0x08010cd5
 8010c94:	08010cdd 	.word	0x08010cdd
 8010c98:	08010ce5 	.word	0x08010ce5
 8010c9c:	08010ced 	.word	0x08010ced
 8010ca0:	08010cf5 	.word	0x08010cf5
 8010ca4:	08010cfd 	.word	0x08010cfd
 8010ca8:	08010d05 	.word	0x08010d05
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010cac:	88fa      	ldrh	r2, [r7, #6]
 8010cae:	8a7b      	ldrh	r3, [r7, #18]
 8010cb0:	1ad3      	subs	r3, r2, r3
 8010cb2:	005b      	lsls	r3, r3, #1
 8010cb4:	697a      	ldr	r2, [r7, #20]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	881b      	ldrh	r3, [r3, #0]
 8010cba:	80fb      	strh	r3, [r7, #6]
 8010cbc:	e027      	b.n	8010d0e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010cbe:	88fa      	ldrh	r2, [r7, #6]
 8010cc0:	8a7b      	ldrh	r3, [r7, #18]
 8010cc2:	1ad3      	subs	r3, r2, r3
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	f003 0301 	and.w	r3, r3, #1
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	88fa      	ldrh	r2, [r7, #6]
 8010cce:	1ad3      	subs	r3, r2, r3
 8010cd0:	80fb      	strh	r3, [r7, #6]
 8010cd2:	e01c      	b.n	8010d0e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010cd4:	88fb      	ldrh	r3, [r7, #6]
 8010cd6:	3b10      	subs	r3, #16
 8010cd8:	80fb      	strh	r3, [r7, #6]
 8010cda:	e018      	b.n	8010d0e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010cdc:	88fb      	ldrh	r3, [r7, #6]
 8010cde:	3b20      	subs	r3, #32
 8010ce0:	80fb      	strh	r3, [r7, #6]
 8010ce2:	e014      	b.n	8010d0e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010ce4:	88fb      	ldrh	r3, [r7, #6]
 8010ce6:	3b30      	subs	r3, #48	; 0x30
 8010ce8:	80fb      	strh	r3, [r7, #6]
 8010cea:	e010      	b.n	8010d0e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010cec:	88fb      	ldrh	r3, [r7, #6]
 8010cee:	3b1a      	subs	r3, #26
 8010cf0:	80fb      	strh	r3, [r7, #6]
 8010cf2:	e00c      	b.n	8010d0e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010cf4:	88fb      	ldrh	r3, [r7, #6]
 8010cf6:	3308      	adds	r3, #8
 8010cf8:	80fb      	strh	r3, [r7, #6]
 8010cfa:	e008      	b.n	8010d0e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010cfc:	88fb      	ldrh	r3, [r7, #6]
 8010cfe:	3b50      	subs	r3, #80	; 0x50
 8010d00:	80fb      	strh	r3, [r7, #6]
 8010d02:	e004      	b.n	8010d0e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010d04:	88fb      	ldrh	r3, [r7, #6]
 8010d06:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010d0a:	80fb      	strh	r3, [r7, #6]
 8010d0c:	bf00      	nop
			}
			break;
 8010d0e:	e008      	b.n	8010d22 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010d10:	89fb      	ldrh	r3, [r7, #14]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d195      	bne.n	8010c42 <ff_wtoupper+0x1a>
 8010d16:	8a3b      	ldrh	r3, [r7, #16]
 8010d18:	005b      	lsls	r3, r3, #1
 8010d1a:	697a      	ldr	r2, [r7, #20]
 8010d1c:	4413      	add	r3, r2
 8010d1e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010d20:	e78f      	b.n	8010c42 <ff_wtoupper+0x1a>
			break;
 8010d22:	bf00      	nop
	}

	return chr;
 8010d24:	88fb      	ldrh	r3, [r7, #6]
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	371c      	adds	r7, #28
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr
 8010d32:	bf00      	nop
 8010d34:	0801520c 	.word	0x0801520c
 8010d38:	08015400 	.word	0x08015400

08010d3c <__assert_func>:
 8010d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d3e:	4614      	mov	r4, r2
 8010d40:	461a      	mov	r2, r3
 8010d42:	4b09      	ldr	r3, [pc, #36]	; (8010d68 <__assert_func+0x2c>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	4605      	mov	r5, r0
 8010d48:	68d8      	ldr	r0, [r3, #12]
 8010d4a:	b14c      	cbz	r4, 8010d60 <__assert_func+0x24>
 8010d4c:	4b07      	ldr	r3, [pc, #28]	; (8010d6c <__assert_func+0x30>)
 8010d4e:	9100      	str	r1, [sp, #0]
 8010d50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d54:	4906      	ldr	r1, [pc, #24]	; (8010d70 <__assert_func+0x34>)
 8010d56:	462b      	mov	r3, r5
 8010d58:	f000 f8a0 	bl	8010e9c <fiprintf>
 8010d5c:	f000 f9a2 	bl	80110a4 <abort>
 8010d60:	4b04      	ldr	r3, [pc, #16]	; (8010d74 <__assert_func+0x38>)
 8010d62:	461c      	mov	r4, r3
 8010d64:	e7f3      	b.n	8010d4e <__assert_func+0x12>
 8010d66:	bf00      	nop
 8010d68:	200004a8 	.word	0x200004a8
 8010d6c:	080154bc 	.word	0x080154bc
 8010d70:	080154c9 	.word	0x080154c9
 8010d74:	080154f7 	.word	0x080154f7

08010d78 <std>:
 8010d78:	2300      	movs	r3, #0
 8010d7a:	b510      	push	{r4, lr}
 8010d7c:	4604      	mov	r4, r0
 8010d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8010d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d86:	6083      	str	r3, [r0, #8]
 8010d88:	8181      	strh	r1, [r0, #12]
 8010d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8010d8c:	81c2      	strh	r2, [r0, #14]
 8010d8e:	6183      	str	r3, [r0, #24]
 8010d90:	4619      	mov	r1, r3
 8010d92:	2208      	movs	r2, #8
 8010d94:	305c      	adds	r0, #92	; 0x5c
 8010d96:	f000 f8f4 	bl	8010f82 <memset>
 8010d9a:	4b05      	ldr	r3, [pc, #20]	; (8010db0 <std+0x38>)
 8010d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8010d9e:	4b05      	ldr	r3, [pc, #20]	; (8010db4 <std+0x3c>)
 8010da0:	62a3      	str	r3, [r4, #40]	; 0x28
 8010da2:	4b05      	ldr	r3, [pc, #20]	; (8010db8 <std+0x40>)
 8010da4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010da6:	4b05      	ldr	r3, [pc, #20]	; (8010dbc <std+0x44>)
 8010da8:	6224      	str	r4, [r4, #32]
 8010daa:	6323      	str	r3, [r4, #48]	; 0x30
 8010dac:	bd10      	pop	{r4, pc}
 8010dae:	bf00      	nop
 8010db0:	08010efd 	.word	0x08010efd
 8010db4:	08010f1f 	.word	0x08010f1f
 8010db8:	08010f57 	.word	0x08010f57
 8010dbc:	08010f7b 	.word	0x08010f7b

08010dc0 <stdio_exit_handler>:
 8010dc0:	4a02      	ldr	r2, [pc, #8]	; (8010dcc <stdio_exit_handler+0xc>)
 8010dc2:	4903      	ldr	r1, [pc, #12]	; (8010dd0 <stdio_exit_handler+0x10>)
 8010dc4:	4803      	ldr	r0, [pc, #12]	; (8010dd4 <stdio_exit_handler+0x14>)
 8010dc6:	f000 b87b 	b.w	8010ec0 <_fwalk_sglue>
 8010dca:	bf00      	nop
 8010dcc:	20000450 	.word	0x20000450
 8010dd0:	08011959 	.word	0x08011959
 8010dd4:	2000045c 	.word	0x2000045c

08010dd8 <cleanup_stdio>:
 8010dd8:	6841      	ldr	r1, [r0, #4]
 8010dda:	4b0c      	ldr	r3, [pc, #48]	; (8010e0c <cleanup_stdio+0x34>)
 8010ddc:	4299      	cmp	r1, r3
 8010dde:	b510      	push	{r4, lr}
 8010de0:	4604      	mov	r4, r0
 8010de2:	d001      	beq.n	8010de8 <cleanup_stdio+0x10>
 8010de4:	f000 fdb8 	bl	8011958 <_fflush_r>
 8010de8:	68a1      	ldr	r1, [r4, #8]
 8010dea:	4b09      	ldr	r3, [pc, #36]	; (8010e10 <cleanup_stdio+0x38>)
 8010dec:	4299      	cmp	r1, r3
 8010dee:	d002      	beq.n	8010df6 <cleanup_stdio+0x1e>
 8010df0:	4620      	mov	r0, r4
 8010df2:	f000 fdb1 	bl	8011958 <_fflush_r>
 8010df6:	68e1      	ldr	r1, [r4, #12]
 8010df8:	4b06      	ldr	r3, [pc, #24]	; (8010e14 <cleanup_stdio+0x3c>)
 8010dfa:	4299      	cmp	r1, r3
 8010dfc:	d004      	beq.n	8010e08 <cleanup_stdio+0x30>
 8010dfe:	4620      	mov	r0, r4
 8010e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e04:	f000 bda8 	b.w	8011958 <_fflush_r>
 8010e08:	bd10      	pop	{r4, pc}
 8010e0a:	bf00      	nop
 8010e0c:	20002d24 	.word	0x20002d24
 8010e10:	20002d8c 	.word	0x20002d8c
 8010e14:	20002df4 	.word	0x20002df4

08010e18 <global_stdio_init.part.0>:
 8010e18:	b510      	push	{r4, lr}
 8010e1a:	4b0b      	ldr	r3, [pc, #44]	; (8010e48 <global_stdio_init.part.0+0x30>)
 8010e1c:	4c0b      	ldr	r4, [pc, #44]	; (8010e4c <global_stdio_init.part.0+0x34>)
 8010e1e:	4a0c      	ldr	r2, [pc, #48]	; (8010e50 <global_stdio_init.part.0+0x38>)
 8010e20:	601a      	str	r2, [r3, #0]
 8010e22:	4620      	mov	r0, r4
 8010e24:	2200      	movs	r2, #0
 8010e26:	2104      	movs	r1, #4
 8010e28:	f7ff ffa6 	bl	8010d78 <std>
 8010e2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010e30:	2201      	movs	r2, #1
 8010e32:	2109      	movs	r1, #9
 8010e34:	f7ff ffa0 	bl	8010d78 <std>
 8010e38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010e3c:	2202      	movs	r2, #2
 8010e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e42:	2112      	movs	r1, #18
 8010e44:	f7ff bf98 	b.w	8010d78 <std>
 8010e48:	20002e5c 	.word	0x20002e5c
 8010e4c:	20002d24 	.word	0x20002d24
 8010e50:	08010dc1 	.word	0x08010dc1

08010e54 <__sfp_lock_acquire>:
 8010e54:	4801      	ldr	r0, [pc, #4]	; (8010e5c <__sfp_lock_acquire+0x8>)
 8010e56:	f000 b90d 	b.w	8011074 <__retarget_lock_acquire_recursive>
 8010e5a:	bf00      	nop
 8010e5c:	20002e65 	.word	0x20002e65

08010e60 <__sfp_lock_release>:
 8010e60:	4801      	ldr	r0, [pc, #4]	; (8010e68 <__sfp_lock_release+0x8>)
 8010e62:	f000 b908 	b.w	8011076 <__retarget_lock_release_recursive>
 8010e66:	bf00      	nop
 8010e68:	20002e65 	.word	0x20002e65

08010e6c <__sinit>:
 8010e6c:	b510      	push	{r4, lr}
 8010e6e:	4604      	mov	r4, r0
 8010e70:	f7ff fff0 	bl	8010e54 <__sfp_lock_acquire>
 8010e74:	6a23      	ldr	r3, [r4, #32]
 8010e76:	b11b      	cbz	r3, 8010e80 <__sinit+0x14>
 8010e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e7c:	f7ff bff0 	b.w	8010e60 <__sfp_lock_release>
 8010e80:	4b04      	ldr	r3, [pc, #16]	; (8010e94 <__sinit+0x28>)
 8010e82:	6223      	str	r3, [r4, #32]
 8010e84:	4b04      	ldr	r3, [pc, #16]	; (8010e98 <__sinit+0x2c>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d1f5      	bne.n	8010e78 <__sinit+0xc>
 8010e8c:	f7ff ffc4 	bl	8010e18 <global_stdio_init.part.0>
 8010e90:	e7f2      	b.n	8010e78 <__sinit+0xc>
 8010e92:	bf00      	nop
 8010e94:	08010dd9 	.word	0x08010dd9
 8010e98:	20002e5c 	.word	0x20002e5c

08010e9c <fiprintf>:
 8010e9c:	b40e      	push	{r1, r2, r3}
 8010e9e:	b503      	push	{r0, r1, lr}
 8010ea0:	4601      	mov	r1, r0
 8010ea2:	ab03      	add	r3, sp, #12
 8010ea4:	4805      	ldr	r0, [pc, #20]	; (8010ebc <fiprintf+0x20>)
 8010ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eaa:	6800      	ldr	r0, [r0, #0]
 8010eac:	9301      	str	r3, [sp, #4]
 8010eae:	f000 fa23 	bl	80112f8 <_vfiprintf_r>
 8010eb2:	b002      	add	sp, #8
 8010eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010eb8:	b003      	add	sp, #12
 8010eba:	4770      	bx	lr
 8010ebc:	200004a8 	.word	0x200004a8

08010ec0 <_fwalk_sglue>:
 8010ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ec4:	4607      	mov	r7, r0
 8010ec6:	4688      	mov	r8, r1
 8010ec8:	4614      	mov	r4, r2
 8010eca:	2600      	movs	r6, #0
 8010ecc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ed0:	f1b9 0901 	subs.w	r9, r9, #1
 8010ed4:	d505      	bpl.n	8010ee2 <_fwalk_sglue+0x22>
 8010ed6:	6824      	ldr	r4, [r4, #0]
 8010ed8:	2c00      	cmp	r4, #0
 8010eda:	d1f7      	bne.n	8010ecc <_fwalk_sglue+0xc>
 8010edc:	4630      	mov	r0, r6
 8010ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ee2:	89ab      	ldrh	r3, [r5, #12]
 8010ee4:	2b01      	cmp	r3, #1
 8010ee6:	d907      	bls.n	8010ef8 <_fwalk_sglue+0x38>
 8010ee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010eec:	3301      	adds	r3, #1
 8010eee:	d003      	beq.n	8010ef8 <_fwalk_sglue+0x38>
 8010ef0:	4629      	mov	r1, r5
 8010ef2:	4638      	mov	r0, r7
 8010ef4:	47c0      	blx	r8
 8010ef6:	4306      	orrs	r6, r0
 8010ef8:	3568      	adds	r5, #104	; 0x68
 8010efa:	e7e9      	b.n	8010ed0 <_fwalk_sglue+0x10>

08010efc <__sread>:
 8010efc:	b510      	push	{r4, lr}
 8010efe:	460c      	mov	r4, r1
 8010f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f04:	f000 f868 	bl	8010fd8 <_read_r>
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	bfab      	itete	ge
 8010f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8010f10:	181b      	addge	r3, r3, r0
 8010f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f16:	bfac      	ite	ge
 8010f18:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f1a:	81a3      	strhlt	r3, [r4, #12]
 8010f1c:	bd10      	pop	{r4, pc}

08010f1e <__swrite>:
 8010f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f22:	461f      	mov	r7, r3
 8010f24:	898b      	ldrh	r3, [r1, #12]
 8010f26:	05db      	lsls	r3, r3, #23
 8010f28:	4605      	mov	r5, r0
 8010f2a:	460c      	mov	r4, r1
 8010f2c:	4616      	mov	r6, r2
 8010f2e:	d505      	bpl.n	8010f3c <__swrite+0x1e>
 8010f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f34:	2302      	movs	r3, #2
 8010f36:	2200      	movs	r2, #0
 8010f38:	f000 f83c 	bl	8010fb4 <_lseek_r>
 8010f3c:	89a3      	ldrh	r3, [r4, #12]
 8010f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f46:	81a3      	strh	r3, [r4, #12]
 8010f48:	4632      	mov	r2, r6
 8010f4a:	463b      	mov	r3, r7
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f52:	f000 b853 	b.w	8010ffc <_write_r>

08010f56 <__sseek>:
 8010f56:	b510      	push	{r4, lr}
 8010f58:	460c      	mov	r4, r1
 8010f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f5e:	f000 f829 	bl	8010fb4 <_lseek_r>
 8010f62:	1c43      	adds	r3, r0, #1
 8010f64:	89a3      	ldrh	r3, [r4, #12]
 8010f66:	bf15      	itete	ne
 8010f68:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f72:	81a3      	strheq	r3, [r4, #12]
 8010f74:	bf18      	it	ne
 8010f76:	81a3      	strhne	r3, [r4, #12]
 8010f78:	bd10      	pop	{r4, pc}

08010f7a <__sclose>:
 8010f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f7e:	f000 b809 	b.w	8010f94 <_close_r>

08010f82 <memset>:
 8010f82:	4402      	add	r2, r0
 8010f84:	4603      	mov	r3, r0
 8010f86:	4293      	cmp	r3, r2
 8010f88:	d100      	bne.n	8010f8c <memset+0xa>
 8010f8a:	4770      	bx	lr
 8010f8c:	f803 1b01 	strb.w	r1, [r3], #1
 8010f90:	e7f9      	b.n	8010f86 <memset+0x4>
	...

08010f94 <_close_r>:
 8010f94:	b538      	push	{r3, r4, r5, lr}
 8010f96:	4d06      	ldr	r5, [pc, #24]	; (8010fb0 <_close_r+0x1c>)
 8010f98:	2300      	movs	r3, #0
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	4608      	mov	r0, r1
 8010f9e:	602b      	str	r3, [r5, #0]
 8010fa0:	f7f5 fd83 	bl	8006aaa <_close>
 8010fa4:	1c43      	adds	r3, r0, #1
 8010fa6:	d102      	bne.n	8010fae <_close_r+0x1a>
 8010fa8:	682b      	ldr	r3, [r5, #0]
 8010faa:	b103      	cbz	r3, 8010fae <_close_r+0x1a>
 8010fac:	6023      	str	r3, [r4, #0]
 8010fae:	bd38      	pop	{r3, r4, r5, pc}
 8010fb0:	20002e60 	.word	0x20002e60

08010fb4 <_lseek_r>:
 8010fb4:	b538      	push	{r3, r4, r5, lr}
 8010fb6:	4d07      	ldr	r5, [pc, #28]	; (8010fd4 <_lseek_r+0x20>)
 8010fb8:	4604      	mov	r4, r0
 8010fba:	4608      	mov	r0, r1
 8010fbc:	4611      	mov	r1, r2
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	602a      	str	r2, [r5, #0]
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	f7f5 fd98 	bl	8006af8 <_lseek>
 8010fc8:	1c43      	adds	r3, r0, #1
 8010fca:	d102      	bne.n	8010fd2 <_lseek_r+0x1e>
 8010fcc:	682b      	ldr	r3, [r5, #0]
 8010fce:	b103      	cbz	r3, 8010fd2 <_lseek_r+0x1e>
 8010fd0:	6023      	str	r3, [r4, #0]
 8010fd2:	bd38      	pop	{r3, r4, r5, pc}
 8010fd4:	20002e60 	.word	0x20002e60

08010fd8 <_read_r>:
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	4d07      	ldr	r5, [pc, #28]	; (8010ff8 <_read_r+0x20>)
 8010fdc:	4604      	mov	r4, r0
 8010fde:	4608      	mov	r0, r1
 8010fe0:	4611      	mov	r1, r2
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	602a      	str	r2, [r5, #0]
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	f7f5 fd26 	bl	8006a38 <_read>
 8010fec:	1c43      	adds	r3, r0, #1
 8010fee:	d102      	bne.n	8010ff6 <_read_r+0x1e>
 8010ff0:	682b      	ldr	r3, [r5, #0]
 8010ff2:	b103      	cbz	r3, 8010ff6 <_read_r+0x1e>
 8010ff4:	6023      	str	r3, [r4, #0]
 8010ff6:	bd38      	pop	{r3, r4, r5, pc}
 8010ff8:	20002e60 	.word	0x20002e60

08010ffc <_write_r>:
 8010ffc:	b538      	push	{r3, r4, r5, lr}
 8010ffe:	4d07      	ldr	r5, [pc, #28]	; (801101c <_write_r+0x20>)
 8011000:	4604      	mov	r4, r0
 8011002:	4608      	mov	r0, r1
 8011004:	4611      	mov	r1, r2
 8011006:	2200      	movs	r2, #0
 8011008:	602a      	str	r2, [r5, #0]
 801100a:	461a      	mov	r2, r3
 801100c:	f7f5 fd31 	bl	8006a72 <_write>
 8011010:	1c43      	adds	r3, r0, #1
 8011012:	d102      	bne.n	801101a <_write_r+0x1e>
 8011014:	682b      	ldr	r3, [r5, #0]
 8011016:	b103      	cbz	r3, 801101a <_write_r+0x1e>
 8011018:	6023      	str	r3, [r4, #0]
 801101a:	bd38      	pop	{r3, r4, r5, pc}
 801101c:	20002e60 	.word	0x20002e60

08011020 <__errno>:
 8011020:	4b01      	ldr	r3, [pc, #4]	; (8011028 <__errno+0x8>)
 8011022:	6818      	ldr	r0, [r3, #0]
 8011024:	4770      	bx	lr
 8011026:	bf00      	nop
 8011028:	200004a8 	.word	0x200004a8

0801102c <__libc_init_array>:
 801102c:	b570      	push	{r4, r5, r6, lr}
 801102e:	4d0d      	ldr	r5, [pc, #52]	; (8011064 <__libc_init_array+0x38>)
 8011030:	4c0d      	ldr	r4, [pc, #52]	; (8011068 <__libc_init_array+0x3c>)
 8011032:	1b64      	subs	r4, r4, r5
 8011034:	10a4      	asrs	r4, r4, #2
 8011036:	2600      	movs	r6, #0
 8011038:	42a6      	cmp	r6, r4
 801103a:	d109      	bne.n	8011050 <__libc_init_array+0x24>
 801103c:	4d0b      	ldr	r5, [pc, #44]	; (801106c <__libc_init_array+0x40>)
 801103e:	4c0c      	ldr	r4, [pc, #48]	; (8011070 <__libc_init_array+0x44>)
 8011040:	f003 fa66 	bl	8014510 <_init>
 8011044:	1b64      	subs	r4, r4, r5
 8011046:	10a4      	asrs	r4, r4, #2
 8011048:	2600      	movs	r6, #0
 801104a:	42a6      	cmp	r6, r4
 801104c:	d105      	bne.n	801105a <__libc_init_array+0x2e>
 801104e:	bd70      	pop	{r4, r5, r6, pc}
 8011050:	f855 3b04 	ldr.w	r3, [r5], #4
 8011054:	4798      	blx	r3
 8011056:	3601      	adds	r6, #1
 8011058:	e7ee      	b.n	8011038 <__libc_init_array+0xc>
 801105a:	f855 3b04 	ldr.w	r3, [r5], #4
 801105e:	4798      	blx	r3
 8011060:	3601      	adds	r6, #1
 8011062:	e7f2      	b.n	801104a <__libc_init_array+0x1e>
 8011064:	08015990 	.word	0x08015990
 8011068:	08015990 	.word	0x08015990
 801106c:	08015990 	.word	0x08015990
 8011070:	08015994 	.word	0x08015994

08011074 <__retarget_lock_acquire_recursive>:
 8011074:	4770      	bx	lr

08011076 <__retarget_lock_release_recursive>:
 8011076:	4770      	bx	lr

08011078 <strcpy>:
 8011078:	4603      	mov	r3, r0
 801107a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801107e:	f803 2b01 	strb.w	r2, [r3], #1
 8011082:	2a00      	cmp	r2, #0
 8011084:	d1f9      	bne.n	801107a <strcpy+0x2>
 8011086:	4770      	bx	lr

08011088 <memcpy>:
 8011088:	440a      	add	r2, r1
 801108a:	4291      	cmp	r1, r2
 801108c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011090:	d100      	bne.n	8011094 <memcpy+0xc>
 8011092:	4770      	bx	lr
 8011094:	b510      	push	{r4, lr}
 8011096:	f811 4b01 	ldrb.w	r4, [r1], #1
 801109a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801109e:	4291      	cmp	r1, r2
 80110a0:	d1f9      	bne.n	8011096 <memcpy+0xe>
 80110a2:	bd10      	pop	{r4, pc}

080110a4 <abort>:
 80110a4:	b508      	push	{r3, lr}
 80110a6:	2006      	movs	r0, #6
 80110a8:	f000 fd3c 	bl	8011b24 <raise>
 80110ac:	2001      	movs	r0, #1
 80110ae:	f7f5 fcb9 	bl	8006a24 <_exit>
	...

080110b4 <_free_r>:
 80110b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80110b6:	2900      	cmp	r1, #0
 80110b8:	d044      	beq.n	8011144 <_free_r+0x90>
 80110ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110be:	9001      	str	r0, [sp, #4]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f1a1 0404 	sub.w	r4, r1, #4
 80110c6:	bfb8      	it	lt
 80110c8:	18e4      	addlt	r4, r4, r3
 80110ca:	f000 f8df 	bl	801128c <__malloc_lock>
 80110ce:	4a1e      	ldr	r2, [pc, #120]	; (8011148 <_free_r+0x94>)
 80110d0:	9801      	ldr	r0, [sp, #4]
 80110d2:	6813      	ldr	r3, [r2, #0]
 80110d4:	b933      	cbnz	r3, 80110e4 <_free_r+0x30>
 80110d6:	6063      	str	r3, [r4, #4]
 80110d8:	6014      	str	r4, [r2, #0]
 80110da:	b003      	add	sp, #12
 80110dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80110e0:	f000 b8da 	b.w	8011298 <__malloc_unlock>
 80110e4:	42a3      	cmp	r3, r4
 80110e6:	d908      	bls.n	80110fa <_free_r+0x46>
 80110e8:	6825      	ldr	r5, [r4, #0]
 80110ea:	1961      	adds	r1, r4, r5
 80110ec:	428b      	cmp	r3, r1
 80110ee:	bf01      	itttt	eq
 80110f0:	6819      	ldreq	r1, [r3, #0]
 80110f2:	685b      	ldreq	r3, [r3, #4]
 80110f4:	1949      	addeq	r1, r1, r5
 80110f6:	6021      	streq	r1, [r4, #0]
 80110f8:	e7ed      	b.n	80110d6 <_free_r+0x22>
 80110fa:	461a      	mov	r2, r3
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	b10b      	cbz	r3, 8011104 <_free_r+0x50>
 8011100:	42a3      	cmp	r3, r4
 8011102:	d9fa      	bls.n	80110fa <_free_r+0x46>
 8011104:	6811      	ldr	r1, [r2, #0]
 8011106:	1855      	adds	r5, r2, r1
 8011108:	42a5      	cmp	r5, r4
 801110a:	d10b      	bne.n	8011124 <_free_r+0x70>
 801110c:	6824      	ldr	r4, [r4, #0]
 801110e:	4421      	add	r1, r4
 8011110:	1854      	adds	r4, r2, r1
 8011112:	42a3      	cmp	r3, r4
 8011114:	6011      	str	r1, [r2, #0]
 8011116:	d1e0      	bne.n	80110da <_free_r+0x26>
 8011118:	681c      	ldr	r4, [r3, #0]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	6053      	str	r3, [r2, #4]
 801111e:	440c      	add	r4, r1
 8011120:	6014      	str	r4, [r2, #0]
 8011122:	e7da      	b.n	80110da <_free_r+0x26>
 8011124:	d902      	bls.n	801112c <_free_r+0x78>
 8011126:	230c      	movs	r3, #12
 8011128:	6003      	str	r3, [r0, #0]
 801112a:	e7d6      	b.n	80110da <_free_r+0x26>
 801112c:	6825      	ldr	r5, [r4, #0]
 801112e:	1961      	adds	r1, r4, r5
 8011130:	428b      	cmp	r3, r1
 8011132:	bf04      	itt	eq
 8011134:	6819      	ldreq	r1, [r3, #0]
 8011136:	685b      	ldreq	r3, [r3, #4]
 8011138:	6063      	str	r3, [r4, #4]
 801113a:	bf04      	itt	eq
 801113c:	1949      	addeq	r1, r1, r5
 801113e:	6021      	streq	r1, [r4, #0]
 8011140:	6054      	str	r4, [r2, #4]
 8011142:	e7ca      	b.n	80110da <_free_r+0x26>
 8011144:	b003      	add	sp, #12
 8011146:	bd30      	pop	{r4, r5, pc}
 8011148:	20002e68 	.word	0x20002e68

0801114c <sbrk_aligned>:
 801114c:	b570      	push	{r4, r5, r6, lr}
 801114e:	4e0e      	ldr	r6, [pc, #56]	; (8011188 <sbrk_aligned+0x3c>)
 8011150:	460c      	mov	r4, r1
 8011152:	6831      	ldr	r1, [r6, #0]
 8011154:	4605      	mov	r5, r0
 8011156:	b911      	cbnz	r1, 801115e <sbrk_aligned+0x12>
 8011158:	f000 fd00 	bl	8011b5c <_sbrk_r>
 801115c:	6030      	str	r0, [r6, #0]
 801115e:	4621      	mov	r1, r4
 8011160:	4628      	mov	r0, r5
 8011162:	f000 fcfb 	bl	8011b5c <_sbrk_r>
 8011166:	1c43      	adds	r3, r0, #1
 8011168:	d00a      	beq.n	8011180 <sbrk_aligned+0x34>
 801116a:	1cc4      	adds	r4, r0, #3
 801116c:	f024 0403 	bic.w	r4, r4, #3
 8011170:	42a0      	cmp	r0, r4
 8011172:	d007      	beq.n	8011184 <sbrk_aligned+0x38>
 8011174:	1a21      	subs	r1, r4, r0
 8011176:	4628      	mov	r0, r5
 8011178:	f000 fcf0 	bl	8011b5c <_sbrk_r>
 801117c:	3001      	adds	r0, #1
 801117e:	d101      	bne.n	8011184 <sbrk_aligned+0x38>
 8011180:	f04f 34ff 	mov.w	r4, #4294967295
 8011184:	4620      	mov	r0, r4
 8011186:	bd70      	pop	{r4, r5, r6, pc}
 8011188:	20002e6c 	.word	0x20002e6c

0801118c <_malloc_r>:
 801118c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011190:	1ccd      	adds	r5, r1, #3
 8011192:	f025 0503 	bic.w	r5, r5, #3
 8011196:	3508      	adds	r5, #8
 8011198:	2d0c      	cmp	r5, #12
 801119a:	bf38      	it	cc
 801119c:	250c      	movcc	r5, #12
 801119e:	2d00      	cmp	r5, #0
 80111a0:	4607      	mov	r7, r0
 80111a2:	db01      	blt.n	80111a8 <_malloc_r+0x1c>
 80111a4:	42a9      	cmp	r1, r5
 80111a6:	d905      	bls.n	80111b4 <_malloc_r+0x28>
 80111a8:	230c      	movs	r3, #12
 80111aa:	603b      	str	r3, [r7, #0]
 80111ac:	2600      	movs	r6, #0
 80111ae:	4630      	mov	r0, r6
 80111b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011288 <_malloc_r+0xfc>
 80111b8:	f000 f868 	bl	801128c <__malloc_lock>
 80111bc:	f8d8 3000 	ldr.w	r3, [r8]
 80111c0:	461c      	mov	r4, r3
 80111c2:	bb5c      	cbnz	r4, 801121c <_malloc_r+0x90>
 80111c4:	4629      	mov	r1, r5
 80111c6:	4638      	mov	r0, r7
 80111c8:	f7ff ffc0 	bl	801114c <sbrk_aligned>
 80111cc:	1c43      	adds	r3, r0, #1
 80111ce:	4604      	mov	r4, r0
 80111d0:	d155      	bne.n	801127e <_malloc_r+0xf2>
 80111d2:	f8d8 4000 	ldr.w	r4, [r8]
 80111d6:	4626      	mov	r6, r4
 80111d8:	2e00      	cmp	r6, #0
 80111da:	d145      	bne.n	8011268 <_malloc_r+0xdc>
 80111dc:	2c00      	cmp	r4, #0
 80111de:	d048      	beq.n	8011272 <_malloc_r+0xe6>
 80111e0:	6823      	ldr	r3, [r4, #0]
 80111e2:	4631      	mov	r1, r6
 80111e4:	4638      	mov	r0, r7
 80111e6:	eb04 0903 	add.w	r9, r4, r3
 80111ea:	f000 fcb7 	bl	8011b5c <_sbrk_r>
 80111ee:	4581      	cmp	r9, r0
 80111f0:	d13f      	bne.n	8011272 <_malloc_r+0xe6>
 80111f2:	6821      	ldr	r1, [r4, #0]
 80111f4:	1a6d      	subs	r5, r5, r1
 80111f6:	4629      	mov	r1, r5
 80111f8:	4638      	mov	r0, r7
 80111fa:	f7ff ffa7 	bl	801114c <sbrk_aligned>
 80111fe:	3001      	adds	r0, #1
 8011200:	d037      	beq.n	8011272 <_malloc_r+0xe6>
 8011202:	6823      	ldr	r3, [r4, #0]
 8011204:	442b      	add	r3, r5
 8011206:	6023      	str	r3, [r4, #0]
 8011208:	f8d8 3000 	ldr.w	r3, [r8]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d038      	beq.n	8011282 <_malloc_r+0xf6>
 8011210:	685a      	ldr	r2, [r3, #4]
 8011212:	42a2      	cmp	r2, r4
 8011214:	d12b      	bne.n	801126e <_malloc_r+0xe2>
 8011216:	2200      	movs	r2, #0
 8011218:	605a      	str	r2, [r3, #4]
 801121a:	e00f      	b.n	801123c <_malloc_r+0xb0>
 801121c:	6822      	ldr	r2, [r4, #0]
 801121e:	1b52      	subs	r2, r2, r5
 8011220:	d41f      	bmi.n	8011262 <_malloc_r+0xd6>
 8011222:	2a0b      	cmp	r2, #11
 8011224:	d917      	bls.n	8011256 <_malloc_r+0xca>
 8011226:	1961      	adds	r1, r4, r5
 8011228:	42a3      	cmp	r3, r4
 801122a:	6025      	str	r5, [r4, #0]
 801122c:	bf18      	it	ne
 801122e:	6059      	strne	r1, [r3, #4]
 8011230:	6863      	ldr	r3, [r4, #4]
 8011232:	bf08      	it	eq
 8011234:	f8c8 1000 	streq.w	r1, [r8]
 8011238:	5162      	str	r2, [r4, r5]
 801123a:	604b      	str	r3, [r1, #4]
 801123c:	4638      	mov	r0, r7
 801123e:	f104 060b 	add.w	r6, r4, #11
 8011242:	f000 f829 	bl	8011298 <__malloc_unlock>
 8011246:	f026 0607 	bic.w	r6, r6, #7
 801124a:	1d23      	adds	r3, r4, #4
 801124c:	1af2      	subs	r2, r6, r3
 801124e:	d0ae      	beq.n	80111ae <_malloc_r+0x22>
 8011250:	1b9b      	subs	r3, r3, r6
 8011252:	50a3      	str	r3, [r4, r2]
 8011254:	e7ab      	b.n	80111ae <_malloc_r+0x22>
 8011256:	42a3      	cmp	r3, r4
 8011258:	6862      	ldr	r2, [r4, #4]
 801125a:	d1dd      	bne.n	8011218 <_malloc_r+0x8c>
 801125c:	f8c8 2000 	str.w	r2, [r8]
 8011260:	e7ec      	b.n	801123c <_malloc_r+0xb0>
 8011262:	4623      	mov	r3, r4
 8011264:	6864      	ldr	r4, [r4, #4]
 8011266:	e7ac      	b.n	80111c2 <_malloc_r+0x36>
 8011268:	4634      	mov	r4, r6
 801126a:	6876      	ldr	r6, [r6, #4]
 801126c:	e7b4      	b.n	80111d8 <_malloc_r+0x4c>
 801126e:	4613      	mov	r3, r2
 8011270:	e7cc      	b.n	801120c <_malloc_r+0x80>
 8011272:	230c      	movs	r3, #12
 8011274:	603b      	str	r3, [r7, #0]
 8011276:	4638      	mov	r0, r7
 8011278:	f000 f80e 	bl	8011298 <__malloc_unlock>
 801127c:	e797      	b.n	80111ae <_malloc_r+0x22>
 801127e:	6025      	str	r5, [r4, #0]
 8011280:	e7dc      	b.n	801123c <_malloc_r+0xb0>
 8011282:	605b      	str	r3, [r3, #4]
 8011284:	deff      	udf	#255	; 0xff
 8011286:	bf00      	nop
 8011288:	20002e68 	.word	0x20002e68

0801128c <__malloc_lock>:
 801128c:	4801      	ldr	r0, [pc, #4]	; (8011294 <__malloc_lock+0x8>)
 801128e:	f7ff bef1 	b.w	8011074 <__retarget_lock_acquire_recursive>
 8011292:	bf00      	nop
 8011294:	20002e64 	.word	0x20002e64

08011298 <__malloc_unlock>:
 8011298:	4801      	ldr	r0, [pc, #4]	; (80112a0 <__malloc_unlock+0x8>)
 801129a:	f7ff beec 	b.w	8011076 <__retarget_lock_release_recursive>
 801129e:	bf00      	nop
 80112a0:	20002e64 	.word	0x20002e64

080112a4 <__sfputc_r>:
 80112a4:	6893      	ldr	r3, [r2, #8]
 80112a6:	3b01      	subs	r3, #1
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	b410      	push	{r4}
 80112ac:	6093      	str	r3, [r2, #8]
 80112ae:	da08      	bge.n	80112c2 <__sfputc_r+0x1e>
 80112b0:	6994      	ldr	r4, [r2, #24]
 80112b2:	42a3      	cmp	r3, r4
 80112b4:	db01      	blt.n	80112ba <__sfputc_r+0x16>
 80112b6:	290a      	cmp	r1, #10
 80112b8:	d103      	bne.n	80112c2 <__sfputc_r+0x1e>
 80112ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112be:	f000 bb73 	b.w	80119a8 <__swbuf_r>
 80112c2:	6813      	ldr	r3, [r2, #0]
 80112c4:	1c58      	adds	r0, r3, #1
 80112c6:	6010      	str	r0, [r2, #0]
 80112c8:	7019      	strb	r1, [r3, #0]
 80112ca:	4608      	mov	r0, r1
 80112cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112d0:	4770      	bx	lr

080112d2 <__sfputs_r>:
 80112d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112d4:	4606      	mov	r6, r0
 80112d6:	460f      	mov	r7, r1
 80112d8:	4614      	mov	r4, r2
 80112da:	18d5      	adds	r5, r2, r3
 80112dc:	42ac      	cmp	r4, r5
 80112de:	d101      	bne.n	80112e4 <__sfputs_r+0x12>
 80112e0:	2000      	movs	r0, #0
 80112e2:	e007      	b.n	80112f4 <__sfputs_r+0x22>
 80112e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112e8:	463a      	mov	r2, r7
 80112ea:	4630      	mov	r0, r6
 80112ec:	f7ff ffda 	bl	80112a4 <__sfputc_r>
 80112f0:	1c43      	adds	r3, r0, #1
 80112f2:	d1f3      	bne.n	80112dc <__sfputs_r+0xa>
 80112f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080112f8 <_vfiprintf_r>:
 80112f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112fc:	460d      	mov	r5, r1
 80112fe:	b09d      	sub	sp, #116	; 0x74
 8011300:	4614      	mov	r4, r2
 8011302:	4698      	mov	r8, r3
 8011304:	4606      	mov	r6, r0
 8011306:	b118      	cbz	r0, 8011310 <_vfiprintf_r+0x18>
 8011308:	6a03      	ldr	r3, [r0, #32]
 801130a:	b90b      	cbnz	r3, 8011310 <_vfiprintf_r+0x18>
 801130c:	f7ff fdae 	bl	8010e6c <__sinit>
 8011310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011312:	07d9      	lsls	r1, r3, #31
 8011314:	d405      	bmi.n	8011322 <_vfiprintf_r+0x2a>
 8011316:	89ab      	ldrh	r3, [r5, #12]
 8011318:	059a      	lsls	r2, r3, #22
 801131a:	d402      	bmi.n	8011322 <_vfiprintf_r+0x2a>
 801131c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801131e:	f7ff fea9 	bl	8011074 <__retarget_lock_acquire_recursive>
 8011322:	89ab      	ldrh	r3, [r5, #12]
 8011324:	071b      	lsls	r3, r3, #28
 8011326:	d501      	bpl.n	801132c <_vfiprintf_r+0x34>
 8011328:	692b      	ldr	r3, [r5, #16]
 801132a:	b99b      	cbnz	r3, 8011354 <_vfiprintf_r+0x5c>
 801132c:	4629      	mov	r1, r5
 801132e:	4630      	mov	r0, r6
 8011330:	f000 fb78 	bl	8011a24 <__swsetup_r>
 8011334:	b170      	cbz	r0, 8011354 <_vfiprintf_r+0x5c>
 8011336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011338:	07dc      	lsls	r4, r3, #31
 801133a:	d504      	bpl.n	8011346 <_vfiprintf_r+0x4e>
 801133c:	f04f 30ff 	mov.w	r0, #4294967295
 8011340:	b01d      	add	sp, #116	; 0x74
 8011342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011346:	89ab      	ldrh	r3, [r5, #12]
 8011348:	0598      	lsls	r0, r3, #22
 801134a:	d4f7      	bmi.n	801133c <_vfiprintf_r+0x44>
 801134c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801134e:	f7ff fe92 	bl	8011076 <__retarget_lock_release_recursive>
 8011352:	e7f3      	b.n	801133c <_vfiprintf_r+0x44>
 8011354:	2300      	movs	r3, #0
 8011356:	9309      	str	r3, [sp, #36]	; 0x24
 8011358:	2320      	movs	r3, #32
 801135a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801135e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011362:	2330      	movs	r3, #48	; 0x30
 8011364:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011518 <_vfiprintf_r+0x220>
 8011368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801136c:	f04f 0901 	mov.w	r9, #1
 8011370:	4623      	mov	r3, r4
 8011372:	469a      	mov	sl, r3
 8011374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011378:	b10a      	cbz	r2, 801137e <_vfiprintf_r+0x86>
 801137a:	2a25      	cmp	r2, #37	; 0x25
 801137c:	d1f9      	bne.n	8011372 <_vfiprintf_r+0x7a>
 801137e:	ebba 0b04 	subs.w	fp, sl, r4
 8011382:	d00b      	beq.n	801139c <_vfiprintf_r+0xa4>
 8011384:	465b      	mov	r3, fp
 8011386:	4622      	mov	r2, r4
 8011388:	4629      	mov	r1, r5
 801138a:	4630      	mov	r0, r6
 801138c:	f7ff ffa1 	bl	80112d2 <__sfputs_r>
 8011390:	3001      	adds	r0, #1
 8011392:	f000 80a9 	beq.w	80114e8 <_vfiprintf_r+0x1f0>
 8011396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011398:	445a      	add	r2, fp
 801139a:	9209      	str	r2, [sp, #36]	; 0x24
 801139c:	f89a 3000 	ldrb.w	r3, [sl]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	f000 80a1 	beq.w	80114e8 <_vfiprintf_r+0x1f0>
 80113a6:	2300      	movs	r3, #0
 80113a8:	f04f 32ff 	mov.w	r2, #4294967295
 80113ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113b0:	f10a 0a01 	add.w	sl, sl, #1
 80113b4:	9304      	str	r3, [sp, #16]
 80113b6:	9307      	str	r3, [sp, #28]
 80113b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113bc:	931a      	str	r3, [sp, #104]	; 0x68
 80113be:	4654      	mov	r4, sl
 80113c0:	2205      	movs	r2, #5
 80113c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113c6:	4854      	ldr	r0, [pc, #336]	; (8011518 <_vfiprintf_r+0x220>)
 80113c8:	f7ee ff02 	bl	80001d0 <memchr>
 80113cc:	9a04      	ldr	r2, [sp, #16]
 80113ce:	b9d8      	cbnz	r0, 8011408 <_vfiprintf_r+0x110>
 80113d0:	06d1      	lsls	r1, r2, #27
 80113d2:	bf44      	itt	mi
 80113d4:	2320      	movmi	r3, #32
 80113d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113da:	0713      	lsls	r3, r2, #28
 80113dc:	bf44      	itt	mi
 80113de:	232b      	movmi	r3, #43	; 0x2b
 80113e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113e4:	f89a 3000 	ldrb.w	r3, [sl]
 80113e8:	2b2a      	cmp	r3, #42	; 0x2a
 80113ea:	d015      	beq.n	8011418 <_vfiprintf_r+0x120>
 80113ec:	9a07      	ldr	r2, [sp, #28]
 80113ee:	4654      	mov	r4, sl
 80113f0:	2000      	movs	r0, #0
 80113f2:	f04f 0c0a 	mov.w	ip, #10
 80113f6:	4621      	mov	r1, r4
 80113f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113fc:	3b30      	subs	r3, #48	; 0x30
 80113fe:	2b09      	cmp	r3, #9
 8011400:	d94d      	bls.n	801149e <_vfiprintf_r+0x1a6>
 8011402:	b1b0      	cbz	r0, 8011432 <_vfiprintf_r+0x13a>
 8011404:	9207      	str	r2, [sp, #28]
 8011406:	e014      	b.n	8011432 <_vfiprintf_r+0x13a>
 8011408:	eba0 0308 	sub.w	r3, r0, r8
 801140c:	fa09 f303 	lsl.w	r3, r9, r3
 8011410:	4313      	orrs	r3, r2
 8011412:	9304      	str	r3, [sp, #16]
 8011414:	46a2      	mov	sl, r4
 8011416:	e7d2      	b.n	80113be <_vfiprintf_r+0xc6>
 8011418:	9b03      	ldr	r3, [sp, #12]
 801141a:	1d19      	adds	r1, r3, #4
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	9103      	str	r1, [sp, #12]
 8011420:	2b00      	cmp	r3, #0
 8011422:	bfbb      	ittet	lt
 8011424:	425b      	neglt	r3, r3
 8011426:	f042 0202 	orrlt.w	r2, r2, #2
 801142a:	9307      	strge	r3, [sp, #28]
 801142c:	9307      	strlt	r3, [sp, #28]
 801142e:	bfb8      	it	lt
 8011430:	9204      	strlt	r2, [sp, #16]
 8011432:	7823      	ldrb	r3, [r4, #0]
 8011434:	2b2e      	cmp	r3, #46	; 0x2e
 8011436:	d10c      	bne.n	8011452 <_vfiprintf_r+0x15a>
 8011438:	7863      	ldrb	r3, [r4, #1]
 801143a:	2b2a      	cmp	r3, #42	; 0x2a
 801143c:	d134      	bne.n	80114a8 <_vfiprintf_r+0x1b0>
 801143e:	9b03      	ldr	r3, [sp, #12]
 8011440:	1d1a      	adds	r2, r3, #4
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	9203      	str	r2, [sp, #12]
 8011446:	2b00      	cmp	r3, #0
 8011448:	bfb8      	it	lt
 801144a:	f04f 33ff 	movlt.w	r3, #4294967295
 801144e:	3402      	adds	r4, #2
 8011450:	9305      	str	r3, [sp, #20]
 8011452:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011528 <_vfiprintf_r+0x230>
 8011456:	7821      	ldrb	r1, [r4, #0]
 8011458:	2203      	movs	r2, #3
 801145a:	4650      	mov	r0, sl
 801145c:	f7ee feb8 	bl	80001d0 <memchr>
 8011460:	b138      	cbz	r0, 8011472 <_vfiprintf_r+0x17a>
 8011462:	9b04      	ldr	r3, [sp, #16]
 8011464:	eba0 000a 	sub.w	r0, r0, sl
 8011468:	2240      	movs	r2, #64	; 0x40
 801146a:	4082      	lsls	r2, r0
 801146c:	4313      	orrs	r3, r2
 801146e:	3401      	adds	r4, #1
 8011470:	9304      	str	r3, [sp, #16]
 8011472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011476:	4829      	ldr	r0, [pc, #164]	; (801151c <_vfiprintf_r+0x224>)
 8011478:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801147c:	2206      	movs	r2, #6
 801147e:	f7ee fea7 	bl	80001d0 <memchr>
 8011482:	2800      	cmp	r0, #0
 8011484:	d03f      	beq.n	8011506 <_vfiprintf_r+0x20e>
 8011486:	4b26      	ldr	r3, [pc, #152]	; (8011520 <_vfiprintf_r+0x228>)
 8011488:	bb1b      	cbnz	r3, 80114d2 <_vfiprintf_r+0x1da>
 801148a:	9b03      	ldr	r3, [sp, #12]
 801148c:	3307      	adds	r3, #7
 801148e:	f023 0307 	bic.w	r3, r3, #7
 8011492:	3308      	adds	r3, #8
 8011494:	9303      	str	r3, [sp, #12]
 8011496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011498:	443b      	add	r3, r7
 801149a:	9309      	str	r3, [sp, #36]	; 0x24
 801149c:	e768      	b.n	8011370 <_vfiprintf_r+0x78>
 801149e:	fb0c 3202 	mla	r2, ip, r2, r3
 80114a2:	460c      	mov	r4, r1
 80114a4:	2001      	movs	r0, #1
 80114a6:	e7a6      	b.n	80113f6 <_vfiprintf_r+0xfe>
 80114a8:	2300      	movs	r3, #0
 80114aa:	3401      	adds	r4, #1
 80114ac:	9305      	str	r3, [sp, #20]
 80114ae:	4619      	mov	r1, r3
 80114b0:	f04f 0c0a 	mov.w	ip, #10
 80114b4:	4620      	mov	r0, r4
 80114b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114ba:	3a30      	subs	r2, #48	; 0x30
 80114bc:	2a09      	cmp	r2, #9
 80114be:	d903      	bls.n	80114c8 <_vfiprintf_r+0x1d0>
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d0c6      	beq.n	8011452 <_vfiprintf_r+0x15a>
 80114c4:	9105      	str	r1, [sp, #20]
 80114c6:	e7c4      	b.n	8011452 <_vfiprintf_r+0x15a>
 80114c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80114cc:	4604      	mov	r4, r0
 80114ce:	2301      	movs	r3, #1
 80114d0:	e7f0      	b.n	80114b4 <_vfiprintf_r+0x1bc>
 80114d2:	ab03      	add	r3, sp, #12
 80114d4:	9300      	str	r3, [sp, #0]
 80114d6:	462a      	mov	r2, r5
 80114d8:	4b12      	ldr	r3, [pc, #72]	; (8011524 <_vfiprintf_r+0x22c>)
 80114da:	a904      	add	r1, sp, #16
 80114dc:	4630      	mov	r0, r6
 80114de:	f3af 8000 	nop.w
 80114e2:	4607      	mov	r7, r0
 80114e4:	1c78      	adds	r0, r7, #1
 80114e6:	d1d6      	bne.n	8011496 <_vfiprintf_r+0x19e>
 80114e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114ea:	07d9      	lsls	r1, r3, #31
 80114ec:	d405      	bmi.n	80114fa <_vfiprintf_r+0x202>
 80114ee:	89ab      	ldrh	r3, [r5, #12]
 80114f0:	059a      	lsls	r2, r3, #22
 80114f2:	d402      	bmi.n	80114fa <_vfiprintf_r+0x202>
 80114f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114f6:	f7ff fdbe 	bl	8011076 <__retarget_lock_release_recursive>
 80114fa:	89ab      	ldrh	r3, [r5, #12]
 80114fc:	065b      	lsls	r3, r3, #25
 80114fe:	f53f af1d 	bmi.w	801133c <_vfiprintf_r+0x44>
 8011502:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011504:	e71c      	b.n	8011340 <_vfiprintf_r+0x48>
 8011506:	ab03      	add	r3, sp, #12
 8011508:	9300      	str	r3, [sp, #0]
 801150a:	462a      	mov	r2, r5
 801150c:	4b05      	ldr	r3, [pc, #20]	; (8011524 <_vfiprintf_r+0x22c>)
 801150e:	a904      	add	r1, sp, #16
 8011510:	4630      	mov	r0, r6
 8011512:	f000 f879 	bl	8011608 <_printf_i>
 8011516:	e7e4      	b.n	80114e2 <_vfiprintf_r+0x1ea>
 8011518:	080154f8 	.word	0x080154f8
 801151c:	08015502 	.word	0x08015502
 8011520:	00000000 	.word	0x00000000
 8011524:	080112d3 	.word	0x080112d3
 8011528:	080154fe 	.word	0x080154fe

0801152c <_printf_common>:
 801152c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011530:	4616      	mov	r6, r2
 8011532:	4699      	mov	r9, r3
 8011534:	688a      	ldr	r2, [r1, #8]
 8011536:	690b      	ldr	r3, [r1, #16]
 8011538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801153c:	4293      	cmp	r3, r2
 801153e:	bfb8      	it	lt
 8011540:	4613      	movlt	r3, r2
 8011542:	6033      	str	r3, [r6, #0]
 8011544:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011548:	4607      	mov	r7, r0
 801154a:	460c      	mov	r4, r1
 801154c:	b10a      	cbz	r2, 8011552 <_printf_common+0x26>
 801154e:	3301      	adds	r3, #1
 8011550:	6033      	str	r3, [r6, #0]
 8011552:	6823      	ldr	r3, [r4, #0]
 8011554:	0699      	lsls	r1, r3, #26
 8011556:	bf42      	ittt	mi
 8011558:	6833      	ldrmi	r3, [r6, #0]
 801155a:	3302      	addmi	r3, #2
 801155c:	6033      	strmi	r3, [r6, #0]
 801155e:	6825      	ldr	r5, [r4, #0]
 8011560:	f015 0506 	ands.w	r5, r5, #6
 8011564:	d106      	bne.n	8011574 <_printf_common+0x48>
 8011566:	f104 0a19 	add.w	sl, r4, #25
 801156a:	68e3      	ldr	r3, [r4, #12]
 801156c:	6832      	ldr	r2, [r6, #0]
 801156e:	1a9b      	subs	r3, r3, r2
 8011570:	42ab      	cmp	r3, r5
 8011572:	dc26      	bgt.n	80115c2 <_printf_common+0x96>
 8011574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011578:	1e13      	subs	r3, r2, #0
 801157a:	6822      	ldr	r2, [r4, #0]
 801157c:	bf18      	it	ne
 801157e:	2301      	movne	r3, #1
 8011580:	0692      	lsls	r2, r2, #26
 8011582:	d42b      	bmi.n	80115dc <_printf_common+0xb0>
 8011584:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011588:	4649      	mov	r1, r9
 801158a:	4638      	mov	r0, r7
 801158c:	47c0      	blx	r8
 801158e:	3001      	adds	r0, #1
 8011590:	d01e      	beq.n	80115d0 <_printf_common+0xa4>
 8011592:	6823      	ldr	r3, [r4, #0]
 8011594:	6922      	ldr	r2, [r4, #16]
 8011596:	f003 0306 	and.w	r3, r3, #6
 801159a:	2b04      	cmp	r3, #4
 801159c:	bf02      	ittt	eq
 801159e:	68e5      	ldreq	r5, [r4, #12]
 80115a0:	6833      	ldreq	r3, [r6, #0]
 80115a2:	1aed      	subeq	r5, r5, r3
 80115a4:	68a3      	ldr	r3, [r4, #8]
 80115a6:	bf0c      	ite	eq
 80115a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115ac:	2500      	movne	r5, #0
 80115ae:	4293      	cmp	r3, r2
 80115b0:	bfc4      	itt	gt
 80115b2:	1a9b      	subgt	r3, r3, r2
 80115b4:	18ed      	addgt	r5, r5, r3
 80115b6:	2600      	movs	r6, #0
 80115b8:	341a      	adds	r4, #26
 80115ba:	42b5      	cmp	r5, r6
 80115bc:	d11a      	bne.n	80115f4 <_printf_common+0xc8>
 80115be:	2000      	movs	r0, #0
 80115c0:	e008      	b.n	80115d4 <_printf_common+0xa8>
 80115c2:	2301      	movs	r3, #1
 80115c4:	4652      	mov	r2, sl
 80115c6:	4649      	mov	r1, r9
 80115c8:	4638      	mov	r0, r7
 80115ca:	47c0      	blx	r8
 80115cc:	3001      	adds	r0, #1
 80115ce:	d103      	bne.n	80115d8 <_printf_common+0xac>
 80115d0:	f04f 30ff 	mov.w	r0, #4294967295
 80115d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115d8:	3501      	adds	r5, #1
 80115da:	e7c6      	b.n	801156a <_printf_common+0x3e>
 80115dc:	18e1      	adds	r1, r4, r3
 80115de:	1c5a      	adds	r2, r3, #1
 80115e0:	2030      	movs	r0, #48	; 0x30
 80115e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80115e6:	4422      	add	r2, r4
 80115e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80115ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80115f0:	3302      	adds	r3, #2
 80115f2:	e7c7      	b.n	8011584 <_printf_common+0x58>
 80115f4:	2301      	movs	r3, #1
 80115f6:	4622      	mov	r2, r4
 80115f8:	4649      	mov	r1, r9
 80115fa:	4638      	mov	r0, r7
 80115fc:	47c0      	blx	r8
 80115fe:	3001      	adds	r0, #1
 8011600:	d0e6      	beq.n	80115d0 <_printf_common+0xa4>
 8011602:	3601      	adds	r6, #1
 8011604:	e7d9      	b.n	80115ba <_printf_common+0x8e>
	...

08011608 <_printf_i>:
 8011608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801160c:	7e0f      	ldrb	r7, [r1, #24]
 801160e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011610:	2f78      	cmp	r7, #120	; 0x78
 8011612:	4691      	mov	r9, r2
 8011614:	4680      	mov	r8, r0
 8011616:	460c      	mov	r4, r1
 8011618:	469a      	mov	sl, r3
 801161a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801161e:	d807      	bhi.n	8011630 <_printf_i+0x28>
 8011620:	2f62      	cmp	r7, #98	; 0x62
 8011622:	d80a      	bhi.n	801163a <_printf_i+0x32>
 8011624:	2f00      	cmp	r7, #0
 8011626:	f000 80d4 	beq.w	80117d2 <_printf_i+0x1ca>
 801162a:	2f58      	cmp	r7, #88	; 0x58
 801162c:	f000 80c0 	beq.w	80117b0 <_printf_i+0x1a8>
 8011630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011634:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011638:	e03a      	b.n	80116b0 <_printf_i+0xa8>
 801163a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801163e:	2b15      	cmp	r3, #21
 8011640:	d8f6      	bhi.n	8011630 <_printf_i+0x28>
 8011642:	a101      	add	r1, pc, #4	; (adr r1, 8011648 <_printf_i+0x40>)
 8011644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011648:	080116a1 	.word	0x080116a1
 801164c:	080116b5 	.word	0x080116b5
 8011650:	08011631 	.word	0x08011631
 8011654:	08011631 	.word	0x08011631
 8011658:	08011631 	.word	0x08011631
 801165c:	08011631 	.word	0x08011631
 8011660:	080116b5 	.word	0x080116b5
 8011664:	08011631 	.word	0x08011631
 8011668:	08011631 	.word	0x08011631
 801166c:	08011631 	.word	0x08011631
 8011670:	08011631 	.word	0x08011631
 8011674:	080117b9 	.word	0x080117b9
 8011678:	080116e1 	.word	0x080116e1
 801167c:	08011773 	.word	0x08011773
 8011680:	08011631 	.word	0x08011631
 8011684:	08011631 	.word	0x08011631
 8011688:	080117db 	.word	0x080117db
 801168c:	08011631 	.word	0x08011631
 8011690:	080116e1 	.word	0x080116e1
 8011694:	08011631 	.word	0x08011631
 8011698:	08011631 	.word	0x08011631
 801169c:	0801177b 	.word	0x0801177b
 80116a0:	682b      	ldr	r3, [r5, #0]
 80116a2:	1d1a      	adds	r2, r3, #4
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	602a      	str	r2, [r5, #0]
 80116a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80116ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80116b0:	2301      	movs	r3, #1
 80116b2:	e09f      	b.n	80117f4 <_printf_i+0x1ec>
 80116b4:	6820      	ldr	r0, [r4, #0]
 80116b6:	682b      	ldr	r3, [r5, #0]
 80116b8:	0607      	lsls	r7, r0, #24
 80116ba:	f103 0104 	add.w	r1, r3, #4
 80116be:	6029      	str	r1, [r5, #0]
 80116c0:	d501      	bpl.n	80116c6 <_printf_i+0xbe>
 80116c2:	681e      	ldr	r6, [r3, #0]
 80116c4:	e003      	b.n	80116ce <_printf_i+0xc6>
 80116c6:	0646      	lsls	r6, r0, #25
 80116c8:	d5fb      	bpl.n	80116c2 <_printf_i+0xba>
 80116ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80116ce:	2e00      	cmp	r6, #0
 80116d0:	da03      	bge.n	80116da <_printf_i+0xd2>
 80116d2:	232d      	movs	r3, #45	; 0x2d
 80116d4:	4276      	negs	r6, r6
 80116d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116da:	485a      	ldr	r0, [pc, #360]	; (8011844 <_printf_i+0x23c>)
 80116dc:	230a      	movs	r3, #10
 80116de:	e012      	b.n	8011706 <_printf_i+0xfe>
 80116e0:	682b      	ldr	r3, [r5, #0]
 80116e2:	6820      	ldr	r0, [r4, #0]
 80116e4:	1d19      	adds	r1, r3, #4
 80116e6:	6029      	str	r1, [r5, #0]
 80116e8:	0605      	lsls	r5, r0, #24
 80116ea:	d501      	bpl.n	80116f0 <_printf_i+0xe8>
 80116ec:	681e      	ldr	r6, [r3, #0]
 80116ee:	e002      	b.n	80116f6 <_printf_i+0xee>
 80116f0:	0641      	lsls	r1, r0, #25
 80116f2:	d5fb      	bpl.n	80116ec <_printf_i+0xe4>
 80116f4:	881e      	ldrh	r6, [r3, #0]
 80116f6:	4853      	ldr	r0, [pc, #332]	; (8011844 <_printf_i+0x23c>)
 80116f8:	2f6f      	cmp	r7, #111	; 0x6f
 80116fa:	bf0c      	ite	eq
 80116fc:	2308      	moveq	r3, #8
 80116fe:	230a      	movne	r3, #10
 8011700:	2100      	movs	r1, #0
 8011702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011706:	6865      	ldr	r5, [r4, #4]
 8011708:	60a5      	str	r5, [r4, #8]
 801170a:	2d00      	cmp	r5, #0
 801170c:	bfa2      	ittt	ge
 801170e:	6821      	ldrge	r1, [r4, #0]
 8011710:	f021 0104 	bicge.w	r1, r1, #4
 8011714:	6021      	strge	r1, [r4, #0]
 8011716:	b90e      	cbnz	r6, 801171c <_printf_i+0x114>
 8011718:	2d00      	cmp	r5, #0
 801171a:	d04b      	beq.n	80117b4 <_printf_i+0x1ac>
 801171c:	4615      	mov	r5, r2
 801171e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011722:	fb03 6711 	mls	r7, r3, r1, r6
 8011726:	5dc7      	ldrb	r7, [r0, r7]
 8011728:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801172c:	4637      	mov	r7, r6
 801172e:	42bb      	cmp	r3, r7
 8011730:	460e      	mov	r6, r1
 8011732:	d9f4      	bls.n	801171e <_printf_i+0x116>
 8011734:	2b08      	cmp	r3, #8
 8011736:	d10b      	bne.n	8011750 <_printf_i+0x148>
 8011738:	6823      	ldr	r3, [r4, #0]
 801173a:	07de      	lsls	r6, r3, #31
 801173c:	d508      	bpl.n	8011750 <_printf_i+0x148>
 801173e:	6923      	ldr	r3, [r4, #16]
 8011740:	6861      	ldr	r1, [r4, #4]
 8011742:	4299      	cmp	r1, r3
 8011744:	bfde      	ittt	le
 8011746:	2330      	movle	r3, #48	; 0x30
 8011748:	f805 3c01 	strble.w	r3, [r5, #-1]
 801174c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011750:	1b52      	subs	r2, r2, r5
 8011752:	6122      	str	r2, [r4, #16]
 8011754:	f8cd a000 	str.w	sl, [sp]
 8011758:	464b      	mov	r3, r9
 801175a:	aa03      	add	r2, sp, #12
 801175c:	4621      	mov	r1, r4
 801175e:	4640      	mov	r0, r8
 8011760:	f7ff fee4 	bl	801152c <_printf_common>
 8011764:	3001      	adds	r0, #1
 8011766:	d14a      	bne.n	80117fe <_printf_i+0x1f6>
 8011768:	f04f 30ff 	mov.w	r0, #4294967295
 801176c:	b004      	add	sp, #16
 801176e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011772:	6823      	ldr	r3, [r4, #0]
 8011774:	f043 0320 	orr.w	r3, r3, #32
 8011778:	6023      	str	r3, [r4, #0]
 801177a:	4833      	ldr	r0, [pc, #204]	; (8011848 <_printf_i+0x240>)
 801177c:	2778      	movs	r7, #120	; 0x78
 801177e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011782:	6823      	ldr	r3, [r4, #0]
 8011784:	6829      	ldr	r1, [r5, #0]
 8011786:	061f      	lsls	r7, r3, #24
 8011788:	f851 6b04 	ldr.w	r6, [r1], #4
 801178c:	d402      	bmi.n	8011794 <_printf_i+0x18c>
 801178e:	065f      	lsls	r7, r3, #25
 8011790:	bf48      	it	mi
 8011792:	b2b6      	uxthmi	r6, r6
 8011794:	07df      	lsls	r7, r3, #31
 8011796:	bf48      	it	mi
 8011798:	f043 0320 	orrmi.w	r3, r3, #32
 801179c:	6029      	str	r1, [r5, #0]
 801179e:	bf48      	it	mi
 80117a0:	6023      	strmi	r3, [r4, #0]
 80117a2:	b91e      	cbnz	r6, 80117ac <_printf_i+0x1a4>
 80117a4:	6823      	ldr	r3, [r4, #0]
 80117a6:	f023 0320 	bic.w	r3, r3, #32
 80117aa:	6023      	str	r3, [r4, #0]
 80117ac:	2310      	movs	r3, #16
 80117ae:	e7a7      	b.n	8011700 <_printf_i+0xf8>
 80117b0:	4824      	ldr	r0, [pc, #144]	; (8011844 <_printf_i+0x23c>)
 80117b2:	e7e4      	b.n	801177e <_printf_i+0x176>
 80117b4:	4615      	mov	r5, r2
 80117b6:	e7bd      	b.n	8011734 <_printf_i+0x12c>
 80117b8:	682b      	ldr	r3, [r5, #0]
 80117ba:	6826      	ldr	r6, [r4, #0]
 80117bc:	6961      	ldr	r1, [r4, #20]
 80117be:	1d18      	adds	r0, r3, #4
 80117c0:	6028      	str	r0, [r5, #0]
 80117c2:	0635      	lsls	r5, r6, #24
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	d501      	bpl.n	80117cc <_printf_i+0x1c4>
 80117c8:	6019      	str	r1, [r3, #0]
 80117ca:	e002      	b.n	80117d2 <_printf_i+0x1ca>
 80117cc:	0670      	lsls	r0, r6, #25
 80117ce:	d5fb      	bpl.n	80117c8 <_printf_i+0x1c0>
 80117d0:	8019      	strh	r1, [r3, #0]
 80117d2:	2300      	movs	r3, #0
 80117d4:	6123      	str	r3, [r4, #16]
 80117d6:	4615      	mov	r5, r2
 80117d8:	e7bc      	b.n	8011754 <_printf_i+0x14c>
 80117da:	682b      	ldr	r3, [r5, #0]
 80117dc:	1d1a      	adds	r2, r3, #4
 80117de:	602a      	str	r2, [r5, #0]
 80117e0:	681d      	ldr	r5, [r3, #0]
 80117e2:	6862      	ldr	r2, [r4, #4]
 80117e4:	2100      	movs	r1, #0
 80117e6:	4628      	mov	r0, r5
 80117e8:	f7ee fcf2 	bl	80001d0 <memchr>
 80117ec:	b108      	cbz	r0, 80117f2 <_printf_i+0x1ea>
 80117ee:	1b40      	subs	r0, r0, r5
 80117f0:	6060      	str	r0, [r4, #4]
 80117f2:	6863      	ldr	r3, [r4, #4]
 80117f4:	6123      	str	r3, [r4, #16]
 80117f6:	2300      	movs	r3, #0
 80117f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117fc:	e7aa      	b.n	8011754 <_printf_i+0x14c>
 80117fe:	6923      	ldr	r3, [r4, #16]
 8011800:	462a      	mov	r2, r5
 8011802:	4649      	mov	r1, r9
 8011804:	4640      	mov	r0, r8
 8011806:	47d0      	blx	sl
 8011808:	3001      	adds	r0, #1
 801180a:	d0ad      	beq.n	8011768 <_printf_i+0x160>
 801180c:	6823      	ldr	r3, [r4, #0]
 801180e:	079b      	lsls	r3, r3, #30
 8011810:	d413      	bmi.n	801183a <_printf_i+0x232>
 8011812:	68e0      	ldr	r0, [r4, #12]
 8011814:	9b03      	ldr	r3, [sp, #12]
 8011816:	4298      	cmp	r0, r3
 8011818:	bfb8      	it	lt
 801181a:	4618      	movlt	r0, r3
 801181c:	e7a6      	b.n	801176c <_printf_i+0x164>
 801181e:	2301      	movs	r3, #1
 8011820:	4632      	mov	r2, r6
 8011822:	4649      	mov	r1, r9
 8011824:	4640      	mov	r0, r8
 8011826:	47d0      	blx	sl
 8011828:	3001      	adds	r0, #1
 801182a:	d09d      	beq.n	8011768 <_printf_i+0x160>
 801182c:	3501      	adds	r5, #1
 801182e:	68e3      	ldr	r3, [r4, #12]
 8011830:	9903      	ldr	r1, [sp, #12]
 8011832:	1a5b      	subs	r3, r3, r1
 8011834:	42ab      	cmp	r3, r5
 8011836:	dcf2      	bgt.n	801181e <_printf_i+0x216>
 8011838:	e7eb      	b.n	8011812 <_printf_i+0x20a>
 801183a:	2500      	movs	r5, #0
 801183c:	f104 0619 	add.w	r6, r4, #25
 8011840:	e7f5      	b.n	801182e <_printf_i+0x226>
 8011842:	bf00      	nop
 8011844:	08015509 	.word	0x08015509
 8011848:	0801551a 	.word	0x0801551a

0801184c <__sflush_r>:
 801184c:	898a      	ldrh	r2, [r1, #12]
 801184e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011852:	4605      	mov	r5, r0
 8011854:	0710      	lsls	r0, r2, #28
 8011856:	460c      	mov	r4, r1
 8011858:	d458      	bmi.n	801190c <__sflush_r+0xc0>
 801185a:	684b      	ldr	r3, [r1, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	dc05      	bgt.n	801186c <__sflush_r+0x20>
 8011860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011862:	2b00      	cmp	r3, #0
 8011864:	dc02      	bgt.n	801186c <__sflush_r+0x20>
 8011866:	2000      	movs	r0, #0
 8011868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801186c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801186e:	2e00      	cmp	r6, #0
 8011870:	d0f9      	beq.n	8011866 <__sflush_r+0x1a>
 8011872:	2300      	movs	r3, #0
 8011874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011878:	682f      	ldr	r7, [r5, #0]
 801187a:	6a21      	ldr	r1, [r4, #32]
 801187c:	602b      	str	r3, [r5, #0]
 801187e:	d032      	beq.n	80118e6 <__sflush_r+0x9a>
 8011880:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011882:	89a3      	ldrh	r3, [r4, #12]
 8011884:	075a      	lsls	r2, r3, #29
 8011886:	d505      	bpl.n	8011894 <__sflush_r+0x48>
 8011888:	6863      	ldr	r3, [r4, #4]
 801188a:	1ac0      	subs	r0, r0, r3
 801188c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801188e:	b10b      	cbz	r3, 8011894 <__sflush_r+0x48>
 8011890:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011892:	1ac0      	subs	r0, r0, r3
 8011894:	2300      	movs	r3, #0
 8011896:	4602      	mov	r2, r0
 8011898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801189a:	6a21      	ldr	r1, [r4, #32]
 801189c:	4628      	mov	r0, r5
 801189e:	47b0      	blx	r6
 80118a0:	1c43      	adds	r3, r0, #1
 80118a2:	89a3      	ldrh	r3, [r4, #12]
 80118a4:	d106      	bne.n	80118b4 <__sflush_r+0x68>
 80118a6:	6829      	ldr	r1, [r5, #0]
 80118a8:	291d      	cmp	r1, #29
 80118aa:	d82b      	bhi.n	8011904 <__sflush_r+0xb8>
 80118ac:	4a29      	ldr	r2, [pc, #164]	; (8011954 <__sflush_r+0x108>)
 80118ae:	410a      	asrs	r2, r1
 80118b0:	07d6      	lsls	r6, r2, #31
 80118b2:	d427      	bmi.n	8011904 <__sflush_r+0xb8>
 80118b4:	2200      	movs	r2, #0
 80118b6:	6062      	str	r2, [r4, #4]
 80118b8:	04d9      	lsls	r1, r3, #19
 80118ba:	6922      	ldr	r2, [r4, #16]
 80118bc:	6022      	str	r2, [r4, #0]
 80118be:	d504      	bpl.n	80118ca <__sflush_r+0x7e>
 80118c0:	1c42      	adds	r2, r0, #1
 80118c2:	d101      	bne.n	80118c8 <__sflush_r+0x7c>
 80118c4:	682b      	ldr	r3, [r5, #0]
 80118c6:	b903      	cbnz	r3, 80118ca <__sflush_r+0x7e>
 80118c8:	6560      	str	r0, [r4, #84]	; 0x54
 80118ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118cc:	602f      	str	r7, [r5, #0]
 80118ce:	2900      	cmp	r1, #0
 80118d0:	d0c9      	beq.n	8011866 <__sflush_r+0x1a>
 80118d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118d6:	4299      	cmp	r1, r3
 80118d8:	d002      	beq.n	80118e0 <__sflush_r+0x94>
 80118da:	4628      	mov	r0, r5
 80118dc:	f7ff fbea 	bl	80110b4 <_free_r>
 80118e0:	2000      	movs	r0, #0
 80118e2:	6360      	str	r0, [r4, #52]	; 0x34
 80118e4:	e7c0      	b.n	8011868 <__sflush_r+0x1c>
 80118e6:	2301      	movs	r3, #1
 80118e8:	4628      	mov	r0, r5
 80118ea:	47b0      	blx	r6
 80118ec:	1c41      	adds	r1, r0, #1
 80118ee:	d1c8      	bne.n	8011882 <__sflush_r+0x36>
 80118f0:	682b      	ldr	r3, [r5, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d0c5      	beq.n	8011882 <__sflush_r+0x36>
 80118f6:	2b1d      	cmp	r3, #29
 80118f8:	d001      	beq.n	80118fe <__sflush_r+0xb2>
 80118fa:	2b16      	cmp	r3, #22
 80118fc:	d101      	bne.n	8011902 <__sflush_r+0xb6>
 80118fe:	602f      	str	r7, [r5, #0]
 8011900:	e7b1      	b.n	8011866 <__sflush_r+0x1a>
 8011902:	89a3      	ldrh	r3, [r4, #12]
 8011904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011908:	81a3      	strh	r3, [r4, #12]
 801190a:	e7ad      	b.n	8011868 <__sflush_r+0x1c>
 801190c:	690f      	ldr	r7, [r1, #16]
 801190e:	2f00      	cmp	r7, #0
 8011910:	d0a9      	beq.n	8011866 <__sflush_r+0x1a>
 8011912:	0793      	lsls	r3, r2, #30
 8011914:	680e      	ldr	r6, [r1, #0]
 8011916:	bf08      	it	eq
 8011918:	694b      	ldreq	r3, [r1, #20]
 801191a:	600f      	str	r7, [r1, #0]
 801191c:	bf18      	it	ne
 801191e:	2300      	movne	r3, #0
 8011920:	eba6 0807 	sub.w	r8, r6, r7
 8011924:	608b      	str	r3, [r1, #8]
 8011926:	f1b8 0f00 	cmp.w	r8, #0
 801192a:	dd9c      	ble.n	8011866 <__sflush_r+0x1a>
 801192c:	6a21      	ldr	r1, [r4, #32]
 801192e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011930:	4643      	mov	r3, r8
 8011932:	463a      	mov	r2, r7
 8011934:	4628      	mov	r0, r5
 8011936:	47b0      	blx	r6
 8011938:	2800      	cmp	r0, #0
 801193a:	dc06      	bgt.n	801194a <__sflush_r+0xfe>
 801193c:	89a3      	ldrh	r3, [r4, #12]
 801193e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011942:	81a3      	strh	r3, [r4, #12]
 8011944:	f04f 30ff 	mov.w	r0, #4294967295
 8011948:	e78e      	b.n	8011868 <__sflush_r+0x1c>
 801194a:	4407      	add	r7, r0
 801194c:	eba8 0800 	sub.w	r8, r8, r0
 8011950:	e7e9      	b.n	8011926 <__sflush_r+0xda>
 8011952:	bf00      	nop
 8011954:	dfbffffe 	.word	0xdfbffffe

08011958 <_fflush_r>:
 8011958:	b538      	push	{r3, r4, r5, lr}
 801195a:	690b      	ldr	r3, [r1, #16]
 801195c:	4605      	mov	r5, r0
 801195e:	460c      	mov	r4, r1
 8011960:	b913      	cbnz	r3, 8011968 <_fflush_r+0x10>
 8011962:	2500      	movs	r5, #0
 8011964:	4628      	mov	r0, r5
 8011966:	bd38      	pop	{r3, r4, r5, pc}
 8011968:	b118      	cbz	r0, 8011972 <_fflush_r+0x1a>
 801196a:	6a03      	ldr	r3, [r0, #32]
 801196c:	b90b      	cbnz	r3, 8011972 <_fflush_r+0x1a>
 801196e:	f7ff fa7d 	bl	8010e6c <__sinit>
 8011972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d0f3      	beq.n	8011962 <_fflush_r+0xa>
 801197a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801197c:	07d0      	lsls	r0, r2, #31
 801197e:	d404      	bmi.n	801198a <_fflush_r+0x32>
 8011980:	0599      	lsls	r1, r3, #22
 8011982:	d402      	bmi.n	801198a <_fflush_r+0x32>
 8011984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011986:	f7ff fb75 	bl	8011074 <__retarget_lock_acquire_recursive>
 801198a:	4628      	mov	r0, r5
 801198c:	4621      	mov	r1, r4
 801198e:	f7ff ff5d 	bl	801184c <__sflush_r>
 8011992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011994:	07da      	lsls	r2, r3, #31
 8011996:	4605      	mov	r5, r0
 8011998:	d4e4      	bmi.n	8011964 <_fflush_r+0xc>
 801199a:	89a3      	ldrh	r3, [r4, #12]
 801199c:	059b      	lsls	r3, r3, #22
 801199e:	d4e1      	bmi.n	8011964 <_fflush_r+0xc>
 80119a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80119a2:	f7ff fb68 	bl	8011076 <__retarget_lock_release_recursive>
 80119a6:	e7dd      	b.n	8011964 <_fflush_r+0xc>

080119a8 <__swbuf_r>:
 80119a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119aa:	460e      	mov	r6, r1
 80119ac:	4614      	mov	r4, r2
 80119ae:	4605      	mov	r5, r0
 80119b0:	b118      	cbz	r0, 80119ba <__swbuf_r+0x12>
 80119b2:	6a03      	ldr	r3, [r0, #32]
 80119b4:	b90b      	cbnz	r3, 80119ba <__swbuf_r+0x12>
 80119b6:	f7ff fa59 	bl	8010e6c <__sinit>
 80119ba:	69a3      	ldr	r3, [r4, #24]
 80119bc:	60a3      	str	r3, [r4, #8]
 80119be:	89a3      	ldrh	r3, [r4, #12]
 80119c0:	071a      	lsls	r2, r3, #28
 80119c2:	d525      	bpl.n	8011a10 <__swbuf_r+0x68>
 80119c4:	6923      	ldr	r3, [r4, #16]
 80119c6:	b31b      	cbz	r3, 8011a10 <__swbuf_r+0x68>
 80119c8:	6823      	ldr	r3, [r4, #0]
 80119ca:	6922      	ldr	r2, [r4, #16]
 80119cc:	1a98      	subs	r0, r3, r2
 80119ce:	6963      	ldr	r3, [r4, #20]
 80119d0:	b2f6      	uxtb	r6, r6
 80119d2:	4283      	cmp	r3, r0
 80119d4:	4637      	mov	r7, r6
 80119d6:	dc04      	bgt.n	80119e2 <__swbuf_r+0x3a>
 80119d8:	4621      	mov	r1, r4
 80119da:	4628      	mov	r0, r5
 80119dc:	f7ff ffbc 	bl	8011958 <_fflush_r>
 80119e0:	b9e0      	cbnz	r0, 8011a1c <__swbuf_r+0x74>
 80119e2:	68a3      	ldr	r3, [r4, #8]
 80119e4:	3b01      	subs	r3, #1
 80119e6:	60a3      	str	r3, [r4, #8]
 80119e8:	6823      	ldr	r3, [r4, #0]
 80119ea:	1c5a      	adds	r2, r3, #1
 80119ec:	6022      	str	r2, [r4, #0]
 80119ee:	701e      	strb	r6, [r3, #0]
 80119f0:	6962      	ldr	r2, [r4, #20]
 80119f2:	1c43      	adds	r3, r0, #1
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d004      	beq.n	8011a02 <__swbuf_r+0x5a>
 80119f8:	89a3      	ldrh	r3, [r4, #12]
 80119fa:	07db      	lsls	r3, r3, #31
 80119fc:	d506      	bpl.n	8011a0c <__swbuf_r+0x64>
 80119fe:	2e0a      	cmp	r6, #10
 8011a00:	d104      	bne.n	8011a0c <__swbuf_r+0x64>
 8011a02:	4621      	mov	r1, r4
 8011a04:	4628      	mov	r0, r5
 8011a06:	f7ff ffa7 	bl	8011958 <_fflush_r>
 8011a0a:	b938      	cbnz	r0, 8011a1c <__swbuf_r+0x74>
 8011a0c:	4638      	mov	r0, r7
 8011a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a10:	4621      	mov	r1, r4
 8011a12:	4628      	mov	r0, r5
 8011a14:	f000 f806 	bl	8011a24 <__swsetup_r>
 8011a18:	2800      	cmp	r0, #0
 8011a1a:	d0d5      	beq.n	80119c8 <__swbuf_r+0x20>
 8011a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8011a20:	e7f4      	b.n	8011a0c <__swbuf_r+0x64>
	...

08011a24 <__swsetup_r>:
 8011a24:	b538      	push	{r3, r4, r5, lr}
 8011a26:	4b2a      	ldr	r3, [pc, #168]	; (8011ad0 <__swsetup_r+0xac>)
 8011a28:	4605      	mov	r5, r0
 8011a2a:	6818      	ldr	r0, [r3, #0]
 8011a2c:	460c      	mov	r4, r1
 8011a2e:	b118      	cbz	r0, 8011a38 <__swsetup_r+0x14>
 8011a30:	6a03      	ldr	r3, [r0, #32]
 8011a32:	b90b      	cbnz	r3, 8011a38 <__swsetup_r+0x14>
 8011a34:	f7ff fa1a 	bl	8010e6c <__sinit>
 8011a38:	89a3      	ldrh	r3, [r4, #12]
 8011a3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a3e:	0718      	lsls	r0, r3, #28
 8011a40:	d422      	bmi.n	8011a88 <__swsetup_r+0x64>
 8011a42:	06d9      	lsls	r1, r3, #27
 8011a44:	d407      	bmi.n	8011a56 <__swsetup_r+0x32>
 8011a46:	2309      	movs	r3, #9
 8011a48:	602b      	str	r3, [r5, #0]
 8011a4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011a4e:	81a3      	strh	r3, [r4, #12]
 8011a50:	f04f 30ff 	mov.w	r0, #4294967295
 8011a54:	e034      	b.n	8011ac0 <__swsetup_r+0x9c>
 8011a56:	0758      	lsls	r0, r3, #29
 8011a58:	d512      	bpl.n	8011a80 <__swsetup_r+0x5c>
 8011a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a5c:	b141      	cbz	r1, 8011a70 <__swsetup_r+0x4c>
 8011a5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a62:	4299      	cmp	r1, r3
 8011a64:	d002      	beq.n	8011a6c <__swsetup_r+0x48>
 8011a66:	4628      	mov	r0, r5
 8011a68:	f7ff fb24 	bl	80110b4 <_free_r>
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	6363      	str	r3, [r4, #52]	; 0x34
 8011a70:	89a3      	ldrh	r3, [r4, #12]
 8011a72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011a76:	81a3      	strh	r3, [r4, #12]
 8011a78:	2300      	movs	r3, #0
 8011a7a:	6063      	str	r3, [r4, #4]
 8011a7c:	6923      	ldr	r3, [r4, #16]
 8011a7e:	6023      	str	r3, [r4, #0]
 8011a80:	89a3      	ldrh	r3, [r4, #12]
 8011a82:	f043 0308 	orr.w	r3, r3, #8
 8011a86:	81a3      	strh	r3, [r4, #12]
 8011a88:	6923      	ldr	r3, [r4, #16]
 8011a8a:	b94b      	cbnz	r3, 8011aa0 <__swsetup_r+0x7c>
 8011a8c:	89a3      	ldrh	r3, [r4, #12]
 8011a8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a96:	d003      	beq.n	8011aa0 <__swsetup_r+0x7c>
 8011a98:	4621      	mov	r1, r4
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	f000 f894 	bl	8011bc8 <__smakebuf_r>
 8011aa0:	89a0      	ldrh	r0, [r4, #12]
 8011aa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011aa6:	f010 0301 	ands.w	r3, r0, #1
 8011aaa:	d00a      	beq.n	8011ac2 <__swsetup_r+0x9e>
 8011aac:	2300      	movs	r3, #0
 8011aae:	60a3      	str	r3, [r4, #8]
 8011ab0:	6963      	ldr	r3, [r4, #20]
 8011ab2:	425b      	negs	r3, r3
 8011ab4:	61a3      	str	r3, [r4, #24]
 8011ab6:	6923      	ldr	r3, [r4, #16]
 8011ab8:	b943      	cbnz	r3, 8011acc <__swsetup_r+0xa8>
 8011aba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011abe:	d1c4      	bne.n	8011a4a <__swsetup_r+0x26>
 8011ac0:	bd38      	pop	{r3, r4, r5, pc}
 8011ac2:	0781      	lsls	r1, r0, #30
 8011ac4:	bf58      	it	pl
 8011ac6:	6963      	ldrpl	r3, [r4, #20]
 8011ac8:	60a3      	str	r3, [r4, #8]
 8011aca:	e7f4      	b.n	8011ab6 <__swsetup_r+0x92>
 8011acc:	2000      	movs	r0, #0
 8011ace:	e7f7      	b.n	8011ac0 <__swsetup_r+0x9c>
 8011ad0:	200004a8 	.word	0x200004a8

08011ad4 <_raise_r>:
 8011ad4:	291f      	cmp	r1, #31
 8011ad6:	b538      	push	{r3, r4, r5, lr}
 8011ad8:	4604      	mov	r4, r0
 8011ada:	460d      	mov	r5, r1
 8011adc:	d904      	bls.n	8011ae8 <_raise_r+0x14>
 8011ade:	2316      	movs	r3, #22
 8011ae0:	6003      	str	r3, [r0, #0]
 8011ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae6:	bd38      	pop	{r3, r4, r5, pc}
 8011ae8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011aea:	b112      	cbz	r2, 8011af2 <_raise_r+0x1e>
 8011aec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011af0:	b94b      	cbnz	r3, 8011b06 <_raise_r+0x32>
 8011af2:	4620      	mov	r0, r4
 8011af4:	f000 f830 	bl	8011b58 <_getpid_r>
 8011af8:	462a      	mov	r2, r5
 8011afa:	4601      	mov	r1, r0
 8011afc:	4620      	mov	r0, r4
 8011afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b02:	f000 b817 	b.w	8011b34 <_kill_r>
 8011b06:	2b01      	cmp	r3, #1
 8011b08:	d00a      	beq.n	8011b20 <_raise_r+0x4c>
 8011b0a:	1c59      	adds	r1, r3, #1
 8011b0c:	d103      	bne.n	8011b16 <_raise_r+0x42>
 8011b0e:	2316      	movs	r3, #22
 8011b10:	6003      	str	r3, [r0, #0]
 8011b12:	2001      	movs	r0, #1
 8011b14:	e7e7      	b.n	8011ae6 <_raise_r+0x12>
 8011b16:	2400      	movs	r4, #0
 8011b18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	4798      	blx	r3
 8011b20:	2000      	movs	r0, #0
 8011b22:	e7e0      	b.n	8011ae6 <_raise_r+0x12>

08011b24 <raise>:
 8011b24:	4b02      	ldr	r3, [pc, #8]	; (8011b30 <raise+0xc>)
 8011b26:	4601      	mov	r1, r0
 8011b28:	6818      	ldr	r0, [r3, #0]
 8011b2a:	f7ff bfd3 	b.w	8011ad4 <_raise_r>
 8011b2e:	bf00      	nop
 8011b30:	200004a8 	.word	0x200004a8

08011b34 <_kill_r>:
 8011b34:	b538      	push	{r3, r4, r5, lr}
 8011b36:	4d07      	ldr	r5, [pc, #28]	; (8011b54 <_kill_r+0x20>)
 8011b38:	2300      	movs	r3, #0
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	4608      	mov	r0, r1
 8011b3e:	4611      	mov	r1, r2
 8011b40:	602b      	str	r3, [r5, #0]
 8011b42:	f7f4 ff5f 	bl	8006a04 <_kill>
 8011b46:	1c43      	adds	r3, r0, #1
 8011b48:	d102      	bne.n	8011b50 <_kill_r+0x1c>
 8011b4a:	682b      	ldr	r3, [r5, #0]
 8011b4c:	b103      	cbz	r3, 8011b50 <_kill_r+0x1c>
 8011b4e:	6023      	str	r3, [r4, #0]
 8011b50:	bd38      	pop	{r3, r4, r5, pc}
 8011b52:	bf00      	nop
 8011b54:	20002e60 	.word	0x20002e60

08011b58 <_getpid_r>:
 8011b58:	f7f4 bf4c 	b.w	80069f4 <_getpid>

08011b5c <_sbrk_r>:
 8011b5c:	b538      	push	{r3, r4, r5, lr}
 8011b5e:	4d06      	ldr	r5, [pc, #24]	; (8011b78 <_sbrk_r+0x1c>)
 8011b60:	2300      	movs	r3, #0
 8011b62:	4604      	mov	r4, r0
 8011b64:	4608      	mov	r0, r1
 8011b66:	602b      	str	r3, [r5, #0]
 8011b68:	f7f4 ffd4 	bl	8006b14 <_sbrk>
 8011b6c:	1c43      	adds	r3, r0, #1
 8011b6e:	d102      	bne.n	8011b76 <_sbrk_r+0x1a>
 8011b70:	682b      	ldr	r3, [r5, #0]
 8011b72:	b103      	cbz	r3, 8011b76 <_sbrk_r+0x1a>
 8011b74:	6023      	str	r3, [r4, #0]
 8011b76:	bd38      	pop	{r3, r4, r5, pc}
 8011b78:	20002e60 	.word	0x20002e60

08011b7c <__swhatbuf_r>:
 8011b7c:	b570      	push	{r4, r5, r6, lr}
 8011b7e:	460c      	mov	r4, r1
 8011b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b84:	2900      	cmp	r1, #0
 8011b86:	b096      	sub	sp, #88	; 0x58
 8011b88:	4615      	mov	r5, r2
 8011b8a:	461e      	mov	r6, r3
 8011b8c:	da0d      	bge.n	8011baa <__swhatbuf_r+0x2e>
 8011b8e:	89a3      	ldrh	r3, [r4, #12]
 8011b90:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011b94:	f04f 0100 	mov.w	r1, #0
 8011b98:	bf0c      	ite	eq
 8011b9a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011b9e:	2340      	movne	r3, #64	; 0x40
 8011ba0:	2000      	movs	r0, #0
 8011ba2:	6031      	str	r1, [r6, #0]
 8011ba4:	602b      	str	r3, [r5, #0]
 8011ba6:	b016      	add	sp, #88	; 0x58
 8011ba8:	bd70      	pop	{r4, r5, r6, pc}
 8011baa:	466a      	mov	r2, sp
 8011bac:	f000 f848 	bl	8011c40 <_fstat_r>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	dbec      	blt.n	8011b8e <__swhatbuf_r+0x12>
 8011bb4:	9901      	ldr	r1, [sp, #4]
 8011bb6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011bba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011bbe:	4259      	negs	r1, r3
 8011bc0:	4159      	adcs	r1, r3
 8011bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011bc6:	e7eb      	b.n	8011ba0 <__swhatbuf_r+0x24>

08011bc8 <__smakebuf_r>:
 8011bc8:	898b      	ldrh	r3, [r1, #12]
 8011bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011bcc:	079d      	lsls	r5, r3, #30
 8011bce:	4606      	mov	r6, r0
 8011bd0:	460c      	mov	r4, r1
 8011bd2:	d507      	bpl.n	8011be4 <__smakebuf_r+0x1c>
 8011bd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011bd8:	6023      	str	r3, [r4, #0]
 8011bda:	6123      	str	r3, [r4, #16]
 8011bdc:	2301      	movs	r3, #1
 8011bde:	6163      	str	r3, [r4, #20]
 8011be0:	b002      	add	sp, #8
 8011be2:	bd70      	pop	{r4, r5, r6, pc}
 8011be4:	ab01      	add	r3, sp, #4
 8011be6:	466a      	mov	r2, sp
 8011be8:	f7ff ffc8 	bl	8011b7c <__swhatbuf_r>
 8011bec:	9900      	ldr	r1, [sp, #0]
 8011bee:	4605      	mov	r5, r0
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	f7ff facb 	bl	801118c <_malloc_r>
 8011bf6:	b948      	cbnz	r0, 8011c0c <__smakebuf_r+0x44>
 8011bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bfc:	059a      	lsls	r2, r3, #22
 8011bfe:	d4ef      	bmi.n	8011be0 <__smakebuf_r+0x18>
 8011c00:	f023 0303 	bic.w	r3, r3, #3
 8011c04:	f043 0302 	orr.w	r3, r3, #2
 8011c08:	81a3      	strh	r3, [r4, #12]
 8011c0a:	e7e3      	b.n	8011bd4 <__smakebuf_r+0xc>
 8011c0c:	89a3      	ldrh	r3, [r4, #12]
 8011c0e:	6020      	str	r0, [r4, #0]
 8011c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c14:	81a3      	strh	r3, [r4, #12]
 8011c16:	9b00      	ldr	r3, [sp, #0]
 8011c18:	6163      	str	r3, [r4, #20]
 8011c1a:	9b01      	ldr	r3, [sp, #4]
 8011c1c:	6120      	str	r0, [r4, #16]
 8011c1e:	b15b      	cbz	r3, 8011c38 <__smakebuf_r+0x70>
 8011c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c24:	4630      	mov	r0, r6
 8011c26:	f000 f81d 	bl	8011c64 <_isatty_r>
 8011c2a:	b128      	cbz	r0, 8011c38 <__smakebuf_r+0x70>
 8011c2c:	89a3      	ldrh	r3, [r4, #12]
 8011c2e:	f023 0303 	bic.w	r3, r3, #3
 8011c32:	f043 0301 	orr.w	r3, r3, #1
 8011c36:	81a3      	strh	r3, [r4, #12]
 8011c38:	89a3      	ldrh	r3, [r4, #12]
 8011c3a:	431d      	orrs	r5, r3
 8011c3c:	81a5      	strh	r5, [r4, #12]
 8011c3e:	e7cf      	b.n	8011be0 <__smakebuf_r+0x18>

08011c40 <_fstat_r>:
 8011c40:	b538      	push	{r3, r4, r5, lr}
 8011c42:	4d07      	ldr	r5, [pc, #28]	; (8011c60 <_fstat_r+0x20>)
 8011c44:	2300      	movs	r3, #0
 8011c46:	4604      	mov	r4, r0
 8011c48:	4608      	mov	r0, r1
 8011c4a:	4611      	mov	r1, r2
 8011c4c:	602b      	str	r3, [r5, #0]
 8011c4e:	f7f4 ff38 	bl	8006ac2 <_fstat>
 8011c52:	1c43      	adds	r3, r0, #1
 8011c54:	d102      	bne.n	8011c5c <_fstat_r+0x1c>
 8011c56:	682b      	ldr	r3, [r5, #0]
 8011c58:	b103      	cbz	r3, 8011c5c <_fstat_r+0x1c>
 8011c5a:	6023      	str	r3, [r4, #0]
 8011c5c:	bd38      	pop	{r3, r4, r5, pc}
 8011c5e:	bf00      	nop
 8011c60:	20002e60 	.word	0x20002e60

08011c64 <_isatty_r>:
 8011c64:	b538      	push	{r3, r4, r5, lr}
 8011c66:	4d06      	ldr	r5, [pc, #24]	; (8011c80 <_isatty_r+0x1c>)
 8011c68:	2300      	movs	r3, #0
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	4608      	mov	r0, r1
 8011c6e:	602b      	str	r3, [r5, #0]
 8011c70:	f7f4 ff37 	bl	8006ae2 <_isatty>
 8011c74:	1c43      	adds	r3, r0, #1
 8011c76:	d102      	bne.n	8011c7e <_isatty_r+0x1a>
 8011c78:	682b      	ldr	r3, [r5, #0]
 8011c7a:	b103      	cbz	r3, 8011c7e <_isatty_r+0x1a>
 8011c7c:	6023      	str	r3, [r4, #0]
 8011c7e:	bd38      	pop	{r3, r4, r5, pc}
 8011c80:	20002e60 	.word	0x20002e60

08011c84 <acos>:
 8011c84:	b538      	push	{r3, r4, r5, lr}
 8011c86:	ed2d 8b02 	vpush	{d8}
 8011c8a:	ec55 4b10 	vmov	r4, r5, d0
 8011c8e:	f000 fb4b 	bl	8012328 <__ieee754_acos>
 8011c92:	4622      	mov	r2, r4
 8011c94:	462b      	mov	r3, r5
 8011c96:	4620      	mov	r0, r4
 8011c98:	4629      	mov	r1, r5
 8011c9a:	eeb0 8a40 	vmov.f32	s16, s0
 8011c9e:	eef0 8a60 	vmov.f32	s17, s1
 8011ca2:	f7ee ff3b 	bl	8000b1c <__aeabi_dcmpun>
 8011ca6:	b9a8      	cbnz	r0, 8011cd4 <acos+0x50>
 8011ca8:	ec45 4b10 	vmov	d0, r4, r5
 8011cac:	f000 fa30 	bl	8012110 <fabs>
 8011cb0:	4b0c      	ldr	r3, [pc, #48]	; (8011ce4 <acos+0x60>)
 8011cb2:	ec51 0b10 	vmov	r0, r1, d0
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	f7ee ff26 	bl	8000b08 <__aeabi_dcmpgt>
 8011cbc:	b150      	cbz	r0, 8011cd4 <acos+0x50>
 8011cbe:	f7ff f9af 	bl	8011020 <__errno>
 8011cc2:	ecbd 8b02 	vpop	{d8}
 8011cc6:	2321      	movs	r3, #33	; 0x21
 8011cc8:	6003      	str	r3, [r0, #0]
 8011cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cce:	4806      	ldr	r0, [pc, #24]	; (8011ce8 <acos+0x64>)
 8011cd0:	f000 baee 	b.w	80122b0 <nan>
 8011cd4:	eeb0 0a48 	vmov.f32	s0, s16
 8011cd8:	eef0 0a68 	vmov.f32	s1, s17
 8011cdc:	ecbd 8b02 	vpop	{d8}
 8011ce0:	bd38      	pop	{r3, r4, r5, pc}
 8011ce2:	bf00      	nop
 8011ce4:	3ff00000 	.word	0x3ff00000
 8011ce8:	080154f7 	.word	0x080154f7

08011cec <pow>:
 8011cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cee:	ed2d 8b02 	vpush	{d8}
 8011cf2:	eeb0 8a40 	vmov.f32	s16, s0
 8011cf6:	eef0 8a60 	vmov.f32	s17, s1
 8011cfa:	ec55 4b11 	vmov	r4, r5, d1
 8011cfe:	f000 fd73 	bl	80127e8 <__ieee754_pow>
 8011d02:	4622      	mov	r2, r4
 8011d04:	462b      	mov	r3, r5
 8011d06:	4620      	mov	r0, r4
 8011d08:	4629      	mov	r1, r5
 8011d0a:	ec57 6b10 	vmov	r6, r7, d0
 8011d0e:	f7ee ff05 	bl	8000b1c <__aeabi_dcmpun>
 8011d12:	2800      	cmp	r0, #0
 8011d14:	d13b      	bne.n	8011d8e <pow+0xa2>
 8011d16:	ec51 0b18 	vmov	r0, r1, d8
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	f7ee fecb 	bl	8000ab8 <__aeabi_dcmpeq>
 8011d22:	b1b8      	cbz	r0, 8011d54 <pow+0x68>
 8011d24:	2200      	movs	r2, #0
 8011d26:	2300      	movs	r3, #0
 8011d28:	4620      	mov	r0, r4
 8011d2a:	4629      	mov	r1, r5
 8011d2c:	f7ee fec4 	bl	8000ab8 <__aeabi_dcmpeq>
 8011d30:	2800      	cmp	r0, #0
 8011d32:	d146      	bne.n	8011dc2 <pow+0xd6>
 8011d34:	ec45 4b10 	vmov	d0, r4, r5
 8011d38:	f000 faae 	bl	8012298 <finite>
 8011d3c:	b338      	cbz	r0, 8011d8e <pow+0xa2>
 8011d3e:	2200      	movs	r2, #0
 8011d40:	2300      	movs	r3, #0
 8011d42:	4620      	mov	r0, r4
 8011d44:	4629      	mov	r1, r5
 8011d46:	f7ee fec1 	bl	8000acc <__aeabi_dcmplt>
 8011d4a:	b300      	cbz	r0, 8011d8e <pow+0xa2>
 8011d4c:	f7ff f968 	bl	8011020 <__errno>
 8011d50:	2322      	movs	r3, #34	; 0x22
 8011d52:	e01b      	b.n	8011d8c <pow+0xa0>
 8011d54:	ec47 6b10 	vmov	d0, r6, r7
 8011d58:	f000 fa9e 	bl	8012298 <finite>
 8011d5c:	b9e0      	cbnz	r0, 8011d98 <pow+0xac>
 8011d5e:	eeb0 0a48 	vmov.f32	s0, s16
 8011d62:	eef0 0a68 	vmov.f32	s1, s17
 8011d66:	f000 fa97 	bl	8012298 <finite>
 8011d6a:	b1a8      	cbz	r0, 8011d98 <pow+0xac>
 8011d6c:	ec45 4b10 	vmov	d0, r4, r5
 8011d70:	f000 fa92 	bl	8012298 <finite>
 8011d74:	b180      	cbz	r0, 8011d98 <pow+0xac>
 8011d76:	4632      	mov	r2, r6
 8011d78:	463b      	mov	r3, r7
 8011d7a:	4630      	mov	r0, r6
 8011d7c:	4639      	mov	r1, r7
 8011d7e:	f7ee fecd 	bl	8000b1c <__aeabi_dcmpun>
 8011d82:	2800      	cmp	r0, #0
 8011d84:	d0e2      	beq.n	8011d4c <pow+0x60>
 8011d86:	f7ff f94b 	bl	8011020 <__errno>
 8011d8a:	2321      	movs	r3, #33	; 0x21
 8011d8c:	6003      	str	r3, [r0, #0]
 8011d8e:	ecbd 8b02 	vpop	{d8}
 8011d92:	ec47 6b10 	vmov	d0, r6, r7
 8011d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d98:	2200      	movs	r2, #0
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	4630      	mov	r0, r6
 8011d9e:	4639      	mov	r1, r7
 8011da0:	f7ee fe8a 	bl	8000ab8 <__aeabi_dcmpeq>
 8011da4:	2800      	cmp	r0, #0
 8011da6:	d0f2      	beq.n	8011d8e <pow+0xa2>
 8011da8:	eeb0 0a48 	vmov.f32	s0, s16
 8011dac:	eef0 0a68 	vmov.f32	s1, s17
 8011db0:	f000 fa72 	bl	8012298 <finite>
 8011db4:	2800      	cmp	r0, #0
 8011db6:	d0ea      	beq.n	8011d8e <pow+0xa2>
 8011db8:	ec45 4b10 	vmov	d0, r4, r5
 8011dbc:	f000 fa6c 	bl	8012298 <finite>
 8011dc0:	e7c3      	b.n	8011d4a <pow+0x5e>
 8011dc2:	4f01      	ldr	r7, [pc, #4]	; (8011dc8 <pow+0xdc>)
 8011dc4:	2600      	movs	r6, #0
 8011dc6:	e7e2      	b.n	8011d8e <pow+0xa2>
 8011dc8:	3ff00000 	.word	0x3ff00000
 8011dcc:	00000000 	.word	0x00000000

08011dd0 <atan>:
 8011dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd4:	ec55 4b10 	vmov	r4, r5, d0
 8011dd8:	4bc3      	ldr	r3, [pc, #780]	; (80120e8 <atan+0x318>)
 8011dda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011dde:	429e      	cmp	r6, r3
 8011de0:	46ab      	mov	fp, r5
 8011de2:	dd18      	ble.n	8011e16 <atan+0x46>
 8011de4:	4bc1      	ldr	r3, [pc, #772]	; (80120ec <atan+0x31c>)
 8011de6:	429e      	cmp	r6, r3
 8011de8:	dc01      	bgt.n	8011dee <atan+0x1e>
 8011dea:	d109      	bne.n	8011e00 <atan+0x30>
 8011dec:	b144      	cbz	r4, 8011e00 <atan+0x30>
 8011dee:	4622      	mov	r2, r4
 8011df0:	462b      	mov	r3, r5
 8011df2:	4620      	mov	r0, r4
 8011df4:	4629      	mov	r1, r5
 8011df6:	f7ee fa41 	bl	800027c <__adddf3>
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	460d      	mov	r5, r1
 8011dfe:	e006      	b.n	8011e0e <atan+0x3e>
 8011e00:	f1bb 0f00 	cmp.w	fp, #0
 8011e04:	f300 8131 	bgt.w	801206a <atan+0x29a>
 8011e08:	a59b      	add	r5, pc, #620	; (adr r5, 8012078 <atan+0x2a8>)
 8011e0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011e0e:	ec45 4b10 	vmov	d0, r4, r5
 8011e12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e16:	4bb6      	ldr	r3, [pc, #728]	; (80120f0 <atan+0x320>)
 8011e18:	429e      	cmp	r6, r3
 8011e1a:	dc14      	bgt.n	8011e46 <atan+0x76>
 8011e1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011e20:	429e      	cmp	r6, r3
 8011e22:	dc0d      	bgt.n	8011e40 <atan+0x70>
 8011e24:	a396      	add	r3, pc, #600	; (adr r3, 8012080 <atan+0x2b0>)
 8011e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2a:	ee10 0a10 	vmov	r0, s0
 8011e2e:	4629      	mov	r1, r5
 8011e30:	f7ee fa24 	bl	800027c <__adddf3>
 8011e34:	4baf      	ldr	r3, [pc, #700]	; (80120f4 <atan+0x324>)
 8011e36:	2200      	movs	r2, #0
 8011e38:	f7ee fe66 	bl	8000b08 <__aeabi_dcmpgt>
 8011e3c:	2800      	cmp	r0, #0
 8011e3e:	d1e6      	bne.n	8011e0e <atan+0x3e>
 8011e40:	f04f 3aff 	mov.w	sl, #4294967295
 8011e44:	e02b      	b.n	8011e9e <atan+0xce>
 8011e46:	f000 f963 	bl	8012110 <fabs>
 8011e4a:	4bab      	ldr	r3, [pc, #684]	; (80120f8 <atan+0x328>)
 8011e4c:	429e      	cmp	r6, r3
 8011e4e:	ec55 4b10 	vmov	r4, r5, d0
 8011e52:	f300 80bf 	bgt.w	8011fd4 <atan+0x204>
 8011e56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011e5a:	429e      	cmp	r6, r3
 8011e5c:	f300 80a0 	bgt.w	8011fa0 <atan+0x1d0>
 8011e60:	ee10 2a10 	vmov	r2, s0
 8011e64:	ee10 0a10 	vmov	r0, s0
 8011e68:	462b      	mov	r3, r5
 8011e6a:	4629      	mov	r1, r5
 8011e6c:	f7ee fa06 	bl	800027c <__adddf3>
 8011e70:	4ba0      	ldr	r3, [pc, #640]	; (80120f4 <atan+0x324>)
 8011e72:	2200      	movs	r2, #0
 8011e74:	f7ee fa00 	bl	8000278 <__aeabi_dsub>
 8011e78:	2200      	movs	r2, #0
 8011e7a:	4606      	mov	r6, r0
 8011e7c:	460f      	mov	r7, r1
 8011e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011e82:	4620      	mov	r0, r4
 8011e84:	4629      	mov	r1, r5
 8011e86:	f7ee f9f9 	bl	800027c <__adddf3>
 8011e8a:	4602      	mov	r2, r0
 8011e8c:	460b      	mov	r3, r1
 8011e8e:	4630      	mov	r0, r6
 8011e90:	4639      	mov	r1, r7
 8011e92:	f7ee fcd3 	bl	800083c <__aeabi_ddiv>
 8011e96:	f04f 0a00 	mov.w	sl, #0
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	460d      	mov	r5, r1
 8011e9e:	4622      	mov	r2, r4
 8011ea0:	462b      	mov	r3, r5
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	f7ee fb9f 	bl	80005e8 <__aeabi_dmul>
 8011eaa:	4602      	mov	r2, r0
 8011eac:	460b      	mov	r3, r1
 8011eae:	4680      	mov	r8, r0
 8011eb0:	4689      	mov	r9, r1
 8011eb2:	f7ee fb99 	bl	80005e8 <__aeabi_dmul>
 8011eb6:	a374      	add	r3, pc, #464	; (adr r3, 8012088 <atan+0x2b8>)
 8011eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ebc:	4606      	mov	r6, r0
 8011ebe:	460f      	mov	r7, r1
 8011ec0:	f7ee fb92 	bl	80005e8 <__aeabi_dmul>
 8011ec4:	a372      	add	r3, pc, #456	; (adr r3, 8012090 <atan+0x2c0>)
 8011ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eca:	f7ee f9d7 	bl	800027c <__adddf3>
 8011ece:	4632      	mov	r2, r6
 8011ed0:	463b      	mov	r3, r7
 8011ed2:	f7ee fb89 	bl	80005e8 <__aeabi_dmul>
 8011ed6:	a370      	add	r3, pc, #448	; (adr r3, 8012098 <atan+0x2c8>)
 8011ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011edc:	f7ee f9ce 	bl	800027c <__adddf3>
 8011ee0:	4632      	mov	r2, r6
 8011ee2:	463b      	mov	r3, r7
 8011ee4:	f7ee fb80 	bl	80005e8 <__aeabi_dmul>
 8011ee8:	a36d      	add	r3, pc, #436	; (adr r3, 80120a0 <atan+0x2d0>)
 8011eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eee:	f7ee f9c5 	bl	800027c <__adddf3>
 8011ef2:	4632      	mov	r2, r6
 8011ef4:	463b      	mov	r3, r7
 8011ef6:	f7ee fb77 	bl	80005e8 <__aeabi_dmul>
 8011efa:	a36b      	add	r3, pc, #428	; (adr r3, 80120a8 <atan+0x2d8>)
 8011efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f00:	f7ee f9bc 	bl	800027c <__adddf3>
 8011f04:	4632      	mov	r2, r6
 8011f06:	463b      	mov	r3, r7
 8011f08:	f7ee fb6e 	bl	80005e8 <__aeabi_dmul>
 8011f0c:	a368      	add	r3, pc, #416	; (adr r3, 80120b0 <atan+0x2e0>)
 8011f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f12:	f7ee f9b3 	bl	800027c <__adddf3>
 8011f16:	4642      	mov	r2, r8
 8011f18:	464b      	mov	r3, r9
 8011f1a:	f7ee fb65 	bl	80005e8 <__aeabi_dmul>
 8011f1e:	a366      	add	r3, pc, #408	; (adr r3, 80120b8 <atan+0x2e8>)
 8011f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f24:	4680      	mov	r8, r0
 8011f26:	4689      	mov	r9, r1
 8011f28:	4630      	mov	r0, r6
 8011f2a:	4639      	mov	r1, r7
 8011f2c:	f7ee fb5c 	bl	80005e8 <__aeabi_dmul>
 8011f30:	a363      	add	r3, pc, #396	; (adr r3, 80120c0 <atan+0x2f0>)
 8011f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f36:	f7ee f99f 	bl	8000278 <__aeabi_dsub>
 8011f3a:	4632      	mov	r2, r6
 8011f3c:	463b      	mov	r3, r7
 8011f3e:	f7ee fb53 	bl	80005e8 <__aeabi_dmul>
 8011f42:	a361      	add	r3, pc, #388	; (adr r3, 80120c8 <atan+0x2f8>)
 8011f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f48:	f7ee f996 	bl	8000278 <__aeabi_dsub>
 8011f4c:	4632      	mov	r2, r6
 8011f4e:	463b      	mov	r3, r7
 8011f50:	f7ee fb4a 	bl	80005e8 <__aeabi_dmul>
 8011f54:	a35e      	add	r3, pc, #376	; (adr r3, 80120d0 <atan+0x300>)
 8011f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f5a:	f7ee f98d 	bl	8000278 <__aeabi_dsub>
 8011f5e:	4632      	mov	r2, r6
 8011f60:	463b      	mov	r3, r7
 8011f62:	f7ee fb41 	bl	80005e8 <__aeabi_dmul>
 8011f66:	a35c      	add	r3, pc, #368	; (adr r3, 80120d8 <atan+0x308>)
 8011f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f6c:	f7ee f984 	bl	8000278 <__aeabi_dsub>
 8011f70:	4632      	mov	r2, r6
 8011f72:	463b      	mov	r3, r7
 8011f74:	f7ee fb38 	bl	80005e8 <__aeabi_dmul>
 8011f78:	4602      	mov	r2, r0
 8011f7a:	460b      	mov	r3, r1
 8011f7c:	4640      	mov	r0, r8
 8011f7e:	4649      	mov	r1, r9
 8011f80:	f7ee f97c 	bl	800027c <__adddf3>
 8011f84:	4622      	mov	r2, r4
 8011f86:	462b      	mov	r3, r5
 8011f88:	f7ee fb2e 	bl	80005e8 <__aeabi_dmul>
 8011f8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011f90:	4602      	mov	r2, r0
 8011f92:	460b      	mov	r3, r1
 8011f94:	d14b      	bne.n	801202e <atan+0x25e>
 8011f96:	4620      	mov	r0, r4
 8011f98:	4629      	mov	r1, r5
 8011f9a:	f7ee f96d 	bl	8000278 <__aeabi_dsub>
 8011f9e:	e72c      	b.n	8011dfa <atan+0x2a>
 8011fa0:	ee10 0a10 	vmov	r0, s0
 8011fa4:	4b53      	ldr	r3, [pc, #332]	; (80120f4 <atan+0x324>)
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	4629      	mov	r1, r5
 8011faa:	f7ee f965 	bl	8000278 <__aeabi_dsub>
 8011fae:	4b51      	ldr	r3, [pc, #324]	; (80120f4 <atan+0x324>)
 8011fb0:	4606      	mov	r6, r0
 8011fb2:	460f      	mov	r7, r1
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	4629      	mov	r1, r5
 8011fba:	f7ee f95f 	bl	800027c <__adddf3>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	4630      	mov	r0, r6
 8011fc4:	4639      	mov	r1, r7
 8011fc6:	f7ee fc39 	bl	800083c <__aeabi_ddiv>
 8011fca:	f04f 0a01 	mov.w	sl, #1
 8011fce:	4604      	mov	r4, r0
 8011fd0:	460d      	mov	r5, r1
 8011fd2:	e764      	b.n	8011e9e <atan+0xce>
 8011fd4:	4b49      	ldr	r3, [pc, #292]	; (80120fc <atan+0x32c>)
 8011fd6:	429e      	cmp	r6, r3
 8011fd8:	da1d      	bge.n	8012016 <atan+0x246>
 8011fda:	ee10 0a10 	vmov	r0, s0
 8011fde:	4b48      	ldr	r3, [pc, #288]	; (8012100 <atan+0x330>)
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	4629      	mov	r1, r5
 8011fe4:	f7ee f948 	bl	8000278 <__aeabi_dsub>
 8011fe8:	4b45      	ldr	r3, [pc, #276]	; (8012100 <atan+0x330>)
 8011fea:	4606      	mov	r6, r0
 8011fec:	460f      	mov	r7, r1
 8011fee:	2200      	movs	r2, #0
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	4629      	mov	r1, r5
 8011ff4:	f7ee faf8 	bl	80005e8 <__aeabi_dmul>
 8011ff8:	4b3e      	ldr	r3, [pc, #248]	; (80120f4 <atan+0x324>)
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	f7ee f93e 	bl	800027c <__adddf3>
 8012000:	4602      	mov	r2, r0
 8012002:	460b      	mov	r3, r1
 8012004:	4630      	mov	r0, r6
 8012006:	4639      	mov	r1, r7
 8012008:	f7ee fc18 	bl	800083c <__aeabi_ddiv>
 801200c:	f04f 0a02 	mov.w	sl, #2
 8012010:	4604      	mov	r4, r0
 8012012:	460d      	mov	r5, r1
 8012014:	e743      	b.n	8011e9e <atan+0xce>
 8012016:	462b      	mov	r3, r5
 8012018:	ee10 2a10 	vmov	r2, s0
 801201c:	4939      	ldr	r1, [pc, #228]	; (8012104 <atan+0x334>)
 801201e:	2000      	movs	r0, #0
 8012020:	f7ee fc0c 	bl	800083c <__aeabi_ddiv>
 8012024:	f04f 0a03 	mov.w	sl, #3
 8012028:	4604      	mov	r4, r0
 801202a:	460d      	mov	r5, r1
 801202c:	e737      	b.n	8011e9e <atan+0xce>
 801202e:	4b36      	ldr	r3, [pc, #216]	; (8012108 <atan+0x338>)
 8012030:	4e36      	ldr	r6, [pc, #216]	; (801210c <atan+0x33c>)
 8012032:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203a:	f7ee f91d 	bl	8000278 <__aeabi_dsub>
 801203e:	4622      	mov	r2, r4
 8012040:	462b      	mov	r3, r5
 8012042:	f7ee f919 	bl	8000278 <__aeabi_dsub>
 8012046:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801204a:	4602      	mov	r2, r0
 801204c:	460b      	mov	r3, r1
 801204e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012052:	f7ee f911 	bl	8000278 <__aeabi_dsub>
 8012056:	f1bb 0f00 	cmp.w	fp, #0
 801205a:	4604      	mov	r4, r0
 801205c:	460d      	mov	r5, r1
 801205e:	f6bf aed6 	bge.w	8011e0e <atan+0x3e>
 8012062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012066:	461d      	mov	r5, r3
 8012068:	e6d1      	b.n	8011e0e <atan+0x3e>
 801206a:	a51d      	add	r5, pc, #116	; (adr r5, 80120e0 <atan+0x310>)
 801206c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012070:	e6cd      	b.n	8011e0e <atan+0x3e>
 8012072:	bf00      	nop
 8012074:	f3af 8000 	nop.w
 8012078:	54442d18 	.word	0x54442d18
 801207c:	bff921fb 	.word	0xbff921fb
 8012080:	8800759c 	.word	0x8800759c
 8012084:	7e37e43c 	.word	0x7e37e43c
 8012088:	e322da11 	.word	0xe322da11
 801208c:	3f90ad3a 	.word	0x3f90ad3a
 8012090:	24760deb 	.word	0x24760deb
 8012094:	3fa97b4b 	.word	0x3fa97b4b
 8012098:	a0d03d51 	.word	0xa0d03d51
 801209c:	3fb10d66 	.word	0x3fb10d66
 80120a0:	c54c206e 	.word	0xc54c206e
 80120a4:	3fb745cd 	.word	0x3fb745cd
 80120a8:	920083ff 	.word	0x920083ff
 80120ac:	3fc24924 	.word	0x3fc24924
 80120b0:	5555550d 	.word	0x5555550d
 80120b4:	3fd55555 	.word	0x3fd55555
 80120b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80120bc:	bfa2b444 	.word	0xbfa2b444
 80120c0:	52defd9a 	.word	0x52defd9a
 80120c4:	3fadde2d 	.word	0x3fadde2d
 80120c8:	af749a6d 	.word	0xaf749a6d
 80120cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80120d0:	fe231671 	.word	0xfe231671
 80120d4:	3fbc71c6 	.word	0x3fbc71c6
 80120d8:	9998ebc4 	.word	0x9998ebc4
 80120dc:	3fc99999 	.word	0x3fc99999
 80120e0:	54442d18 	.word	0x54442d18
 80120e4:	3ff921fb 	.word	0x3ff921fb
 80120e8:	440fffff 	.word	0x440fffff
 80120ec:	7ff00000 	.word	0x7ff00000
 80120f0:	3fdbffff 	.word	0x3fdbffff
 80120f4:	3ff00000 	.word	0x3ff00000
 80120f8:	3ff2ffff 	.word	0x3ff2ffff
 80120fc:	40038000 	.word	0x40038000
 8012100:	3ff80000 	.word	0x3ff80000
 8012104:	bff00000 	.word	0xbff00000
 8012108:	08015550 	.word	0x08015550
 801210c:	08015530 	.word	0x08015530

08012110 <fabs>:
 8012110:	ec51 0b10 	vmov	r0, r1, d0
 8012114:	ee10 2a10 	vmov	r2, s0
 8012118:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801211c:	ec43 2b10 	vmov	d0, r2, r3
 8012120:	4770      	bx	lr

08012122 <powf>:
 8012122:	b508      	push	{r3, lr}
 8012124:	ed2d 8b04 	vpush	{d8-d9}
 8012128:	eeb0 8a60 	vmov.f32	s16, s1
 801212c:	eeb0 9a40 	vmov.f32	s18, s0
 8012130:	f001 f92a 	bl	8013388 <__ieee754_powf>
 8012134:	eeb4 8a48 	vcmp.f32	s16, s16
 8012138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801213c:	eef0 8a40 	vmov.f32	s17, s0
 8012140:	d63e      	bvs.n	80121c0 <powf+0x9e>
 8012142:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214a:	d112      	bne.n	8012172 <powf+0x50>
 801214c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012154:	d039      	beq.n	80121ca <powf+0xa8>
 8012156:	eeb0 0a48 	vmov.f32	s0, s16
 801215a:	f000 f8b1 	bl	80122c0 <finitef>
 801215e:	b378      	cbz	r0, 80121c0 <powf+0x9e>
 8012160:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012168:	d52a      	bpl.n	80121c0 <powf+0x9e>
 801216a:	f7fe ff59 	bl	8011020 <__errno>
 801216e:	2322      	movs	r3, #34	; 0x22
 8012170:	e014      	b.n	801219c <powf+0x7a>
 8012172:	f000 f8a5 	bl	80122c0 <finitef>
 8012176:	b998      	cbnz	r0, 80121a0 <powf+0x7e>
 8012178:	eeb0 0a49 	vmov.f32	s0, s18
 801217c:	f000 f8a0 	bl	80122c0 <finitef>
 8012180:	b170      	cbz	r0, 80121a0 <powf+0x7e>
 8012182:	eeb0 0a48 	vmov.f32	s0, s16
 8012186:	f000 f89b 	bl	80122c0 <finitef>
 801218a:	b148      	cbz	r0, 80121a0 <powf+0x7e>
 801218c:	eef4 8a68 	vcmp.f32	s17, s17
 8012190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012194:	d7e9      	bvc.n	801216a <powf+0x48>
 8012196:	f7fe ff43 	bl	8011020 <__errno>
 801219a:	2321      	movs	r3, #33	; 0x21
 801219c:	6003      	str	r3, [r0, #0]
 801219e:	e00f      	b.n	80121c0 <powf+0x9e>
 80121a0:	eef5 8a40 	vcmp.f32	s17, #0.0
 80121a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121a8:	d10a      	bne.n	80121c0 <powf+0x9e>
 80121aa:	eeb0 0a49 	vmov.f32	s0, s18
 80121ae:	f000 f887 	bl	80122c0 <finitef>
 80121b2:	b128      	cbz	r0, 80121c0 <powf+0x9e>
 80121b4:	eeb0 0a48 	vmov.f32	s0, s16
 80121b8:	f000 f882 	bl	80122c0 <finitef>
 80121bc:	2800      	cmp	r0, #0
 80121be:	d1d4      	bne.n	801216a <powf+0x48>
 80121c0:	eeb0 0a68 	vmov.f32	s0, s17
 80121c4:	ecbd 8b04 	vpop	{d8-d9}
 80121c8:	bd08      	pop	{r3, pc}
 80121ca:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80121ce:	e7f7      	b.n	80121c0 <powf+0x9e>

080121d0 <sqrtf>:
 80121d0:	b508      	push	{r3, lr}
 80121d2:	ed2d 8b02 	vpush	{d8}
 80121d6:	eeb0 8a40 	vmov.f32	s16, s0
 80121da:	f000 f87e 	bl	80122da <__ieee754_sqrtf>
 80121de:	eeb4 8a48 	vcmp.f32	s16, s16
 80121e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e6:	d60c      	bvs.n	8012202 <sqrtf+0x32>
 80121e8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8012208 <sqrtf+0x38>
 80121ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80121f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f4:	d505      	bpl.n	8012202 <sqrtf+0x32>
 80121f6:	f7fe ff13 	bl	8011020 <__errno>
 80121fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80121fe:	2321      	movs	r3, #33	; 0x21
 8012200:	6003      	str	r3, [r0, #0]
 8012202:	ecbd 8b02 	vpop	{d8}
 8012206:	bd08      	pop	{r3, pc}
 8012208:	00000000 	.word	0x00000000

0801220c <sinf>:
 801220c:	ee10 3a10 	vmov	r3, s0
 8012210:	b507      	push	{r0, r1, r2, lr}
 8012212:	4a1f      	ldr	r2, [pc, #124]	; (8012290 <sinf+0x84>)
 8012214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012218:	4293      	cmp	r3, r2
 801221a:	dc07      	bgt.n	801222c <sinf+0x20>
 801221c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8012294 <sinf+0x88>
 8012220:	2000      	movs	r0, #0
 8012222:	b003      	add	sp, #12
 8012224:	f85d eb04 	ldr.w	lr, [sp], #4
 8012228:	f001 b866 	b.w	80132f8 <__kernel_sinf>
 801222c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012230:	db04      	blt.n	801223c <sinf+0x30>
 8012232:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012236:	b003      	add	sp, #12
 8012238:	f85d fb04 	ldr.w	pc, [sp], #4
 801223c:	4668      	mov	r0, sp
 801223e:	f001 fb6d 	bl	801391c <__ieee754_rem_pio2f>
 8012242:	f000 0003 	and.w	r0, r0, #3
 8012246:	2801      	cmp	r0, #1
 8012248:	d00a      	beq.n	8012260 <sinf+0x54>
 801224a:	2802      	cmp	r0, #2
 801224c:	d00f      	beq.n	801226e <sinf+0x62>
 801224e:	b9c0      	cbnz	r0, 8012282 <sinf+0x76>
 8012250:	eddd 0a01 	vldr	s1, [sp, #4]
 8012254:	ed9d 0a00 	vldr	s0, [sp]
 8012258:	2001      	movs	r0, #1
 801225a:	f001 f84d 	bl	80132f8 <__kernel_sinf>
 801225e:	e7ea      	b.n	8012236 <sinf+0x2a>
 8012260:	eddd 0a01 	vldr	s1, [sp, #4]
 8012264:	ed9d 0a00 	vldr	s0, [sp]
 8012268:	f000 ffe8 	bl	801323c <__kernel_cosf>
 801226c:	e7e3      	b.n	8012236 <sinf+0x2a>
 801226e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012272:	ed9d 0a00 	vldr	s0, [sp]
 8012276:	2001      	movs	r0, #1
 8012278:	f001 f83e 	bl	80132f8 <__kernel_sinf>
 801227c:	eeb1 0a40 	vneg.f32	s0, s0
 8012280:	e7d9      	b.n	8012236 <sinf+0x2a>
 8012282:	eddd 0a01 	vldr	s1, [sp, #4]
 8012286:	ed9d 0a00 	vldr	s0, [sp]
 801228a:	f000 ffd7 	bl	801323c <__kernel_cosf>
 801228e:	e7f5      	b.n	801227c <sinf+0x70>
 8012290:	3f490fd8 	.word	0x3f490fd8
 8012294:	00000000 	.word	0x00000000

08012298 <finite>:
 8012298:	b082      	sub	sp, #8
 801229a:	ed8d 0b00 	vstr	d0, [sp]
 801229e:	9801      	ldr	r0, [sp, #4]
 80122a0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80122a4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80122a8:	0fc0      	lsrs	r0, r0, #31
 80122aa:	b002      	add	sp, #8
 80122ac:	4770      	bx	lr
	...

080122b0 <nan>:
 80122b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80122b8 <nan+0x8>
 80122b4:	4770      	bx	lr
 80122b6:	bf00      	nop
 80122b8:	00000000 	.word	0x00000000
 80122bc:	7ff80000 	.word	0x7ff80000

080122c0 <finitef>:
 80122c0:	b082      	sub	sp, #8
 80122c2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80122c6:	9801      	ldr	r0, [sp, #4]
 80122c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80122cc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80122d0:	bfac      	ite	ge
 80122d2:	2000      	movge	r0, #0
 80122d4:	2001      	movlt	r0, #1
 80122d6:	b002      	add	sp, #8
 80122d8:	4770      	bx	lr

080122da <__ieee754_sqrtf>:
 80122da:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80122de:	4770      	bx	lr

080122e0 <roundf>:
 80122e0:	ee10 0a10 	vmov	r0, s0
 80122e4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80122e8:	3a7f      	subs	r2, #127	; 0x7f
 80122ea:	2a16      	cmp	r2, #22
 80122ec:	dc15      	bgt.n	801231a <roundf+0x3a>
 80122ee:	2a00      	cmp	r2, #0
 80122f0:	da08      	bge.n	8012304 <roundf+0x24>
 80122f2:	3201      	adds	r2, #1
 80122f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80122f8:	d101      	bne.n	80122fe <roundf+0x1e>
 80122fa:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80122fe:	ee00 3a10 	vmov	s0, r3
 8012302:	4770      	bx	lr
 8012304:	4907      	ldr	r1, [pc, #28]	; (8012324 <roundf+0x44>)
 8012306:	4111      	asrs	r1, r2
 8012308:	4208      	tst	r0, r1
 801230a:	d0fa      	beq.n	8012302 <roundf+0x22>
 801230c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012310:	4113      	asrs	r3, r2
 8012312:	4403      	add	r3, r0
 8012314:	ea23 0301 	bic.w	r3, r3, r1
 8012318:	e7f1      	b.n	80122fe <roundf+0x1e>
 801231a:	2a80      	cmp	r2, #128	; 0x80
 801231c:	d1f1      	bne.n	8012302 <roundf+0x22>
 801231e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012322:	4770      	bx	lr
 8012324:	007fffff 	.word	0x007fffff

08012328 <__ieee754_acos>:
 8012328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801232c:	ec55 4b10 	vmov	r4, r5, d0
 8012330:	49b7      	ldr	r1, [pc, #732]	; (8012610 <__ieee754_acos+0x2e8>)
 8012332:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012336:	428b      	cmp	r3, r1
 8012338:	dd1b      	ble.n	8012372 <__ieee754_acos+0x4a>
 801233a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801233e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012342:	4323      	orrs	r3, r4
 8012344:	d106      	bne.n	8012354 <__ieee754_acos+0x2c>
 8012346:	2d00      	cmp	r5, #0
 8012348:	f300 8211 	bgt.w	801276e <__ieee754_acos+0x446>
 801234c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80125a8 <__ieee754_acos+0x280>
 8012350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012354:	ee10 2a10 	vmov	r2, s0
 8012358:	462b      	mov	r3, r5
 801235a:	ee10 0a10 	vmov	r0, s0
 801235e:	4629      	mov	r1, r5
 8012360:	f7ed ff8a 	bl	8000278 <__aeabi_dsub>
 8012364:	4602      	mov	r2, r0
 8012366:	460b      	mov	r3, r1
 8012368:	f7ee fa68 	bl	800083c <__aeabi_ddiv>
 801236c:	ec41 0b10 	vmov	d0, r0, r1
 8012370:	e7ee      	b.n	8012350 <__ieee754_acos+0x28>
 8012372:	49a8      	ldr	r1, [pc, #672]	; (8012614 <__ieee754_acos+0x2ec>)
 8012374:	428b      	cmp	r3, r1
 8012376:	f300 8087 	bgt.w	8012488 <__ieee754_acos+0x160>
 801237a:	4aa7      	ldr	r2, [pc, #668]	; (8012618 <__ieee754_acos+0x2f0>)
 801237c:	4293      	cmp	r3, r2
 801237e:	f340 81f9 	ble.w	8012774 <__ieee754_acos+0x44c>
 8012382:	ee10 2a10 	vmov	r2, s0
 8012386:	ee10 0a10 	vmov	r0, s0
 801238a:	462b      	mov	r3, r5
 801238c:	4629      	mov	r1, r5
 801238e:	f7ee f92b 	bl	80005e8 <__aeabi_dmul>
 8012392:	a387      	add	r3, pc, #540	; (adr r3, 80125b0 <__ieee754_acos+0x288>)
 8012394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012398:	4606      	mov	r6, r0
 801239a:	460f      	mov	r7, r1
 801239c:	f7ee f924 	bl	80005e8 <__aeabi_dmul>
 80123a0:	a385      	add	r3, pc, #532	; (adr r3, 80125b8 <__ieee754_acos+0x290>)
 80123a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a6:	f7ed ff69 	bl	800027c <__adddf3>
 80123aa:	4632      	mov	r2, r6
 80123ac:	463b      	mov	r3, r7
 80123ae:	f7ee f91b 	bl	80005e8 <__aeabi_dmul>
 80123b2:	a383      	add	r3, pc, #524	; (adr r3, 80125c0 <__ieee754_acos+0x298>)
 80123b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b8:	f7ed ff5e 	bl	8000278 <__aeabi_dsub>
 80123bc:	4632      	mov	r2, r6
 80123be:	463b      	mov	r3, r7
 80123c0:	f7ee f912 	bl	80005e8 <__aeabi_dmul>
 80123c4:	a380      	add	r3, pc, #512	; (adr r3, 80125c8 <__ieee754_acos+0x2a0>)
 80123c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ca:	f7ed ff57 	bl	800027c <__adddf3>
 80123ce:	4632      	mov	r2, r6
 80123d0:	463b      	mov	r3, r7
 80123d2:	f7ee f909 	bl	80005e8 <__aeabi_dmul>
 80123d6:	a37e      	add	r3, pc, #504	; (adr r3, 80125d0 <__ieee754_acos+0x2a8>)
 80123d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123dc:	f7ed ff4c 	bl	8000278 <__aeabi_dsub>
 80123e0:	4632      	mov	r2, r6
 80123e2:	463b      	mov	r3, r7
 80123e4:	f7ee f900 	bl	80005e8 <__aeabi_dmul>
 80123e8:	a37b      	add	r3, pc, #492	; (adr r3, 80125d8 <__ieee754_acos+0x2b0>)
 80123ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ee:	f7ed ff45 	bl	800027c <__adddf3>
 80123f2:	4632      	mov	r2, r6
 80123f4:	463b      	mov	r3, r7
 80123f6:	f7ee f8f7 	bl	80005e8 <__aeabi_dmul>
 80123fa:	a379      	add	r3, pc, #484	; (adr r3, 80125e0 <__ieee754_acos+0x2b8>)
 80123fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012400:	4680      	mov	r8, r0
 8012402:	4689      	mov	r9, r1
 8012404:	4630      	mov	r0, r6
 8012406:	4639      	mov	r1, r7
 8012408:	f7ee f8ee 	bl	80005e8 <__aeabi_dmul>
 801240c:	a376      	add	r3, pc, #472	; (adr r3, 80125e8 <__ieee754_acos+0x2c0>)
 801240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012412:	f7ed ff31 	bl	8000278 <__aeabi_dsub>
 8012416:	4632      	mov	r2, r6
 8012418:	463b      	mov	r3, r7
 801241a:	f7ee f8e5 	bl	80005e8 <__aeabi_dmul>
 801241e:	a374      	add	r3, pc, #464	; (adr r3, 80125f0 <__ieee754_acos+0x2c8>)
 8012420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012424:	f7ed ff2a 	bl	800027c <__adddf3>
 8012428:	4632      	mov	r2, r6
 801242a:	463b      	mov	r3, r7
 801242c:	f7ee f8dc 	bl	80005e8 <__aeabi_dmul>
 8012430:	a371      	add	r3, pc, #452	; (adr r3, 80125f8 <__ieee754_acos+0x2d0>)
 8012432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012436:	f7ed ff1f 	bl	8000278 <__aeabi_dsub>
 801243a:	4632      	mov	r2, r6
 801243c:	463b      	mov	r3, r7
 801243e:	f7ee f8d3 	bl	80005e8 <__aeabi_dmul>
 8012442:	4b76      	ldr	r3, [pc, #472]	; (801261c <__ieee754_acos+0x2f4>)
 8012444:	2200      	movs	r2, #0
 8012446:	f7ed ff19 	bl	800027c <__adddf3>
 801244a:	4602      	mov	r2, r0
 801244c:	460b      	mov	r3, r1
 801244e:	4640      	mov	r0, r8
 8012450:	4649      	mov	r1, r9
 8012452:	f7ee f9f3 	bl	800083c <__aeabi_ddiv>
 8012456:	4622      	mov	r2, r4
 8012458:	462b      	mov	r3, r5
 801245a:	f7ee f8c5 	bl	80005e8 <__aeabi_dmul>
 801245e:	4602      	mov	r2, r0
 8012460:	460b      	mov	r3, r1
 8012462:	a167      	add	r1, pc, #412	; (adr r1, 8012600 <__ieee754_acos+0x2d8>)
 8012464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012468:	f7ed ff06 	bl	8000278 <__aeabi_dsub>
 801246c:	4602      	mov	r2, r0
 801246e:	460b      	mov	r3, r1
 8012470:	4620      	mov	r0, r4
 8012472:	4629      	mov	r1, r5
 8012474:	f7ed ff00 	bl	8000278 <__aeabi_dsub>
 8012478:	4602      	mov	r2, r0
 801247a:	460b      	mov	r3, r1
 801247c:	a162      	add	r1, pc, #392	; (adr r1, 8012608 <__ieee754_acos+0x2e0>)
 801247e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012482:	f7ed fef9 	bl	8000278 <__aeabi_dsub>
 8012486:	e771      	b.n	801236c <__ieee754_acos+0x44>
 8012488:	2d00      	cmp	r5, #0
 801248a:	f280 80cb 	bge.w	8012624 <__ieee754_acos+0x2fc>
 801248e:	ee10 0a10 	vmov	r0, s0
 8012492:	4b62      	ldr	r3, [pc, #392]	; (801261c <__ieee754_acos+0x2f4>)
 8012494:	2200      	movs	r2, #0
 8012496:	4629      	mov	r1, r5
 8012498:	f7ed fef0 	bl	800027c <__adddf3>
 801249c:	4b60      	ldr	r3, [pc, #384]	; (8012620 <__ieee754_acos+0x2f8>)
 801249e:	2200      	movs	r2, #0
 80124a0:	f7ee f8a2 	bl	80005e8 <__aeabi_dmul>
 80124a4:	a342      	add	r3, pc, #264	; (adr r3, 80125b0 <__ieee754_acos+0x288>)
 80124a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124aa:	4604      	mov	r4, r0
 80124ac:	460d      	mov	r5, r1
 80124ae:	f7ee f89b 	bl	80005e8 <__aeabi_dmul>
 80124b2:	a341      	add	r3, pc, #260	; (adr r3, 80125b8 <__ieee754_acos+0x290>)
 80124b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b8:	f7ed fee0 	bl	800027c <__adddf3>
 80124bc:	4622      	mov	r2, r4
 80124be:	462b      	mov	r3, r5
 80124c0:	f7ee f892 	bl	80005e8 <__aeabi_dmul>
 80124c4:	a33e      	add	r3, pc, #248	; (adr r3, 80125c0 <__ieee754_acos+0x298>)
 80124c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ca:	f7ed fed5 	bl	8000278 <__aeabi_dsub>
 80124ce:	4622      	mov	r2, r4
 80124d0:	462b      	mov	r3, r5
 80124d2:	f7ee f889 	bl	80005e8 <__aeabi_dmul>
 80124d6:	a33c      	add	r3, pc, #240	; (adr r3, 80125c8 <__ieee754_acos+0x2a0>)
 80124d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124dc:	f7ed fece 	bl	800027c <__adddf3>
 80124e0:	4622      	mov	r2, r4
 80124e2:	462b      	mov	r3, r5
 80124e4:	f7ee f880 	bl	80005e8 <__aeabi_dmul>
 80124e8:	a339      	add	r3, pc, #228	; (adr r3, 80125d0 <__ieee754_acos+0x2a8>)
 80124ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ee:	f7ed fec3 	bl	8000278 <__aeabi_dsub>
 80124f2:	4622      	mov	r2, r4
 80124f4:	462b      	mov	r3, r5
 80124f6:	f7ee f877 	bl	80005e8 <__aeabi_dmul>
 80124fa:	a337      	add	r3, pc, #220	; (adr r3, 80125d8 <__ieee754_acos+0x2b0>)
 80124fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012500:	f7ed febc 	bl	800027c <__adddf3>
 8012504:	4622      	mov	r2, r4
 8012506:	462b      	mov	r3, r5
 8012508:	f7ee f86e 	bl	80005e8 <__aeabi_dmul>
 801250c:	ec45 4b10 	vmov	d0, r4, r5
 8012510:	4680      	mov	r8, r0
 8012512:	4689      	mov	r9, r1
 8012514:	f001 fc6e 	bl	8013df4 <__ieee754_sqrt>
 8012518:	a331      	add	r3, pc, #196	; (adr r3, 80125e0 <__ieee754_acos+0x2b8>)
 801251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801251e:	4620      	mov	r0, r4
 8012520:	4629      	mov	r1, r5
 8012522:	ec57 6b10 	vmov	r6, r7, d0
 8012526:	f7ee f85f 	bl	80005e8 <__aeabi_dmul>
 801252a:	a32f      	add	r3, pc, #188	; (adr r3, 80125e8 <__ieee754_acos+0x2c0>)
 801252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012530:	f7ed fea2 	bl	8000278 <__aeabi_dsub>
 8012534:	4622      	mov	r2, r4
 8012536:	462b      	mov	r3, r5
 8012538:	f7ee f856 	bl	80005e8 <__aeabi_dmul>
 801253c:	a32c      	add	r3, pc, #176	; (adr r3, 80125f0 <__ieee754_acos+0x2c8>)
 801253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012542:	f7ed fe9b 	bl	800027c <__adddf3>
 8012546:	4622      	mov	r2, r4
 8012548:	462b      	mov	r3, r5
 801254a:	f7ee f84d 	bl	80005e8 <__aeabi_dmul>
 801254e:	a32a      	add	r3, pc, #168	; (adr r3, 80125f8 <__ieee754_acos+0x2d0>)
 8012550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012554:	f7ed fe90 	bl	8000278 <__aeabi_dsub>
 8012558:	4622      	mov	r2, r4
 801255a:	462b      	mov	r3, r5
 801255c:	f7ee f844 	bl	80005e8 <__aeabi_dmul>
 8012560:	4b2e      	ldr	r3, [pc, #184]	; (801261c <__ieee754_acos+0x2f4>)
 8012562:	2200      	movs	r2, #0
 8012564:	f7ed fe8a 	bl	800027c <__adddf3>
 8012568:	4602      	mov	r2, r0
 801256a:	460b      	mov	r3, r1
 801256c:	4640      	mov	r0, r8
 801256e:	4649      	mov	r1, r9
 8012570:	f7ee f964 	bl	800083c <__aeabi_ddiv>
 8012574:	4632      	mov	r2, r6
 8012576:	463b      	mov	r3, r7
 8012578:	f7ee f836 	bl	80005e8 <__aeabi_dmul>
 801257c:	a320      	add	r3, pc, #128	; (adr r3, 8012600 <__ieee754_acos+0x2d8>)
 801257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012582:	f7ed fe79 	bl	8000278 <__aeabi_dsub>
 8012586:	4632      	mov	r2, r6
 8012588:	463b      	mov	r3, r7
 801258a:	f7ed fe77 	bl	800027c <__adddf3>
 801258e:	4602      	mov	r2, r0
 8012590:	460b      	mov	r3, r1
 8012592:	f7ed fe73 	bl	800027c <__adddf3>
 8012596:	4602      	mov	r2, r0
 8012598:	460b      	mov	r3, r1
 801259a:	a103      	add	r1, pc, #12	; (adr r1, 80125a8 <__ieee754_acos+0x280>)
 801259c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125a0:	e76f      	b.n	8012482 <__ieee754_acos+0x15a>
 80125a2:	bf00      	nop
 80125a4:	f3af 8000 	nop.w
 80125a8:	54442d18 	.word	0x54442d18
 80125ac:	400921fb 	.word	0x400921fb
 80125b0:	0dfdf709 	.word	0x0dfdf709
 80125b4:	3f023de1 	.word	0x3f023de1
 80125b8:	7501b288 	.word	0x7501b288
 80125bc:	3f49efe0 	.word	0x3f49efe0
 80125c0:	b5688f3b 	.word	0xb5688f3b
 80125c4:	3fa48228 	.word	0x3fa48228
 80125c8:	0e884455 	.word	0x0e884455
 80125cc:	3fc9c155 	.word	0x3fc9c155
 80125d0:	03eb6f7d 	.word	0x03eb6f7d
 80125d4:	3fd4d612 	.word	0x3fd4d612
 80125d8:	55555555 	.word	0x55555555
 80125dc:	3fc55555 	.word	0x3fc55555
 80125e0:	b12e9282 	.word	0xb12e9282
 80125e4:	3fb3b8c5 	.word	0x3fb3b8c5
 80125e8:	1b8d0159 	.word	0x1b8d0159
 80125ec:	3fe6066c 	.word	0x3fe6066c
 80125f0:	9c598ac8 	.word	0x9c598ac8
 80125f4:	40002ae5 	.word	0x40002ae5
 80125f8:	1c8a2d4b 	.word	0x1c8a2d4b
 80125fc:	40033a27 	.word	0x40033a27
 8012600:	33145c07 	.word	0x33145c07
 8012604:	3c91a626 	.word	0x3c91a626
 8012608:	54442d18 	.word	0x54442d18
 801260c:	3ff921fb 	.word	0x3ff921fb
 8012610:	3fefffff 	.word	0x3fefffff
 8012614:	3fdfffff 	.word	0x3fdfffff
 8012618:	3c600000 	.word	0x3c600000
 801261c:	3ff00000 	.word	0x3ff00000
 8012620:	3fe00000 	.word	0x3fe00000
 8012624:	ee10 2a10 	vmov	r2, s0
 8012628:	462b      	mov	r3, r5
 801262a:	496d      	ldr	r1, [pc, #436]	; (80127e0 <__ieee754_acos+0x4b8>)
 801262c:	2000      	movs	r0, #0
 801262e:	f7ed fe23 	bl	8000278 <__aeabi_dsub>
 8012632:	4b6c      	ldr	r3, [pc, #432]	; (80127e4 <__ieee754_acos+0x4bc>)
 8012634:	2200      	movs	r2, #0
 8012636:	f7ed ffd7 	bl	80005e8 <__aeabi_dmul>
 801263a:	4604      	mov	r4, r0
 801263c:	460d      	mov	r5, r1
 801263e:	ec45 4b10 	vmov	d0, r4, r5
 8012642:	f001 fbd7 	bl	8013df4 <__ieee754_sqrt>
 8012646:	a34e      	add	r3, pc, #312	; (adr r3, 8012780 <__ieee754_acos+0x458>)
 8012648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264c:	4620      	mov	r0, r4
 801264e:	4629      	mov	r1, r5
 8012650:	ec59 8b10 	vmov	r8, r9, d0
 8012654:	f7ed ffc8 	bl	80005e8 <__aeabi_dmul>
 8012658:	a34b      	add	r3, pc, #300	; (adr r3, 8012788 <__ieee754_acos+0x460>)
 801265a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265e:	f7ed fe0d 	bl	800027c <__adddf3>
 8012662:	4622      	mov	r2, r4
 8012664:	462b      	mov	r3, r5
 8012666:	f7ed ffbf 	bl	80005e8 <__aeabi_dmul>
 801266a:	a349      	add	r3, pc, #292	; (adr r3, 8012790 <__ieee754_acos+0x468>)
 801266c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012670:	f7ed fe02 	bl	8000278 <__aeabi_dsub>
 8012674:	4622      	mov	r2, r4
 8012676:	462b      	mov	r3, r5
 8012678:	f7ed ffb6 	bl	80005e8 <__aeabi_dmul>
 801267c:	a346      	add	r3, pc, #280	; (adr r3, 8012798 <__ieee754_acos+0x470>)
 801267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012682:	f7ed fdfb 	bl	800027c <__adddf3>
 8012686:	4622      	mov	r2, r4
 8012688:	462b      	mov	r3, r5
 801268a:	f7ed ffad 	bl	80005e8 <__aeabi_dmul>
 801268e:	a344      	add	r3, pc, #272	; (adr r3, 80127a0 <__ieee754_acos+0x478>)
 8012690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012694:	f7ed fdf0 	bl	8000278 <__aeabi_dsub>
 8012698:	4622      	mov	r2, r4
 801269a:	462b      	mov	r3, r5
 801269c:	f7ed ffa4 	bl	80005e8 <__aeabi_dmul>
 80126a0:	a341      	add	r3, pc, #260	; (adr r3, 80127a8 <__ieee754_acos+0x480>)
 80126a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a6:	f7ed fde9 	bl	800027c <__adddf3>
 80126aa:	4622      	mov	r2, r4
 80126ac:	462b      	mov	r3, r5
 80126ae:	f7ed ff9b 	bl	80005e8 <__aeabi_dmul>
 80126b2:	a33f      	add	r3, pc, #252	; (adr r3, 80127b0 <__ieee754_acos+0x488>)
 80126b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b8:	4682      	mov	sl, r0
 80126ba:	468b      	mov	fp, r1
 80126bc:	4620      	mov	r0, r4
 80126be:	4629      	mov	r1, r5
 80126c0:	f7ed ff92 	bl	80005e8 <__aeabi_dmul>
 80126c4:	a33c      	add	r3, pc, #240	; (adr r3, 80127b8 <__ieee754_acos+0x490>)
 80126c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ca:	f7ed fdd5 	bl	8000278 <__aeabi_dsub>
 80126ce:	4622      	mov	r2, r4
 80126d0:	462b      	mov	r3, r5
 80126d2:	f7ed ff89 	bl	80005e8 <__aeabi_dmul>
 80126d6:	a33a      	add	r3, pc, #232	; (adr r3, 80127c0 <__ieee754_acos+0x498>)
 80126d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126dc:	f7ed fdce 	bl	800027c <__adddf3>
 80126e0:	4622      	mov	r2, r4
 80126e2:	462b      	mov	r3, r5
 80126e4:	f7ed ff80 	bl	80005e8 <__aeabi_dmul>
 80126e8:	a337      	add	r3, pc, #220	; (adr r3, 80127c8 <__ieee754_acos+0x4a0>)
 80126ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ee:	f7ed fdc3 	bl	8000278 <__aeabi_dsub>
 80126f2:	4622      	mov	r2, r4
 80126f4:	462b      	mov	r3, r5
 80126f6:	f7ed ff77 	bl	80005e8 <__aeabi_dmul>
 80126fa:	4b39      	ldr	r3, [pc, #228]	; (80127e0 <__ieee754_acos+0x4b8>)
 80126fc:	2200      	movs	r2, #0
 80126fe:	f7ed fdbd 	bl	800027c <__adddf3>
 8012702:	4602      	mov	r2, r0
 8012704:	460b      	mov	r3, r1
 8012706:	4650      	mov	r0, sl
 8012708:	4659      	mov	r1, fp
 801270a:	f7ee f897 	bl	800083c <__aeabi_ddiv>
 801270e:	4642      	mov	r2, r8
 8012710:	464b      	mov	r3, r9
 8012712:	f7ed ff69 	bl	80005e8 <__aeabi_dmul>
 8012716:	2600      	movs	r6, #0
 8012718:	4682      	mov	sl, r0
 801271a:	468b      	mov	fp, r1
 801271c:	4632      	mov	r2, r6
 801271e:	464b      	mov	r3, r9
 8012720:	4630      	mov	r0, r6
 8012722:	4649      	mov	r1, r9
 8012724:	f7ed ff60 	bl	80005e8 <__aeabi_dmul>
 8012728:	4602      	mov	r2, r0
 801272a:	460b      	mov	r3, r1
 801272c:	4620      	mov	r0, r4
 801272e:	4629      	mov	r1, r5
 8012730:	f7ed fda2 	bl	8000278 <__aeabi_dsub>
 8012734:	4632      	mov	r2, r6
 8012736:	4604      	mov	r4, r0
 8012738:	460d      	mov	r5, r1
 801273a:	464b      	mov	r3, r9
 801273c:	4640      	mov	r0, r8
 801273e:	4649      	mov	r1, r9
 8012740:	f7ed fd9c 	bl	800027c <__adddf3>
 8012744:	4602      	mov	r2, r0
 8012746:	460b      	mov	r3, r1
 8012748:	4620      	mov	r0, r4
 801274a:	4629      	mov	r1, r5
 801274c:	f7ee f876 	bl	800083c <__aeabi_ddiv>
 8012750:	4602      	mov	r2, r0
 8012752:	460b      	mov	r3, r1
 8012754:	4650      	mov	r0, sl
 8012756:	4659      	mov	r1, fp
 8012758:	f7ed fd90 	bl	800027c <__adddf3>
 801275c:	4632      	mov	r2, r6
 801275e:	464b      	mov	r3, r9
 8012760:	f7ed fd8c 	bl	800027c <__adddf3>
 8012764:	4602      	mov	r2, r0
 8012766:	460b      	mov	r3, r1
 8012768:	f7ed fd88 	bl	800027c <__adddf3>
 801276c:	e5fe      	b.n	801236c <__ieee754_acos+0x44>
 801276e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80127d0 <__ieee754_acos+0x4a8>
 8012772:	e5ed      	b.n	8012350 <__ieee754_acos+0x28>
 8012774:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80127d8 <__ieee754_acos+0x4b0>
 8012778:	e5ea      	b.n	8012350 <__ieee754_acos+0x28>
 801277a:	bf00      	nop
 801277c:	f3af 8000 	nop.w
 8012780:	0dfdf709 	.word	0x0dfdf709
 8012784:	3f023de1 	.word	0x3f023de1
 8012788:	7501b288 	.word	0x7501b288
 801278c:	3f49efe0 	.word	0x3f49efe0
 8012790:	b5688f3b 	.word	0xb5688f3b
 8012794:	3fa48228 	.word	0x3fa48228
 8012798:	0e884455 	.word	0x0e884455
 801279c:	3fc9c155 	.word	0x3fc9c155
 80127a0:	03eb6f7d 	.word	0x03eb6f7d
 80127a4:	3fd4d612 	.word	0x3fd4d612
 80127a8:	55555555 	.word	0x55555555
 80127ac:	3fc55555 	.word	0x3fc55555
 80127b0:	b12e9282 	.word	0xb12e9282
 80127b4:	3fb3b8c5 	.word	0x3fb3b8c5
 80127b8:	1b8d0159 	.word	0x1b8d0159
 80127bc:	3fe6066c 	.word	0x3fe6066c
 80127c0:	9c598ac8 	.word	0x9c598ac8
 80127c4:	40002ae5 	.word	0x40002ae5
 80127c8:	1c8a2d4b 	.word	0x1c8a2d4b
 80127cc:	40033a27 	.word	0x40033a27
	...
 80127d8:	54442d18 	.word	0x54442d18
 80127dc:	3ff921fb 	.word	0x3ff921fb
 80127e0:	3ff00000 	.word	0x3ff00000
 80127e4:	3fe00000 	.word	0x3fe00000

080127e8 <__ieee754_pow>:
 80127e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ec:	ed2d 8b06 	vpush	{d8-d10}
 80127f0:	b089      	sub	sp, #36	; 0x24
 80127f2:	ed8d 1b00 	vstr	d1, [sp]
 80127f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80127fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80127fe:	ea58 0102 	orrs.w	r1, r8, r2
 8012802:	ec57 6b10 	vmov	r6, r7, d0
 8012806:	d115      	bne.n	8012834 <__ieee754_pow+0x4c>
 8012808:	19b3      	adds	r3, r6, r6
 801280a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801280e:	4152      	adcs	r2, r2
 8012810:	4299      	cmp	r1, r3
 8012812:	4b89      	ldr	r3, [pc, #548]	; (8012a38 <__ieee754_pow+0x250>)
 8012814:	4193      	sbcs	r3, r2
 8012816:	f080 84d1 	bcs.w	80131bc <__ieee754_pow+0x9d4>
 801281a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801281e:	4630      	mov	r0, r6
 8012820:	4639      	mov	r1, r7
 8012822:	f7ed fd2b 	bl	800027c <__adddf3>
 8012826:	ec41 0b10 	vmov	d0, r0, r1
 801282a:	b009      	add	sp, #36	; 0x24
 801282c:	ecbd 8b06 	vpop	{d8-d10}
 8012830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012834:	4b81      	ldr	r3, [pc, #516]	; (8012a3c <__ieee754_pow+0x254>)
 8012836:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801283a:	429c      	cmp	r4, r3
 801283c:	ee10 aa10 	vmov	sl, s0
 8012840:	463d      	mov	r5, r7
 8012842:	dc06      	bgt.n	8012852 <__ieee754_pow+0x6a>
 8012844:	d101      	bne.n	801284a <__ieee754_pow+0x62>
 8012846:	2e00      	cmp	r6, #0
 8012848:	d1e7      	bne.n	801281a <__ieee754_pow+0x32>
 801284a:	4598      	cmp	r8, r3
 801284c:	dc01      	bgt.n	8012852 <__ieee754_pow+0x6a>
 801284e:	d10f      	bne.n	8012870 <__ieee754_pow+0x88>
 8012850:	b172      	cbz	r2, 8012870 <__ieee754_pow+0x88>
 8012852:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012856:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801285a:	ea55 050a 	orrs.w	r5, r5, sl
 801285e:	d1dc      	bne.n	801281a <__ieee754_pow+0x32>
 8012860:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012864:	18db      	adds	r3, r3, r3
 8012866:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801286a:	4152      	adcs	r2, r2
 801286c:	429d      	cmp	r5, r3
 801286e:	e7d0      	b.n	8012812 <__ieee754_pow+0x2a>
 8012870:	2d00      	cmp	r5, #0
 8012872:	da3b      	bge.n	80128ec <__ieee754_pow+0x104>
 8012874:	4b72      	ldr	r3, [pc, #456]	; (8012a40 <__ieee754_pow+0x258>)
 8012876:	4598      	cmp	r8, r3
 8012878:	dc51      	bgt.n	801291e <__ieee754_pow+0x136>
 801287a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801287e:	4598      	cmp	r8, r3
 8012880:	f340 84ab 	ble.w	80131da <__ieee754_pow+0x9f2>
 8012884:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012888:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801288c:	2b14      	cmp	r3, #20
 801288e:	dd0f      	ble.n	80128b0 <__ieee754_pow+0xc8>
 8012890:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012894:	fa22 f103 	lsr.w	r1, r2, r3
 8012898:	fa01 f303 	lsl.w	r3, r1, r3
 801289c:	4293      	cmp	r3, r2
 801289e:	f040 849c 	bne.w	80131da <__ieee754_pow+0x9f2>
 80128a2:	f001 0101 	and.w	r1, r1, #1
 80128a6:	f1c1 0302 	rsb	r3, r1, #2
 80128aa:	9304      	str	r3, [sp, #16]
 80128ac:	b182      	cbz	r2, 80128d0 <__ieee754_pow+0xe8>
 80128ae:	e05f      	b.n	8012970 <__ieee754_pow+0x188>
 80128b0:	2a00      	cmp	r2, #0
 80128b2:	d15b      	bne.n	801296c <__ieee754_pow+0x184>
 80128b4:	f1c3 0314 	rsb	r3, r3, #20
 80128b8:	fa48 f103 	asr.w	r1, r8, r3
 80128bc:	fa01 f303 	lsl.w	r3, r1, r3
 80128c0:	4543      	cmp	r3, r8
 80128c2:	f040 8487 	bne.w	80131d4 <__ieee754_pow+0x9ec>
 80128c6:	f001 0101 	and.w	r1, r1, #1
 80128ca:	f1c1 0302 	rsb	r3, r1, #2
 80128ce:	9304      	str	r3, [sp, #16]
 80128d0:	4b5c      	ldr	r3, [pc, #368]	; (8012a44 <__ieee754_pow+0x25c>)
 80128d2:	4598      	cmp	r8, r3
 80128d4:	d132      	bne.n	801293c <__ieee754_pow+0x154>
 80128d6:	f1b9 0f00 	cmp.w	r9, #0
 80128da:	f280 8477 	bge.w	80131cc <__ieee754_pow+0x9e4>
 80128de:	4959      	ldr	r1, [pc, #356]	; (8012a44 <__ieee754_pow+0x25c>)
 80128e0:	4632      	mov	r2, r6
 80128e2:	463b      	mov	r3, r7
 80128e4:	2000      	movs	r0, #0
 80128e6:	f7ed ffa9 	bl	800083c <__aeabi_ddiv>
 80128ea:	e79c      	b.n	8012826 <__ieee754_pow+0x3e>
 80128ec:	2300      	movs	r3, #0
 80128ee:	9304      	str	r3, [sp, #16]
 80128f0:	2a00      	cmp	r2, #0
 80128f2:	d13d      	bne.n	8012970 <__ieee754_pow+0x188>
 80128f4:	4b51      	ldr	r3, [pc, #324]	; (8012a3c <__ieee754_pow+0x254>)
 80128f6:	4598      	cmp	r8, r3
 80128f8:	d1ea      	bne.n	80128d0 <__ieee754_pow+0xe8>
 80128fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80128fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012902:	ea53 030a 	orrs.w	r3, r3, sl
 8012906:	f000 8459 	beq.w	80131bc <__ieee754_pow+0x9d4>
 801290a:	4b4f      	ldr	r3, [pc, #316]	; (8012a48 <__ieee754_pow+0x260>)
 801290c:	429c      	cmp	r4, r3
 801290e:	dd08      	ble.n	8012922 <__ieee754_pow+0x13a>
 8012910:	f1b9 0f00 	cmp.w	r9, #0
 8012914:	f2c0 8456 	blt.w	80131c4 <__ieee754_pow+0x9dc>
 8012918:	e9dd 0100 	ldrd	r0, r1, [sp]
 801291c:	e783      	b.n	8012826 <__ieee754_pow+0x3e>
 801291e:	2302      	movs	r3, #2
 8012920:	e7e5      	b.n	80128ee <__ieee754_pow+0x106>
 8012922:	f1b9 0f00 	cmp.w	r9, #0
 8012926:	f04f 0000 	mov.w	r0, #0
 801292a:	f04f 0100 	mov.w	r1, #0
 801292e:	f6bf af7a 	bge.w	8012826 <__ieee754_pow+0x3e>
 8012932:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012936:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801293a:	e774      	b.n	8012826 <__ieee754_pow+0x3e>
 801293c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012940:	d106      	bne.n	8012950 <__ieee754_pow+0x168>
 8012942:	4632      	mov	r2, r6
 8012944:	463b      	mov	r3, r7
 8012946:	4630      	mov	r0, r6
 8012948:	4639      	mov	r1, r7
 801294a:	f7ed fe4d 	bl	80005e8 <__aeabi_dmul>
 801294e:	e76a      	b.n	8012826 <__ieee754_pow+0x3e>
 8012950:	4b3e      	ldr	r3, [pc, #248]	; (8012a4c <__ieee754_pow+0x264>)
 8012952:	4599      	cmp	r9, r3
 8012954:	d10c      	bne.n	8012970 <__ieee754_pow+0x188>
 8012956:	2d00      	cmp	r5, #0
 8012958:	db0a      	blt.n	8012970 <__ieee754_pow+0x188>
 801295a:	ec47 6b10 	vmov	d0, r6, r7
 801295e:	b009      	add	sp, #36	; 0x24
 8012960:	ecbd 8b06 	vpop	{d8-d10}
 8012964:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012968:	f001 ba44 	b.w	8013df4 <__ieee754_sqrt>
 801296c:	2300      	movs	r3, #0
 801296e:	9304      	str	r3, [sp, #16]
 8012970:	ec47 6b10 	vmov	d0, r6, r7
 8012974:	f7ff fbcc 	bl	8012110 <fabs>
 8012978:	ec51 0b10 	vmov	r0, r1, d0
 801297c:	f1ba 0f00 	cmp.w	sl, #0
 8012980:	d129      	bne.n	80129d6 <__ieee754_pow+0x1ee>
 8012982:	b124      	cbz	r4, 801298e <__ieee754_pow+0x1a6>
 8012984:	4b2f      	ldr	r3, [pc, #188]	; (8012a44 <__ieee754_pow+0x25c>)
 8012986:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801298a:	429a      	cmp	r2, r3
 801298c:	d123      	bne.n	80129d6 <__ieee754_pow+0x1ee>
 801298e:	f1b9 0f00 	cmp.w	r9, #0
 8012992:	da05      	bge.n	80129a0 <__ieee754_pow+0x1b8>
 8012994:	4602      	mov	r2, r0
 8012996:	460b      	mov	r3, r1
 8012998:	2000      	movs	r0, #0
 801299a:	492a      	ldr	r1, [pc, #168]	; (8012a44 <__ieee754_pow+0x25c>)
 801299c:	f7ed ff4e 	bl	800083c <__aeabi_ddiv>
 80129a0:	2d00      	cmp	r5, #0
 80129a2:	f6bf af40 	bge.w	8012826 <__ieee754_pow+0x3e>
 80129a6:	9b04      	ldr	r3, [sp, #16]
 80129a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80129ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80129b0:	431c      	orrs	r4, r3
 80129b2:	d108      	bne.n	80129c6 <__ieee754_pow+0x1de>
 80129b4:	4602      	mov	r2, r0
 80129b6:	460b      	mov	r3, r1
 80129b8:	4610      	mov	r0, r2
 80129ba:	4619      	mov	r1, r3
 80129bc:	f7ed fc5c 	bl	8000278 <__aeabi_dsub>
 80129c0:	4602      	mov	r2, r0
 80129c2:	460b      	mov	r3, r1
 80129c4:	e78f      	b.n	80128e6 <__ieee754_pow+0xfe>
 80129c6:	9b04      	ldr	r3, [sp, #16]
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	f47f af2c 	bne.w	8012826 <__ieee754_pow+0x3e>
 80129ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129d2:	4619      	mov	r1, r3
 80129d4:	e727      	b.n	8012826 <__ieee754_pow+0x3e>
 80129d6:	0feb      	lsrs	r3, r5, #31
 80129d8:	3b01      	subs	r3, #1
 80129da:	9306      	str	r3, [sp, #24]
 80129dc:	9a06      	ldr	r2, [sp, #24]
 80129de:	9b04      	ldr	r3, [sp, #16]
 80129e0:	4313      	orrs	r3, r2
 80129e2:	d102      	bne.n	80129ea <__ieee754_pow+0x202>
 80129e4:	4632      	mov	r2, r6
 80129e6:	463b      	mov	r3, r7
 80129e8:	e7e6      	b.n	80129b8 <__ieee754_pow+0x1d0>
 80129ea:	4b19      	ldr	r3, [pc, #100]	; (8012a50 <__ieee754_pow+0x268>)
 80129ec:	4598      	cmp	r8, r3
 80129ee:	f340 80fb 	ble.w	8012be8 <__ieee754_pow+0x400>
 80129f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80129f6:	4598      	cmp	r8, r3
 80129f8:	4b13      	ldr	r3, [pc, #76]	; (8012a48 <__ieee754_pow+0x260>)
 80129fa:	dd0c      	ble.n	8012a16 <__ieee754_pow+0x22e>
 80129fc:	429c      	cmp	r4, r3
 80129fe:	dc0f      	bgt.n	8012a20 <__ieee754_pow+0x238>
 8012a00:	f1b9 0f00 	cmp.w	r9, #0
 8012a04:	da0f      	bge.n	8012a26 <__ieee754_pow+0x23e>
 8012a06:	2000      	movs	r0, #0
 8012a08:	b009      	add	sp, #36	; 0x24
 8012a0a:	ecbd 8b06 	vpop	{d8-d10}
 8012a0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a12:	f001 b95e 	b.w	8013cd2 <__math_oflow>
 8012a16:	429c      	cmp	r4, r3
 8012a18:	dbf2      	blt.n	8012a00 <__ieee754_pow+0x218>
 8012a1a:	4b0a      	ldr	r3, [pc, #40]	; (8012a44 <__ieee754_pow+0x25c>)
 8012a1c:	429c      	cmp	r4, r3
 8012a1e:	dd19      	ble.n	8012a54 <__ieee754_pow+0x26c>
 8012a20:	f1b9 0f00 	cmp.w	r9, #0
 8012a24:	dcef      	bgt.n	8012a06 <__ieee754_pow+0x21e>
 8012a26:	2000      	movs	r0, #0
 8012a28:	b009      	add	sp, #36	; 0x24
 8012a2a:	ecbd 8b06 	vpop	{d8-d10}
 8012a2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a32:	f001 b945 	b.w	8013cc0 <__math_uflow>
 8012a36:	bf00      	nop
 8012a38:	fff00000 	.word	0xfff00000
 8012a3c:	7ff00000 	.word	0x7ff00000
 8012a40:	433fffff 	.word	0x433fffff
 8012a44:	3ff00000 	.word	0x3ff00000
 8012a48:	3fefffff 	.word	0x3fefffff
 8012a4c:	3fe00000 	.word	0x3fe00000
 8012a50:	41e00000 	.word	0x41e00000
 8012a54:	4b60      	ldr	r3, [pc, #384]	; (8012bd8 <__ieee754_pow+0x3f0>)
 8012a56:	2200      	movs	r2, #0
 8012a58:	f7ed fc0e 	bl	8000278 <__aeabi_dsub>
 8012a5c:	a354      	add	r3, pc, #336	; (adr r3, 8012bb0 <__ieee754_pow+0x3c8>)
 8012a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a62:	4604      	mov	r4, r0
 8012a64:	460d      	mov	r5, r1
 8012a66:	f7ed fdbf 	bl	80005e8 <__aeabi_dmul>
 8012a6a:	a353      	add	r3, pc, #332	; (adr r3, 8012bb8 <__ieee754_pow+0x3d0>)
 8012a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a70:	4606      	mov	r6, r0
 8012a72:	460f      	mov	r7, r1
 8012a74:	4620      	mov	r0, r4
 8012a76:	4629      	mov	r1, r5
 8012a78:	f7ed fdb6 	bl	80005e8 <__aeabi_dmul>
 8012a7c:	4b57      	ldr	r3, [pc, #348]	; (8012bdc <__ieee754_pow+0x3f4>)
 8012a7e:	4682      	mov	sl, r0
 8012a80:	468b      	mov	fp, r1
 8012a82:	2200      	movs	r2, #0
 8012a84:	4620      	mov	r0, r4
 8012a86:	4629      	mov	r1, r5
 8012a88:	f7ed fdae 	bl	80005e8 <__aeabi_dmul>
 8012a8c:	4602      	mov	r2, r0
 8012a8e:	460b      	mov	r3, r1
 8012a90:	a14b      	add	r1, pc, #300	; (adr r1, 8012bc0 <__ieee754_pow+0x3d8>)
 8012a92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a96:	f7ed fbef 	bl	8000278 <__aeabi_dsub>
 8012a9a:	4622      	mov	r2, r4
 8012a9c:	462b      	mov	r3, r5
 8012a9e:	f7ed fda3 	bl	80005e8 <__aeabi_dmul>
 8012aa2:	4602      	mov	r2, r0
 8012aa4:	460b      	mov	r3, r1
 8012aa6:	2000      	movs	r0, #0
 8012aa8:	494d      	ldr	r1, [pc, #308]	; (8012be0 <__ieee754_pow+0x3f8>)
 8012aaa:	f7ed fbe5 	bl	8000278 <__aeabi_dsub>
 8012aae:	4622      	mov	r2, r4
 8012ab0:	4680      	mov	r8, r0
 8012ab2:	4689      	mov	r9, r1
 8012ab4:	462b      	mov	r3, r5
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	4629      	mov	r1, r5
 8012aba:	f7ed fd95 	bl	80005e8 <__aeabi_dmul>
 8012abe:	4602      	mov	r2, r0
 8012ac0:	460b      	mov	r3, r1
 8012ac2:	4640      	mov	r0, r8
 8012ac4:	4649      	mov	r1, r9
 8012ac6:	f7ed fd8f 	bl	80005e8 <__aeabi_dmul>
 8012aca:	a33f      	add	r3, pc, #252	; (adr r3, 8012bc8 <__ieee754_pow+0x3e0>)
 8012acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad0:	f7ed fd8a 	bl	80005e8 <__aeabi_dmul>
 8012ad4:	4602      	mov	r2, r0
 8012ad6:	460b      	mov	r3, r1
 8012ad8:	4650      	mov	r0, sl
 8012ada:	4659      	mov	r1, fp
 8012adc:	f7ed fbcc 	bl	8000278 <__aeabi_dsub>
 8012ae0:	4602      	mov	r2, r0
 8012ae2:	460b      	mov	r3, r1
 8012ae4:	4680      	mov	r8, r0
 8012ae6:	4689      	mov	r9, r1
 8012ae8:	4630      	mov	r0, r6
 8012aea:	4639      	mov	r1, r7
 8012aec:	f7ed fbc6 	bl	800027c <__adddf3>
 8012af0:	2000      	movs	r0, #0
 8012af2:	4632      	mov	r2, r6
 8012af4:	463b      	mov	r3, r7
 8012af6:	4604      	mov	r4, r0
 8012af8:	460d      	mov	r5, r1
 8012afa:	f7ed fbbd 	bl	8000278 <__aeabi_dsub>
 8012afe:	4602      	mov	r2, r0
 8012b00:	460b      	mov	r3, r1
 8012b02:	4640      	mov	r0, r8
 8012b04:	4649      	mov	r1, r9
 8012b06:	f7ed fbb7 	bl	8000278 <__aeabi_dsub>
 8012b0a:	9b04      	ldr	r3, [sp, #16]
 8012b0c:	9a06      	ldr	r2, [sp, #24]
 8012b0e:	3b01      	subs	r3, #1
 8012b10:	4313      	orrs	r3, r2
 8012b12:	4682      	mov	sl, r0
 8012b14:	468b      	mov	fp, r1
 8012b16:	f040 81e7 	bne.w	8012ee8 <__ieee754_pow+0x700>
 8012b1a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012bd0 <__ieee754_pow+0x3e8>
 8012b1e:	eeb0 8a47 	vmov.f32	s16, s14
 8012b22:	eef0 8a67 	vmov.f32	s17, s15
 8012b26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012b2a:	2600      	movs	r6, #0
 8012b2c:	4632      	mov	r2, r6
 8012b2e:	463b      	mov	r3, r7
 8012b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b34:	f7ed fba0 	bl	8000278 <__aeabi_dsub>
 8012b38:	4622      	mov	r2, r4
 8012b3a:	462b      	mov	r3, r5
 8012b3c:	f7ed fd54 	bl	80005e8 <__aeabi_dmul>
 8012b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b44:	4680      	mov	r8, r0
 8012b46:	4689      	mov	r9, r1
 8012b48:	4650      	mov	r0, sl
 8012b4a:	4659      	mov	r1, fp
 8012b4c:	f7ed fd4c 	bl	80005e8 <__aeabi_dmul>
 8012b50:	4602      	mov	r2, r0
 8012b52:	460b      	mov	r3, r1
 8012b54:	4640      	mov	r0, r8
 8012b56:	4649      	mov	r1, r9
 8012b58:	f7ed fb90 	bl	800027c <__adddf3>
 8012b5c:	4632      	mov	r2, r6
 8012b5e:	463b      	mov	r3, r7
 8012b60:	4680      	mov	r8, r0
 8012b62:	4689      	mov	r9, r1
 8012b64:	4620      	mov	r0, r4
 8012b66:	4629      	mov	r1, r5
 8012b68:	f7ed fd3e 	bl	80005e8 <__aeabi_dmul>
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	4604      	mov	r4, r0
 8012b70:	460d      	mov	r5, r1
 8012b72:	4602      	mov	r2, r0
 8012b74:	4649      	mov	r1, r9
 8012b76:	4640      	mov	r0, r8
 8012b78:	f7ed fb80 	bl	800027c <__adddf3>
 8012b7c:	4b19      	ldr	r3, [pc, #100]	; (8012be4 <__ieee754_pow+0x3fc>)
 8012b7e:	4299      	cmp	r1, r3
 8012b80:	ec45 4b19 	vmov	d9, r4, r5
 8012b84:	4606      	mov	r6, r0
 8012b86:	460f      	mov	r7, r1
 8012b88:	468b      	mov	fp, r1
 8012b8a:	f340 82f0 	ble.w	801316e <__ieee754_pow+0x986>
 8012b8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012b92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012b96:	4303      	orrs	r3, r0
 8012b98:	f000 81e4 	beq.w	8012f64 <__ieee754_pow+0x77c>
 8012b9c:	ec51 0b18 	vmov	r0, r1, d8
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	f7ed ff92 	bl	8000acc <__aeabi_dcmplt>
 8012ba8:	3800      	subs	r0, #0
 8012baa:	bf18      	it	ne
 8012bac:	2001      	movne	r0, #1
 8012bae:	e72b      	b.n	8012a08 <__ieee754_pow+0x220>
 8012bb0:	60000000 	.word	0x60000000
 8012bb4:	3ff71547 	.word	0x3ff71547
 8012bb8:	f85ddf44 	.word	0xf85ddf44
 8012bbc:	3e54ae0b 	.word	0x3e54ae0b
 8012bc0:	55555555 	.word	0x55555555
 8012bc4:	3fd55555 	.word	0x3fd55555
 8012bc8:	652b82fe 	.word	0x652b82fe
 8012bcc:	3ff71547 	.word	0x3ff71547
 8012bd0:	00000000 	.word	0x00000000
 8012bd4:	bff00000 	.word	0xbff00000
 8012bd8:	3ff00000 	.word	0x3ff00000
 8012bdc:	3fd00000 	.word	0x3fd00000
 8012be0:	3fe00000 	.word	0x3fe00000
 8012be4:	408fffff 	.word	0x408fffff
 8012be8:	4bd5      	ldr	r3, [pc, #852]	; (8012f40 <__ieee754_pow+0x758>)
 8012bea:	402b      	ands	r3, r5
 8012bec:	2200      	movs	r2, #0
 8012bee:	b92b      	cbnz	r3, 8012bfc <__ieee754_pow+0x414>
 8012bf0:	4bd4      	ldr	r3, [pc, #848]	; (8012f44 <__ieee754_pow+0x75c>)
 8012bf2:	f7ed fcf9 	bl	80005e8 <__aeabi_dmul>
 8012bf6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012bfa:	460c      	mov	r4, r1
 8012bfc:	1523      	asrs	r3, r4, #20
 8012bfe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012c02:	4413      	add	r3, r2
 8012c04:	9305      	str	r3, [sp, #20]
 8012c06:	4bd0      	ldr	r3, [pc, #832]	; (8012f48 <__ieee754_pow+0x760>)
 8012c08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012c0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012c10:	429c      	cmp	r4, r3
 8012c12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012c16:	dd08      	ble.n	8012c2a <__ieee754_pow+0x442>
 8012c18:	4bcc      	ldr	r3, [pc, #816]	; (8012f4c <__ieee754_pow+0x764>)
 8012c1a:	429c      	cmp	r4, r3
 8012c1c:	f340 8162 	ble.w	8012ee4 <__ieee754_pow+0x6fc>
 8012c20:	9b05      	ldr	r3, [sp, #20]
 8012c22:	3301      	adds	r3, #1
 8012c24:	9305      	str	r3, [sp, #20]
 8012c26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012c2a:	2400      	movs	r4, #0
 8012c2c:	00e3      	lsls	r3, r4, #3
 8012c2e:	9307      	str	r3, [sp, #28]
 8012c30:	4bc7      	ldr	r3, [pc, #796]	; (8012f50 <__ieee754_pow+0x768>)
 8012c32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c36:	ed93 7b00 	vldr	d7, [r3]
 8012c3a:	4629      	mov	r1, r5
 8012c3c:	ec53 2b17 	vmov	r2, r3, d7
 8012c40:	eeb0 9a47 	vmov.f32	s18, s14
 8012c44:	eef0 9a67 	vmov.f32	s19, s15
 8012c48:	4682      	mov	sl, r0
 8012c4a:	f7ed fb15 	bl	8000278 <__aeabi_dsub>
 8012c4e:	4652      	mov	r2, sl
 8012c50:	4606      	mov	r6, r0
 8012c52:	460f      	mov	r7, r1
 8012c54:	462b      	mov	r3, r5
 8012c56:	ec51 0b19 	vmov	r0, r1, d9
 8012c5a:	f7ed fb0f 	bl	800027c <__adddf3>
 8012c5e:	4602      	mov	r2, r0
 8012c60:	460b      	mov	r3, r1
 8012c62:	2000      	movs	r0, #0
 8012c64:	49bb      	ldr	r1, [pc, #748]	; (8012f54 <__ieee754_pow+0x76c>)
 8012c66:	f7ed fde9 	bl	800083c <__aeabi_ddiv>
 8012c6a:	ec41 0b1a 	vmov	d10, r0, r1
 8012c6e:	4602      	mov	r2, r0
 8012c70:	460b      	mov	r3, r1
 8012c72:	4630      	mov	r0, r6
 8012c74:	4639      	mov	r1, r7
 8012c76:	f7ed fcb7 	bl	80005e8 <__aeabi_dmul>
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c80:	9302      	str	r3, [sp, #8]
 8012c82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012c86:	46ab      	mov	fp, r5
 8012c88:	106d      	asrs	r5, r5, #1
 8012c8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012c8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012c92:	ec41 0b18 	vmov	d8, r0, r1
 8012c96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	4640      	mov	r0, r8
 8012c9e:	4649      	mov	r1, r9
 8012ca0:	4614      	mov	r4, r2
 8012ca2:	461d      	mov	r5, r3
 8012ca4:	f7ed fca0 	bl	80005e8 <__aeabi_dmul>
 8012ca8:	4602      	mov	r2, r0
 8012caa:	460b      	mov	r3, r1
 8012cac:	4630      	mov	r0, r6
 8012cae:	4639      	mov	r1, r7
 8012cb0:	f7ed fae2 	bl	8000278 <__aeabi_dsub>
 8012cb4:	ec53 2b19 	vmov	r2, r3, d9
 8012cb8:	4606      	mov	r6, r0
 8012cba:	460f      	mov	r7, r1
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	4629      	mov	r1, r5
 8012cc0:	f7ed fada 	bl	8000278 <__aeabi_dsub>
 8012cc4:	4602      	mov	r2, r0
 8012cc6:	460b      	mov	r3, r1
 8012cc8:	4650      	mov	r0, sl
 8012cca:	4659      	mov	r1, fp
 8012ccc:	f7ed fad4 	bl	8000278 <__aeabi_dsub>
 8012cd0:	4642      	mov	r2, r8
 8012cd2:	464b      	mov	r3, r9
 8012cd4:	f7ed fc88 	bl	80005e8 <__aeabi_dmul>
 8012cd8:	4602      	mov	r2, r0
 8012cda:	460b      	mov	r3, r1
 8012cdc:	4630      	mov	r0, r6
 8012cde:	4639      	mov	r1, r7
 8012ce0:	f7ed faca 	bl	8000278 <__aeabi_dsub>
 8012ce4:	ec53 2b1a 	vmov	r2, r3, d10
 8012ce8:	f7ed fc7e 	bl	80005e8 <__aeabi_dmul>
 8012cec:	ec53 2b18 	vmov	r2, r3, d8
 8012cf0:	ec41 0b19 	vmov	d9, r0, r1
 8012cf4:	ec51 0b18 	vmov	r0, r1, d8
 8012cf8:	f7ed fc76 	bl	80005e8 <__aeabi_dmul>
 8012cfc:	a37c      	add	r3, pc, #496	; (adr r3, 8012ef0 <__ieee754_pow+0x708>)
 8012cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d02:	4604      	mov	r4, r0
 8012d04:	460d      	mov	r5, r1
 8012d06:	f7ed fc6f 	bl	80005e8 <__aeabi_dmul>
 8012d0a:	a37b      	add	r3, pc, #492	; (adr r3, 8012ef8 <__ieee754_pow+0x710>)
 8012d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d10:	f7ed fab4 	bl	800027c <__adddf3>
 8012d14:	4622      	mov	r2, r4
 8012d16:	462b      	mov	r3, r5
 8012d18:	f7ed fc66 	bl	80005e8 <__aeabi_dmul>
 8012d1c:	a378      	add	r3, pc, #480	; (adr r3, 8012f00 <__ieee754_pow+0x718>)
 8012d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d22:	f7ed faab 	bl	800027c <__adddf3>
 8012d26:	4622      	mov	r2, r4
 8012d28:	462b      	mov	r3, r5
 8012d2a:	f7ed fc5d 	bl	80005e8 <__aeabi_dmul>
 8012d2e:	a376      	add	r3, pc, #472	; (adr r3, 8012f08 <__ieee754_pow+0x720>)
 8012d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d34:	f7ed faa2 	bl	800027c <__adddf3>
 8012d38:	4622      	mov	r2, r4
 8012d3a:	462b      	mov	r3, r5
 8012d3c:	f7ed fc54 	bl	80005e8 <__aeabi_dmul>
 8012d40:	a373      	add	r3, pc, #460	; (adr r3, 8012f10 <__ieee754_pow+0x728>)
 8012d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d46:	f7ed fa99 	bl	800027c <__adddf3>
 8012d4a:	4622      	mov	r2, r4
 8012d4c:	462b      	mov	r3, r5
 8012d4e:	f7ed fc4b 	bl	80005e8 <__aeabi_dmul>
 8012d52:	a371      	add	r3, pc, #452	; (adr r3, 8012f18 <__ieee754_pow+0x730>)
 8012d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d58:	f7ed fa90 	bl	800027c <__adddf3>
 8012d5c:	4622      	mov	r2, r4
 8012d5e:	4606      	mov	r6, r0
 8012d60:	460f      	mov	r7, r1
 8012d62:	462b      	mov	r3, r5
 8012d64:	4620      	mov	r0, r4
 8012d66:	4629      	mov	r1, r5
 8012d68:	f7ed fc3e 	bl	80005e8 <__aeabi_dmul>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	460b      	mov	r3, r1
 8012d70:	4630      	mov	r0, r6
 8012d72:	4639      	mov	r1, r7
 8012d74:	f7ed fc38 	bl	80005e8 <__aeabi_dmul>
 8012d78:	4642      	mov	r2, r8
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	460d      	mov	r5, r1
 8012d7e:	464b      	mov	r3, r9
 8012d80:	ec51 0b18 	vmov	r0, r1, d8
 8012d84:	f7ed fa7a 	bl	800027c <__adddf3>
 8012d88:	ec53 2b19 	vmov	r2, r3, d9
 8012d8c:	f7ed fc2c 	bl	80005e8 <__aeabi_dmul>
 8012d90:	4622      	mov	r2, r4
 8012d92:	462b      	mov	r3, r5
 8012d94:	f7ed fa72 	bl	800027c <__adddf3>
 8012d98:	4642      	mov	r2, r8
 8012d9a:	4682      	mov	sl, r0
 8012d9c:	468b      	mov	fp, r1
 8012d9e:	464b      	mov	r3, r9
 8012da0:	4640      	mov	r0, r8
 8012da2:	4649      	mov	r1, r9
 8012da4:	f7ed fc20 	bl	80005e8 <__aeabi_dmul>
 8012da8:	4b6b      	ldr	r3, [pc, #428]	; (8012f58 <__ieee754_pow+0x770>)
 8012daa:	2200      	movs	r2, #0
 8012dac:	4606      	mov	r6, r0
 8012dae:	460f      	mov	r7, r1
 8012db0:	f7ed fa64 	bl	800027c <__adddf3>
 8012db4:	4652      	mov	r2, sl
 8012db6:	465b      	mov	r3, fp
 8012db8:	f7ed fa60 	bl	800027c <__adddf3>
 8012dbc:	2000      	movs	r0, #0
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	460d      	mov	r5, r1
 8012dc2:	4602      	mov	r2, r0
 8012dc4:	460b      	mov	r3, r1
 8012dc6:	4640      	mov	r0, r8
 8012dc8:	4649      	mov	r1, r9
 8012dca:	f7ed fc0d 	bl	80005e8 <__aeabi_dmul>
 8012dce:	4b62      	ldr	r3, [pc, #392]	; (8012f58 <__ieee754_pow+0x770>)
 8012dd0:	4680      	mov	r8, r0
 8012dd2:	4689      	mov	r9, r1
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	4629      	mov	r1, r5
 8012dda:	f7ed fa4d 	bl	8000278 <__aeabi_dsub>
 8012dde:	4632      	mov	r2, r6
 8012de0:	463b      	mov	r3, r7
 8012de2:	f7ed fa49 	bl	8000278 <__aeabi_dsub>
 8012de6:	4602      	mov	r2, r0
 8012de8:	460b      	mov	r3, r1
 8012dea:	4650      	mov	r0, sl
 8012dec:	4659      	mov	r1, fp
 8012dee:	f7ed fa43 	bl	8000278 <__aeabi_dsub>
 8012df2:	ec53 2b18 	vmov	r2, r3, d8
 8012df6:	f7ed fbf7 	bl	80005e8 <__aeabi_dmul>
 8012dfa:	4622      	mov	r2, r4
 8012dfc:	4606      	mov	r6, r0
 8012dfe:	460f      	mov	r7, r1
 8012e00:	462b      	mov	r3, r5
 8012e02:	ec51 0b19 	vmov	r0, r1, d9
 8012e06:	f7ed fbef 	bl	80005e8 <__aeabi_dmul>
 8012e0a:	4602      	mov	r2, r0
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	4630      	mov	r0, r6
 8012e10:	4639      	mov	r1, r7
 8012e12:	f7ed fa33 	bl	800027c <__adddf3>
 8012e16:	4606      	mov	r6, r0
 8012e18:	460f      	mov	r7, r1
 8012e1a:	4602      	mov	r2, r0
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	4640      	mov	r0, r8
 8012e20:	4649      	mov	r1, r9
 8012e22:	f7ed fa2b 	bl	800027c <__adddf3>
 8012e26:	a33e      	add	r3, pc, #248	; (adr r3, 8012f20 <__ieee754_pow+0x738>)
 8012e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2c:	2000      	movs	r0, #0
 8012e2e:	4604      	mov	r4, r0
 8012e30:	460d      	mov	r5, r1
 8012e32:	f7ed fbd9 	bl	80005e8 <__aeabi_dmul>
 8012e36:	4642      	mov	r2, r8
 8012e38:	ec41 0b18 	vmov	d8, r0, r1
 8012e3c:	464b      	mov	r3, r9
 8012e3e:	4620      	mov	r0, r4
 8012e40:	4629      	mov	r1, r5
 8012e42:	f7ed fa19 	bl	8000278 <__aeabi_dsub>
 8012e46:	4602      	mov	r2, r0
 8012e48:	460b      	mov	r3, r1
 8012e4a:	4630      	mov	r0, r6
 8012e4c:	4639      	mov	r1, r7
 8012e4e:	f7ed fa13 	bl	8000278 <__aeabi_dsub>
 8012e52:	a335      	add	r3, pc, #212	; (adr r3, 8012f28 <__ieee754_pow+0x740>)
 8012e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e58:	f7ed fbc6 	bl	80005e8 <__aeabi_dmul>
 8012e5c:	a334      	add	r3, pc, #208	; (adr r3, 8012f30 <__ieee754_pow+0x748>)
 8012e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e62:	4606      	mov	r6, r0
 8012e64:	460f      	mov	r7, r1
 8012e66:	4620      	mov	r0, r4
 8012e68:	4629      	mov	r1, r5
 8012e6a:	f7ed fbbd 	bl	80005e8 <__aeabi_dmul>
 8012e6e:	4602      	mov	r2, r0
 8012e70:	460b      	mov	r3, r1
 8012e72:	4630      	mov	r0, r6
 8012e74:	4639      	mov	r1, r7
 8012e76:	f7ed fa01 	bl	800027c <__adddf3>
 8012e7a:	9a07      	ldr	r2, [sp, #28]
 8012e7c:	4b37      	ldr	r3, [pc, #220]	; (8012f5c <__ieee754_pow+0x774>)
 8012e7e:	4413      	add	r3, r2
 8012e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e84:	f7ed f9fa 	bl	800027c <__adddf3>
 8012e88:	4682      	mov	sl, r0
 8012e8a:	9805      	ldr	r0, [sp, #20]
 8012e8c:	468b      	mov	fp, r1
 8012e8e:	f7ed fb41 	bl	8000514 <__aeabi_i2d>
 8012e92:	9a07      	ldr	r2, [sp, #28]
 8012e94:	4b32      	ldr	r3, [pc, #200]	; (8012f60 <__ieee754_pow+0x778>)
 8012e96:	4413      	add	r3, r2
 8012e98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e9c:	4606      	mov	r6, r0
 8012e9e:	460f      	mov	r7, r1
 8012ea0:	4652      	mov	r2, sl
 8012ea2:	465b      	mov	r3, fp
 8012ea4:	ec51 0b18 	vmov	r0, r1, d8
 8012ea8:	f7ed f9e8 	bl	800027c <__adddf3>
 8012eac:	4642      	mov	r2, r8
 8012eae:	464b      	mov	r3, r9
 8012eb0:	f7ed f9e4 	bl	800027c <__adddf3>
 8012eb4:	4632      	mov	r2, r6
 8012eb6:	463b      	mov	r3, r7
 8012eb8:	f7ed f9e0 	bl	800027c <__adddf3>
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	4632      	mov	r2, r6
 8012ec0:	463b      	mov	r3, r7
 8012ec2:	4604      	mov	r4, r0
 8012ec4:	460d      	mov	r5, r1
 8012ec6:	f7ed f9d7 	bl	8000278 <__aeabi_dsub>
 8012eca:	4642      	mov	r2, r8
 8012ecc:	464b      	mov	r3, r9
 8012ece:	f7ed f9d3 	bl	8000278 <__aeabi_dsub>
 8012ed2:	ec53 2b18 	vmov	r2, r3, d8
 8012ed6:	f7ed f9cf 	bl	8000278 <__aeabi_dsub>
 8012eda:	4602      	mov	r2, r0
 8012edc:	460b      	mov	r3, r1
 8012ede:	4650      	mov	r0, sl
 8012ee0:	4659      	mov	r1, fp
 8012ee2:	e610      	b.n	8012b06 <__ieee754_pow+0x31e>
 8012ee4:	2401      	movs	r4, #1
 8012ee6:	e6a1      	b.n	8012c2c <__ieee754_pow+0x444>
 8012ee8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012f38 <__ieee754_pow+0x750>
 8012eec:	e617      	b.n	8012b1e <__ieee754_pow+0x336>
 8012eee:	bf00      	nop
 8012ef0:	4a454eef 	.word	0x4a454eef
 8012ef4:	3fca7e28 	.word	0x3fca7e28
 8012ef8:	93c9db65 	.word	0x93c9db65
 8012efc:	3fcd864a 	.word	0x3fcd864a
 8012f00:	a91d4101 	.word	0xa91d4101
 8012f04:	3fd17460 	.word	0x3fd17460
 8012f08:	518f264d 	.word	0x518f264d
 8012f0c:	3fd55555 	.word	0x3fd55555
 8012f10:	db6fabff 	.word	0xdb6fabff
 8012f14:	3fdb6db6 	.word	0x3fdb6db6
 8012f18:	33333303 	.word	0x33333303
 8012f1c:	3fe33333 	.word	0x3fe33333
 8012f20:	e0000000 	.word	0xe0000000
 8012f24:	3feec709 	.word	0x3feec709
 8012f28:	dc3a03fd 	.word	0xdc3a03fd
 8012f2c:	3feec709 	.word	0x3feec709
 8012f30:	145b01f5 	.word	0x145b01f5
 8012f34:	be3e2fe0 	.word	0xbe3e2fe0
 8012f38:	00000000 	.word	0x00000000
 8012f3c:	3ff00000 	.word	0x3ff00000
 8012f40:	7ff00000 	.word	0x7ff00000
 8012f44:	43400000 	.word	0x43400000
 8012f48:	0003988e 	.word	0x0003988e
 8012f4c:	000bb679 	.word	0x000bb679
 8012f50:	08015570 	.word	0x08015570
 8012f54:	3ff00000 	.word	0x3ff00000
 8012f58:	40080000 	.word	0x40080000
 8012f5c:	08015590 	.word	0x08015590
 8012f60:	08015580 	.word	0x08015580
 8012f64:	a3b3      	add	r3, pc, #716	; (adr r3, 8013234 <__ieee754_pow+0xa4c>)
 8012f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6a:	4640      	mov	r0, r8
 8012f6c:	4649      	mov	r1, r9
 8012f6e:	f7ed f985 	bl	800027c <__adddf3>
 8012f72:	4622      	mov	r2, r4
 8012f74:	ec41 0b1a 	vmov	d10, r0, r1
 8012f78:	462b      	mov	r3, r5
 8012f7a:	4630      	mov	r0, r6
 8012f7c:	4639      	mov	r1, r7
 8012f7e:	f7ed f97b 	bl	8000278 <__aeabi_dsub>
 8012f82:	4602      	mov	r2, r0
 8012f84:	460b      	mov	r3, r1
 8012f86:	ec51 0b1a 	vmov	r0, r1, d10
 8012f8a:	f7ed fdbd 	bl	8000b08 <__aeabi_dcmpgt>
 8012f8e:	2800      	cmp	r0, #0
 8012f90:	f47f ae04 	bne.w	8012b9c <__ieee754_pow+0x3b4>
 8012f94:	4aa2      	ldr	r2, [pc, #648]	; (8013220 <__ieee754_pow+0xa38>)
 8012f96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	f340 8107 	ble.w	80131ae <__ieee754_pow+0x9c6>
 8012fa0:	151b      	asrs	r3, r3, #20
 8012fa2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012fa6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012faa:	fa4a fa03 	asr.w	sl, sl, r3
 8012fae:	44da      	add	sl, fp
 8012fb0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012fb4:	489b      	ldr	r0, [pc, #620]	; (8013224 <__ieee754_pow+0xa3c>)
 8012fb6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012fba:	4108      	asrs	r0, r1
 8012fbc:	ea00 030a 	and.w	r3, r0, sl
 8012fc0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012fc4:	f1c1 0114 	rsb	r1, r1, #20
 8012fc8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012fcc:	fa4a fa01 	asr.w	sl, sl, r1
 8012fd0:	f1bb 0f00 	cmp.w	fp, #0
 8012fd4:	f04f 0200 	mov.w	r2, #0
 8012fd8:	4620      	mov	r0, r4
 8012fda:	4629      	mov	r1, r5
 8012fdc:	bfb8      	it	lt
 8012fde:	f1ca 0a00 	rsblt	sl, sl, #0
 8012fe2:	f7ed f949 	bl	8000278 <__aeabi_dsub>
 8012fe6:	ec41 0b19 	vmov	d9, r0, r1
 8012fea:	4642      	mov	r2, r8
 8012fec:	464b      	mov	r3, r9
 8012fee:	ec51 0b19 	vmov	r0, r1, d9
 8012ff2:	f7ed f943 	bl	800027c <__adddf3>
 8012ff6:	a37a      	add	r3, pc, #488	; (adr r3, 80131e0 <__ieee754_pow+0x9f8>)
 8012ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffc:	2000      	movs	r0, #0
 8012ffe:	4604      	mov	r4, r0
 8013000:	460d      	mov	r5, r1
 8013002:	f7ed faf1 	bl	80005e8 <__aeabi_dmul>
 8013006:	ec53 2b19 	vmov	r2, r3, d9
 801300a:	4606      	mov	r6, r0
 801300c:	460f      	mov	r7, r1
 801300e:	4620      	mov	r0, r4
 8013010:	4629      	mov	r1, r5
 8013012:	f7ed f931 	bl	8000278 <__aeabi_dsub>
 8013016:	4602      	mov	r2, r0
 8013018:	460b      	mov	r3, r1
 801301a:	4640      	mov	r0, r8
 801301c:	4649      	mov	r1, r9
 801301e:	f7ed f92b 	bl	8000278 <__aeabi_dsub>
 8013022:	a371      	add	r3, pc, #452	; (adr r3, 80131e8 <__ieee754_pow+0xa00>)
 8013024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013028:	f7ed fade 	bl	80005e8 <__aeabi_dmul>
 801302c:	a370      	add	r3, pc, #448	; (adr r3, 80131f0 <__ieee754_pow+0xa08>)
 801302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013032:	4680      	mov	r8, r0
 8013034:	4689      	mov	r9, r1
 8013036:	4620      	mov	r0, r4
 8013038:	4629      	mov	r1, r5
 801303a:	f7ed fad5 	bl	80005e8 <__aeabi_dmul>
 801303e:	4602      	mov	r2, r0
 8013040:	460b      	mov	r3, r1
 8013042:	4640      	mov	r0, r8
 8013044:	4649      	mov	r1, r9
 8013046:	f7ed f919 	bl	800027c <__adddf3>
 801304a:	4604      	mov	r4, r0
 801304c:	460d      	mov	r5, r1
 801304e:	4602      	mov	r2, r0
 8013050:	460b      	mov	r3, r1
 8013052:	4630      	mov	r0, r6
 8013054:	4639      	mov	r1, r7
 8013056:	f7ed f911 	bl	800027c <__adddf3>
 801305a:	4632      	mov	r2, r6
 801305c:	463b      	mov	r3, r7
 801305e:	4680      	mov	r8, r0
 8013060:	4689      	mov	r9, r1
 8013062:	f7ed f909 	bl	8000278 <__aeabi_dsub>
 8013066:	4602      	mov	r2, r0
 8013068:	460b      	mov	r3, r1
 801306a:	4620      	mov	r0, r4
 801306c:	4629      	mov	r1, r5
 801306e:	f7ed f903 	bl	8000278 <__aeabi_dsub>
 8013072:	4642      	mov	r2, r8
 8013074:	4606      	mov	r6, r0
 8013076:	460f      	mov	r7, r1
 8013078:	464b      	mov	r3, r9
 801307a:	4640      	mov	r0, r8
 801307c:	4649      	mov	r1, r9
 801307e:	f7ed fab3 	bl	80005e8 <__aeabi_dmul>
 8013082:	a35d      	add	r3, pc, #372	; (adr r3, 80131f8 <__ieee754_pow+0xa10>)
 8013084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013088:	4604      	mov	r4, r0
 801308a:	460d      	mov	r5, r1
 801308c:	f7ed faac 	bl	80005e8 <__aeabi_dmul>
 8013090:	a35b      	add	r3, pc, #364	; (adr r3, 8013200 <__ieee754_pow+0xa18>)
 8013092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013096:	f7ed f8ef 	bl	8000278 <__aeabi_dsub>
 801309a:	4622      	mov	r2, r4
 801309c:	462b      	mov	r3, r5
 801309e:	f7ed faa3 	bl	80005e8 <__aeabi_dmul>
 80130a2:	a359      	add	r3, pc, #356	; (adr r3, 8013208 <__ieee754_pow+0xa20>)
 80130a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a8:	f7ed f8e8 	bl	800027c <__adddf3>
 80130ac:	4622      	mov	r2, r4
 80130ae:	462b      	mov	r3, r5
 80130b0:	f7ed fa9a 	bl	80005e8 <__aeabi_dmul>
 80130b4:	a356      	add	r3, pc, #344	; (adr r3, 8013210 <__ieee754_pow+0xa28>)
 80130b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ba:	f7ed f8dd 	bl	8000278 <__aeabi_dsub>
 80130be:	4622      	mov	r2, r4
 80130c0:	462b      	mov	r3, r5
 80130c2:	f7ed fa91 	bl	80005e8 <__aeabi_dmul>
 80130c6:	a354      	add	r3, pc, #336	; (adr r3, 8013218 <__ieee754_pow+0xa30>)
 80130c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130cc:	f7ed f8d6 	bl	800027c <__adddf3>
 80130d0:	4622      	mov	r2, r4
 80130d2:	462b      	mov	r3, r5
 80130d4:	f7ed fa88 	bl	80005e8 <__aeabi_dmul>
 80130d8:	4602      	mov	r2, r0
 80130da:	460b      	mov	r3, r1
 80130dc:	4640      	mov	r0, r8
 80130de:	4649      	mov	r1, r9
 80130e0:	f7ed f8ca 	bl	8000278 <__aeabi_dsub>
 80130e4:	4604      	mov	r4, r0
 80130e6:	460d      	mov	r5, r1
 80130e8:	4602      	mov	r2, r0
 80130ea:	460b      	mov	r3, r1
 80130ec:	4640      	mov	r0, r8
 80130ee:	4649      	mov	r1, r9
 80130f0:	f7ed fa7a 	bl	80005e8 <__aeabi_dmul>
 80130f4:	2200      	movs	r2, #0
 80130f6:	ec41 0b19 	vmov	d9, r0, r1
 80130fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80130fe:	4620      	mov	r0, r4
 8013100:	4629      	mov	r1, r5
 8013102:	f7ed f8b9 	bl	8000278 <__aeabi_dsub>
 8013106:	4602      	mov	r2, r0
 8013108:	460b      	mov	r3, r1
 801310a:	ec51 0b19 	vmov	r0, r1, d9
 801310e:	f7ed fb95 	bl	800083c <__aeabi_ddiv>
 8013112:	4632      	mov	r2, r6
 8013114:	4604      	mov	r4, r0
 8013116:	460d      	mov	r5, r1
 8013118:	463b      	mov	r3, r7
 801311a:	4640      	mov	r0, r8
 801311c:	4649      	mov	r1, r9
 801311e:	f7ed fa63 	bl	80005e8 <__aeabi_dmul>
 8013122:	4632      	mov	r2, r6
 8013124:	463b      	mov	r3, r7
 8013126:	f7ed f8a9 	bl	800027c <__adddf3>
 801312a:	4602      	mov	r2, r0
 801312c:	460b      	mov	r3, r1
 801312e:	4620      	mov	r0, r4
 8013130:	4629      	mov	r1, r5
 8013132:	f7ed f8a1 	bl	8000278 <__aeabi_dsub>
 8013136:	4642      	mov	r2, r8
 8013138:	464b      	mov	r3, r9
 801313a:	f7ed f89d 	bl	8000278 <__aeabi_dsub>
 801313e:	460b      	mov	r3, r1
 8013140:	4602      	mov	r2, r0
 8013142:	4939      	ldr	r1, [pc, #228]	; (8013228 <__ieee754_pow+0xa40>)
 8013144:	2000      	movs	r0, #0
 8013146:	f7ed f897 	bl	8000278 <__aeabi_dsub>
 801314a:	ec41 0b10 	vmov	d0, r0, r1
 801314e:	ee10 3a90 	vmov	r3, s1
 8013152:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801315a:	da2b      	bge.n	80131b4 <__ieee754_pow+0x9cc>
 801315c:	4650      	mov	r0, sl
 801315e:	f000 fd13 	bl	8013b88 <scalbn>
 8013162:	ec51 0b10 	vmov	r0, r1, d0
 8013166:	ec53 2b18 	vmov	r2, r3, d8
 801316a:	f7ff bbee 	b.w	801294a <__ieee754_pow+0x162>
 801316e:	4b2f      	ldr	r3, [pc, #188]	; (801322c <__ieee754_pow+0xa44>)
 8013170:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013174:	429e      	cmp	r6, r3
 8013176:	f77f af0d 	ble.w	8012f94 <__ieee754_pow+0x7ac>
 801317a:	4b2d      	ldr	r3, [pc, #180]	; (8013230 <__ieee754_pow+0xa48>)
 801317c:	440b      	add	r3, r1
 801317e:	4303      	orrs	r3, r0
 8013180:	d009      	beq.n	8013196 <__ieee754_pow+0x9ae>
 8013182:	ec51 0b18 	vmov	r0, r1, d8
 8013186:	2200      	movs	r2, #0
 8013188:	2300      	movs	r3, #0
 801318a:	f7ed fc9f 	bl	8000acc <__aeabi_dcmplt>
 801318e:	3800      	subs	r0, #0
 8013190:	bf18      	it	ne
 8013192:	2001      	movne	r0, #1
 8013194:	e448      	b.n	8012a28 <__ieee754_pow+0x240>
 8013196:	4622      	mov	r2, r4
 8013198:	462b      	mov	r3, r5
 801319a:	f7ed f86d 	bl	8000278 <__aeabi_dsub>
 801319e:	4642      	mov	r2, r8
 80131a0:	464b      	mov	r3, r9
 80131a2:	f7ed fca7 	bl	8000af4 <__aeabi_dcmpge>
 80131a6:	2800      	cmp	r0, #0
 80131a8:	f43f aef4 	beq.w	8012f94 <__ieee754_pow+0x7ac>
 80131ac:	e7e9      	b.n	8013182 <__ieee754_pow+0x99a>
 80131ae:	f04f 0a00 	mov.w	sl, #0
 80131b2:	e71a      	b.n	8012fea <__ieee754_pow+0x802>
 80131b4:	ec51 0b10 	vmov	r0, r1, d0
 80131b8:	4619      	mov	r1, r3
 80131ba:	e7d4      	b.n	8013166 <__ieee754_pow+0x97e>
 80131bc:	491a      	ldr	r1, [pc, #104]	; (8013228 <__ieee754_pow+0xa40>)
 80131be:	2000      	movs	r0, #0
 80131c0:	f7ff bb31 	b.w	8012826 <__ieee754_pow+0x3e>
 80131c4:	2000      	movs	r0, #0
 80131c6:	2100      	movs	r1, #0
 80131c8:	f7ff bb2d 	b.w	8012826 <__ieee754_pow+0x3e>
 80131cc:	4630      	mov	r0, r6
 80131ce:	4639      	mov	r1, r7
 80131d0:	f7ff bb29 	b.w	8012826 <__ieee754_pow+0x3e>
 80131d4:	9204      	str	r2, [sp, #16]
 80131d6:	f7ff bb7b 	b.w	80128d0 <__ieee754_pow+0xe8>
 80131da:	2300      	movs	r3, #0
 80131dc:	f7ff bb65 	b.w	80128aa <__ieee754_pow+0xc2>
 80131e0:	00000000 	.word	0x00000000
 80131e4:	3fe62e43 	.word	0x3fe62e43
 80131e8:	fefa39ef 	.word	0xfefa39ef
 80131ec:	3fe62e42 	.word	0x3fe62e42
 80131f0:	0ca86c39 	.word	0x0ca86c39
 80131f4:	be205c61 	.word	0xbe205c61
 80131f8:	72bea4d0 	.word	0x72bea4d0
 80131fc:	3e663769 	.word	0x3e663769
 8013200:	c5d26bf1 	.word	0xc5d26bf1
 8013204:	3ebbbd41 	.word	0x3ebbbd41
 8013208:	af25de2c 	.word	0xaf25de2c
 801320c:	3f11566a 	.word	0x3f11566a
 8013210:	16bebd93 	.word	0x16bebd93
 8013214:	3f66c16c 	.word	0x3f66c16c
 8013218:	5555553e 	.word	0x5555553e
 801321c:	3fc55555 	.word	0x3fc55555
 8013220:	3fe00000 	.word	0x3fe00000
 8013224:	fff00000 	.word	0xfff00000
 8013228:	3ff00000 	.word	0x3ff00000
 801322c:	4090cbff 	.word	0x4090cbff
 8013230:	3f6f3400 	.word	0x3f6f3400
 8013234:	652b82fe 	.word	0x652b82fe
 8013238:	3c971547 	.word	0x3c971547

0801323c <__kernel_cosf>:
 801323c:	ee10 3a10 	vmov	r3, s0
 8013240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013244:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801324c:	da05      	bge.n	801325a <__kernel_cosf+0x1e>
 801324e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013252:	ee17 2a90 	vmov	r2, s15
 8013256:	2a00      	cmp	r2, #0
 8013258:	d03b      	beq.n	80132d2 <__kernel_cosf+0x96>
 801325a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801325e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80132d8 <__kernel_cosf+0x9c>
 8013262:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80132dc <__kernel_cosf+0xa0>
 8013266:	4a1e      	ldr	r2, [pc, #120]	; (80132e0 <__kernel_cosf+0xa4>)
 8013268:	eea7 6a27 	vfma.f32	s12, s14, s15
 801326c:	4293      	cmp	r3, r2
 801326e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80132e4 <__kernel_cosf+0xa8>
 8013272:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013276:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80132e8 <__kernel_cosf+0xac>
 801327a:	eea7 6a87 	vfma.f32	s12, s15, s14
 801327e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80132ec <__kernel_cosf+0xb0>
 8013282:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013286:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80132f0 <__kernel_cosf+0xb4>
 801328a:	eea7 6a87 	vfma.f32	s12, s15, s14
 801328e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8013292:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013296:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801329a:	eee7 0a06 	vfma.f32	s1, s14, s12
 801329e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132a2:	dc04      	bgt.n	80132ae <__kernel_cosf+0x72>
 80132a4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80132a8:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80132ac:	4770      	bx	lr
 80132ae:	4a11      	ldr	r2, [pc, #68]	; (80132f4 <__kernel_cosf+0xb8>)
 80132b0:	4293      	cmp	r3, r2
 80132b2:	bfda      	itte	le
 80132b4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80132b8:	ee07 3a10 	vmovle	s14, r3
 80132bc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80132c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80132c4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80132c8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80132cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80132d0:	4770      	bx	lr
 80132d2:	eeb0 0a66 	vmov.f32	s0, s13
 80132d6:	4770      	bx	lr
 80132d8:	ad47d74e 	.word	0xad47d74e
 80132dc:	310f74f6 	.word	0x310f74f6
 80132e0:	3e999999 	.word	0x3e999999
 80132e4:	b493f27c 	.word	0xb493f27c
 80132e8:	37d00d01 	.word	0x37d00d01
 80132ec:	bab60b61 	.word	0xbab60b61
 80132f0:	3d2aaaab 	.word	0x3d2aaaab
 80132f4:	3f480000 	.word	0x3f480000

080132f8 <__kernel_sinf>:
 80132f8:	ee10 3a10 	vmov	r3, s0
 80132fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013300:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013304:	da04      	bge.n	8013310 <__kernel_sinf+0x18>
 8013306:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801330a:	ee17 3a90 	vmov	r3, s15
 801330e:	b35b      	cbz	r3, 8013368 <__kernel_sinf+0x70>
 8013310:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013314:	eddf 7a15 	vldr	s15, [pc, #84]	; 801336c <__kernel_sinf+0x74>
 8013318:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8013370 <__kernel_sinf+0x78>
 801331c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013320:	eddf 7a14 	vldr	s15, [pc, #80]	; 8013374 <__kernel_sinf+0x7c>
 8013324:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013328:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013378 <__kernel_sinf+0x80>
 801332c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013330:	eddf 7a12 	vldr	s15, [pc, #72]	; 801337c <__kernel_sinf+0x84>
 8013334:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013338:	eee6 7a07 	vfma.f32	s15, s12, s14
 801333c:	b930      	cbnz	r0, 801334c <__kernel_sinf+0x54>
 801333e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013380 <__kernel_sinf+0x88>
 8013342:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013346:	eea6 0a26 	vfma.f32	s0, s12, s13
 801334a:	4770      	bx	lr
 801334c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013350:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013354:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013358:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801335c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013384 <__kernel_sinf+0x8c>
 8013360:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013364:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013368:	4770      	bx	lr
 801336a:	bf00      	nop
 801336c:	2f2ec9d3 	.word	0x2f2ec9d3
 8013370:	b2d72f34 	.word	0xb2d72f34
 8013374:	3638ef1b 	.word	0x3638ef1b
 8013378:	b9500d01 	.word	0xb9500d01
 801337c:	3c088889 	.word	0x3c088889
 8013380:	be2aaaab 	.word	0xbe2aaaab
 8013384:	3e2aaaab 	.word	0x3e2aaaab

08013388 <__ieee754_powf>:
 8013388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801338c:	ee10 4a90 	vmov	r4, s1
 8013390:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8013394:	ed2d 8b02 	vpush	{d8}
 8013398:	ee10 7a10 	vmov	r7, s0
 801339c:	eeb0 8a40 	vmov.f32	s16, s0
 80133a0:	eef0 8a60 	vmov.f32	s17, s1
 80133a4:	d10c      	bne.n	80133c0 <__ieee754_powf+0x38>
 80133a6:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 80133aa:	007f      	lsls	r7, r7, #1
 80133ac:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 80133b0:	f240 8292 	bls.w	80138d8 <__ieee754_powf+0x550>
 80133b4:	ee38 0a28 	vadd.f32	s0, s16, s17
 80133b8:	ecbd 8b02 	vpop	{d8}
 80133bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133c0:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 80133c4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80133c8:	dcf4      	bgt.n	80133b4 <__ieee754_powf+0x2c>
 80133ca:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80133ce:	dd08      	ble.n	80133e2 <__ieee754_powf+0x5a>
 80133d0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80133d4:	d1ee      	bne.n	80133b4 <__ieee754_powf+0x2c>
 80133d6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80133da:	0064      	lsls	r4, r4, #1
 80133dc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80133e0:	e7e6      	b.n	80133b0 <__ieee754_powf+0x28>
 80133e2:	2f00      	cmp	r7, #0
 80133e4:	da20      	bge.n	8013428 <__ieee754_powf+0xa0>
 80133e6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80133ea:	da2d      	bge.n	8013448 <__ieee754_powf+0xc0>
 80133ec:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80133f0:	f2c0 827b 	blt.w	80138ea <__ieee754_powf+0x562>
 80133f4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80133f8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80133fc:	fa48 f603 	asr.w	r6, r8, r3
 8013400:	fa06 f303 	lsl.w	r3, r6, r3
 8013404:	4543      	cmp	r3, r8
 8013406:	f040 8270 	bne.w	80138ea <__ieee754_powf+0x562>
 801340a:	f006 0601 	and.w	r6, r6, #1
 801340e:	f1c6 0602 	rsb	r6, r6, #2
 8013412:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8013416:	d11f      	bne.n	8013458 <__ieee754_powf+0xd0>
 8013418:	2c00      	cmp	r4, #0
 801341a:	f280 8263 	bge.w	80138e4 <__ieee754_powf+0x55c>
 801341e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013422:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8013426:	e7c7      	b.n	80133b8 <__ieee754_powf+0x30>
 8013428:	2600      	movs	r6, #0
 801342a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801342e:	d1f0      	bne.n	8013412 <__ieee754_powf+0x8a>
 8013430:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8013434:	f000 8250 	beq.w	80138d8 <__ieee754_powf+0x550>
 8013438:	dd08      	ble.n	801344c <__ieee754_powf+0xc4>
 801343a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8013740 <__ieee754_powf+0x3b8>
 801343e:	2c00      	cmp	r4, #0
 8013440:	bfa8      	it	ge
 8013442:	eeb0 0a68 	vmovge.f32	s0, s17
 8013446:	e7b7      	b.n	80133b8 <__ieee754_powf+0x30>
 8013448:	2602      	movs	r6, #2
 801344a:	e7ee      	b.n	801342a <__ieee754_powf+0xa2>
 801344c:	2c00      	cmp	r4, #0
 801344e:	f280 8246 	bge.w	80138de <__ieee754_powf+0x556>
 8013452:	eeb1 0a68 	vneg.f32	s0, s17
 8013456:	e7af      	b.n	80133b8 <__ieee754_powf+0x30>
 8013458:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801345c:	d102      	bne.n	8013464 <__ieee754_powf+0xdc>
 801345e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013462:	e7a9      	b.n	80133b8 <__ieee754_powf+0x30>
 8013464:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013468:	eeb0 0a48 	vmov.f32	s0, s16
 801346c:	d107      	bne.n	801347e <__ieee754_powf+0xf6>
 801346e:	2f00      	cmp	r7, #0
 8013470:	db05      	blt.n	801347e <__ieee754_powf+0xf6>
 8013472:	ecbd 8b02 	vpop	{d8}
 8013476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801347a:	f7fe bf2e 	b.w	80122da <__ieee754_sqrtf>
 801347e:	f000 fb79 	bl	8013b74 <fabsf>
 8013482:	b125      	cbz	r5, 801348e <__ieee754_powf+0x106>
 8013484:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8013488:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801348c:	d115      	bne.n	80134ba <__ieee754_powf+0x132>
 801348e:	2c00      	cmp	r4, #0
 8013490:	bfbc      	itt	lt
 8013492:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8013496:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801349a:	2f00      	cmp	r7, #0
 801349c:	da8c      	bge.n	80133b8 <__ieee754_powf+0x30>
 801349e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80134a2:	4335      	orrs	r5, r6
 80134a4:	d104      	bne.n	80134b0 <__ieee754_powf+0x128>
 80134a6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80134aa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80134ae:	e783      	b.n	80133b8 <__ieee754_powf+0x30>
 80134b0:	2e01      	cmp	r6, #1
 80134b2:	d181      	bne.n	80133b8 <__ieee754_powf+0x30>
 80134b4:	eeb1 0a40 	vneg.f32	s0, s0
 80134b8:	e77e      	b.n	80133b8 <__ieee754_powf+0x30>
 80134ba:	0ff8      	lsrs	r0, r7, #31
 80134bc:	3801      	subs	r0, #1
 80134be:	ea56 0300 	orrs.w	r3, r6, r0
 80134c2:	d104      	bne.n	80134ce <__ieee754_powf+0x146>
 80134c4:	ee38 8a48 	vsub.f32	s16, s16, s16
 80134c8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80134cc:	e774      	b.n	80133b8 <__ieee754_powf+0x30>
 80134ce:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80134d2:	dd73      	ble.n	80135bc <__ieee754_powf+0x234>
 80134d4:	4b9b      	ldr	r3, [pc, #620]	; (8013744 <__ieee754_powf+0x3bc>)
 80134d6:	429d      	cmp	r5, r3
 80134d8:	dc08      	bgt.n	80134ec <__ieee754_powf+0x164>
 80134da:	2c00      	cmp	r4, #0
 80134dc:	da0b      	bge.n	80134f6 <__ieee754_powf+0x16e>
 80134de:	2000      	movs	r0, #0
 80134e0:	ecbd 8b02 	vpop	{d8}
 80134e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134e8:	f000 bc7e 	b.w	8013de8 <__math_oflowf>
 80134ec:	4b96      	ldr	r3, [pc, #600]	; (8013748 <__ieee754_powf+0x3c0>)
 80134ee:	429d      	cmp	r5, r3
 80134f0:	dd08      	ble.n	8013504 <__ieee754_powf+0x17c>
 80134f2:	2c00      	cmp	r4, #0
 80134f4:	dcf3      	bgt.n	80134de <__ieee754_powf+0x156>
 80134f6:	2000      	movs	r0, #0
 80134f8:	ecbd 8b02 	vpop	{d8}
 80134fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013500:	f000 bc6c 	b.w	8013ddc <__math_uflowf>
 8013504:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013508:	ee30 0a67 	vsub.f32	s0, s0, s15
 801350c:	eddf 6a8f 	vldr	s13, [pc, #572]	; 801374c <__ieee754_powf+0x3c4>
 8013510:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013514:	eee0 6a67 	vfms.f32	s13, s0, s15
 8013518:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801351c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8013520:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013524:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013528:	eddf 7a89 	vldr	s15, [pc, #548]	; 8013750 <__ieee754_powf+0x3c8>
 801352c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8013530:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8013754 <__ieee754_powf+0x3cc>
 8013534:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013538:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8013758 <__ieee754_powf+0x3d0>
 801353c:	eef0 6a67 	vmov.f32	s13, s15
 8013540:	eee0 6a07 	vfma.f32	s13, s0, s14
 8013544:	ee16 3a90 	vmov	r3, s13
 8013548:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801354c:	f023 030f 	bic.w	r3, r3, #15
 8013550:	ee06 3a90 	vmov	s13, r3
 8013554:	eee0 6a47 	vfms.f32	s13, s0, s14
 8013558:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801355c:	3e01      	subs	r6, #1
 801355e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8013562:	4306      	orrs	r6, r0
 8013564:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013568:	f024 040f 	bic.w	r4, r4, #15
 801356c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013570:	bf08      	it	eq
 8013572:	eeb0 8a47 	vmoveq.f32	s16, s14
 8013576:	ee07 4a10 	vmov	s14, r4
 801357a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801357e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013582:	ee07 3a90 	vmov	s15, r3
 8013586:	eee7 0a27 	vfma.f32	s1, s14, s15
 801358a:	ee07 4a10 	vmov	s14, r4
 801358e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013592:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013596:	ee17 1a10 	vmov	r1, s14
 801359a:	2900      	cmp	r1, #0
 801359c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80135a0:	f340 817c 	ble.w	801389c <__ieee754_powf+0x514>
 80135a4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80135a8:	f340 80f8 	ble.w	801379c <__ieee754_powf+0x414>
 80135ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80135b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135b4:	bf4c      	ite	mi
 80135b6:	2001      	movmi	r0, #1
 80135b8:	2000      	movpl	r0, #0
 80135ba:	e791      	b.n	80134e0 <__ieee754_powf+0x158>
 80135bc:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 80135c0:	bf01      	itttt	eq
 80135c2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801375c <__ieee754_powf+0x3d4>
 80135c6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80135ca:	f06f 0317 	mvneq.w	r3, #23
 80135ce:	ee17 5a90 	vmoveq	r5, s15
 80135d2:	ea4f 52e5 	mov.w	r2, r5, asr #23
 80135d6:	bf18      	it	ne
 80135d8:	2300      	movne	r3, #0
 80135da:	3a7f      	subs	r2, #127	; 0x7f
 80135dc:	441a      	add	r2, r3
 80135de:	4b60      	ldr	r3, [pc, #384]	; (8013760 <__ieee754_powf+0x3d8>)
 80135e0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80135e4:	429d      	cmp	r5, r3
 80135e6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80135ea:	dd06      	ble.n	80135fa <__ieee754_powf+0x272>
 80135ec:	4b5d      	ldr	r3, [pc, #372]	; (8013764 <__ieee754_powf+0x3dc>)
 80135ee:	429d      	cmp	r5, r3
 80135f0:	f340 80a4 	ble.w	801373c <__ieee754_powf+0x3b4>
 80135f4:	3201      	adds	r2, #1
 80135f6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80135fa:	2500      	movs	r5, #0
 80135fc:	4b5a      	ldr	r3, [pc, #360]	; (8013768 <__ieee754_powf+0x3e0>)
 80135fe:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8013602:	ee07 1a10 	vmov	s14, r1
 8013606:	edd3 5a00 	vldr	s11, [r3]
 801360a:	4b58      	ldr	r3, [pc, #352]	; (801376c <__ieee754_powf+0x3e4>)
 801360c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8013610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013614:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8013618:	1049      	asrs	r1, r1, #1
 801361a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801361e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8013622:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8013626:	ee37 6a65 	vsub.f32	s12, s14, s11
 801362a:	ee07 1a90 	vmov	s15, r1
 801362e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8013632:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8013636:	ee15 7a10 	vmov	r7, s10
 801363a:	401f      	ands	r7, r3
 801363c:	ee06 7a90 	vmov	s13, r7
 8013640:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8013644:	ee37 7a65 	vsub.f32	s14, s14, s11
 8013648:	ee65 7a05 	vmul.f32	s15, s10, s10
 801364c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8013650:	eddf 5a47 	vldr	s11, [pc, #284]	; 8013770 <__ieee754_powf+0x3e8>
 8013654:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8013774 <__ieee754_powf+0x3ec>
 8013658:	eee7 5a87 	vfma.f32	s11, s15, s14
 801365c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8013778 <__ieee754_powf+0x3f0>
 8013660:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013664:	eddf 5a39 	vldr	s11, [pc, #228]	; 801374c <__ieee754_powf+0x3c4>
 8013668:	eee7 5a27 	vfma.f32	s11, s14, s15
 801366c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801377c <__ieee754_powf+0x3f4>
 8013670:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013674:	eddf 5a42 	vldr	s11, [pc, #264]	; 8013780 <__ieee754_powf+0x3f8>
 8013678:	ee26 6a24 	vmul.f32	s12, s12, s9
 801367c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013680:	ee35 7a26 	vadd.f32	s14, s10, s13
 8013684:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8013688:	ee27 7a06 	vmul.f32	s14, s14, s12
 801368c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013690:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8013694:	eef0 5a67 	vmov.f32	s11, s15
 8013698:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801369c:	ee75 5a87 	vadd.f32	s11, s11, s14
 80136a0:	ee15 1a90 	vmov	r1, s11
 80136a4:	4019      	ands	r1, r3
 80136a6:	ee05 1a90 	vmov	s11, r1
 80136aa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80136ae:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80136b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80136b6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80136ba:	eee6 7a25 	vfma.f32	s15, s12, s11
 80136be:	eeb0 6a67 	vmov.f32	s12, s15
 80136c2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80136c6:	ee16 1a10 	vmov	r1, s12
 80136ca:	4019      	ands	r1, r3
 80136cc:	ee07 1a10 	vmov	s14, r1
 80136d0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80136d4:	ee06 1a10 	vmov	s12, r1
 80136d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136dc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013784 <__ieee754_powf+0x3fc>
 80136e0:	4929      	ldr	r1, [pc, #164]	; (8013788 <__ieee754_powf+0x400>)
 80136e2:	eddf 5a2a 	vldr	s11, [pc, #168]	; 801378c <__ieee754_powf+0x404>
 80136e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80136ea:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013790 <__ieee754_powf+0x408>
 80136ee:	eee6 7a07 	vfma.f32	s15, s12, s14
 80136f2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80136f6:	ed91 7a00 	vldr	s14, [r1]
 80136fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136fe:	ee07 2a10 	vmov	s14, r2
 8013702:	eef0 6a67 	vmov.f32	s13, s15
 8013706:	4a23      	ldr	r2, [pc, #140]	; (8013794 <__ieee754_powf+0x40c>)
 8013708:	eee6 6a25 	vfma.f32	s13, s12, s11
 801370c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8013710:	ed92 5a00 	vldr	s10, [r2]
 8013714:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013718:	ee76 6a85 	vadd.f32	s13, s13, s10
 801371c:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013720:	ee16 2a90 	vmov	r2, s13
 8013724:	4013      	ands	r3, r2
 8013726:	ee06 3a90 	vmov	s13, r3
 801372a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801372e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8013732:	eea6 7a65 	vfms.f32	s14, s12, s11
 8013736:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801373a:	e70f      	b.n	801355c <__ieee754_powf+0x1d4>
 801373c:	2501      	movs	r5, #1
 801373e:	e75d      	b.n	80135fc <__ieee754_powf+0x274>
 8013740:	00000000 	.word	0x00000000
 8013744:	3f7ffff3 	.word	0x3f7ffff3
 8013748:	3f800007 	.word	0x3f800007
 801374c:	3eaaaaab 	.word	0x3eaaaaab
 8013750:	3fb8aa3b 	.word	0x3fb8aa3b
 8013754:	36eca570 	.word	0x36eca570
 8013758:	3fb8aa00 	.word	0x3fb8aa00
 801375c:	4b800000 	.word	0x4b800000
 8013760:	001cc471 	.word	0x001cc471
 8013764:	005db3d6 	.word	0x005db3d6
 8013768:	080155a0 	.word	0x080155a0
 801376c:	fffff000 	.word	0xfffff000
 8013770:	3e6c3255 	.word	0x3e6c3255
 8013774:	3e53f142 	.word	0x3e53f142
 8013778:	3e8ba305 	.word	0x3e8ba305
 801377c:	3edb6db7 	.word	0x3edb6db7
 8013780:	3f19999a 	.word	0x3f19999a
 8013784:	3f76384f 	.word	0x3f76384f
 8013788:	080155b0 	.word	0x080155b0
 801378c:	3f763800 	.word	0x3f763800
 8013790:	369dc3a0 	.word	0x369dc3a0
 8013794:	080155a8 	.word	0x080155a8
 8013798:	3338aa3c 	.word	0x3338aa3c
 801379c:	f040 8093 	bne.w	80138c6 <__ieee754_powf+0x53e>
 80137a0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013798 <__ieee754_powf+0x410>
 80137a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80137a8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80137ac:	eef4 6ac7 	vcmpe.f32	s13, s14
 80137b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137b4:	f73f aefa 	bgt.w	80135ac <__ieee754_powf+0x224>
 80137b8:	15db      	asrs	r3, r3, #23
 80137ba:	3b7e      	subs	r3, #126	; 0x7e
 80137bc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80137c0:	4118      	asrs	r0, r3
 80137c2:	4408      	add	r0, r1
 80137c4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80137c8:	4a49      	ldr	r2, [pc, #292]	; (80138f0 <__ieee754_powf+0x568>)
 80137ca:	3b7f      	subs	r3, #127	; 0x7f
 80137cc:	411a      	asrs	r2, r3
 80137ce:	4002      	ands	r2, r0
 80137d0:	ee07 2a10 	vmov	s14, r2
 80137d4:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80137d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80137dc:	f1c3 0317 	rsb	r3, r3, #23
 80137e0:	4118      	asrs	r0, r3
 80137e2:	2900      	cmp	r1, #0
 80137e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137e8:	bfb8      	it	lt
 80137ea:	4240      	neglt	r0, r0
 80137ec:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80137f0:	eddf 6a40 	vldr	s13, [pc, #256]	; 80138f4 <__ieee754_powf+0x56c>
 80137f4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80138f8 <__ieee754_powf+0x570>
 80137f8:	ee17 3a10 	vmov	r3, s14
 80137fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013800:	f023 030f 	bic.w	r3, r3, #15
 8013804:	ee07 3a10 	vmov	s14, r3
 8013808:	ee77 7a67 	vsub.f32	s15, s14, s15
 801380c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013810:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013814:	eddf 7a39 	vldr	s15, [pc, #228]	; 80138fc <__ieee754_powf+0x574>
 8013818:	ee67 7a27 	vmul.f32	s15, s14, s15
 801381c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8013820:	eef0 6a67 	vmov.f32	s13, s15
 8013824:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013828:	eef0 5a66 	vmov.f32	s11, s13
 801382c:	eee7 5a46 	vfms.f32	s11, s14, s12
 8013830:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013834:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8013838:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8013900 <__ieee754_powf+0x578>
 801383c:	eddf 5a31 	vldr	s11, [pc, #196]	; 8013904 <__ieee754_powf+0x57c>
 8013840:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013844:	eddf 5a30 	vldr	s11, [pc, #192]	; 8013908 <__ieee754_powf+0x580>
 8013848:	eee6 5a07 	vfma.f32	s11, s12, s14
 801384c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801390c <__ieee754_powf+0x584>
 8013850:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013854:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8013910 <__ieee754_powf+0x588>
 8013858:	eee6 5a07 	vfma.f32	s11, s12, s14
 801385c:	eeb0 6a66 	vmov.f32	s12, s13
 8013860:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8013864:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013868:	ee66 5a86 	vmul.f32	s11, s13, s12
 801386c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8013870:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8013874:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8013878:	ee77 7a67 	vsub.f32	s15, s14, s15
 801387c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013880:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013884:	ee10 3a10 	vmov	r3, s0
 8013888:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801388c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013890:	da1f      	bge.n	80138d2 <__ieee754_powf+0x54a>
 8013892:	f000 fa27 	bl	8013ce4 <scalbnf>
 8013896:	ee20 0a08 	vmul.f32	s0, s0, s16
 801389a:	e58d      	b.n	80133b8 <__ieee754_powf+0x30>
 801389c:	4a1d      	ldr	r2, [pc, #116]	; (8013914 <__ieee754_powf+0x58c>)
 801389e:	4293      	cmp	r3, r2
 80138a0:	dd07      	ble.n	80138b2 <__ieee754_powf+0x52a>
 80138a2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80138a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138aa:	bf4c      	ite	mi
 80138ac:	2001      	movmi	r0, #1
 80138ae:	2000      	movpl	r0, #0
 80138b0:	e622      	b.n	80134f8 <__ieee754_powf+0x170>
 80138b2:	d108      	bne.n	80138c6 <__ieee754_powf+0x53e>
 80138b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80138b8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80138bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c0:	f6ff af7a 	blt.w	80137b8 <__ieee754_powf+0x430>
 80138c4:	e7ed      	b.n	80138a2 <__ieee754_powf+0x51a>
 80138c6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80138ca:	f73f af75 	bgt.w	80137b8 <__ieee754_powf+0x430>
 80138ce:	2000      	movs	r0, #0
 80138d0:	e78c      	b.n	80137ec <__ieee754_powf+0x464>
 80138d2:	ee00 3a10 	vmov	s0, r3
 80138d6:	e7de      	b.n	8013896 <__ieee754_powf+0x50e>
 80138d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80138dc:	e56c      	b.n	80133b8 <__ieee754_powf+0x30>
 80138de:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013918 <__ieee754_powf+0x590>
 80138e2:	e569      	b.n	80133b8 <__ieee754_powf+0x30>
 80138e4:	eeb0 0a48 	vmov.f32	s0, s16
 80138e8:	e566      	b.n	80133b8 <__ieee754_powf+0x30>
 80138ea:	2600      	movs	r6, #0
 80138ec:	e591      	b.n	8013412 <__ieee754_powf+0x8a>
 80138ee:	bf00      	nop
 80138f0:	ff800000 	.word	0xff800000
 80138f4:	3f317218 	.word	0x3f317218
 80138f8:	3f317200 	.word	0x3f317200
 80138fc:	35bfbe8c 	.word	0x35bfbe8c
 8013900:	b5ddea0e 	.word	0xb5ddea0e
 8013904:	3331bb4c 	.word	0x3331bb4c
 8013908:	388ab355 	.word	0x388ab355
 801390c:	bb360b61 	.word	0xbb360b61
 8013910:	3e2aaaab 	.word	0x3e2aaaab
 8013914:	43160000 	.word	0x43160000
 8013918:	00000000 	.word	0x00000000

0801391c <__ieee754_rem_pio2f>:
 801391c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801391e:	ee10 6a10 	vmov	r6, s0
 8013922:	4b86      	ldr	r3, [pc, #536]	; (8013b3c <__ieee754_rem_pio2f+0x220>)
 8013924:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8013928:	429d      	cmp	r5, r3
 801392a:	b087      	sub	sp, #28
 801392c:	4604      	mov	r4, r0
 801392e:	dc05      	bgt.n	801393c <__ieee754_rem_pio2f+0x20>
 8013930:	2300      	movs	r3, #0
 8013932:	ed80 0a00 	vstr	s0, [r0]
 8013936:	6043      	str	r3, [r0, #4]
 8013938:	2000      	movs	r0, #0
 801393a:	e020      	b.n	801397e <__ieee754_rem_pio2f+0x62>
 801393c:	4b80      	ldr	r3, [pc, #512]	; (8013b40 <__ieee754_rem_pio2f+0x224>)
 801393e:	429d      	cmp	r5, r3
 8013940:	dc38      	bgt.n	80139b4 <__ieee754_rem_pio2f+0x98>
 8013942:	2e00      	cmp	r6, #0
 8013944:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8013b44 <__ieee754_rem_pio2f+0x228>
 8013948:	4b7f      	ldr	r3, [pc, #508]	; (8013b48 <__ieee754_rem_pio2f+0x22c>)
 801394a:	f025 050f 	bic.w	r5, r5, #15
 801394e:	dd18      	ble.n	8013982 <__ieee754_rem_pio2f+0x66>
 8013950:	429d      	cmp	r5, r3
 8013952:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013956:	bf09      	itett	eq
 8013958:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8013b4c <__ieee754_rem_pio2f+0x230>
 801395c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8013b50 <__ieee754_rem_pio2f+0x234>
 8013960:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013964:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8013b54 <__ieee754_rem_pio2f+0x238>
 8013968:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801396c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013970:	edc0 6a00 	vstr	s13, [r0]
 8013974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013978:	edc0 7a01 	vstr	s15, [r0, #4]
 801397c:	2001      	movs	r0, #1
 801397e:	b007      	add	sp, #28
 8013980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013982:	429d      	cmp	r5, r3
 8013984:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013988:	bf09      	itett	eq
 801398a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8013b4c <__ieee754_rem_pio2f+0x230>
 801398e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8013b50 <__ieee754_rem_pio2f+0x234>
 8013992:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013996:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8013b54 <__ieee754_rem_pio2f+0x238>
 801399a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801399e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80139a2:	edc0 6a00 	vstr	s13, [r0]
 80139a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80139aa:	edc0 7a01 	vstr	s15, [r0, #4]
 80139ae:	f04f 30ff 	mov.w	r0, #4294967295
 80139b2:	e7e4      	b.n	801397e <__ieee754_rem_pio2f+0x62>
 80139b4:	4b68      	ldr	r3, [pc, #416]	; (8013b58 <__ieee754_rem_pio2f+0x23c>)
 80139b6:	429d      	cmp	r5, r3
 80139b8:	dc71      	bgt.n	8013a9e <__ieee754_rem_pio2f+0x182>
 80139ba:	f000 f8db 	bl	8013b74 <fabsf>
 80139be:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013b5c <__ieee754_rem_pio2f+0x240>
 80139c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80139c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80139ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80139d2:	ee17 0a90 	vmov	r0, s15
 80139d6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013b44 <__ieee754_rem_pio2f+0x228>
 80139da:	eea7 0a67 	vfms.f32	s0, s14, s15
 80139de:	281f      	cmp	r0, #31
 80139e0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013b50 <__ieee754_rem_pio2f+0x234>
 80139e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139e8:	eeb1 6a47 	vneg.f32	s12, s14
 80139ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 80139f0:	ee16 2a90 	vmov	r2, s13
 80139f4:	dc1c      	bgt.n	8013a30 <__ieee754_rem_pio2f+0x114>
 80139f6:	495a      	ldr	r1, [pc, #360]	; (8013b60 <__ieee754_rem_pio2f+0x244>)
 80139f8:	1e47      	subs	r7, r0, #1
 80139fa:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80139fe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8013a02:	428b      	cmp	r3, r1
 8013a04:	d014      	beq.n	8013a30 <__ieee754_rem_pio2f+0x114>
 8013a06:	6022      	str	r2, [r4, #0]
 8013a08:	ed94 7a00 	vldr	s14, [r4]
 8013a0c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013a10:	2e00      	cmp	r6, #0
 8013a12:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013a16:	ed84 0a01 	vstr	s0, [r4, #4]
 8013a1a:	dab0      	bge.n	801397e <__ieee754_rem_pio2f+0x62>
 8013a1c:	eeb1 7a47 	vneg.f32	s14, s14
 8013a20:	eeb1 0a40 	vneg.f32	s0, s0
 8013a24:	ed84 7a00 	vstr	s14, [r4]
 8013a28:	ed84 0a01 	vstr	s0, [r4, #4]
 8013a2c:	4240      	negs	r0, r0
 8013a2e:	e7a6      	b.n	801397e <__ieee754_rem_pio2f+0x62>
 8013a30:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013a34:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8013a38:	2908      	cmp	r1, #8
 8013a3a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013a3e:	dde2      	ble.n	8013a06 <__ieee754_rem_pio2f+0xea>
 8013a40:	eddf 5a42 	vldr	s11, [pc, #264]	; 8013b4c <__ieee754_rem_pio2f+0x230>
 8013a44:	eef0 6a40 	vmov.f32	s13, s0
 8013a48:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013a4c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013a50:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013a54:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8013b54 <__ieee754_rem_pio2f+0x238>
 8013a58:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013a5c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013a60:	ee15 2a90 	vmov	r2, s11
 8013a64:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013a68:	1a5b      	subs	r3, r3, r1
 8013a6a:	2b19      	cmp	r3, #25
 8013a6c:	dc04      	bgt.n	8013a78 <__ieee754_rem_pio2f+0x15c>
 8013a6e:	edc4 5a00 	vstr	s11, [r4]
 8013a72:	eeb0 0a66 	vmov.f32	s0, s13
 8013a76:	e7c7      	b.n	8013a08 <__ieee754_rem_pio2f+0xec>
 8013a78:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013b64 <__ieee754_rem_pio2f+0x248>
 8013a7c:	eeb0 0a66 	vmov.f32	s0, s13
 8013a80:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013a84:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013a88:	eddf 6a37 	vldr	s13, [pc, #220]	; 8013b68 <__ieee754_rem_pio2f+0x24c>
 8013a8c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013a90:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013a94:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013a98:	ed84 7a00 	vstr	s14, [r4]
 8013a9c:	e7b4      	b.n	8013a08 <__ieee754_rem_pio2f+0xec>
 8013a9e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013aa2:	db06      	blt.n	8013ab2 <__ieee754_rem_pio2f+0x196>
 8013aa4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013aa8:	edc0 7a01 	vstr	s15, [r0, #4]
 8013aac:	edc0 7a00 	vstr	s15, [r0]
 8013ab0:	e742      	b.n	8013938 <__ieee754_rem_pio2f+0x1c>
 8013ab2:	15ea      	asrs	r2, r5, #23
 8013ab4:	3a86      	subs	r2, #134	; 0x86
 8013ab6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013aba:	ee07 3a90 	vmov	s15, r3
 8013abe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013ac2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8013b6c <__ieee754_rem_pio2f+0x250>
 8013ac6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013aca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ace:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013ad2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013ad6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013ada:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ae2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013ae6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013aea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013af2:	edcd 7a05 	vstr	s15, [sp, #20]
 8013af6:	d11e      	bne.n	8013b36 <__ieee754_rem_pio2f+0x21a>
 8013af8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b00:	bf14      	ite	ne
 8013b02:	2302      	movne	r3, #2
 8013b04:	2301      	moveq	r3, #1
 8013b06:	491a      	ldr	r1, [pc, #104]	; (8013b70 <__ieee754_rem_pio2f+0x254>)
 8013b08:	9101      	str	r1, [sp, #4]
 8013b0a:	2102      	movs	r1, #2
 8013b0c:	9100      	str	r1, [sp, #0]
 8013b0e:	a803      	add	r0, sp, #12
 8013b10:	4621      	mov	r1, r4
 8013b12:	f000 fa49 	bl	8013fa8 <__kernel_rem_pio2f>
 8013b16:	2e00      	cmp	r6, #0
 8013b18:	f6bf af31 	bge.w	801397e <__ieee754_rem_pio2f+0x62>
 8013b1c:	edd4 7a00 	vldr	s15, [r4]
 8013b20:	eef1 7a67 	vneg.f32	s15, s15
 8013b24:	edc4 7a00 	vstr	s15, [r4]
 8013b28:	edd4 7a01 	vldr	s15, [r4, #4]
 8013b2c:	eef1 7a67 	vneg.f32	s15, s15
 8013b30:	edc4 7a01 	vstr	s15, [r4, #4]
 8013b34:	e77a      	b.n	8013a2c <__ieee754_rem_pio2f+0x110>
 8013b36:	2303      	movs	r3, #3
 8013b38:	e7e5      	b.n	8013b06 <__ieee754_rem_pio2f+0x1ea>
 8013b3a:	bf00      	nop
 8013b3c:	3f490fd8 	.word	0x3f490fd8
 8013b40:	4016cbe3 	.word	0x4016cbe3
 8013b44:	3fc90f80 	.word	0x3fc90f80
 8013b48:	3fc90fd0 	.word	0x3fc90fd0
 8013b4c:	37354400 	.word	0x37354400
 8013b50:	37354443 	.word	0x37354443
 8013b54:	2e85a308 	.word	0x2e85a308
 8013b58:	43490f80 	.word	0x43490f80
 8013b5c:	3f22f984 	.word	0x3f22f984
 8013b60:	080155b8 	.word	0x080155b8
 8013b64:	2e85a300 	.word	0x2e85a300
 8013b68:	248d3132 	.word	0x248d3132
 8013b6c:	43800000 	.word	0x43800000
 8013b70:	08015638 	.word	0x08015638

08013b74 <fabsf>:
 8013b74:	ee10 3a10 	vmov	r3, s0
 8013b78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b7c:	ee00 3a10 	vmov	s0, r3
 8013b80:	4770      	bx	lr
 8013b82:	0000      	movs	r0, r0
 8013b84:	0000      	movs	r0, r0
	...

08013b88 <scalbn>:
 8013b88:	b570      	push	{r4, r5, r6, lr}
 8013b8a:	ec55 4b10 	vmov	r4, r5, d0
 8013b8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013b92:	4606      	mov	r6, r0
 8013b94:	462b      	mov	r3, r5
 8013b96:	b999      	cbnz	r1, 8013bc0 <scalbn+0x38>
 8013b98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013b9c:	4323      	orrs	r3, r4
 8013b9e:	d03f      	beq.n	8013c20 <scalbn+0x98>
 8013ba0:	4b35      	ldr	r3, [pc, #212]	; (8013c78 <scalbn+0xf0>)
 8013ba2:	4629      	mov	r1, r5
 8013ba4:	ee10 0a10 	vmov	r0, s0
 8013ba8:	2200      	movs	r2, #0
 8013baa:	f7ec fd1d 	bl	80005e8 <__aeabi_dmul>
 8013bae:	4b33      	ldr	r3, [pc, #204]	; (8013c7c <scalbn+0xf4>)
 8013bb0:	429e      	cmp	r6, r3
 8013bb2:	4604      	mov	r4, r0
 8013bb4:	460d      	mov	r5, r1
 8013bb6:	da10      	bge.n	8013bda <scalbn+0x52>
 8013bb8:	a327      	add	r3, pc, #156	; (adr r3, 8013c58 <scalbn+0xd0>)
 8013bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bbe:	e01f      	b.n	8013c00 <scalbn+0x78>
 8013bc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013bc4:	4291      	cmp	r1, r2
 8013bc6:	d10c      	bne.n	8013be2 <scalbn+0x5a>
 8013bc8:	ee10 2a10 	vmov	r2, s0
 8013bcc:	4620      	mov	r0, r4
 8013bce:	4629      	mov	r1, r5
 8013bd0:	f7ec fb54 	bl	800027c <__adddf3>
 8013bd4:	4604      	mov	r4, r0
 8013bd6:	460d      	mov	r5, r1
 8013bd8:	e022      	b.n	8013c20 <scalbn+0x98>
 8013bda:	460b      	mov	r3, r1
 8013bdc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013be0:	3936      	subs	r1, #54	; 0x36
 8013be2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013be6:	4296      	cmp	r6, r2
 8013be8:	dd0d      	ble.n	8013c06 <scalbn+0x7e>
 8013bea:	2d00      	cmp	r5, #0
 8013bec:	a11c      	add	r1, pc, #112	; (adr r1, 8013c60 <scalbn+0xd8>)
 8013bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bf2:	da02      	bge.n	8013bfa <scalbn+0x72>
 8013bf4:	a11c      	add	r1, pc, #112	; (adr r1, 8013c68 <scalbn+0xe0>)
 8013bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bfa:	a319      	add	r3, pc, #100	; (adr r3, 8013c60 <scalbn+0xd8>)
 8013bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c00:	f7ec fcf2 	bl	80005e8 <__aeabi_dmul>
 8013c04:	e7e6      	b.n	8013bd4 <scalbn+0x4c>
 8013c06:	1872      	adds	r2, r6, r1
 8013c08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013c0c:	428a      	cmp	r2, r1
 8013c0e:	dcec      	bgt.n	8013bea <scalbn+0x62>
 8013c10:	2a00      	cmp	r2, #0
 8013c12:	dd08      	ble.n	8013c26 <scalbn+0x9e>
 8013c14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013c18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013c1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013c20:	ec45 4b10 	vmov	d0, r4, r5
 8013c24:	bd70      	pop	{r4, r5, r6, pc}
 8013c26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013c2a:	da08      	bge.n	8013c3e <scalbn+0xb6>
 8013c2c:	2d00      	cmp	r5, #0
 8013c2e:	a10a      	add	r1, pc, #40	; (adr r1, 8013c58 <scalbn+0xd0>)
 8013c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c34:	dac0      	bge.n	8013bb8 <scalbn+0x30>
 8013c36:	a10e      	add	r1, pc, #56	; (adr r1, 8013c70 <scalbn+0xe8>)
 8013c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c3c:	e7bc      	b.n	8013bb8 <scalbn+0x30>
 8013c3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013c42:	3236      	adds	r2, #54	; 0x36
 8013c44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013c48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013c4c:	4620      	mov	r0, r4
 8013c4e:	4b0c      	ldr	r3, [pc, #48]	; (8013c80 <scalbn+0xf8>)
 8013c50:	2200      	movs	r2, #0
 8013c52:	e7d5      	b.n	8013c00 <scalbn+0x78>
 8013c54:	f3af 8000 	nop.w
 8013c58:	c2f8f359 	.word	0xc2f8f359
 8013c5c:	01a56e1f 	.word	0x01a56e1f
 8013c60:	8800759c 	.word	0x8800759c
 8013c64:	7e37e43c 	.word	0x7e37e43c
 8013c68:	8800759c 	.word	0x8800759c
 8013c6c:	fe37e43c 	.word	0xfe37e43c
 8013c70:	c2f8f359 	.word	0xc2f8f359
 8013c74:	81a56e1f 	.word	0x81a56e1f
 8013c78:	43500000 	.word	0x43500000
 8013c7c:	ffff3cb0 	.word	0xffff3cb0
 8013c80:	3c900000 	.word	0x3c900000

08013c84 <with_errno>:
 8013c84:	b570      	push	{r4, r5, r6, lr}
 8013c86:	4604      	mov	r4, r0
 8013c88:	460d      	mov	r5, r1
 8013c8a:	4616      	mov	r6, r2
 8013c8c:	f7fd f9c8 	bl	8011020 <__errno>
 8013c90:	4629      	mov	r1, r5
 8013c92:	6006      	str	r6, [r0, #0]
 8013c94:	4620      	mov	r0, r4
 8013c96:	bd70      	pop	{r4, r5, r6, pc}

08013c98 <xflow>:
 8013c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c9a:	4614      	mov	r4, r2
 8013c9c:	461d      	mov	r5, r3
 8013c9e:	b108      	cbz	r0, 8013ca4 <xflow+0xc>
 8013ca0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013ca4:	e9cd 2300 	strd	r2, r3, [sp]
 8013ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cac:	4620      	mov	r0, r4
 8013cae:	4629      	mov	r1, r5
 8013cb0:	f7ec fc9a 	bl	80005e8 <__aeabi_dmul>
 8013cb4:	2222      	movs	r2, #34	; 0x22
 8013cb6:	b003      	add	sp, #12
 8013cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cbc:	f7ff bfe2 	b.w	8013c84 <with_errno>

08013cc0 <__math_uflow>:
 8013cc0:	b508      	push	{r3, lr}
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013cc8:	f7ff ffe6 	bl	8013c98 <xflow>
 8013ccc:	ec41 0b10 	vmov	d0, r0, r1
 8013cd0:	bd08      	pop	{r3, pc}

08013cd2 <__math_oflow>:
 8013cd2:	b508      	push	{r3, lr}
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013cda:	f7ff ffdd 	bl	8013c98 <xflow>
 8013cde:	ec41 0b10 	vmov	d0, r0, r1
 8013ce2:	bd08      	pop	{r3, pc}

08013ce4 <scalbnf>:
 8013ce4:	ee10 3a10 	vmov	r3, s0
 8013ce8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013cec:	d02b      	beq.n	8013d46 <scalbnf+0x62>
 8013cee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013cf2:	d302      	bcc.n	8013cfa <scalbnf+0x16>
 8013cf4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013cf8:	4770      	bx	lr
 8013cfa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013cfe:	d123      	bne.n	8013d48 <scalbnf+0x64>
 8013d00:	4b24      	ldr	r3, [pc, #144]	; (8013d94 <scalbnf+0xb0>)
 8013d02:	eddf 7a25 	vldr	s15, [pc, #148]	; 8013d98 <scalbnf+0xb4>
 8013d06:	4298      	cmp	r0, r3
 8013d08:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013d0c:	db17      	blt.n	8013d3e <scalbnf+0x5a>
 8013d0e:	ee10 3a10 	vmov	r3, s0
 8013d12:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013d16:	3a19      	subs	r2, #25
 8013d18:	f24c 3150 	movw	r1, #50000	; 0xc350
 8013d1c:	4288      	cmp	r0, r1
 8013d1e:	dd15      	ble.n	8013d4c <scalbnf+0x68>
 8013d20:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013d9c <scalbnf+0xb8>
 8013d24:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8013da0 <scalbnf+0xbc>
 8013d28:	ee10 3a10 	vmov	r3, s0
 8013d2c:	eeb0 7a67 	vmov.f32	s14, s15
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	bfb8      	it	lt
 8013d34:	eef0 7a66 	vmovlt.f32	s15, s13
 8013d38:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013d3c:	4770      	bx	lr
 8013d3e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8013da4 <scalbnf+0xc0>
 8013d42:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013d46:	4770      	bx	lr
 8013d48:	0dd2      	lsrs	r2, r2, #23
 8013d4a:	e7e5      	b.n	8013d18 <scalbnf+0x34>
 8013d4c:	4410      	add	r0, r2
 8013d4e:	28fe      	cmp	r0, #254	; 0xfe
 8013d50:	dce6      	bgt.n	8013d20 <scalbnf+0x3c>
 8013d52:	2800      	cmp	r0, #0
 8013d54:	dd06      	ble.n	8013d64 <scalbnf+0x80>
 8013d56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013d5a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013d5e:	ee00 3a10 	vmov	s0, r3
 8013d62:	4770      	bx	lr
 8013d64:	f110 0f16 	cmn.w	r0, #22
 8013d68:	da09      	bge.n	8013d7e <scalbnf+0x9a>
 8013d6a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8013da4 <scalbnf+0xc0>
 8013d6e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8013da8 <scalbnf+0xc4>
 8013d72:	ee10 3a10 	vmov	r3, s0
 8013d76:	eeb0 7a67 	vmov.f32	s14, s15
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	e7d9      	b.n	8013d32 <scalbnf+0x4e>
 8013d7e:	3019      	adds	r0, #25
 8013d80:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013d84:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013d88:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8013dac <scalbnf+0xc8>
 8013d8c:	ee07 3a90 	vmov	s15, r3
 8013d90:	e7d7      	b.n	8013d42 <scalbnf+0x5e>
 8013d92:	bf00      	nop
 8013d94:	ffff3cb0 	.word	0xffff3cb0
 8013d98:	4c000000 	.word	0x4c000000
 8013d9c:	7149f2ca 	.word	0x7149f2ca
 8013da0:	f149f2ca 	.word	0xf149f2ca
 8013da4:	0da24260 	.word	0x0da24260
 8013da8:	8da24260 	.word	0x8da24260
 8013dac:	33000000 	.word	0x33000000

08013db0 <with_errnof>:
 8013db0:	b513      	push	{r0, r1, r4, lr}
 8013db2:	4604      	mov	r4, r0
 8013db4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013db8:	f7fd f932 	bl	8011020 <__errno>
 8013dbc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013dc0:	6004      	str	r4, [r0, #0]
 8013dc2:	b002      	add	sp, #8
 8013dc4:	bd10      	pop	{r4, pc}

08013dc6 <xflowf>:
 8013dc6:	b130      	cbz	r0, 8013dd6 <xflowf+0x10>
 8013dc8:	eef1 7a40 	vneg.f32	s15, s0
 8013dcc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013dd0:	2022      	movs	r0, #34	; 0x22
 8013dd2:	f7ff bfed 	b.w	8013db0 <with_errnof>
 8013dd6:	eef0 7a40 	vmov.f32	s15, s0
 8013dda:	e7f7      	b.n	8013dcc <xflowf+0x6>

08013ddc <__math_uflowf>:
 8013ddc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013de4 <__math_uflowf+0x8>
 8013de0:	f7ff bff1 	b.w	8013dc6 <xflowf>
 8013de4:	10000000 	.word	0x10000000

08013de8 <__math_oflowf>:
 8013de8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013df0 <__math_oflowf+0x8>
 8013dec:	f7ff bfeb 	b.w	8013dc6 <xflowf>
 8013df0:	70000000 	.word	0x70000000

08013df4 <__ieee754_sqrt>:
 8013df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df8:	ec55 4b10 	vmov	r4, r5, d0
 8013dfc:	4e67      	ldr	r6, [pc, #412]	; (8013f9c <__ieee754_sqrt+0x1a8>)
 8013dfe:	43ae      	bics	r6, r5
 8013e00:	ee10 0a10 	vmov	r0, s0
 8013e04:	ee10 2a10 	vmov	r2, s0
 8013e08:	4629      	mov	r1, r5
 8013e0a:	462b      	mov	r3, r5
 8013e0c:	d10d      	bne.n	8013e2a <__ieee754_sqrt+0x36>
 8013e0e:	f7ec fbeb 	bl	80005e8 <__aeabi_dmul>
 8013e12:	4602      	mov	r2, r0
 8013e14:	460b      	mov	r3, r1
 8013e16:	4620      	mov	r0, r4
 8013e18:	4629      	mov	r1, r5
 8013e1a:	f7ec fa2f 	bl	800027c <__adddf3>
 8013e1e:	4604      	mov	r4, r0
 8013e20:	460d      	mov	r5, r1
 8013e22:	ec45 4b10 	vmov	d0, r4, r5
 8013e26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e2a:	2d00      	cmp	r5, #0
 8013e2c:	dc0b      	bgt.n	8013e46 <__ieee754_sqrt+0x52>
 8013e2e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013e32:	4326      	orrs	r6, r4
 8013e34:	d0f5      	beq.n	8013e22 <__ieee754_sqrt+0x2e>
 8013e36:	b135      	cbz	r5, 8013e46 <__ieee754_sqrt+0x52>
 8013e38:	f7ec fa1e 	bl	8000278 <__aeabi_dsub>
 8013e3c:	4602      	mov	r2, r0
 8013e3e:	460b      	mov	r3, r1
 8013e40:	f7ec fcfc 	bl	800083c <__aeabi_ddiv>
 8013e44:	e7eb      	b.n	8013e1e <__ieee754_sqrt+0x2a>
 8013e46:	1509      	asrs	r1, r1, #20
 8013e48:	f000 808d 	beq.w	8013f66 <__ieee754_sqrt+0x172>
 8013e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013e50:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8013e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013e58:	07c9      	lsls	r1, r1, #31
 8013e5a:	bf5c      	itt	pl
 8013e5c:	005b      	lslpl	r3, r3, #1
 8013e5e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8013e62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013e66:	bf58      	it	pl
 8013e68:	0052      	lslpl	r2, r2, #1
 8013e6a:	2500      	movs	r5, #0
 8013e6c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013e70:	1076      	asrs	r6, r6, #1
 8013e72:	0052      	lsls	r2, r2, #1
 8013e74:	f04f 0e16 	mov.w	lr, #22
 8013e78:	46ac      	mov	ip, r5
 8013e7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013e7e:	eb0c 0001 	add.w	r0, ip, r1
 8013e82:	4298      	cmp	r0, r3
 8013e84:	bfde      	ittt	le
 8013e86:	1a1b      	suble	r3, r3, r0
 8013e88:	eb00 0c01 	addle.w	ip, r0, r1
 8013e8c:	186d      	addle	r5, r5, r1
 8013e8e:	005b      	lsls	r3, r3, #1
 8013e90:	f1be 0e01 	subs.w	lr, lr, #1
 8013e94:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013e98:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013e9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013ea0:	d1ed      	bne.n	8013e7e <__ieee754_sqrt+0x8a>
 8013ea2:	4674      	mov	r4, lr
 8013ea4:	2720      	movs	r7, #32
 8013ea6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8013eaa:	4563      	cmp	r3, ip
 8013eac:	eb01 000e 	add.w	r0, r1, lr
 8013eb0:	dc02      	bgt.n	8013eb8 <__ieee754_sqrt+0xc4>
 8013eb2:	d113      	bne.n	8013edc <__ieee754_sqrt+0xe8>
 8013eb4:	4290      	cmp	r0, r2
 8013eb6:	d811      	bhi.n	8013edc <__ieee754_sqrt+0xe8>
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	eb00 0e01 	add.w	lr, r0, r1
 8013ebe:	da57      	bge.n	8013f70 <__ieee754_sqrt+0x17c>
 8013ec0:	f1be 0f00 	cmp.w	lr, #0
 8013ec4:	db54      	blt.n	8013f70 <__ieee754_sqrt+0x17c>
 8013ec6:	f10c 0801 	add.w	r8, ip, #1
 8013eca:	eba3 030c 	sub.w	r3, r3, ip
 8013ece:	4290      	cmp	r0, r2
 8013ed0:	bf88      	it	hi
 8013ed2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013ed6:	1a12      	subs	r2, r2, r0
 8013ed8:	440c      	add	r4, r1
 8013eda:	46c4      	mov	ip, r8
 8013edc:	005b      	lsls	r3, r3, #1
 8013ede:	3f01      	subs	r7, #1
 8013ee0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013ee4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013ee8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013eec:	d1dd      	bne.n	8013eaa <__ieee754_sqrt+0xb6>
 8013eee:	4313      	orrs	r3, r2
 8013ef0:	d01b      	beq.n	8013f2a <__ieee754_sqrt+0x136>
 8013ef2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8013fa0 <__ieee754_sqrt+0x1ac>
 8013ef6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8013fa4 <__ieee754_sqrt+0x1b0>
 8013efa:	e9da 0100 	ldrd	r0, r1, [sl]
 8013efe:	e9db 2300 	ldrd	r2, r3, [fp]
 8013f02:	f7ec f9b9 	bl	8000278 <__aeabi_dsub>
 8013f06:	e9da 8900 	ldrd	r8, r9, [sl]
 8013f0a:	4602      	mov	r2, r0
 8013f0c:	460b      	mov	r3, r1
 8013f0e:	4640      	mov	r0, r8
 8013f10:	4649      	mov	r1, r9
 8013f12:	f7ec fde5 	bl	8000ae0 <__aeabi_dcmple>
 8013f16:	b140      	cbz	r0, 8013f2a <__ieee754_sqrt+0x136>
 8013f18:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013f1c:	e9da 0100 	ldrd	r0, r1, [sl]
 8013f20:	e9db 2300 	ldrd	r2, r3, [fp]
 8013f24:	d126      	bne.n	8013f74 <__ieee754_sqrt+0x180>
 8013f26:	3501      	adds	r5, #1
 8013f28:	463c      	mov	r4, r7
 8013f2a:	106a      	asrs	r2, r5, #1
 8013f2c:	0863      	lsrs	r3, r4, #1
 8013f2e:	07e9      	lsls	r1, r5, #31
 8013f30:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013f34:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013f38:	bf48      	it	mi
 8013f3a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013f3e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8013f42:	461c      	mov	r4, r3
 8013f44:	e76d      	b.n	8013e22 <__ieee754_sqrt+0x2e>
 8013f46:	0ad3      	lsrs	r3, r2, #11
 8013f48:	3815      	subs	r0, #21
 8013f4a:	0552      	lsls	r2, r2, #21
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d0fa      	beq.n	8013f46 <__ieee754_sqrt+0x152>
 8013f50:	02dc      	lsls	r4, r3, #11
 8013f52:	d50a      	bpl.n	8013f6a <__ieee754_sqrt+0x176>
 8013f54:	f1c1 0420 	rsb	r4, r1, #32
 8013f58:	fa22 f404 	lsr.w	r4, r2, r4
 8013f5c:	1e4d      	subs	r5, r1, #1
 8013f5e:	408a      	lsls	r2, r1
 8013f60:	4323      	orrs	r3, r4
 8013f62:	1b41      	subs	r1, r0, r5
 8013f64:	e772      	b.n	8013e4c <__ieee754_sqrt+0x58>
 8013f66:	4608      	mov	r0, r1
 8013f68:	e7f0      	b.n	8013f4c <__ieee754_sqrt+0x158>
 8013f6a:	005b      	lsls	r3, r3, #1
 8013f6c:	3101      	adds	r1, #1
 8013f6e:	e7ef      	b.n	8013f50 <__ieee754_sqrt+0x15c>
 8013f70:	46e0      	mov	r8, ip
 8013f72:	e7aa      	b.n	8013eca <__ieee754_sqrt+0xd6>
 8013f74:	f7ec f982 	bl	800027c <__adddf3>
 8013f78:	e9da 8900 	ldrd	r8, r9, [sl]
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	460b      	mov	r3, r1
 8013f80:	4640      	mov	r0, r8
 8013f82:	4649      	mov	r1, r9
 8013f84:	f7ec fda2 	bl	8000acc <__aeabi_dcmplt>
 8013f88:	b120      	cbz	r0, 8013f94 <__ieee754_sqrt+0x1a0>
 8013f8a:	1ca0      	adds	r0, r4, #2
 8013f8c:	bf08      	it	eq
 8013f8e:	3501      	addeq	r5, #1
 8013f90:	3402      	adds	r4, #2
 8013f92:	e7ca      	b.n	8013f2a <__ieee754_sqrt+0x136>
 8013f94:	3401      	adds	r4, #1
 8013f96:	f024 0401 	bic.w	r4, r4, #1
 8013f9a:	e7c6      	b.n	8013f2a <__ieee754_sqrt+0x136>
 8013f9c:	7ff00000 	.word	0x7ff00000
 8013fa0:	200004b0 	.word	0x200004b0
 8013fa4:	200004b8 	.word	0x200004b8

08013fa8 <__kernel_rem_pio2f>:
 8013fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fac:	ed2d 8b04 	vpush	{d8-d9}
 8013fb0:	b0d9      	sub	sp, #356	; 0x164
 8013fb2:	4688      	mov	r8, r1
 8013fb4:	9002      	str	r0, [sp, #8]
 8013fb6:	49b8      	ldr	r1, [pc, #736]	; (8014298 <__kernel_rem_pio2f+0x2f0>)
 8013fb8:	9866      	ldr	r0, [sp, #408]	; 0x198
 8013fba:	9301      	str	r3, [sp, #4]
 8013fbc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8013fc0:	9901      	ldr	r1, [sp, #4]
 8013fc2:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8013fc4:	f101 3bff 	add.w	fp, r1, #4294967295
 8013fc8:	1d11      	adds	r1, r2, #4
 8013fca:	db25      	blt.n	8014018 <__kernel_rem_pio2f+0x70>
 8013fcc:	1ed0      	subs	r0, r2, #3
 8013fce:	bf48      	it	mi
 8013fd0:	1d10      	addmi	r0, r2, #4
 8013fd2:	10c0      	asrs	r0, r0, #3
 8013fd4:	1c45      	adds	r5, r0, #1
 8013fd6:	00e9      	lsls	r1, r5, #3
 8013fd8:	eba0 070b 	sub.w	r7, r0, fp
 8013fdc:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80142a8 <__kernel_rem_pio2f+0x300>
 8013fe0:	9103      	str	r1, [sp, #12]
 8013fe2:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8013fe6:	eb0a 0c0b 	add.w	ip, sl, fp
 8013fea:	ae1c      	add	r6, sp, #112	; 0x70
 8013fec:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8013ff0:	2400      	movs	r4, #0
 8013ff2:	4564      	cmp	r4, ip
 8013ff4:	dd12      	ble.n	801401c <__kernel_rem_pio2f+0x74>
 8013ff6:	9901      	ldr	r1, [sp, #4]
 8013ff8:	ac1c      	add	r4, sp, #112	; 0x70
 8013ffa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8013ffe:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8014002:	f04f 0c00 	mov.w	ip, #0
 8014006:	45d4      	cmp	ip, sl
 8014008:	dc27      	bgt.n	801405a <__kernel_rem_pio2f+0xb2>
 801400a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801400e:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80142a8 <__kernel_rem_pio2f+0x300>
 8014012:	4627      	mov	r7, r4
 8014014:	2600      	movs	r6, #0
 8014016:	e016      	b.n	8014046 <__kernel_rem_pio2f+0x9e>
 8014018:	2000      	movs	r0, #0
 801401a:	e7db      	b.n	8013fd4 <__kernel_rem_pio2f+0x2c>
 801401c:	42e7      	cmn	r7, r4
 801401e:	bf5d      	ittte	pl
 8014020:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8014024:	ee07 1a90 	vmovpl	s15, r1
 8014028:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801402c:	eef0 7a47 	vmovmi.f32	s15, s14
 8014030:	ece6 7a01 	vstmia	r6!, {s15}
 8014034:	3401      	adds	r4, #1
 8014036:	e7dc      	b.n	8013ff2 <__kernel_rem_pio2f+0x4a>
 8014038:	ecfe 6a01 	vldmia	lr!, {s13}
 801403c:	ed97 7a00 	vldr	s14, [r7]
 8014040:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014044:	3601      	adds	r6, #1
 8014046:	455e      	cmp	r6, fp
 8014048:	f1a7 0704 	sub.w	r7, r7, #4
 801404c:	ddf4      	ble.n	8014038 <__kernel_rem_pio2f+0x90>
 801404e:	ece9 7a01 	vstmia	r9!, {s15}
 8014052:	f10c 0c01 	add.w	ip, ip, #1
 8014056:	3404      	adds	r4, #4
 8014058:	e7d5      	b.n	8014006 <__kernel_rem_pio2f+0x5e>
 801405a:	a908      	add	r1, sp, #32
 801405c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014060:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8014064:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80142a4 <__kernel_rem_pio2f+0x2fc>
 8014068:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80142a0 <__kernel_rem_pio2f+0x2f8>
 801406c:	9105      	str	r1, [sp, #20]
 801406e:	9304      	str	r3, [sp, #16]
 8014070:	4656      	mov	r6, sl
 8014072:	00b3      	lsls	r3, r6, #2
 8014074:	9306      	str	r3, [sp, #24]
 8014076:	ab58      	add	r3, sp, #352	; 0x160
 8014078:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801407c:	ac08      	add	r4, sp, #32
 801407e:	ab44      	add	r3, sp, #272	; 0x110
 8014080:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8014084:	46a4      	mov	ip, r4
 8014086:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801408a:	4637      	mov	r7, r6
 801408c:	2f00      	cmp	r7, #0
 801408e:	f1a0 0004 	sub.w	r0, r0, #4
 8014092:	dc4a      	bgt.n	801412a <__kernel_rem_pio2f+0x182>
 8014094:	4628      	mov	r0, r5
 8014096:	9207      	str	r2, [sp, #28]
 8014098:	f7ff fe24 	bl	8013ce4 <scalbnf>
 801409c:	eeb0 8a40 	vmov.f32	s16, s0
 80140a0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80140a4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80140a8:	f000 f9f0 	bl	801448c <floorf>
 80140ac:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80140b0:	eea0 8a67 	vfms.f32	s16, s0, s15
 80140b4:	2d00      	cmp	r5, #0
 80140b6:	9a07      	ldr	r2, [sp, #28]
 80140b8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80140bc:	ee17 9a90 	vmov	r9, s15
 80140c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140c4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80140c8:	dd41      	ble.n	801414e <__kernel_rem_pio2f+0x1a6>
 80140ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80140ce:	ab08      	add	r3, sp, #32
 80140d0:	f1c5 0e08 	rsb	lr, r5, #8
 80140d4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80140d8:	fa47 f00e 	asr.w	r0, r7, lr
 80140dc:	4481      	add	r9, r0
 80140de:	fa00 f00e 	lsl.w	r0, r0, lr
 80140e2:	1a3f      	subs	r7, r7, r0
 80140e4:	f1c5 0007 	rsb	r0, r5, #7
 80140e8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80140ec:	4107      	asrs	r7, r0
 80140ee:	2f00      	cmp	r7, #0
 80140f0:	dd3c      	ble.n	801416c <__kernel_rem_pio2f+0x1c4>
 80140f2:	f04f 0e00 	mov.w	lr, #0
 80140f6:	f109 0901 	add.w	r9, r9, #1
 80140fa:	4671      	mov	r1, lr
 80140fc:	4576      	cmp	r6, lr
 80140fe:	dc67      	bgt.n	80141d0 <__kernel_rem_pio2f+0x228>
 8014100:	2d00      	cmp	r5, #0
 8014102:	dd03      	ble.n	801410c <__kernel_rem_pio2f+0x164>
 8014104:	2d01      	cmp	r5, #1
 8014106:	d074      	beq.n	80141f2 <__kernel_rem_pio2f+0x24a>
 8014108:	2d02      	cmp	r5, #2
 801410a:	d07b      	beq.n	8014204 <__kernel_rem_pio2f+0x25c>
 801410c:	2f02      	cmp	r7, #2
 801410e:	d12d      	bne.n	801416c <__kernel_rem_pio2f+0x1c4>
 8014110:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014114:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014118:	b341      	cbz	r1, 801416c <__kernel_rem_pio2f+0x1c4>
 801411a:	4628      	mov	r0, r5
 801411c:	9207      	str	r2, [sp, #28]
 801411e:	f7ff fde1 	bl	8013ce4 <scalbnf>
 8014122:	9a07      	ldr	r2, [sp, #28]
 8014124:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014128:	e020      	b.n	801416c <__kernel_rem_pio2f+0x1c4>
 801412a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801412e:	3f01      	subs	r7, #1
 8014130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014138:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801413c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014140:	ecac 0a01 	vstmia	ip!, {s0}
 8014144:	ed90 0a00 	vldr	s0, [r0]
 8014148:	ee37 0a80 	vadd.f32	s0, s15, s0
 801414c:	e79e      	b.n	801408c <__kernel_rem_pio2f+0xe4>
 801414e:	d105      	bne.n	801415c <__kernel_rem_pio2f+0x1b4>
 8014150:	1e70      	subs	r0, r6, #1
 8014152:	ab08      	add	r3, sp, #32
 8014154:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8014158:	11ff      	asrs	r7, r7, #7
 801415a:	e7c8      	b.n	80140ee <__kernel_rem_pio2f+0x146>
 801415c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014160:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014168:	da30      	bge.n	80141cc <__kernel_rem_pio2f+0x224>
 801416a:	2700      	movs	r7, #0
 801416c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014174:	f040 809a 	bne.w	80142ac <__kernel_rem_pio2f+0x304>
 8014178:	1e74      	subs	r4, r6, #1
 801417a:	46a4      	mov	ip, r4
 801417c:	2100      	movs	r1, #0
 801417e:	45d4      	cmp	ip, sl
 8014180:	da47      	bge.n	8014212 <__kernel_rem_pio2f+0x26a>
 8014182:	2900      	cmp	r1, #0
 8014184:	d063      	beq.n	801424e <__kernel_rem_pio2f+0x2a6>
 8014186:	ab08      	add	r3, sp, #32
 8014188:	3d08      	subs	r5, #8
 801418a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d07f      	beq.n	8014292 <__kernel_rem_pio2f+0x2ea>
 8014192:	4628      	mov	r0, r5
 8014194:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014198:	f7ff fda4 	bl	8013ce4 <scalbnf>
 801419c:	1c63      	adds	r3, r4, #1
 801419e:	aa44      	add	r2, sp, #272	; 0x110
 80141a0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80142a4 <__kernel_rem_pio2f+0x2fc>
 80141a4:	0099      	lsls	r1, r3, #2
 80141a6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80141aa:	4623      	mov	r3, r4
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	f280 80ad 	bge.w	801430c <__kernel_rem_pio2f+0x364>
 80141b2:	4623      	mov	r3, r4
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	f2c0 80cb 	blt.w	8014350 <__kernel_rem_pio2f+0x3a8>
 80141ba:	aa44      	add	r2, sp, #272	; 0x110
 80141bc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80141c0:	4e36      	ldr	r6, [pc, #216]	; (801429c <__kernel_rem_pio2f+0x2f4>)
 80141c2:	eddf 7a39 	vldr	s15, [pc, #228]	; 80142a8 <__kernel_rem_pio2f+0x300>
 80141c6:	2000      	movs	r0, #0
 80141c8:	1ae2      	subs	r2, r4, r3
 80141ca:	e0b6      	b.n	801433a <__kernel_rem_pio2f+0x392>
 80141cc:	2702      	movs	r7, #2
 80141ce:	e790      	b.n	80140f2 <__kernel_rem_pio2f+0x14a>
 80141d0:	6820      	ldr	r0, [r4, #0]
 80141d2:	b949      	cbnz	r1, 80141e8 <__kernel_rem_pio2f+0x240>
 80141d4:	b118      	cbz	r0, 80141de <__kernel_rem_pio2f+0x236>
 80141d6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80141da:	6020      	str	r0, [r4, #0]
 80141dc:	2001      	movs	r0, #1
 80141de:	f10e 0e01 	add.w	lr, lr, #1
 80141e2:	3404      	adds	r4, #4
 80141e4:	4601      	mov	r1, r0
 80141e6:	e789      	b.n	80140fc <__kernel_rem_pio2f+0x154>
 80141e8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80141ec:	6020      	str	r0, [r4, #0]
 80141ee:	4608      	mov	r0, r1
 80141f0:	e7f5      	b.n	80141de <__kernel_rem_pio2f+0x236>
 80141f2:	1e74      	subs	r4, r6, #1
 80141f4:	ab08      	add	r3, sp, #32
 80141f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80141fa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80141fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014202:	e783      	b.n	801410c <__kernel_rem_pio2f+0x164>
 8014204:	1e74      	subs	r4, r6, #1
 8014206:	ab08      	add	r3, sp, #32
 8014208:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801420c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8014210:	e7f5      	b.n	80141fe <__kernel_rem_pio2f+0x256>
 8014212:	ab08      	add	r3, sp, #32
 8014214:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8014218:	f10c 3cff 	add.w	ip, ip, #4294967295
 801421c:	4301      	orrs	r1, r0
 801421e:	e7ae      	b.n	801417e <__kernel_rem_pio2f+0x1d6>
 8014220:	3001      	adds	r0, #1
 8014222:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8014226:	2f00      	cmp	r7, #0
 8014228:	d0fa      	beq.n	8014220 <__kernel_rem_pio2f+0x278>
 801422a:	9b06      	ldr	r3, [sp, #24]
 801422c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8014230:	eb0d 0403 	add.w	r4, sp, r3
 8014234:	9b01      	ldr	r3, [sp, #4]
 8014236:	18f7      	adds	r7, r6, r3
 8014238:	ab1c      	add	r3, sp, #112	; 0x70
 801423a:	f106 0c01 	add.w	ip, r6, #1
 801423e:	3c4c      	subs	r4, #76	; 0x4c
 8014240:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014244:	4430      	add	r0, r6
 8014246:	4560      	cmp	r0, ip
 8014248:	da04      	bge.n	8014254 <__kernel_rem_pio2f+0x2ac>
 801424a:	4606      	mov	r6, r0
 801424c:	e711      	b.n	8014072 <__kernel_rem_pio2f+0xca>
 801424e:	9c05      	ldr	r4, [sp, #20]
 8014250:	2001      	movs	r0, #1
 8014252:	e7e6      	b.n	8014222 <__kernel_rem_pio2f+0x27a>
 8014254:	9b04      	ldr	r3, [sp, #16]
 8014256:	f8dd e008 	ldr.w	lr, [sp, #8]
 801425a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801425e:	9306      	str	r3, [sp, #24]
 8014260:	ee07 3a90 	vmov	s15, r3
 8014264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014268:	2600      	movs	r6, #0
 801426a:	ece7 7a01 	vstmia	r7!, {s15}
 801426e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80142a8 <__kernel_rem_pio2f+0x300>
 8014272:	46b9      	mov	r9, r7
 8014274:	455e      	cmp	r6, fp
 8014276:	dd04      	ble.n	8014282 <__kernel_rem_pio2f+0x2da>
 8014278:	ece4 7a01 	vstmia	r4!, {s15}
 801427c:	f10c 0c01 	add.w	ip, ip, #1
 8014280:	e7e1      	b.n	8014246 <__kernel_rem_pio2f+0x29e>
 8014282:	ecfe 6a01 	vldmia	lr!, {s13}
 8014286:	ed39 7a01 	vldmdb	r9!, {s14}
 801428a:	3601      	adds	r6, #1
 801428c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014290:	e7f0      	b.n	8014274 <__kernel_rem_pio2f+0x2cc>
 8014292:	3c01      	subs	r4, #1
 8014294:	e777      	b.n	8014186 <__kernel_rem_pio2f+0x1de>
 8014296:	bf00      	nop
 8014298:	0801597c 	.word	0x0801597c
 801429c:	08015950 	.word	0x08015950
 80142a0:	43800000 	.word	0x43800000
 80142a4:	3b800000 	.word	0x3b800000
 80142a8:	00000000 	.word	0x00000000
 80142ac:	9b03      	ldr	r3, [sp, #12]
 80142ae:	eeb0 0a48 	vmov.f32	s0, s16
 80142b2:	1a98      	subs	r0, r3, r2
 80142b4:	f7ff fd16 	bl	8013ce4 <scalbnf>
 80142b8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80142a0 <__kernel_rem_pio2f+0x2f8>
 80142bc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80142c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142c4:	db19      	blt.n	80142fa <__kernel_rem_pio2f+0x352>
 80142c6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80142a4 <__kernel_rem_pio2f+0x2fc>
 80142ca:	ee60 7a27 	vmul.f32	s15, s0, s15
 80142ce:	aa08      	add	r2, sp, #32
 80142d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80142d4:	1c74      	adds	r4, r6, #1
 80142d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142da:	3508      	adds	r5, #8
 80142dc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80142e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80142e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80142e8:	ee10 3a10 	vmov	r3, s0
 80142ec:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80142f0:	ee17 3a90 	vmov	r3, s15
 80142f4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80142f8:	e74b      	b.n	8014192 <__kernel_rem_pio2f+0x1ea>
 80142fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80142fe:	aa08      	add	r2, sp, #32
 8014300:	ee10 3a10 	vmov	r3, s0
 8014304:	4634      	mov	r4, r6
 8014306:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801430a:	e742      	b.n	8014192 <__kernel_rem_pio2f+0x1ea>
 801430c:	a808      	add	r0, sp, #32
 801430e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8014312:	9001      	str	r0, [sp, #4]
 8014314:	ee07 0a90 	vmov	s15, r0
 8014318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801431c:	3b01      	subs	r3, #1
 801431e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014322:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014326:	ed62 7a01 	vstmdb	r2!, {s15}
 801432a:	e73f      	b.n	80141ac <__kernel_rem_pio2f+0x204>
 801432c:	ecf6 6a01 	vldmia	r6!, {s13}
 8014330:	ecb5 7a01 	vldmia	r5!, {s14}
 8014334:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014338:	3001      	adds	r0, #1
 801433a:	4550      	cmp	r0, sl
 801433c:	dc01      	bgt.n	8014342 <__kernel_rem_pio2f+0x39a>
 801433e:	4290      	cmp	r0, r2
 8014340:	ddf4      	ble.n	801432c <__kernel_rem_pio2f+0x384>
 8014342:	a858      	add	r0, sp, #352	; 0x160
 8014344:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014348:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801434c:	3b01      	subs	r3, #1
 801434e:	e731      	b.n	80141b4 <__kernel_rem_pio2f+0x20c>
 8014350:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8014352:	2b02      	cmp	r3, #2
 8014354:	dc09      	bgt.n	801436a <__kernel_rem_pio2f+0x3c2>
 8014356:	2b00      	cmp	r3, #0
 8014358:	dc2b      	bgt.n	80143b2 <__kernel_rem_pio2f+0x40a>
 801435a:	d044      	beq.n	80143e6 <__kernel_rem_pio2f+0x43e>
 801435c:	f009 0007 	and.w	r0, r9, #7
 8014360:	b059      	add	sp, #356	; 0x164
 8014362:	ecbd 8b04 	vpop	{d8-d9}
 8014366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801436a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801436c:	2b03      	cmp	r3, #3
 801436e:	d1f5      	bne.n	801435c <__kernel_rem_pio2f+0x3b4>
 8014370:	aa30      	add	r2, sp, #192	; 0xc0
 8014372:	1f0b      	subs	r3, r1, #4
 8014374:	4413      	add	r3, r2
 8014376:	461a      	mov	r2, r3
 8014378:	4620      	mov	r0, r4
 801437a:	2800      	cmp	r0, #0
 801437c:	f1a2 0204 	sub.w	r2, r2, #4
 8014380:	dc52      	bgt.n	8014428 <__kernel_rem_pio2f+0x480>
 8014382:	4622      	mov	r2, r4
 8014384:	2a01      	cmp	r2, #1
 8014386:	f1a3 0304 	sub.w	r3, r3, #4
 801438a:	dc5d      	bgt.n	8014448 <__kernel_rem_pio2f+0x4a0>
 801438c:	ab30      	add	r3, sp, #192	; 0xc0
 801438e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80142a8 <__kernel_rem_pio2f+0x300>
 8014392:	440b      	add	r3, r1
 8014394:	2c01      	cmp	r4, #1
 8014396:	dc67      	bgt.n	8014468 <__kernel_rem_pio2f+0x4c0>
 8014398:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801439c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80143a0:	2f00      	cmp	r7, #0
 80143a2:	d167      	bne.n	8014474 <__kernel_rem_pio2f+0x4cc>
 80143a4:	edc8 6a00 	vstr	s13, [r8]
 80143a8:	ed88 7a01 	vstr	s14, [r8, #4]
 80143ac:	edc8 7a02 	vstr	s15, [r8, #8]
 80143b0:	e7d4      	b.n	801435c <__kernel_rem_pio2f+0x3b4>
 80143b2:	ab30      	add	r3, sp, #192	; 0xc0
 80143b4:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80142a8 <__kernel_rem_pio2f+0x300>
 80143b8:	440b      	add	r3, r1
 80143ba:	4622      	mov	r2, r4
 80143bc:	2a00      	cmp	r2, #0
 80143be:	da24      	bge.n	801440a <__kernel_rem_pio2f+0x462>
 80143c0:	b34f      	cbz	r7, 8014416 <__kernel_rem_pio2f+0x46e>
 80143c2:	eef1 7a47 	vneg.f32	s15, s14
 80143c6:	edc8 7a00 	vstr	s15, [r8]
 80143ca:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80143ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80143d2:	aa31      	add	r2, sp, #196	; 0xc4
 80143d4:	2301      	movs	r3, #1
 80143d6:	429c      	cmp	r4, r3
 80143d8:	da20      	bge.n	801441c <__kernel_rem_pio2f+0x474>
 80143da:	b10f      	cbz	r7, 80143e0 <__kernel_rem_pio2f+0x438>
 80143dc:	eef1 7a67 	vneg.f32	s15, s15
 80143e0:	edc8 7a01 	vstr	s15, [r8, #4]
 80143e4:	e7ba      	b.n	801435c <__kernel_rem_pio2f+0x3b4>
 80143e6:	ab30      	add	r3, sp, #192	; 0xc0
 80143e8:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80142a8 <__kernel_rem_pio2f+0x300>
 80143ec:	440b      	add	r3, r1
 80143ee:	2c00      	cmp	r4, #0
 80143f0:	da05      	bge.n	80143fe <__kernel_rem_pio2f+0x456>
 80143f2:	b10f      	cbz	r7, 80143f8 <__kernel_rem_pio2f+0x450>
 80143f4:	eef1 7a67 	vneg.f32	s15, s15
 80143f8:	edc8 7a00 	vstr	s15, [r8]
 80143fc:	e7ae      	b.n	801435c <__kernel_rem_pio2f+0x3b4>
 80143fe:	ed33 7a01 	vldmdb	r3!, {s14}
 8014402:	3c01      	subs	r4, #1
 8014404:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014408:	e7f1      	b.n	80143ee <__kernel_rem_pio2f+0x446>
 801440a:	ed73 7a01 	vldmdb	r3!, {s15}
 801440e:	3a01      	subs	r2, #1
 8014410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014414:	e7d2      	b.n	80143bc <__kernel_rem_pio2f+0x414>
 8014416:	eef0 7a47 	vmov.f32	s15, s14
 801441a:	e7d4      	b.n	80143c6 <__kernel_rem_pio2f+0x41e>
 801441c:	ecb2 7a01 	vldmia	r2!, {s14}
 8014420:	3301      	adds	r3, #1
 8014422:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014426:	e7d6      	b.n	80143d6 <__kernel_rem_pio2f+0x42e>
 8014428:	edd2 7a00 	vldr	s15, [r2]
 801442c:	edd2 6a01 	vldr	s13, [r2, #4]
 8014430:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014434:	3801      	subs	r0, #1
 8014436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801443a:	ed82 7a00 	vstr	s14, [r2]
 801443e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014442:	edc2 7a01 	vstr	s15, [r2, #4]
 8014446:	e798      	b.n	801437a <__kernel_rem_pio2f+0x3d2>
 8014448:	edd3 7a00 	vldr	s15, [r3]
 801444c:	edd3 6a01 	vldr	s13, [r3, #4]
 8014450:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014454:	3a01      	subs	r2, #1
 8014456:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801445a:	ed83 7a00 	vstr	s14, [r3]
 801445e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014462:	edc3 7a01 	vstr	s15, [r3, #4]
 8014466:	e78d      	b.n	8014384 <__kernel_rem_pio2f+0x3dc>
 8014468:	ed33 7a01 	vldmdb	r3!, {s14}
 801446c:	3c01      	subs	r4, #1
 801446e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014472:	e78f      	b.n	8014394 <__kernel_rem_pio2f+0x3ec>
 8014474:	eef1 6a66 	vneg.f32	s13, s13
 8014478:	eeb1 7a47 	vneg.f32	s14, s14
 801447c:	edc8 6a00 	vstr	s13, [r8]
 8014480:	ed88 7a01 	vstr	s14, [r8, #4]
 8014484:	eef1 7a67 	vneg.f32	s15, s15
 8014488:	e790      	b.n	80143ac <__kernel_rem_pio2f+0x404>
 801448a:	bf00      	nop

0801448c <floorf>:
 801448c:	ee10 3a10 	vmov	r3, s0
 8014490:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014494:	3a7f      	subs	r2, #127	; 0x7f
 8014496:	2a16      	cmp	r2, #22
 8014498:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801449c:	dc2a      	bgt.n	80144f4 <floorf+0x68>
 801449e:	2a00      	cmp	r2, #0
 80144a0:	da11      	bge.n	80144c6 <floorf+0x3a>
 80144a2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014504 <floorf+0x78>
 80144a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80144aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80144ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b2:	dd05      	ble.n	80144c0 <floorf+0x34>
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	da23      	bge.n	8014500 <floorf+0x74>
 80144b8:	4a13      	ldr	r2, [pc, #76]	; (8014508 <floorf+0x7c>)
 80144ba:	2900      	cmp	r1, #0
 80144bc:	bf18      	it	ne
 80144be:	4613      	movne	r3, r2
 80144c0:	ee00 3a10 	vmov	s0, r3
 80144c4:	4770      	bx	lr
 80144c6:	4911      	ldr	r1, [pc, #68]	; (801450c <floorf+0x80>)
 80144c8:	4111      	asrs	r1, r2
 80144ca:	420b      	tst	r3, r1
 80144cc:	d0fa      	beq.n	80144c4 <floorf+0x38>
 80144ce:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014504 <floorf+0x78>
 80144d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80144d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80144da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144de:	ddef      	ble.n	80144c0 <floorf+0x34>
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	bfbe      	ittt	lt
 80144e4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80144e8:	fa40 f202 	asrlt.w	r2, r0, r2
 80144ec:	189b      	addlt	r3, r3, r2
 80144ee:	ea23 0301 	bic.w	r3, r3, r1
 80144f2:	e7e5      	b.n	80144c0 <floorf+0x34>
 80144f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80144f8:	d3e4      	bcc.n	80144c4 <floorf+0x38>
 80144fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80144fe:	4770      	bx	lr
 8014500:	2300      	movs	r3, #0
 8014502:	e7dd      	b.n	80144c0 <floorf+0x34>
 8014504:	7149f2ca 	.word	0x7149f2ca
 8014508:	bf800000 	.word	0xbf800000
 801450c:	007fffff 	.word	0x007fffff

08014510 <_init>:
 8014510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014512:	bf00      	nop
 8014514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014516:	bc08      	pop	{r3}
 8014518:	469e      	mov	lr, r3
 801451a:	4770      	bx	lr

0801451c <_fini>:
 801451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801451e:	bf00      	nop
 8014520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014522:	bc08      	pop	{r3}
 8014524:	469e      	mov	lr, r3
 8014526:	4770      	bx	lr
