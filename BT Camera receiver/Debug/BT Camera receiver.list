
BT Camera receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003964  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  08003b48  08003b48  00004b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041e8  080041e8  000060f8  2**0
                  CONTENTS
  4 .ARM          00000000  080041e8  080041e8  000060f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041e8  080041e8  000060f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041e8  080041e8  000051e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041ec  080041ec  000051ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  080041f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200000f8  080042e8  000060f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  080042e8  0000636c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009432  00000000  00000000  00006121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  0000f553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  00011360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006cc  00000000  00000000  00011c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a208  00000000  00000000  0001232c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac9f  00000000  00000000  0002c534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094357  00000000  00000000  000371d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb52a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002824  00000000  00000000  000cb570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000cdd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000f8 	.word	0x200000f8
 8000200:	00000000 	.word	0x00000000
 8000204:	08003b30 	.word	0x08003b30

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000fc 	.word	0x200000fc
 8000220:	08003b30 	.word	0x08003b30

08000224 <Ov7725_Init>:

/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;	
 800022e:	2300      	movs	r3, #0
 8000230:	717b      	strb	r3, [r7, #5]
	
	if( 0 == SCCB_WriteByte ( 0x12, 0x80 ) ) /*reset sensor */
 8000232:	2180      	movs	r1, #128	@ 0x80
 8000234:	2012      	movs	r0, #18
 8000236:	f000 f997 	bl	8000568 <SCCB_WriteByte>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d101      	bne.n	8000244 <Ov7725_Init+0x20>
	{
		return ERROR ;
 8000240:	2301      	movs	r3, #1
 8000242:	e02f      	b.n	80002a4 <Ov7725_Init+0x80>
	}	

	if( 0 == SCCB_ReadByte( &Sensor_IDCode, 1, 0x0b ) )	 /* read sensor ID*/
 8000244:	1d7b      	adds	r3, r7, #5
 8000246:	220b      	movs	r2, #11
 8000248:	2101      	movs	r1, #1
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f9bb 	bl	80005c6 <SCCB_ReadByte>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d101      	bne.n	800025a <Ov7725_Init+0x36>
	{
		return ERROR;
 8000256:	2301      	movs	r3, #1
 8000258:	e024      	b.n	80002a4 <Ov7725_Init+0x80>
	}
	//DEBUG("Sensor ID is 0x%x", Sensor_IDCode);	
	
	if(Sensor_IDCode == OV7725_ID)
 800025a:	797b      	ldrb	r3, [r7, #5]
 800025c:	2b21      	cmp	r3, #33	@ 0x21
 800025e:	d11e      	bne.n	800029e <Ov7725_Init+0x7a>
	{
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000260:	2300      	movs	r3, #0
 8000262:	80fb      	strh	r3, [r7, #6]
 8000264:	e014      	b.n	8000290 <Ov7725_Init+0x6c>
		{
			if( 0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value) )
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	4a10      	ldr	r2, [pc, #64]	@ (80002ac <Ov7725_Init+0x88>)
 800026a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800026e:	4618      	mov	r0, r3
 8000270:	88fb      	ldrh	r3, [r7, #6]
 8000272:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <Ov7725_Init+0x88>)
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	4413      	add	r3, r2
 8000278:	785b      	ldrb	r3, [r3, #1]
 800027a:	4619      	mov	r1, r3
 800027c:	f000 f974 	bl	8000568 <SCCB_WriteByte>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d101      	bne.n	800028a <Ov7725_Init+0x66>
			{                
				return ERROR;
 8000286:	2301      	movs	r3, #1
 8000288:	e00c      	b.n	80002a4 <Ov7725_Init+0x80>
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 800028a:	88fb      	ldrh	r3, [r7, #6]
 800028c:	3301      	adds	r3, #1
 800028e:	80fb      	strh	r3, [r7, #6]
 8000290:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <Ov7725_Init+0x8c>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	461a      	mov	r2, r3
 8000296:	88fb      	ldrh	r3, [r7, #6]
 8000298:	4293      	cmp	r3, r2
 800029a:	d3e4      	bcc.n	8000266 <Ov7725_Init+0x42>
 800029c:	e001      	b.n	80002a2 <Ov7725_Init+0x7e>
			}
		}
	}
	else
	{
		return ERROR;
 800029e:	2301      	movs	r3, #1
 80002a0:	e000      	b.n	80002a4 <Ov7725_Init+0x80>
	}
	
	return SUCCESS;
 80002a2:	2300      	movs	r3, #0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000000 	.word	0x20000000
 80002b0:	2000009a 	.word	0x2000009a

080002b4 <ImagDisp>:
}
*/


void ImagDisp(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
    uint16_t i, j;
    uint16_t Camera_Data;
    //uint32_t idx = 0;

    LCD_Cam_Gram();
 80002ba:	f000 fc7c 	bl	8000bb6 <LCD_Cam_Gram>

    for(i = 0; i < 240; i++)
 80002be:	2300      	movs	r3, #0
 80002c0:	80fb      	strh	r3, [r7, #6]
 80002c2:	e02c      	b.n	800031e <ImagDisp+0x6a>
    {
        for(j = 0; j < 320; j++)
 80002c4:	2300      	movs	r3, #0
 80002c6:	80bb      	strh	r3, [r7, #4]
 80002c8:	e022      	b.n	8000310 <ImagDisp+0x5c>
            // Store the lower 8 bits (grayscale) into image_buffer
            if (idx < IMAGE_SIZE) {
                image_buffer[idx++] = (uint8_t)(Camera_Data & 0xFF);
            }
			*/
			READ_FIFO_PIXEL(Camera_Data);
 80002ca:	2300      	movs	r3, #0
 80002cc:	807b      	strh	r3, [r7, #2]
 80002ce:	4b19      	ldr	r3, [pc, #100]	@ (8000334 <ImagDisp+0x80>)
 80002d0:	2220      	movs	r2, #32
 80002d2:	615a      	str	r2, [r3, #20]
 80002d4:	4b18      	ldr	r3, [pc, #96]	@ (8000338 <ImagDisp+0x84>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80002de:	807b      	strh	r3, [r7, #2]
 80002e0:	4b14      	ldr	r3, [pc, #80]	@ (8000334 <ImagDisp+0x80>)
 80002e2:	2220      	movs	r2, #32
 80002e4:	611a      	str	r2, [r3, #16]
 80002e6:	4b13      	ldr	r3, [pc, #76]	@ (8000334 <ImagDisp+0x80>)
 80002e8:	2220      	movs	r2, #32
 80002ea:	615a      	str	r2, [r3, #20]
 80002ec:	4b12      	ldr	r3, [pc, #72]	@ (8000338 <ImagDisp+0x84>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	0a1b      	lsrs	r3, r3, #8
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	887b      	ldrh	r3, [r7, #2]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	807b      	strh	r3, [r7, #2]
 80002fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000334 <ImagDisp+0x80>)
 80002fe:	2220      	movs	r2, #32
 8000300:	611a      	str	r2, [r3, #16]
			LCD_Write_Data(Camera_Data);
 8000302:	887b      	ldrh	r3, [r7, #2]
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fa1d 	bl	8000744 <LCD_Write_Data>
        for(j = 0; j < 320; j++)
 800030a:	88bb      	ldrh	r3, [r7, #4]
 800030c:	3301      	adds	r3, #1
 800030e:	80bb      	strh	r3, [r7, #4]
 8000310:	88bb      	ldrh	r3, [r7, #4]
 8000312:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000316:	d3d8      	bcc.n	80002ca <ImagDisp+0x16>
    for(i = 0; i < 240; i++)
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	3301      	adds	r3, #1
 800031c:	80fb      	strh	r3, [r7, #6]
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	2bef      	cmp	r3, #239	@ 0xef
 8000322:	d9cf      	bls.n	80002c4 <ImagDisp+0x10>
        }
    }
    HAL_Delay(1000);
 8000324:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000328:	f001 fc52 	bl	8001bd0 <HAL_Delay>
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40011000 	.word	0x40011000
 8000338:	40010c00 	.word	0x40010c00

0800033c <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 8000342:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000346:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000348:	e002      	b.n	8000350 <SCCB_delay+0x14>
   { 
     i--; 
 800034a:	88fb      	ldrh	r3, [r7, #6]
 800034c:	3b01      	subs	r3, #1
 800034e:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000350:	88fb      	ldrh	r3, [r7, #6]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d1f9      	bne.n	800034a <SCCB_delay+0xe>
   } 
}
 8000356:	bf00      	nop
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
	...

08000364 <SCCB_Start>:


static int SCCB_Start(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	SDA_H;
 8000368:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <SCCB_Start+0x54>)
 800036a:	2280      	movs	r2, #128	@ 0x80
 800036c:	611a      	str	r2, [r3, #16]
	SCL_H;
 800036e:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <SCCB_Start+0x54>)
 8000370:	2240      	movs	r2, #64	@ 0x40
 8000372:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000374:	f7ff ffe2 	bl	800033c <SCCB_delay>
	if(!SDA_read)
 8000378:	2180      	movs	r1, #128	@ 0x80
 800037a:	480f      	ldr	r0, [pc, #60]	@ (80003b8 <SCCB_Start+0x54>)
 800037c:	f001 feee 	bl	800215c <HAL_GPIO_ReadPin>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d101      	bne.n	800038a <SCCB_Start+0x26>
	return DISABLE;	
 8000386:	2300      	movs	r3, #0
 8000388:	e013      	b.n	80003b2 <SCCB_Start+0x4e>
	SDA_L;
 800038a:	4b0b      	ldr	r3, [pc, #44]	@ (80003b8 <SCCB_Start+0x54>)
 800038c:	2280      	movs	r2, #128	@ 0x80
 800038e:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000390:	f7ff ffd4 	bl	800033c <SCCB_delay>
	if(SDA_read) 
 8000394:	2180      	movs	r1, #128	@ 0x80
 8000396:	4808      	ldr	r0, [pc, #32]	@ (80003b8 <SCCB_Start+0x54>)
 8000398:	f001 fee0 	bl	800215c <HAL_GPIO_ReadPin>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SCCB_Start+0x42>
	return DISABLE;	
 80003a2:	2300      	movs	r3, #0
 80003a4:	e005      	b.n	80003b2 <SCCB_Start+0x4e>
	SDA_L;
 80003a6:	4b04      	ldr	r3, [pc, #16]	@ (80003b8 <SCCB_Start+0x54>)
 80003a8:	2280      	movs	r2, #128	@ 0x80
 80003aa:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80003ac:	f7ff ffc6 	bl	800033c <SCCB_delay>
	return ENABLE;
 80003b0:	2301      	movs	r3, #1
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40011000 	.word	0x40011000

080003bc <SCCB_Stop>:


static void SCCB_Stop(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	SCL_L;
 80003c0:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <SCCB_Stop+0x30>)
 80003c2:	2240      	movs	r2, #64	@ 0x40
 80003c4:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80003c6:	f7ff ffb9 	bl	800033c <SCCB_delay>
	SDA_L;
 80003ca:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <SCCB_Stop+0x30>)
 80003cc:	2280      	movs	r2, #128	@ 0x80
 80003ce:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80003d0:	f7ff ffb4 	bl	800033c <SCCB_delay>
	SCL_H;
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <SCCB_Stop+0x30>)
 80003d6:	2240      	movs	r2, #64	@ 0x40
 80003d8:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80003da:	f7ff ffaf 	bl	800033c <SCCB_delay>
	SDA_H;
 80003de:	4b03      	ldr	r3, [pc, #12]	@ (80003ec <SCCB_Stop+0x30>)
 80003e0:	2280      	movs	r2, #128	@ 0x80
 80003e2:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80003e4:	f7ff ffaa 	bl	800033c <SCCB_delay>
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40011000 	.word	0x40011000

080003f0 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	SCL_L;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <SCCB_Ack+0x30>)
 80003f6:	2240      	movs	r2, #64	@ 0x40
 80003f8:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80003fa:	f7ff ff9f 	bl	800033c <SCCB_delay>
	SDA_L;
 80003fe:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <SCCB_Ack+0x30>)
 8000400:	2280      	movs	r2, #128	@ 0x80
 8000402:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000404:	f7ff ff9a 	bl	800033c <SCCB_delay>
	SCL_H;
 8000408:	4b05      	ldr	r3, [pc, #20]	@ (8000420 <SCCB_Ack+0x30>)
 800040a:	2240      	movs	r2, #64	@ 0x40
 800040c:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800040e:	f7ff ff95 	bl	800033c <SCCB_delay>
	SCL_L;
 8000412:	4b03      	ldr	r3, [pc, #12]	@ (8000420 <SCCB_Ack+0x30>)
 8000414:	2240      	movs	r2, #64	@ 0x40
 8000416:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000418:	f7ff ff90 	bl	800033c <SCCB_delay>
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40011000 	.word	0x40011000

08000424 <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	SCL_L;
 8000428:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <SCCB_NoAck+0x30>)
 800042a:	2240      	movs	r2, #64	@ 0x40
 800042c:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800042e:	f7ff ff85 	bl	800033c <SCCB_delay>
	SDA_H;
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <SCCB_NoAck+0x30>)
 8000434:	2280      	movs	r2, #128	@ 0x80
 8000436:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000438:	f7ff ff80 	bl	800033c <SCCB_delay>
	SCL_H;
 800043c:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <SCCB_NoAck+0x30>)
 800043e:	2240      	movs	r2, #64	@ 0x40
 8000440:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000442:	f7ff ff7b 	bl	800033c <SCCB_delay>
	SCL_L;
 8000446:	4b03      	ldr	r3, [pc, #12]	@ (8000454 <SCCB_NoAck+0x30>)
 8000448:	2240      	movs	r2, #64	@ 0x40
 800044a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800044c:	f7ff ff76 	bl	800033c <SCCB_delay>
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40011000 	.word	0x40011000

08000458 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	SCL_L;
 800045c:	4b10      	ldr	r3, [pc, #64]	@ (80004a0 <SCCB_WaitAck+0x48>)
 800045e:	2240      	movs	r2, #64	@ 0x40
 8000460:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000462:	f7ff ff6b 	bl	800033c <SCCB_delay>
	SDA_H;			
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <SCCB_WaitAck+0x48>)
 8000468:	2280      	movs	r2, #128	@ 0x80
 800046a:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800046c:	f7ff ff66 	bl	800033c <SCCB_delay>
	SCL_H;
 8000470:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <SCCB_WaitAck+0x48>)
 8000472:	2240      	movs	r2, #64	@ 0x40
 8000474:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000476:	f7ff ff61 	bl	800033c <SCCB_delay>
	if(SDA_read)
 800047a:	2180      	movs	r1, #128	@ 0x80
 800047c:	4808      	ldr	r0, [pc, #32]	@ (80004a0 <SCCB_WaitAck+0x48>)
 800047e:	f001 fe6d 	bl	800215c <HAL_GPIO_ReadPin>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d004      	beq.n	8000492 <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 8000488:	4b05      	ldr	r3, [pc, #20]	@ (80004a0 <SCCB_WaitAck+0x48>)
 800048a:	2240      	movs	r2, #64	@ 0x40
 800048c:	615a      	str	r2, [r3, #20]
      return DISABLE;
 800048e:	2300      	movs	r3, #0
 8000490:	e003      	b.n	800049a <SCCB_WaitAck+0x42>
	}
	SCL_L;
 8000492:	4b03      	ldr	r3, [pc, #12]	@ (80004a0 <SCCB_WaitAck+0x48>)
 8000494:	2240      	movs	r2, #64	@ 0x40
 8000496:	615a      	str	r2, [r3, #20]
	return ENABLE;
 8000498:	2301      	movs	r3, #1
}
 800049a:	4618      	mov	r0, r3
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40011000 	.word	0x40011000

080004a4 <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 80004ae:	2308      	movs	r3, #8
 80004b0:	73fb      	strb	r3, [r7, #15]
    while(i--)
 80004b2:	e019      	b.n	80004e8 <SCCB_SendByte+0x44>
    {
        SCL_L;
 80004b4:	4b12      	ldr	r3, [pc, #72]	@ (8000500 <SCCB_SendByte+0x5c>)
 80004b6:	2240      	movs	r2, #64	@ 0x40
 80004b8:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 80004ba:	f7ff ff3f 	bl	800033c <SCCB_delay>
      if(SendByte&0x80)
 80004be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	da03      	bge.n	80004ce <SCCB_SendByte+0x2a>
        SDA_H;  
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <SCCB_SendByte+0x5c>)
 80004c8:	2280      	movs	r2, #128	@ 0x80
 80004ca:	611a      	str	r2, [r3, #16]
 80004cc:	e002      	b.n	80004d4 <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 80004ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <SCCB_SendByte+0x5c>)
 80004d0:	2280      	movs	r2, #128	@ 0x80
 80004d2:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 80004da:	f7ff ff2f 	bl	800033c <SCCB_delay>
		SCL_H;
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <SCCB_SendByte+0x5c>)
 80004e0:	2240      	movs	r2, #64	@ 0x40
 80004e2:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 80004e4:	f7ff ff2a 	bl	800033c <SCCB_delay>
    while(i--)
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	1e5a      	subs	r2, r3, #1
 80004ec:	73fa      	strb	r2, [r7, #15]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d1e0      	bne.n	80004b4 <SCCB_SendByte+0x10>
    }
    SCL_L;
 80004f2:	4b03      	ldr	r3, [pc, #12]	@ (8000500 <SCCB_SendByte+0x5c>)
 80004f4:	2240      	movs	r2, #64	@ 0x40
 80004f6:	615a      	str	r2, [r3, #20]
}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40011000 	.word	0x40011000

08000504 <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
    uint8_t i=8;
 800050a:	2308      	movs	r3, #8
 800050c:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 800050e:	2300      	movs	r3, #0
 8000510:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8000512:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <SCCB_ReceiveByte+0x60>)
 8000514:	2280      	movs	r2, #128	@ 0x80
 8000516:	611a      	str	r2, [r3, #16]
    while(i--)
 8000518:	e017      	b.n	800054a <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8000520:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <SCCB_ReceiveByte+0x60>)
 8000522:	2240      	movs	r2, #64	@ 0x40
 8000524:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 8000526:	f7ff ff09 	bl	800033c <SCCB_delay>
	  SCL_H;
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <SCCB_ReceiveByte+0x60>)
 800052c:	2240      	movs	r2, #64	@ 0x40
 800052e:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8000530:	f7ff ff04 	bl	800033c <SCCB_delay>
      if(SDA_read)
 8000534:	2180      	movs	r1, #128	@ 0x80
 8000536:	480b      	ldr	r0, [pc, #44]	@ (8000564 <SCCB_ReceiveByte+0x60>)
 8000538:	f001 fe10 	bl	800215c <HAL_GPIO_ReadPin>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d003      	beq.n	800054a <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	71bb      	strb	r3, [r7, #6]
    while(i--)
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	1e5a      	subs	r2, r3, #1
 800054e:	71fa      	strb	r2, [r7, #7]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1e2      	bne.n	800051a <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8000554:	4b03      	ldr	r3, [pc, #12]	@ (8000564 <SCCB_ReceiveByte+0x60>)
 8000556:	2240      	movs	r2, #64	@ 0x40
 8000558:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 800055a:	79bb      	ldrb	r3, [r7, #6]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40011000 	.word	0x40011000

08000568 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	80fb      	strh	r3, [r7, #6]
 8000574:	4613      	mov	r3, r2
 8000576:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 8000578:	f7ff fef4 	bl	8000364 <SCCB_Start>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d101      	bne.n	8000586 <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 8000582:	2300      	movs	r3, #0
 8000584:	e01b      	b.n	80005be <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 8000586:	2042      	movs	r0, #66	@ 0x42
 8000588:	f7ff ff8c 	bl	80004a4 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 800058c:	f7ff ff64 	bl	8000458 <SCCB_WaitAck>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d103      	bne.n	800059e <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 8000596:	f7ff ff11 	bl	80003bc <SCCB_Stop>
		return DISABLE;
 800059a:	2300      	movs	r3, #0
 800059c:	e00f      	b.n	80005be <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff ff7e 	bl	80004a4 <SCCB_SendByte>
    SCCB_WaitAck();	
 80005a8:	f7ff ff56 	bl	8000458 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 80005ac:	797b      	ldrb	r3, [r7, #5]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff78 	bl	80004a4 <SCCB_SendByte>
    SCCB_WaitAck();   
 80005b4:	f7ff ff50 	bl	8000458 <SCCB_WaitAck>
    SCCB_Stop(); 
 80005b8:	f7ff ff00 	bl	80003bc <SCCB_Stop>
    return ENABLE;
 80005bc:	2301      	movs	r3, #1
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	460b      	mov	r3, r1
 80005d0:	807b      	strh	r3, [r7, #2]
 80005d2:	4613      	mov	r3, r2
 80005d4:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 80005d6:	f7ff fec5 	bl	8000364 <SCCB_Start>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	e040      	b.n	8000666 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 80005e4:	2042      	movs	r0, #66	@ 0x42
 80005e6:	f7ff ff5d 	bl	80004a4 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 80005ea:	f7ff ff35 	bl	8000458 <SCCB_WaitAck>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d103      	bne.n	80005fc <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 80005f4:	f7ff fee2 	bl	80003bc <SCCB_Stop>
		return DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e034      	b.n	8000666 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 80005fc:	787b      	ldrb	r3, [r7, #1]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff50 	bl	80004a4 <SCCB_SendByte>
    SCCB_WaitAck();	
 8000604:	f7ff ff28 	bl	8000458 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000608:	f7ff fed8 	bl	80003bc <SCCB_Stop>
	
    if(!SCCB_Start())
 800060c:	f7ff feaa 	bl	8000364 <SCCB_Start>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 8000616:	2300      	movs	r3, #0
 8000618:	e025      	b.n	8000666 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 800061a:	2043      	movs	r0, #67	@ 0x43
 800061c:	f7ff ff42 	bl	80004a4 <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8000620:	f7ff ff1a 	bl	8000458 <SCCB_WaitAck>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d117      	bne.n	800065a <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 800062a:	f7ff fec7 	bl	80003bc <SCCB_Stop>
		return DISABLE;
 800062e:	2300      	movs	r3, #0
 8000630:	e019      	b.n	8000666 <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8000632:	f7ff ff67 	bl	8000504 <SCCB_ReceiveByte>
 8000636:	4603      	mov	r3, r0
 8000638:	b2da      	uxtb	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 800063e:	887b      	ldrh	r3, [r7, #2]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d102      	bne.n	800064a <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8000644:	f7ff feee 	bl	8000424 <SCCB_NoAck>
 8000648:	e001      	b.n	800064e <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 800064a:	f7ff fed1 	bl	80003f0 <SCCB_Ack>
	  }
      pBuffer++;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3301      	adds	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
      length--;
 8000654:	887b      	ldrh	r3, [r7, #2]
 8000656:	3b01      	subs	r3, #1
 8000658:	807b      	strh	r3, [r7, #2]
    while(length)
 800065a:	887b      	ldrh	r3, [r7, #2]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1e8      	bne.n	8000632 <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8000660:	f7ff feac 	bl	80003bc <SCCB_Stop>
    return ENABLE;
 8000664:	2301      	movs	r3, #1
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	e002      	b.n	800067e <Delay+0x10>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3b01      	subs	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1f9      	bne.n	8000678 <Delay+0xa>
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000696:	2001      	movs	r0, #1
 8000698:	f000 f82a 	bl	80006f0 <LCD_BackLed_Control>
	LCD_Rst();
 800069c:	f000 f810 	bl	80006c0 <LCD_Rst>
	LCD_REG_Config();
 80006a0:	f000 f860 	bl	8000764 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80006a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006ae:	22f0      	movs	r2, #240	@ 0xf0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f9e7 	bl	8000a86 <LCD_Clear>
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <LCD_Rst>:



void LCD_Rst ( void )
{			
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2102      	movs	r1, #2
 80006c8:	4807      	ldr	r0, [pc, #28]	@ (80006e8 <LCD_Rst+0x28>)
 80006ca:	f001 fd5e 	bl	800218a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80006ce:	4807      	ldr	r0, [pc, #28]	@ (80006ec <LCD_Rst+0x2c>)
 80006d0:	f7ff ffcd 	bl	800066e <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2102      	movs	r1, #2
 80006d8:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <LCD_Rst+0x28>)
 80006da:	f001 fd56 	bl	800218a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80006de:	4803      	ldr	r0, [pc, #12]	@ (80006ec <LCD_Rst+0x2c>)
 80006e0:	f7ff ffc5 	bl	800066e <Delay>
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40011800 	.word	0x40011800
 80006ec:	0002bffc 	.word	0x0002bffc

080006f0 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000706:	4807      	ldr	r0, [pc, #28]	@ (8000724 <LCD_BackLed_Control+0x34>)
 8000708:	f001 fd3f 	bl	800218a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 800070c:	e005      	b.n	800071a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000714:	4803      	ldr	r0, [pc, #12]	@ (8000724 <LCD_BackLed_Control+0x34>)
 8000716:	f001 fd38 	bl	800218a <HAL_GPIO_WritePin>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40011400 	.word	0x40011400

08000728 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000732:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	8013      	strh	r3, [r2, #0]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800074e:	4a04      	ldr	r2, [pc, #16]	@ (8000760 <LCD_Write_Data+0x1c>)
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	8013      	strh	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	60020000 	.word	0x60020000

08000764 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000768:	20cf      	movs	r0, #207	@ 0xcf
 800076a:	f7ff ffdd 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff ffe8 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000774:	2081      	movs	r0, #129	@ 0x81
 8000776:	f7ff ffe5 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800077a:	2030      	movs	r0, #48	@ 0x30
 800077c:	f7ff ffe2 	bl	8000744 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000780:	20ed      	movs	r0, #237	@ 0xed
 8000782:	f7ff ffd1 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000786:	2064      	movs	r0, #100	@ 0x64
 8000788:	f7ff ffdc 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800078c:	2003      	movs	r0, #3
 800078e:	f7ff ffd9 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000792:	2012      	movs	r0, #18
 8000794:	f7ff ffd6 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000798:	2081      	movs	r0, #129	@ 0x81
 800079a:	f7ff ffd3 	bl	8000744 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 800079e:	20e8      	movs	r0, #232	@ 0xe8
 80007a0:	f7ff ffc2 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80007a4:	2085      	movs	r0, #133	@ 0x85
 80007a6:	f7ff ffcd 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80007aa:	2010      	movs	r0, #16
 80007ac:	f7ff ffca 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80007b0:	2078      	movs	r0, #120	@ 0x78
 80007b2:	f7ff ffc7 	bl	8000744 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80007b6:	20cb      	movs	r0, #203	@ 0xcb
 80007b8:	f7ff ffb6 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80007bc:	2039      	movs	r0, #57	@ 0x39
 80007be:	f7ff ffc1 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80007c2:	202c      	movs	r0, #44	@ 0x2c
 80007c4:	f7ff ffbe 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff ffbb 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80007ce:	2034      	movs	r0, #52	@ 0x34
 80007d0:	f7ff ffb8 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80007d4:	2002      	movs	r0, #2
 80007d6:	f7ff ffb5 	bl	8000744 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80007da:	20f7      	movs	r0, #247	@ 0xf7
 80007dc:	f7ff ffa4 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80007e0:	2020      	movs	r0, #32
 80007e2:	f7ff ffaf 	bl	8000744 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80007e6:	20ea      	movs	r0, #234	@ 0xea
 80007e8:	f7ff ff9e 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff ffa9 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff ffa6 	bl	8000744 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80007f8:	20b1      	movs	r0, #177	@ 0xb1
 80007fa:	f7ff ff95 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff ffa0 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000804:	201b      	movs	r0, #27
 8000806:	f7ff ff9d 	bl	8000744 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800080a:	20b6      	movs	r0, #182	@ 0xb6
 800080c:	f7ff ff8c 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000810:	200a      	movs	r0, #10
 8000812:	f7ff ff97 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000816:	20a2      	movs	r0, #162	@ 0xa2
 8000818:	f7ff ff94 	bl	8000744 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 800081c:	20c0      	movs	r0, #192	@ 0xc0
 800081e:	f7ff ff83 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000822:	2035      	movs	r0, #53	@ 0x35
 8000824:	f7ff ff8e 	bl	8000744 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000828:	20c1      	movs	r0, #193	@ 0xc1
 800082a:	f7ff ff7d 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800082e:	2011      	movs	r0, #17
 8000830:	f7ff ff88 	bl	8000744 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000834:	20c5      	movs	r0, #197	@ 0xc5
 8000836:	f7ff ff77 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800083a:	2045      	movs	r0, #69	@ 0x45
 800083c:	f7ff ff82 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000840:	2045      	movs	r0, #69	@ 0x45
 8000842:	f7ff ff7f 	bl	8000744 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000846:	20c7      	movs	r0, #199	@ 0xc7
 8000848:	f7ff ff6e 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 800084c:	20a2      	movs	r0, #162	@ 0xa2
 800084e:	f7ff ff79 	bl	8000744 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000852:	20f2      	movs	r0, #242	@ 0xf2
 8000854:	f7ff ff68 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff ff73 	bl	8000744 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800085e:	2026      	movs	r0, #38	@ 0x26
 8000860:	f7ff ff62 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff ff6d 	bl	8000744 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800086a:	20e0      	movs	r0, #224	@ 0xe0
 800086c:	f7ff ff5c 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000870:	200f      	movs	r0, #15
 8000872:	f7ff ff67 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000876:	2026      	movs	r0, #38	@ 0x26
 8000878:	f7ff ff64 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 800087c:	2024      	movs	r0, #36	@ 0x24
 800087e:	f7ff ff61 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000882:	200b      	movs	r0, #11
 8000884:	f7ff ff5e 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000888:	200e      	movs	r0, #14
 800088a:	f7ff ff5b 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800088e:	2009      	movs	r0, #9
 8000890:	f7ff ff58 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000894:	2054      	movs	r0, #84	@ 0x54
 8000896:	f7ff ff55 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800089a:	20a8      	movs	r0, #168	@ 0xa8
 800089c:	f7ff ff52 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80008a0:	2046      	movs	r0, #70	@ 0x46
 80008a2:	f7ff ff4f 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80008a6:	200c      	movs	r0, #12
 80008a8:	f7ff ff4c 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80008ac:	2017      	movs	r0, #23
 80008ae:	f7ff ff49 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80008b2:	2009      	movs	r0, #9
 80008b4:	f7ff ff46 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80008b8:	200f      	movs	r0, #15
 80008ba:	f7ff ff43 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80008be:	2007      	movs	r0, #7
 80008c0:	f7ff ff40 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff ff3d 	bl	8000744 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80008ca:	20e1      	movs	r0, #225	@ 0xe1
 80008cc:	f7ff ff2c 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff ff37 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80008d6:	2019      	movs	r0, #25
 80008d8:	f7ff ff34 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80008dc:	201b      	movs	r0, #27
 80008de:	f7ff ff31 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80008e2:	2004      	movs	r0, #4
 80008e4:	f7ff ff2e 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80008e8:	2010      	movs	r0, #16
 80008ea:	f7ff ff2b 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80008ee:	2007      	movs	r0, #7
 80008f0:	f7ff ff28 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80008f4:	202a      	movs	r0, #42	@ 0x2a
 80008f6:	f7ff ff25 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80008fa:	2047      	movs	r0, #71	@ 0x47
 80008fc:	f7ff ff22 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000900:	2039      	movs	r0, #57	@ 0x39
 8000902:	f7ff ff1f 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000906:	2003      	movs	r0, #3
 8000908:	f7ff ff1c 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800090c:	2006      	movs	r0, #6
 800090e:	f7ff ff19 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000912:	2006      	movs	r0, #6
 8000914:	f7ff ff16 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000918:	2030      	movs	r0, #48	@ 0x30
 800091a:	f7ff ff13 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800091e:	2038      	movs	r0, #56	@ 0x38
 8000920:	f7ff ff10 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000924:	200f      	movs	r0, #15
 8000926:	f7ff ff0d 	bl	8000744 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800092a:	2036      	movs	r0, #54	@ 0x36
 800092c:	f7ff fefc 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8000930:	20c8      	movs	r0, #200	@ 0xc8
 8000932:	f7ff ff07 	bl	8000744 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000936:	202a      	movs	r0, #42	@ 0x2a
 8000938:	f7ff fef6 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff ff01 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fefe 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fefb 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800094e:	20ef      	movs	r0, #239	@ 0xef
 8000950:	f7ff fef8 	bl	8000744 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000954:	202b      	movs	r0, #43	@ 0x2b
 8000956:	f7ff fee7 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fef2 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff feef 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000966:	2001      	movs	r0, #1
 8000968:	f7ff feec 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 800096c:	203f      	movs	r0, #63	@ 0x3f
 800096e:	f7ff fee9 	bl	8000744 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000972:	203a      	movs	r0, #58	@ 0x3a
 8000974:	f7ff fed8 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000978:	2055      	movs	r0, #85	@ 0x55
 800097a:	f7ff fee3 	bl	8000744 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 800097e:	2011      	movs	r0, #17
 8000980:	f7ff fed2 	bl	8000728 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000984:	4803      	ldr	r0, [pc, #12]	@ (8000994 <LCD_REG_Config+0x230>)
 8000986:	f7ff fe72 	bl	800066e <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800098a:	2029      	movs	r0, #41	@ 0x29
 800098c:	f7ff fecc 	bl	8000728 <LCD_Write_Cmd>
	
	
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	0002bffc 	.word	0x0002bffc

08000998 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4604      	mov	r4, r0
 80009a0:	4608      	mov	r0, r1
 80009a2:	4611      	mov	r1, r2
 80009a4:	461a      	mov	r2, r3
 80009a6:	4623      	mov	r3, r4
 80009a8:	80fb      	strh	r3, [r7, #6]
 80009aa:	4603      	mov	r3, r0
 80009ac:	80bb      	strh	r3, [r7, #4]
 80009ae:	460b      	mov	r3, r1
 80009b0:	807b      	strh	r3, [r7, #2]
 80009b2:	4613      	mov	r3, r2
 80009b4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80009b6:	202a      	movs	r0, #42	@ 0x2a
 80009b8:	f7ff feb6 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff febe 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff feb8 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80009d4:	88fa      	ldrh	r2, [r7, #6]
 80009d6:	887b      	ldrh	r3, [r7, #2]
 80009d8:	4413      	add	r3, r2
 80009da:	3b01      	subs	r3, #1
 80009dc:	121b      	asrs	r3, r3, #8
 80009de:	b29b      	uxth	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff feaf 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80009e6:	88fa      	ldrh	r2, [r7, #6]
 80009e8:	887b      	ldrh	r3, [r7, #2]
 80009ea:	4413      	add	r3, r2
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	3b01      	subs	r3, #1
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fea4 	bl	8000744 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80009fc:	202b      	movs	r0, #43	@ 0x2b
 80009fe:	f7ff fe93 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000a02:	88bb      	ldrh	r3, [r7, #4]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fe9b 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fe95 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000a1a:	88ba      	ldrh	r2, [r7, #4]
 8000a1c:	883b      	ldrh	r3, [r7, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	3b01      	subs	r3, #1
 8000a22:	121b      	asrs	r3, r3, #8
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fe8c 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000a2c:	88ba      	ldrh	r2, [r7, #4]
 8000a2e:	883b      	ldrh	r3, [r7, #0]
 8000a30:	4413      	add	r3, r2
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	3b01      	subs	r3, #1
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fe81 	bl	8000744 <LCD_Write_Data>
	
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd90      	pop	{r4, r7, pc}

08000a4a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000a5a:	202c      	movs	r0, #44	@ 0x2c
 8000a5c:	f7ff fe64 	bl	8000728 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e006      	b.n	8000a74 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000a66:	887b      	ldrh	r3, [r7, #2]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fe6b 	bl	8000744 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3301      	adds	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d3f4      	bcc.n	8000a66 <LCD_FillColor+0x1c>
		
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000a86:	b590      	push	{r4, r7, lr}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4608      	mov	r0, r1
 8000a90:	4611      	mov	r1, r2
 8000a92:	461a      	mov	r2, r3
 8000a94:	4623      	mov	r3, r4
 8000a96:	80fb      	strh	r3, [r7, #6]
 8000a98:	4603      	mov	r3, r0
 8000a9a:	80bb      	strh	r3, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	807b      	strh	r3, [r7, #2]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000aa4:	883b      	ldrh	r3, [r7, #0]
 8000aa6:	887a      	ldrh	r2, [r7, #2]
 8000aa8:	88b9      	ldrh	r1, [r7, #4]
 8000aaa:	88f8      	ldrh	r0, [r7, #6]
 8000aac:	f7ff ff74 	bl	8000998 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000ab0:	887b      	ldrh	r3, [r7, #2]
 8000ab2:	883a      	ldrh	r2, [r7, #0]
 8000ab4:	fb02 f303 	mul.w	r3, r2, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	8b3b      	ldrh	r3, [r7, #24]
 8000abc:	4619      	mov	r1, r3
 8000abe:	4610      	mov	r0, r2
 8000ac0:	f7ff ffc3 	bl	8000a4a <LCD_FillColor>
	
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd90      	pop	{r4, r7, pc}

08000acc <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, uint8_t cChar )
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	80bb      	strh	r3, [r7, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000ade:	78fb      	ldrb	r3, [r7, #3]
 8000ae0:	3b20      	subs	r3, #32
 8000ae2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000ae4:	88b9      	ldrh	r1, [r7, #4]
 8000ae6:	88f8      	ldrh	r0, [r7, #6]
 8000ae8:	2310      	movs	r3, #16
 8000aea:	2208      	movs	r2, #8
 8000aec:	f7ff ff54 	bl	8000998 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000af0:	202c      	movs	r0, #44	@ 0x2c
 8000af2:	f7ff fe19 	bl	8000728 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000af6:	2300      	movs	r3, #0
 8000af8:	73bb      	strb	r3, [r7, #14]
 8000afa:	e023      	b.n	8000b44 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000afc:	7b3a      	ldrb	r2, [r7, #12]
 8000afe:	7bbb      	ldrb	r3, [r7, #14]
 8000b00:	4914      	ldr	r1, [pc, #80]	@ (8000b54 <LCD_DrawChar+0x88>)
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	440a      	add	r2, r1
 8000b06:	4413      	add	r3, r2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	737b      	strb	r3, [r7, #13]
 8000b10:	e012      	b.n	8000b38 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8000b1c:	201f      	movs	r0, #31
 8000b1e:	f7ff fe11 	bl	8000744 <LCD_Write_Data>
 8000b22:	e003      	b.n	8000b2c <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000b24:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b28:	f7ff fe0c 	bl	8000744 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000b32:	7b7b      	ldrb	r3, [r7, #13]
 8000b34:	3301      	adds	r3, #1
 8000b36:	737b      	strb	r3, [r7, #13]
 8000b38:	7b7b      	ldrb	r3, [r7, #13]
 8000b3a:	2b07      	cmp	r3, #7
 8000b3c:	d9e9      	bls.n	8000b12 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000b3e:	7bbb      	ldrb	r3, [r7, #14]
 8000b40:	3301      	adds	r3, #1
 8000b42:	73bb      	strb	r3, [r7, #14]
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	2b0f      	cmp	r3, #15
 8000b48:	d9d8      	bls.n	8000afc <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	08003b98 	.word	0x08003b98

08000b58 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, uint8_t * pStr )
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	603a      	str	r2, [r7, #0]
 8000b62:	80fb      	strh	r3, [r7, #6]
 8000b64:	460b      	mov	r3, r1
 8000b66:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000b68:	e01c      	b.n	8000ba4 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	2be8      	cmp	r3, #232	@ 0xe8
 8000b6e:	d904      	bls.n	8000b7a <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000b70:	2300      	movs	r3, #0
 8000b72:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000b74:	88bb      	ldrh	r3, [r7, #4]
 8000b76:	3310      	adds	r3, #16
 8000b78:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8000b80:	d903      	bls.n	8000b8a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000b82:	2300      	movs	r3, #0
 8000b84:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	88b9      	ldrh	r1, [r7, #4]
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff9a 	bl	8000acc <LCD_DrawChar>
		
		pStr ++;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	3308      	adds	r3, #8
 8000ba2:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1de      	bne.n	8000b6a <LCD_DrawString+0x12>
		
	}
	
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <LCD_Cam_Gram>:
	 */
	
}

void LCD_Cam_Gram()
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000bba:	2036      	movs	r0, #54	@ 0x36
 8000bbc:	f7ff fdb4 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x68 );    
 8000bc0:	2068      	movs	r0, #104	@ 0x68
 8000bc2:	f7ff fdbf 	bl	8000744 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000bc6:	202a      	movs	r0, #42	@ 0x2a
 8000bc8:	f7ff fdae 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff fdb9 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff fdb6 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff fdb3 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000bde:	203f      	movs	r0, #63	@ 0x3f
 8000be0:	f7ff fdb0 	bl	8000744 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000be4:	202b      	movs	r0, #43	@ 0x2b
 8000be6:	f7ff fd9f 	bl	8000728 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff fdaa 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff fda7 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fda4 	bl	8000744 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000bfc:	20ef      	movs	r0, #239	@ 0xef
 8000bfe:	f7ff fda1 	bl	8000744 <LCD_Write_Data>
	
	LCD_Write_Cmd ( 0x2C );
 8000c02:	202c      	movs	r0, #44	@ 0x2c
 8000c04:	f7ff fd90 	bl	8000728 <LCD_Write_Cmd>

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c12:	f000 ff7b 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c16:	f000 fadf 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1a:	f000 fb77 	bl	800130c <MX_GPIO_Init>
  MX_FSMC_Init();
 8000c1e:	f000 fc63 	bl	80014e8 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8000c22:	f000 fb1f 	bl	8001264 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000c26:	f000 fb47 	bl	80012b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	
	LCD_INIT();
 8000c2a:	f7ff fd31 	bl	8000690 <LCD_INIT>
	


  LCD_DrawString(100, 35, "X       Y");
 8000c2e:	4aa1      	ldr	r2, [pc, #644]	@ (8000eb4 <main+0x2a8>)
 8000c30:	2123      	movs	r1, #35	@ 0x23
 8000c32:	2064      	movs	r0, #100	@ 0x64
 8000c34:	f7ff ff90 	bl	8000b58 <LCD_DrawString>
  LCD_DrawString(10, 60, "Joystick:");
 8000c38:	4a9f      	ldr	r2, [pc, #636]	@ (8000eb8 <main+0x2ac>)
 8000c3a:	213c      	movs	r1, #60	@ 0x3c
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff ff8b 	bl	8000b58 <LCD_DrawString>


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2101      	movs	r1, #1
 8000c46:	489d      	ldr	r0, [pc, #628]	@ (8000ebc <main+0x2b0>)
 8000c48:	f001 fa9f 	bl	800218a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2120      	movs	r1, #32
 8000c50:	489a      	ldr	r0, [pc, #616]	@ (8000ebc <main+0x2b0>)
 8000c52:	f001 fa9a 	bl	800218a <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	
	while(Ov7725_Init() != SUCCESS);
 8000c56:	bf00      	nop
 8000c58:	f7ff fae4 	bl	8000224 <Ov7725_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1fa      	bne.n	8000c58 <main+0x4c>
	Ov7725_vsync = 0;
 8000c62:	4b97      	ldr	r3, [pc, #604]	@ (8000ec0 <main+0x2b4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  
  // Simple polling receive
  if (HAL_UART_Receive(&huart3, Data, 3, 100) == HAL_OK)
 8000c68:	2364      	movs	r3, #100	@ 0x64
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	4995      	ldr	r1, [pc, #596]	@ (8000ec4 <main+0x2b8>)
 8000c6e:	4896      	ldr	r0, [pc, #600]	@ (8000ec8 <main+0x2bc>)
 8000c70:	f001 fffe 	bl	8002c70 <HAL_UART_Receive>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d125      	bne.n	8000cc6 <main+0xba>
  {
      // Successfully received data
      sprintf(buff, "RX OK");
 8000c7a:	4994      	ldr	r1, [pc, #592]	@ (8000ecc <main+0x2c0>)
 8000c7c:	4894      	ldr	r0, [pc, #592]	@ (8000ed0 <main+0x2c4>)
 8000c7e:	f002 faa7 	bl	80031d0 <siprintf>
      LCD_DrawString(10, 140, (uint8_t *)buff);
 8000c82:	4a93      	ldr	r2, [pc, #588]	@ (8000ed0 <main+0x2c4>)
 8000c84:	218c      	movs	r1, #140	@ 0x8c
 8000c86:	200a      	movs	r0, #10
 8000c88:	f7ff ff66 	bl	8000b58 <LCD_DrawString>
      sprintf(buff, "D0:%3d D1:%3d D2:%3d", Data[0], Data[1], Data[2]);
 8000c8c:	4b8d      	ldr	r3, [pc, #564]	@ (8000ec4 <main+0x2b8>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b8c      	ldr	r3, [pc, #560]	@ (8000ec4 <main+0x2b8>)
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4b8a      	ldr	r3, [pc, #552]	@ (8000ec4 <main+0x2b8>)
 8000c9a:	789b      	ldrb	r3, [r3, #2]
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	498c      	ldr	r1, [pc, #560]	@ (8000ed4 <main+0x2c8>)
 8000ca2:	488b      	ldr	r0, [pc, #556]	@ (8000ed0 <main+0x2c4>)
 8000ca4:	f002 fa94 	bl	80031d0 <siprintf>
      LCD_DrawString(10, 160, (uint8_t *)buff);
 8000ca8:	4a89      	ldr	r2, [pc, #548]	@ (8000ed0 <main+0x2c4>)
 8000caa:	21a0      	movs	r1, #160	@ 0xa0
 8000cac:	200a      	movs	r0, #10
 8000cae:	f7ff ff53 	bl	8000b58 <LCD_DrawString>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);    // Green LED on (active low)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4881      	ldr	r0, [pc, #516]	@ (8000ebc <main+0x2b0>)
 8000cb8:	f001 fa67 	bl	800218a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  // Red LED off (active low)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2120      	movs	r1, #32
 8000cc0:	487e      	ldr	r0, [pc, #504]	@ (8000ebc <main+0x2b0>)
 8000cc2:	f001 fa62 	bl	800218a <HAL_GPIO_WritePin>

  }


  // Default: not pressed
  joybut_pressed = 0;
 8000cc6:	4b84      	ldr	r3, [pc, #528]	@ (8000ed8 <main+0x2cc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]

  // Decode Data[0]
  switch (Data[0]) {
 8000ccc:	4b7d      	ldr	r3, [pc, #500]	@ (8000ec4 <main+0x2b8>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b23      	cmp	r3, #35	@ 0x23
 8000cd2:	f200 8105 	bhi.w	8000ee0 <main+0x2d4>
 8000cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cdc <main+0xd0>)
 8000cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cdc:	08000e61 	.word	0x08000e61
 8000ce0:	08000e6f 	.word	0x08000e6f
 8000ce4:	08000e7d 	.word	0x08000e7d
 8000ce8:	08000e8b 	.word	0x08000e8b
 8000cec:	08000e99 	.word	0x08000e99
 8000cf0:	08000ea7 	.word	0x08000ea7
 8000cf4:	08000ee1 	.word	0x08000ee1
 8000cf8:	08000ee1 	.word	0x08000ee1
 8000cfc:	08000ee1 	.word	0x08000ee1
 8000d00:	08000ee1 	.word	0x08000ee1
 8000d04:	08000ee1 	.word	0x08000ee1
 8000d08:	08000e51 	.word	0x08000e51
 8000d0c:	08000e41 	.word	0x08000e41
 8000d10:	08000e31 	.word	0x08000e31
 8000d14:	08000e21 	.word	0x08000e21
 8000d18:	08000e11 	.word	0x08000e11
 8000d1c:	08000ee1 	.word	0x08000ee1
 8000d20:	08000ee1 	.word	0x08000ee1
 8000d24:	08000ee1 	.word	0x08000ee1
 8000d28:	08000ee1 	.word	0x08000ee1
 8000d2c:	08000dbd 	.word	0x08000dbd
 8000d30:	08000dcb 	.word	0x08000dcb
 8000d34:	08000dd9 	.word	0x08000dd9
 8000d38:	08000de7 	.word	0x08000de7
 8000d3c:	08000df5 	.word	0x08000df5
 8000d40:	08000e03 	.word	0x08000e03
 8000d44:	08000ee1 	.word	0x08000ee1
 8000d48:	08000ee1 	.word	0x08000ee1
 8000d4c:	08000ee1 	.word	0x08000ee1
 8000d50:	08000ee1 	.word	0x08000ee1
 8000d54:	08000ee1 	.word	0x08000ee1
 8000d58:	08000dad 	.word	0x08000dad
 8000d5c:	08000d9d 	.word	0x08000d9d
 8000d60:	08000d8d 	.word	0x08000d8d
 8000d64:	08000d7d 	.word	0x08000d7d
 8000d68:	08000d6d 	.word	0x08000d6d
      case 35: cal_value[0] = -5; joybut_pressed = 1; break;
 8000d6c:	4b5b      	ldr	r3, [pc, #364]	@ (8000edc <main+0x2d0>)
 8000d6e:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 8000d72:	801a      	strh	r2, [r3, #0]
 8000d74:	4b58      	ldr	r3, [pc, #352]	@ (8000ed8 <main+0x2cc>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e0b8      	b.n	8000eee <main+0x2e2>
      case 34: cal_value[0] = -4; joybut_pressed = 1; break;
 8000d7c:	4b57      	ldr	r3, [pc, #348]	@ (8000edc <main+0x2d0>)
 8000d7e:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8000d82:	801a      	strh	r2, [r3, #0]
 8000d84:	4b54      	ldr	r3, [pc, #336]	@ (8000ed8 <main+0x2cc>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e0b0      	b.n	8000eee <main+0x2e2>
      case 33: cal_value[0] = -3; joybut_pressed = 1; break;
 8000d8c:	4b53      	ldr	r3, [pc, #332]	@ (8000edc <main+0x2d0>)
 8000d8e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8000d92:	801a      	strh	r2, [r3, #0]
 8000d94:	4b50      	ldr	r3, [pc, #320]	@ (8000ed8 <main+0x2cc>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	e0a8      	b.n	8000eee <main+0x2e2>
      case 32: cal_value[0] = -2; joybut_pressed = 1; break;
 8000d9c:	4b4f      	ldr	r3, [pc, #316]	@ (8000edc <main+0x2d0>)
 8000d9e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000da2:	801a      	strh	r2, [r3, #0]
 8000da4:	4b4c      	ldr	r3, [pc, #304]	@ (8000ed8 <main+0x2cc>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	e0a0      	b.n	8000eee <main+0x2e2>
      case 31: cal_value[0] = -1; joybut_pressed = 1; break;
 8000dac:	4b4b      	ldr	r3, [pc, #300]	@ (8000edc <main+0x2d0>)
 8000dae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000db2:	801a      	strh	r2, [r3, #0]
 8000db4:	4b48      	ldr	r3, [pc, #288]	@ (8000ed8 <main+0x2cc>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e098      	b.n	8000eee <main+0x2e2>
      case 20: cal_value[0] = 0;  joybut_pressed = 1; break;
 8000dbc:	4b47      	ldr	r3, [pc, #284]	@ (8000edc <main+0x2d0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	801a      	strh	r2, [r3, #0]
 8000dc2:	4b45      	ldr	r3, [pc, #276]	@ (8000ed8 <main+0x2cc>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	e091      	b.n	8000eee <main+0x2e2>
      case 21: cal_value[0] = 1;  joybut_pressed = 1; break;
 8000dca:	4b44      	ldr	r3, [pc, #272]	@ (8000edc <main+0x2d0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	801a      	strh	r2, [r3, #0]
 8000dd0:	4b41      	ldr	r3, [pc, #260]	@ (8000ed8 <main+0x2cc>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e08a      	b.n	8000eee <main+0x2e2>
      case 22: cal_value[0] = 2;  joybut_pressed = 1; break;
 8000dd8:	4b40      	ldr	r3, [pc, #256]	@ (8000edc <main+0x2d0>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	801a      	strh	r2, [r3, #0]
 8000dde:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed8 <main+0x2cc>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
 8000de4:	e083      	b.n	8000eee <main+0x2e2>
      case 23: cal_value[0] = 3;  joybut_pressed = 1; break;
 8000de6:	4b3d      	ldr	r3, [pc, #244]	@ (8000edc <main+0x2d0>)
 8000de8:	2203      	movs	r2, #3
 8000dea:	801a      	strh	r2, [r3, #0]
 8000dec:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed8 <main+0x2cc>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	e07c      	b.n	8000eee <main+0x2e2>
      case 24: cal_value[0] = 4;  joybut_pressed = 1; break;
 8000df4:	4b39      	ldr	r3, [pc, #228]	@ (8000edc <main+0x2d0>)
 8000df6:	2204      	movs	r2, #4
 8000df8:	801a      	strh	r2, [r3, #0]
 8000dfa:	4b37      	ldr	r3, [pc, #220]	@ (8000ed8 <main+0x2cc>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e075      	b.n	8000eee <main+0x2e2>
      case 25: cal_value[0] = 5;  joybut_pressed = 1; break;
 8000e02:	4b36      	ldr	r3, [pc, #216]	@ (8000edc <main+0x2d0>)
 8000e04:	2205      	movs	r2, #5
 8000e06:	801a      	strh	r2, [r3, #0]
 8000e08:	4b33      	ldr	r3, [pc, #204]	@ (8000ed8 <main+0x2cc>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	e06e      	b.n	8000eee <main+0x2e2>
      case 15: cal_value[0] = -5; joybut_pressed = 0; break;
 8000e10:	4b32      	ldr	r3, [pc, #200]	@ (8000edc <main+0x2d0>)
 8000e12:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 8000e16:	801a      	strh	r2, [r3, #0]
 8000e18:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <main+0x2cc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e066      	b.n	8000eee <main+0x2e2>
      case 14: cal_value[0] = -4; joybut_pressed = 0; break;
 8000e20:	4b2e      	ldr	r3, [pc, #184]	@ (8000edc <main+0x2d0>)
 8000e22:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8000e26:	801a      	strh	r2, [r3, #0]
 8000e28:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed8 <main+0x2cc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e05e      	b.n	8000eee <main+0x2e2>
      case 13: cal_value[0] = -3; joybut_pressed = 0; break;
 8000e30:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <main+0x2d0>)
 8000e32:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8000e36:	801a      	strh	r2, [r3, #0]
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <main+0x2cc>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	e056      	b.n	8000eee <main+0x2e2>
      case 12: cal_value[0] = -2; joybut_pressed = 0; break;
 8000e40:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <main+0x2d0>)
 8000e42:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000e46:	801a      	strh	r2, [r3, #0]
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <main+0x2cc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e04e      	b.n	8000eee <main+0x2e2>
      case 11: cal_value[0] = -1; joybut_pressed = 0; break;
 8000e50:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <main+0x2d0>)
 8000e52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e56:	801a      	strh	r2, [r3, #0]
 8000e58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <main+0x2cc>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e046      	b.n	8000eee <main+0x2e2>
      case 0:  cal_value[0] = 0;  joybut_pressed = 0; break;
 8000e60:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <main+0x2d0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	801a      	strh	r2, [r3, #0]
 8000e66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <main+0x2cc>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	e03f      	b.n	8000eee <main+0x2e2>
      case 1:  cal_value[0] = 1;  joybut_pressed = 0; break;
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <main+0x2d0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	801a      	strh	r2, [r3, #0]
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <main+0x2cc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e038      	b.n	8000eee <main+0x2e2>
      case 2:  cal_value[0] = 2;  joybut_pressed = 0; break;
 8000e7c:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <main+0x2d0>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	801a      	strh	r2, [r3, #0]
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <main+0x2cc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	e031      	b.n	8000eee <main+0x2e2>
      case 3:  cal_value[0] = 3;  joybut_pressed = 0; break;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <main+0x2d0>)
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	801a      	strh	r2, [r3, #0]
 8000e90:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <main+0x2cc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	e02a      	b.n	8000eee <main+0x2e2>
      case 4:  cal_value[0] = 4;  joybut_pressed = 0; break;
 8000e98:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <main+0x2d0>)
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	801a      	strh	r2, [r3, #0]
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <main+0x2cc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e023      	b.n	8000eee <main+0x2e2>
      case 5:  cal_value[0] = 5;  joybut_pressed = 0; break;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <main+0x2d0>)
 8000ea8:	2205      	movs	r2, #5
 8000eaa:	801a      	strh	r2, [r3, #0]
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <main+0x2cc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e01c      	b.n	8000eee <main+0x2e2>
 8000eb4:	08003b48 	.word	0x08003b48
 8000eb8:	08003b54 	.word	0x08003b54
 8000ebc:	40010c00 	.word	0x40010c00
 8000ec0:	20000214 	.word	0x20000214
 8000ec4:	20000210 	.word	0x20000210
 8000ec8:	2000015c 	.word	0x2000015c
 8000ecc:	08003b60 	.word	0x08003b60
 8000ed0:	200001f0 	.word	0x200001f0
 8000ed4:	08003b68 	.word	0x08003b68
 8000ed8:	20000213 	.word	0x20000213
 8000edc:	200001ec 	.word	0x200001ec
      default: cal_value[0] = 0;  joybut_pressed = 0; break;
 8000ee0:	4bb3      	ldr	r3, [pc, #716]	@ (80011b0 <main+0x5a4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	801a      	strh	r2, [r3, #0]
 8000ee6:	4bb3      	ldr	r3, [pc, #716]	@ (80011b4 <main+0x5a8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	bf00      	nop
  }

  // Decode Data[1]
  switch (Data[1]) {
 8000eee:	4bb2      	ldr	r3, [pc, #712]	@ (80011b8 <main+0x5ac>)
 8000ef0:	785b      	ldrb	r3, [r3, #1]
 8000ef2:	2b23      	cmp	r3, #35	@ 0x23
 8000ef4:	f200 80f0 	bhi.w	80010d8 <main+0x4cc>
 8000ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8000f00 <main+0x2f4>)
 8000efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efe:	bf00      	nop
 8000f00:	08001085 	.word	0x08001085
 8000f04:	08001093 	.word	0x08001093
 8000f08:	080010a1 	.word	0x080010a1
 8000f0c:	080010af 	.word	0x080010af
 8000f10:	080010bd 	.word	0x080010bd
 8000f14:	080010cb 	.word	0x080010cb
 8000f18:	080010d9 	.word	0x080010d9
 8000f1c:	080010d9 	.word	0x080010d9
 8000f20:	080010d9 	.word	0x080010d9
 8000f24:	080010d9 	.word	0x080010d9
 8000f28:	080010d9 	.word	0x080010d9
 8000f2c:	08001075 	.word	0x08001075
 8000f30:	08001065 	.word	0x08001065
 8000f34:	08001055 	.word	0x08001055
 8000f38:	08001045 	.word	0x08001045
 8000f3c:	08001035 	.word	0x08001035
 8000f40:	080010d9 	.word	0x080010d9
 8000f44:	080010d9 	.word	0x080010d9
 8000f48:	080010d9 	.word	0x080010d9
 8000f4c:	080010d9 	.word	0x080010d9
 8000f50:	08000fe1 	.word	0x08000fe1
 8000f54:	08000fef 	.word	0x08000fef
 8000f58:	08000ffd 	.word	0x08000ffd
 8000f5c:	0800100b 	.word	0x0800100b
 8000f60:	08001019 	.word	0x08001019
 8000f64:	08001027 	.word	0x08001027
 8000f68:	080010d9 	.word	0x080010d9
 8000f6c:	080010d9 	.word	0x080010d9
 8000f70:	080010d9 	.word	0x080010d9
 8000f74:	080010d9 	.word	0x080010d9
 8000f78:	080010d9 	.word	0x080010d9
 8000f7c:	08000fd1 	.word	0x08000fd1
 8000f80:	08000fc1 	.word	0x08000fc1
 8000f84:	08000fb1 	.word	0x08000fb1
 8000f88:	08000fa1 	.word	0x08000fa1
 8000f8c:	08000f91 	.word	0x08000f91
      case 35: cal_value[1] = -5; joybut_pressed = 1; break;
 8000f90:	4b87      	ldr	r3, [pc, #540]	@ (80011b0 <main+0x5a4>)
 8000f92:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 8000f96:	805a      	strh	r2, [r3, #2]
 8000f98:	4b86      	ldr	r3, [pc, #536]	@ (80011b4 <main+0x5a8>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e0a2      	b.n	80010e6 <main+0x4da>
      case 34: cal_value[1] = -4; joybut_pressed = 1; break;
 8000fa0:	4b83      	ldr	r3, [pc, #524]	@ (80011b0 <main+0x5a4>)
 8000fa2:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8000fa6:	805a      	strh	r2, [r3, #2]
 8000fa8:	4b82      	ldr	r3, [pc, #520]	@ (80011b4 <main+0x5a8>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	e09a      	b.n	80010e6 <main+0x4da>
      case 33: cal_value[1] = -3; joybut_pressed = 1; break;
 8000fb0:	4b7f      	ldr	r3, [pc, #508]	@ (80011b0 <main+0x5a4>)
 8000fb2:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8000fb6:	805a      	strh	r2, [r3, #2]
 8000fb8:	4b7e      	ldr	r3, [pc, #504]	@ (80011b4 <main+0x5a8>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e092      	b.n	80010e6 <main+0x4da>
      case 32: cal_value[1] = -2; joybut_pressed = 1; break;
 8000fc0:	4b7b      	ldr	r3, [pc, #492]	@ (80011b0 <main+0x5a4>)
 8000fc2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000fc6:	805a      	strh	r2, [r3, #2]
 8000fc8:	4b7a      	ldr	r3, [pc, #488]	@ (80011b4 <main+0x5a8>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e08a      	b.n	80010e6 <main+0x4da>
      case 31: cal_value[1] = -1; joybut_pressed = 1; break;
 8000fd0:	4b77      	ldr	r3, [pc, #476]	@ (80011b0 <main+0x5a4>)
 8000fd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fd6:	805a      	strh	r2, [r3, #2]
 8000fd8:	4b76      	ldr	r3, [pc, #472]	@ (80011b4 <main+0x5a8>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	e082      	b.n	80010e6 <main+0x4da>
      case 20: cal_value[1] = 0;  joybut_pressed = 1; break;
 8000fe0:	4b73      	ldr	r3, [pc, #460]	@ (80011b0 <main+0x5a4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	805a      	strh	r2, [r3, #2]
 8000fe6:	4b73      	ldr	r3, [pc, #460]	@ (80011b4 <main+0x5a8>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e07b      	b.n	80010e6 <main+0x4da>
      case 21: cal_value[1] = 1;  joybut_pressed = 1; break;
 8000fee:	4b70      	ldr	r3, [pc, #448]	@ (80011b0 <main+0x5a4>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	805a      	strh	r2, [r3, #2]
 8000ff4:	4b6f      	ldr	r3, [pc, #444]	@ (80011b4 <main+0x5a8>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	e074      	b.n	80010e6 <main+0x4da>
      case 22: cal_value[1] = 2;  joybut_pressed = 1; break;
 8000ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80011b0 <main+0x5a4>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	805a      	strh	r2, [r3, #2]
 8001002:	4b6c      	ldr	r3, [pc, #432]	@ (80011b4 <main+0x5a8>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	e06d      	b.n	80010e6 <main+0x4da>
      case 23: cal_value[1] = 3;  joybut_pressed = 1; break;
 800100a:	4b69      	ldr	r3, [pc, #420]	@ (80011b0 <main+0x5a4>)
 800100c:	2203      	movs	r2, #3
 800100e:	805a      	strh	r2, [r3, #2]
 8001010:	4b68      	ldr	r3, [pc, #416]	@ (80011b4 <main+0x5a8>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	e066      	b.n	80010e6 <main+0x4da>
      case 24: cal_value[1] = 4;  joybut_pressed = 1; break;
 8001018:	4b65      	ldr	r3, [pc, #404]	@ (80011b0 <main+0x5a4>)
 800101a:	2204      	movs	r2, #4
 800101c:	805a      	strh	r2, [r3, #2]
 800101e:	4b65      	ldr	r3, [pc, #404]	@ (80011b4 <main+0x5a8>)
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	e05f      	b.n	80010e6 <main+0x4da>
      case 25: cal_value[1] = 5;  joybut_pressed = 1; break;
 8001026:	4b62      	ldr	r3, [pc, #392]	@ (80011b0 <main+0x5a4>)
 8001028:	2205      	movs	r2, #5
 800102a:	805a      	strh	r2, [r3, #2]
 800102c:	4b61      	ldr	r3, [pc, #388]	@ (80011b4 <main+0x5a8>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e058      	b.n	80010e6 <main+0x4da>
      case 15: cal_value[1] = -5; joybut_pressed = 0; break;
 8001034:	4b5e      	ldr	r3, [pc, #376]	@ (80011b0 <main+0x5a4>)
 8001036:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 800103a:	805a      	strh	r2, [r3, #2]
 800103c:	4b5d      	ldr	r3, [pc, #372]	@ (80011b4 <main+0x5a8>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e050      	b.n	80010e6 <main+0x4da>
      case 14: cal_value[1] = -4; joybut_pressed = 0; break;
 8001044:	4b5a      	ldr	r3, [pc, #360]	@ (80011b0 <main+0x5a4>)
 8001046:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800104a:	805a      	strh	r2, [r3, #2]
 800104c:	4b59      	ldr	r3, [pc, #356]	@ (80011b4 <main+0x5a8>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	e048      	b.n	80010e6 <main+0x4da>
      case 13: cal_value[1] = -3; joybut_pressed = 0; break;
 8001054:	4b56      	ldr	r3, [pc, #344]	@ (80011b0 <main+0x5a4>)
 8001056:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800105a:	805a      	strh	r2, [r3, #2]
 800105c:	4b55      	ldr	r3, [pc, #340]	@ (80011b4 <main+0x5a8>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e040      	b.n	80010e6 <main+0x4da>
      case 12: cal_value[1] = -2; joybut_pressed = 0; break;
 8001064:	4b52      	ldr	r3, [pc, #328]	@ (80011b0 <main+0x5a4>)
 8001066:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800106a:	805a      	strh	r2, [r3, #2]
 800106c:	4b51      	ldr	r3, [pc, #324]	@ (80011b4 <main+0x5a8>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e038      	b.n	80010e6 <main+0x4da>
      case 11: cal_value[1] = -1; joybut_pressed = 0; break;
 8001074:	4b4e      	ldr	r3, [pc, #312]	@ (80011b0 <main+0x5a4>)
 8001076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800107a:	805a      	strh	r2, [r3, #2]
 800107c:	4b4d      	ldr	r3, [pc, #308]	@ (80011b4 <main+0x5a8>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
 8001082:	e030      	b.n	80010e6 <main+0x4da>
      case 0:  cal_value[1] = 0;  joybut_pressed = 0; break;
 8001084:	4b4a      	ldr	r3, [pc, #296]	@ (80011b0 <main+0x5a4>)
 8001086:	2200      	movs	r2, #0
 8001088:	805a      	strh	r2, [r3, #2]
 800108a:	4b4a      	ldr	r3, [pc, #296]	@ (80011b4 <main+0x5a8>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e029      	b.n	80010e6 <main+0x4da>
      case 1:  cal_value[1] = 1;  joybut_pressed = 0; break;
 8001092:	4b47      	ldr	r3, [pc, #284]	@ (80011b0 <main+0x5a4>)
 8001094:	2201      	movs	r2, #1
 8001096:	805a      	strh	r2, [r3, #2]
 8001098:	4b46      	ldr	r3, [pc, #280]	@ (80011b4 <main+0x5a8>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e022      	b.n	80010e6 <main+0x4da>
      case 2:  cal_value[1] = 2;  joybut_pressed = 0; break;
 80010a0:	4b43      	ldr	r3, [pc, #268]	@ (80011b0 <main+0x5a4>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	805a      	strh	r2, [r3, #2]
 80010a6:	4b43      	ldr	r3, [pc, #268]	@ (80011b4 <main+0x5a8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	e01b      	b.n	80010e6 <main+0x4da>
      case 3:  cal_value[1] = 3;  joybut_pressed = 0; break;
 80010ae:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <main+0x5a4>)
 80010b0:	2203      	movs	r2, #3
 80010b2:	805a      	strh	r2, [r3, #2]
 80010b4:	4b3f      	ldr	r3, [pc, #252]	@ (80011b4 <main+0x5a8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e014      	b.n	80010e6 <main+0x4da>
      case 4:  cal_value[1] = 4;  joybut_pressed = 0; break;
 80010bc:	4b3c      	ldr	r3, [pc, #240]	@ (80011b0 <main+0x5a4>)
 80010be:	2204      	movs	r2, #4
 80010c0:	805a      	strh	r2, [r3, #2]
 80010c2:	4b3c      	ldr	r3, [pc, #240]	@ (80011b4 <main+0x5a8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e00d      	b.n	80010e6 <main+0x4da>
      case 5:  cal_value[1] = 5;  joybut_pressed = 0; break;
 80010ca:	4b39      	ldr	r3, [pc, #228]	@ (80011b0 <main+0x5a4>)
 80010cc:	2205      	movs	r2, #5
 80010ce:	805a      	strh	r2, [r3, #2]
 80010d0:	4b38      	ldr	r3, [pc, #224]	@ (80011b4 <main+0x5a8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e006      	b.n	80010e6 <main+0x4da>
      default: cal_value[1] = 0;  joybut_pressed = 0; break;
 80010d8:	4b35      	ldr	r3, [pc, #212]	@ (80011b0 <main+0x5a4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	805a      	strh	r2, [r3, #2]
 80010de:	4b35      	ldr	r3, [pc, #212]	@ (80011b4 <main+0x5a8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	bf00      	nop
  }

  // Display calibrated values
  sprintf(buff, "%3d", cal_value[0]);
 80010e6:	4b32      	ldr	r3, [pc, #200]	@ (80011b0 <main+0x5a4>)
 80010e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4933      	ldr	r1, [pc, #204]	@ (80011bc <main+0x5b0>)
 80010f0:	4833      	ldr	r0, [pc, #204]	@ (80011c0 <main+0x5b4>)
 80010f2:	f002 f86d 	bl	80031d0 <siprintf>
  LCD_DrawString(100, 60, (uint8_t *)buff);
 80010f6:	4a32      	ldr	r2, [pc, #200]	@ (80011c0 <main+0x5b4>)
 80010f8:	213c      	movs	r1, #60	@ 0x3c
 80010fa:	2064      	movs	r0, #100	@ 0x64
 80010fc:	f7ff fd2c 	bl	8000b58 <LCD_DrawString>

  sprintf(buff, "%3d", cal_value[1]);
 8001100:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <main+0x5a4>)
 8001102:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001106:	461a      	mov	r2, r3
 8001108:	492c      	ldr	r1, [pc, #176]	@ (80011bc <main+0x5b0>)
 800110a:	482d      	ldr	r0, [pc, #180]	@ (80011c0 <main+0x5b4>)
 800110c:	f002 f860 	bl	80031d0 <siprintf>
  LCD_DrawString(160, 60, (uint8_t *)buff);
 8001110:	4a2b      	ldr	r2, [pc, #172]	@ (80011c0 <main+0x5b4>)
 8001112:	213c      	movs	r1, #60	@ 0x3c
 8001114:	20a0      	movs	r0, #160	@ 0xa0
 8001116:	f7ff fd1f 	bl	8000b58 <LCD_DrawString>

  sprintf(buff, "B:%3d", Data[2]);
 800111a:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <main+0x5ac>)
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	461a      	mov	r2, r3
 8001120:	4928      	ldr	r1, [pc, #160]	@ (80011c4 <main+0x5b8>)
 8001122:	4827      	ldr	r0, [pc, #156]	@ (80011c0 <main+0x5b4>)
 8001124:	f002 f854 	bl	80031d0 <siprintf>
  LCD_DrawString(20, 120, (uint8_t *)buff);
 8001128:	4a25      	ldr	r2, [pc, #148]	@ (80011c0 <main+0x5b4>)
 800112a:	2178      	movs	r1, #120	@ 0x78
 800112c:	2014      	movs	r0, #20
 800112e:	f7ff fd13 	bl	8000b58 <LCD_DrawString>

  sprintf(buff, "joybut:%3d", joybut_pressed);
 8001132:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <main+0x5a8>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	4923      	ldr	r1, [pc, #140]	@ (80011c8 <main+0x5bc>)
 800113a:	4821      	ldr	r0, [pc, #132]	@ (80011c0 <main+0x5b4>)
 800113c:	f002 f848 	bl	80031d0 <siprintf>
  LCD_DrawString(20, 90, (uint8_t *)buff);
 8001140:	4a1f      	ldr	r2, [pc, #124]	@ (80011c0 <main+0x5b4>)
 8001142:	215a      	movs	r1, #90	@ 0x5a
 8001144:	2014      	movs	r0, #20
 8001146:	f7ff fd07 	bl	8000b58 <LCD_DrawString>

  HAL_Delay(50);
 800114a:	2032      	movs	r0, #50	@ 0x32
 800114c:	f000 fd40 	bl	8001bd0 <HAL_Delay>


  if(Data[2] == 3){
 8001150:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <main+0x5ac>)
 8001152:	789b      	ldrb	r3, [r3, #2]
 8001154:	2b03      	cmp	r3, #3
 8001156:	d11b      	bne.n	8001190 <main+0x584>
    if (Ov7725_vsync == 2)
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <main+0x5c0>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d116      	bne.n	8001190 <main+0x584>
	{
	  FIFO_PREPARE;
 8001162:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <main+0x5c4>)
 8001164:	2204      	movs	r2, #4
 8001166:	615a      	str	r2, [r3, #20]
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <main+0x5c8>)
 800116a:	2220      	movs	r2, #32
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <main+0x5c8>)
 8001170:	2220      	movs	r2, #32
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <main+0x5c4>)
 8001176:	2204      	movs	r2, #4
 8001178:	611a      	str	r2, [r3, #16]
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <main+0x5c8>)
 800117c:	2220      	movs	r2, #32
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <main+0x5c8>)
 8001182:	2220      	movs	r2, #32
 8001184:	611a      	str	r2, [r3, #16]
	  ImagDisp();			
 8001186:	f7ff f895 	bl	80002b4 <ImagDisp>
	  Ov7725_vsync = 0;
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <main+0x5c0>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
	}
  }


  //Handle_USART1_Request();                                                                  // to f4
    send_normal_data();
 8001190:	f000 fa0e 	bl	80015b0 <send_normal_data>
    HAL_Delay(100); // Send normal data every 100ms (adjust as needed)
 8001194:	2064      	movs	r0, #100	@ 0x64
 8001196:	f000 fd1b 	bl	8001bd0 <HAL_Delay>

    if (Data[2] == 3) 
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <main+0x5ac>)
 800119c:	789b      	ldrb	r3, [r3, #2]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	f47f ad62 	bne.w	8000c68 <main+0x5c>
    {
      send_photo();
 80011a4:	f000 fa2a 	bl	80015fc <send_photo>
      HAL_Delay(100);
 80011a8:	2064      	movs	r0, #100	@ 0x64
 80011aa:	f000 fd11 	bl	8001bd0 <HAL_Delay>
  {
 80011ae:	e55b      	b.n	8000c68 <main+0x5c>
 80011b0:	200001ec 	.word	0x200001ec
 80011b4:	20000213 	.word	0x20000213
 80011b8:	20000210 	.word	0x20000210
 80011bc:	08003b80 	.word	0x08003b80
 80011c0:	200001f0 	.word	0x200001f0
 80011c4:	08003b84 	.word	0x08003b84
 80011c8:	08003b8c 	.word	0x08003b8c
 80011cc:	20000214 	.word	0x20000214
 80011d0:	40010800 	.word	0x40010800
 80011d4:	40011000 	.word	0x40011000

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b090      	sub	sp, #64	@ 0x40
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	2228      	movs	r2, #40	@ 0x28
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 f812 	bl	8003210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001202:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120c:	2302      	movs	r3, #2
 800120e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001210:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001214:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001216:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800121a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121c:	f107 0318 	add.w	r3, r7, #24
 8001220:	4618      	mov	r0, r3
 8001222:	f000 ffed 	bl	8002200 <HAL_RCC_OscConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800122c:	f000 fa82 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001230:	230f      	movs	r3, #15
 8001232:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001234:	2302      	movs	r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800123c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2102      	movs	r1, #2
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fa5a 	bl	8002704 <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001256:	f000 fa6d 	bl	8001734 <Error_Handler>
  }
}
 800125a:	bf00      	nop
 800125c:	3740      	adds	r7, #64	@ 0x40
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 800126a:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <MX_USART1_UART_Init+0x50>)
 800126c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 800129c:	f001 fc0d 	bl	8002aba <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012a6:	f000 fa45 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000114 	.word	0x20000114
 80012b4:	40013800 	.word	0x40013800

080012b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <MX_USART3_UART_Init+0x50>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012f0:	f001 fbe3 	bl	8002aba <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012fa:	f000 fa1b 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000015c 	.word	0x2000015c
 8001308:	40004800 	.word	0x40004800

0800130c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	@ 0x28
 8001310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001320:	4b6a      	ldr	r3, [pc, #424]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a69      	ldr	r2, [pc, #420]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 8001326:	f043 0310 	orr.w	r3, r3, #16
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b67      	ldr	r3, [pc, #412]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b64      	ldr	r3, [pc, #400]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a63      	ldr	r2, [pc, #396]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b61      	ldr	r3, [pc, #388]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b5e      	ldr	r3, [pc, #376]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a5d      	ldr	r2, [pc, #372]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b5b      	ldr	r3, [pc, #364]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001368:	4b58      	ldr	r3, [pc, #352]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a57      	ldr	r2, [pc, #348]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 800136e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b55      	ldr	r3, [pc, #340]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	4b52      	ldr	r3, [pc, #328]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a51      	ldr	r2, [pc, #324]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 8001386:	f043 0320 	orr.w	r3, r3, #32
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b4f      	ldr	r3, [pc, #316]	@ (80014cc <MX_GPIO_Init+0x1c0>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	210c      	movs	r1, #12
 800139c:	484c      	ldr	r0, [pc, #304]	@ (80014d0 <MX_GPIO_Init+0x1c4>)
 800139e:	f000 fef4 	bl	800218a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	21f0      	movs	r1, #240	@ 0xf0
 80013a6:	484b      	ldr	r0, [pc, #300]	@ (80014d4 <MX_GPIO_Init+0x1c8>)
 80013a8:	f000 feef 	bl	800218a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2101      	movs	r1, #1
 80013b0:	4849      	ldr	r0, [pc, #292]	@ (80014d8 <MX_GPIO_Init+0x1cc>)
 80013b2:	f000 feea 	bl	800218a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f241 0108 	movw	r1, #4104	@ 0x1008
 80013bc:	4847      	ldr	r0, [pc, #284]	@ (80014dc <MX_GPIO_Init+0x1d0>)
 80013be:	f000 fee4 	bl	800218a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2120      	movs	r1, #32
 80013c6:	4844      	ldr	r0, [pc, #272]	@ (80014d8 <MX_GPIO_Init+0x1cc>)
 80013c8:	f000 fedf 	bl	800218a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2102      	movs	r1, #2
 80013d0:	4843      	ldr	r0, [pc, #268]	@ (80014e0 <MX_GPIO_Init+0x1d4>)
 80013d2:	f000 feda 	bl	800218a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013d6:	2308      	movs	r3, #8
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013da:	4b42      	ldr	r3, [pc, #264]	@ (80014e4 <MX_GPIO_Init+0x1d8>)
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 0318 	add.w	r3, r7, #24
 80013e6:	4619      	mov	r1, r3
 80013e8:	483a      	ldr	r0, [pc, #232]	@ (80014d4 <MX_GPIO_Init+0x1c8>)
 80013ea:	f000 fd23 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ee:	230c      	movs	r3, #12
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0318 	add.w	r3, r7, #24
 8001402:	4619      	mov	r1, r3
 8001404:	4832      	ldr	r0, [pc, #200]	@ (80014d0 <MX_GPIO_Init+0x1c4>)
 8001406:	f000 fd15 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800140a:	2330      	movs	r3, #48	@ 0x30
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 0318 	add.w	r3, r7, #24
 800141e:	4619      	mov	r1, r3
 8001420:	482c      	ldr	r0, [pc, #176]	@ (80014d4 <MX_GPIO_Init+0x1c8>)
 8001422:	f000 fd07 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8001426:	2321      	movs	r3, #33	@ 0x21
 8001428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	4619      	mov	r1, r3
 800143c:	4826      	ldr	r0, [pc, #152]	@ (80014d8 <MX_GPIO_Init+0x1cc>)
 800143e:	f000 fcf9 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001442:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8001446:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4619      	mov	r1, r3
 8001456:	4820      	ldr	r0, [pc, #128]	@ (80014d8 <MX_GPIO_Init+0x1cc>)
 8001458:	f000 fcec 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 800145c:	f241 0308 	movw	r3, #4104	@ 0x1008
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146e:	f107 0318 	add.w	r3, r7, #24
 8001472:	4619      	mov	r1, r3
 8001474:	4819      	ldr	r0, [pc, #100]	@ (80014dc <MX_GPIO_Init+0x1d0>)
 8001476:	f000 fcdd 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800147a:	23c0      	movs	r3, #192	@ 0xc0
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800147e:	2311      	movs	r3, #17
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148a:	f107 0318 	add.w	r3, r7, #24
 800148e:	4619      	mov	r1, r3
 8001490:	4810      	ldr	r0, [pc, #64]	@ (80014d4 <MX_GPIO_Init+0x1c8>)
 8001492:	f000 fccf 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001496:	2302      	movs	r3, #2
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <MX_GPIO_Init+0x1d4>)
 80014ae:	f000 fcc1 	bl	8001e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2009      	movs	r0, #9
 80014b8:	f000 fc85 	bl	8001dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014bc:	2009      	movs	r0, #9
 80014be:	f000 fc9e 	bl	8001dfe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	@ 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010800 	.word	0x40010800
 80014d4:	40011000 	.word	0x40011000
 80014d8:	40010c00 	.word	0x40010c00
 80014dc:	40011400 	.word	0x40011400
 80014e0:	40011800 	.word	0x40011800
 80014e4:	10210000 	.word	0x10210000

080014e8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	615a      	str	r2, [r3, #20]
 80014fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001500:	4b28      	ldr	r3, [pc, #160]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 8001502:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001506:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001508:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 800150a:	4a27      	ldr	r2, [pc, #156]	@ (80015a8 <MX_FSMC_Init+0xc0>)
 800150c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800150e:	4b25      	ldr	r3, [pc, #148]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001514:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800151a:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001520:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 8001522:	2210      	movs	r2, #16
 8001524:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001526:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800152c:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001532:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800153e:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 8001540:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001546:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 8001548:	2200      	movs	r2, #0
 800154a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800154c:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 800154e:	2200      	movs	r2, #0
 8001550:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001552:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 8001554:	2200      	movs	r2, #0
 8001556:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 800155a:	2200      	movs	r2, #0
 800155c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800155e:	230f      	movs	r3, #15
 8001560:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001562:	230f      	movs	r3, #15
 8001564:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001566:	23ff      	movs	r3, #255	@ 0xff
 8001568:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800156a:	230f      	movs	r3, #15
 800156c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800156e:	2310      	movs	r3, #16
 8001570:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001572:	2311      	movs	r3, #17
 8001574:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	4808      	ldr	r0, [pc, #32]	@ (80015a4 <MX_FSMC_Init+0xbc>)
 8001582:	f001 fa4d 	bl	8002a20 <HAL_SRAM_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 800158c:	f000 f8d2 	bl	8001734 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_FSMC_Init+0xc4>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	4a05      	ldr	r2, [pc, #20]	@ (80015ac <MX_FSMC_Init+0xc4>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800159a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200001a4 	.word	0x200001a4
 80015a8:	a0000104 	.word	0xa0000104
 80015ac:	40010000 	.word	0x40010000

080015b0 <send_normal_data>:
  }
}
*/

void send_normal_data(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
    uint8_t tx_buf[4];
    tx_buf[0] = (uint8_t)cal_value[0];
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <send_normal_data+0x3c>)
 80015b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	713b      	strb	r3, [r7, #4]
    tx_buf[1] = (uint8_t)cal_value[1];
 80015c0:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <send_normal_data+0x3c>)
 80015c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	717b      	strb	r3, [r7, #5]
    tx_buf[2] = Data[2];
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <send_normal_data+0x40>)
 80015cc:	789b      	ldrb	r3, [r3, #2]
 80015ce:	71bb      	strb	r3, [r7, #6]
    tx_buf[3] = (uint8_t)joybut_pressed;
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <send_normal_data+0x44>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	71fb      	strb	r3, [r7, #7]
    //tx_buf[4] = 0x5A; // stop ender
    HAL_UART_Transmit(&huart1, tx_buf, 4, 100);		//5
 80015d6:	1d39      	adds	r1, r7, #4
 80015d8:	2364      	movs	r3, #100	@ 0x64
 80015da:	2204      	movs	r2, #4
 80015dc:	4806      	ldr	r0, [pc, #24]	@ (80015f8 <send_normal_data+0x48>)
 80015de:	f001 fabc 	bl	8002b5a <HAL_UART_Transmit>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200001ec 	.word	0x200001ec
 80015f0:	20000210 	.word	0x20000210
 80015f4:	20000213 	.word	0x20000213
 80015f8:	20000114 	.word	0x20000114

080015fc <send_photo>:

void send_photo(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8001602:	af00      	add	r7, sp, #0
    // Send a header first
    uint8_t header[2] = {0xB5, 0xAA};
 8001604:	f64a 23b5 	movw	r3, #43701	@ 0xaab5
 8001608:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208
    HAL_UART_Transmit(&huart1, header, 2, 100);
 800160c:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8001610:	2364      	movs	r3, #100	@ 0x64
 8001612:	2202      	movs	r2, #2
 8001614:	4843      	ldr	r0, [pc, #268]	@ (8001724 <send_photo+0x128>)
 8001616:	f001 faa0 	bl	8002b5a <HAL_UART_Transmit>

    FIFO_PREPARE;
 800161a:	4b43      	ldr	r3, [pc, #268]	@ (8001728 <send_photo+0x12c>)
 800161c:	2204      	movs	r2, #4
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	4b42      	ldr	r3, [pc, #264]	@ (800172c <send_photo+0x130>)
 8001622:	2220      	movs	r2, #32
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	4b41      	ldr	r3, [pc, #260]	@ (800172c <send_photo+0x130>)
 8001628:	2220      	movs	r2, #32
 800162a:	611a      	str	r2, [r3, #16]
 800162c:	4b3e      	ldr	r3, [pc, #248]	@ (8001728 <send_photo+0x12c>)
 800162e:	2204      	movs	r2, #4
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <send_photo+0x130>)
 8001634:	2220      	movs	r2, #32
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <send_photo+0x130>)
 800163a:	2220      	movs	r2, #32
 800163c:	611a      	str	r2, [r3, #16]

    uint8_t block[BLOCK_SIZE];
    uint32_t sent = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

    while (sent < PHOTO_SIZE) {
 8001644:	e056      	b.n	80016f4 <send_photo+0xf8>
        uint32_t to_send = ((PHOTO_SIZE - sent) > BLOCK_SIZE) ? BLOCK_SIZE : (PHOTO_SIZE - sent);
 8001646:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800164a:	f5c3 3396 	rsb	r3, r3, #76800	@ 0x12c00
 800164e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001652:	bf28      	it	cs
 8001654:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8001658:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
        for (uint32_t i = 0; i < to_send; i++) {
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001662:	e030      	b.n	80016c6 <send_photo+0xca>
            uint16_t Camera_Data;
            READ_FIFO_PIXEL(Camera_Data);
 8001664:	2300      	movs	r3, #0
 8001666:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
 800166a:	4b30      	ldr	r3, [pc, #192]	@ (800172c <send_photo+0x130>)
 800166c:	2220      	movs	r2, #32
 800166e:	615a      	str	r2, [r3, #20]
 8001670:	4b2f      	ldr	r3, [pc, #188]	@ (8001730 <send_photo+0x134>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	b29b      	uxth	r3, r3
 8001676:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800167a:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
 800167e:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <send_photo+0x130>)
 8001680:	2220      	movs	r2, #32
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	4b29      	ldr	r3, [pc, #164]	@ (800172c <send_photo+0x130>)
 8001686:	2220      	movs	r2, #32
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	4b29      	ldr	r3, [pc, #164]	@ (8001730 <send_photo+0x134>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	b2db      	uxtb	r3, r3
 8001692:	b29a      	uxth	r2, r3
 8001694:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8001698:	4313      	orrs	r3, r2
 800169a:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
 800169e:	4b23      	ldr	r3, [pc, #140]	@ (800172c <send_photo+0x130>)
 80016a0:	2220      	movs	r2, #32
 80016a2:	611a      	str	r2, [r3, #16]
            block[i] = (uint8_t)(Camera_Data & 0xFF);
 80016a4:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 80016a8:	b2d9      	uxtb	r1, r3
 80016aa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80016ae:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80016b2:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80016b6:	4413      	add	r3, r2
 80016b8:	460a      	mov	r2, r1
 80016ba:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < to_send; i++) {
 80016bc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80016c0:	3301      	adds	r3, #1
 80016c2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80016c6:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80016ca:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d3c8      	bcc.n	8001664 <send_photo+0x68>
        }
        HAL_UART_Transmit(&huart1, block, to_send, 1000);
 80016d2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	f107 0108 	add.w	r1, r7, #8
 80016dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e0:	4810      	ldr	r0, [pc, #64]	@ (8001724 <send_photo+0x128>)
 80016e2:	f001 fa3a 	bl	8002b5a <HAL_UART_Transmit>
        sent += to_send;
 80016e6:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80016ea:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80016ee:	4413      	add	r3, r2
 80016f0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    while (sent < PHOTO_SIZE) {
 80016f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80016f8:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80016fc:	d3a3      	bcc.n	8001646 <send_photo+0x4a>
    }

    // Send a footer
    uint8_t footer[2] = {0xAA, 0xB5};
 80016fe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001702:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001706:	f24b 52aa 	movw	r2, #46506	@ 0xb5aa
 800170a:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, footer, 2, 100);
 800170c:	1d39      	adds	r1, r7, #4
 800170e:	2364      	movs	r3, #100	@ 0x64
 8001710:	2202      	movs	r2, #2
 8001712:	4804      	ldr	r0, [pc, #16]	@ (8001724 <send_photo+0x128>)
 8001714:	f001 fa21 	bl	8002b5a <HAL_UART_Transmit>
}
 8001718:	bf00      	nop
 800171a:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000114 	.word	0x20000114
 8001728:	40010800 	.word	0x40010800
 800172c:	40011000 	.word	0x40011000
 8001730:	40010c00 	.word	0x40010c00

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <HAL_MspInit+0x5c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a14      	ldr	r2, [pc, #80]	@ (800179c <HAL_MspInit+0x5c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_MspInit+0x5c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <HAL_MspInit+0x5c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a0e      	ldr	r2, [pc, #56]	@ (800179c <HAL_MspInit+0x5c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <HAL_MspInit+0x5c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001776:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <HAL_MspInit+0x60>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <HAL_MspInit+0x60>)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	@ 0x30
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a41      	ldr	r2, [pc, #260]	@ (80018c4 <HAL_UART_MspInit+0x120>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d132      	bne.n	800182a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c4:	4b40      	ldr	r3, [pc, #256]	@ (80018c8 <HAL_UART_MspInit+0x124>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a3f      	ldr	r2, [pc, #252]	@ (80018c8 <HAL_UART_MspInit+0x124>)
 80017ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b3d      	ldr	r3, [pc, #244]	@ (80018c8 <HAL_UART_MspInit+0x124>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b3a      	ldr	r3, [pc, #232]	@ (80018c8 <HAL_UART_MspInit+0x124>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a39      	ldr	r2, [pc, #228]	@ (80018c8 <HAL_UART_MspInit+0x124>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b37      	ldr	r3, [pc, #220]	@ (80018c8 <HAL_UART_MspInit+0x124>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	4830      	ldr	r0, [pc, #192]	@ (80018cc <HAL_UART_MspInit+0x128>)
 800180a:	f000 fb13 	bl	8001e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800180e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	482a      	ldr	r0, [pc, #168]	@ (80018cc <HAL_UART_MspInit+0x128>)
 8001824:	f000 fb06 	bl	8001e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001828:	e048      	b.n	80018bc <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a28      	ldr	r2, [pc, #160]	@ (80018d0 <HAL_UART_MspInit+0x12c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d143      	bne.n	80018bc <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001834:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <HAL_UART_MspInit+0x124>)
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	4a23      	ldr	r2, [pc, #140]	@ (80018c8 <HAL_UART_MspInit+0x124>)
 800183a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800183e:	61d3      	str	r3, [r2, #28]
 8001840:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <HAL_UART_MspInit+0x124>)
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800184c:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <HAL_UART_MspInit+0x124>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a1d      	ldr	r2, [pc, #116]	@ (80018c8 <HAL_UART_MspInit+0x124>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <HAL_UART_MspInit+0x124>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001864:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	4816      	ldr	r0, [pc, #88]	@ (80018d4 <HAL_UART_MspInit+0x130>)
 800187a:	f000 fadb 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800187e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	4810      	ldr	r0, [pc, #64]	@ (80018d4 <HAL_UART_MspInit+0x130>)
 8001894:	f000 face 	bl	8001e34 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800189e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80018ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b0:	f043 0310 	orr.w	r3, r3, #16
 80018b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018b6:	4a08      	ldr	r2, [pc, #32]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 80018b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ba:	6053      	str	r3, [r2, #4]
}
 80018bc:	bf00      	nop
 80018be:	3730      	adds	r7, #48	@ 0x30
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010800 	.word	0x40010800
 80018d0:	40004800 	.word	0x40004800
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40010000 	.word	0x40010000

080018dc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80018f0:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <HAL_FSMC_MspInit+0x78>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d129      	bne.n	800194c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80018f8:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <HAL_FSMC_MspInit+0x78>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80018fe:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <HAL_FSMC_MspInit+0x7c>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	4a15      	ldr	r2, [pc, #84]	@ (8001958 <HAL_FSMC_MspInit+0x7c>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001908:	6153      	str	r3, [r2, #20]
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <HAL_FSMC_MspInit+0x7c>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001916:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800191a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4619      	mov	r1, r3
 800192a:	480c      	ldr	r0, [pc, #48]	@ (800195c <HAL_FSMC_MspInit+0x80>)
 800192c:	f000 fa82 	bl	8001e34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001930:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8001934:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	4619      	mov	r1, r3
 8001944:	4806      	ldr	r0, [pc, #24]	@ (8001960 <HAL_FSMC_MspInit+0x84>)
 8001946:	f000 fa75 	bl	8001e34 <HAL_GPIO_Init>
 800194a:	e000      	b.n	800194e <HAL_FSMC_MspInit+0x72>
    return;
 800194c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000218 	.word	0x20000218
 8001958:	40021000 	.word	0x40021000
 800195c:	40011800 	.word	0x40011800
 8001960:	40011400 	.word	0x40011400

08001964 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800196c:	f7ff ffb6 	bl	80018dc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <MemManage_Handler+0x4>

08001994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019cc:	f000 f8e4 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <EXTI3_IRQHandler+0x64>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d023      	beq.n	8001a2c <EXTI3_IRQHandler+0x58>
  {
		if( Ov7725_vsync == 0 )
 80019e4:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <EXTI3_IRQHandler+0x68>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10f      	bne.n	8001a0c <EXTI3_IRQHandler+0x38>
    {
				FIFO_WRST_L(); 	                      
 80019ec:	4b14      	ldr	r3, [pc, #80]	@ (8001a40 <EXTI3_IRQHandler+0x6c>)
 80019ee:	2210      	movs	r2, #16
 80019f0:	615a      	str	r2, [r3, #20]
        FIFO_WE_H();	                      
 80019f2:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <EXTI3_IRQHandler+0x70>)
 80019f4:	2208      	movs	r2, #8
 80019f6:	611a      	str	r2, [r3, #16]
            
        Ov7725_vsync = 1;	   	
 80019f8:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <EXTI3_IRQHandler+0x68>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
        FIFO_WE_H();                         
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <EXTI3_IRQHandler+0x70>)
 8001a00:	2208      	movs	r2, #8
 8001a02:	611a      	str	r2, [r3, #16]
        FIFO_WRST_H();                     
 8001a04:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <EXTI3_IRQHandler+0x6c>)
 8001a06:	2210      	movs	r2, #16
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	e009      	b.n	8001a20 <EXTI3_IRQHandler+0x4c>
    }
    else if( Ov7725_vsync == 1 )
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <EXTI3_IRQHandler+0x68>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <EXTI3_IRQHandler+0x4c>
    {
        FIFO_WE_L();                       
 8001a14:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <EXTI3_IRQHandler+0x70>)
 8001a16:	2208      	movs	r2, #8
 8001a18:	615a      	str	r2, [r3, #20]
        Ov7725_vsync = 2;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <EXTI3_IRQHandler+0x68>)
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	701a      	strb	r2, [r3, #0]
    }        
				
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <EXTI3_IRQHandler+0x64>)
 8001a22:	2208      	movs	r2, #8
 8001a24:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8001a26:	2008      	movs	r0, #8
 8001a28:	f000 fbe0 	bl	80021ec <HAL_GPIO_EXTI_Callback>
  }

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001a2c:	2008      	movs	r0, #8
 8001a2e:	f000 fbc5 	bl	80021bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40010400 	.word	0x40010400
 8001a3c:	20000214 	.word	0x20000214
 8001a40:	40011000 	.word	0x40011000
 8001a44:	40011400 	.word	0x40011400

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	@ (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f001 fbd2 	bl	8003220 <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	220c      	movs	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20010000 	.word	0x20010000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	2000021c 	.word	0x2000021c
 8001ab0:	20000370 	.word	0x20000370

08001ab4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ac0:	f7ff fff8 	bl	8001ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac4:	480b      	ldr	r0, [pc, #44]	@ (8001af4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ac6:	490c      	ldr	r1, [pc, #48]	@ (8001af8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8001afc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a09      	ldr	r2, [pc, #36]	@ (8001b00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001adc:	4c09      	ldr	r4, [pc, #36]	@ (8001b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aea:	f001 fb9f 	bl	800322c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aee:	f7ff f88d 	bl	8000c0c <main>
  bx lr
 8001af2:	4770      	bx	lr
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001afc:	080041f0 	.word	0x080041f0
  ldr r2, =_sbss
 8001b00:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001b04:	2000036c 	.word	0x2000036c

08001b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_2_IRQHandler>
	...

08001b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_Init+0x28>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <HAL_Init+0x28>)
 8001b16:	f043 0310 	orr.w	r3, r3, #16
 8001b1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 f947 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f808 	bl	8001b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff fe0a 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_InitTick+0x54>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_InitTick+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f95f 	bl	8001e1a <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b74:	f000 f927 	bl	8001dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	@ (8001b94 <HAL_InitTick+0x5c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2000009c 	.word	0x2000009c
 8001b90:	200000a4 	.word	0x200000a4
 8001b94:	200000a0 	.word	0x200000a0

08001b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <HAL_IncTick+0x1c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_IncTick+0x20>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a03      	ldr	r2, [pc, #12]	@ (8001bb8 <HAL_IncTick+0x20>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	200000a4 	.word	0x200000a4
 8001bb8:	20000220 	.word	0x20000220

08001bbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	@ (8001bcc <HAL_GetTick+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	20000220 	.word	0x20000220

08001bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff fff0 	bl	8001bbc <HAL_GetTick>
 8001bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001be8:	d005      	beq.n	8001bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <HAL_Delay+0x44>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf6:	bf00      	nop
 8001bf8:	f7ff ffe0 	bl	8001bbc <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d8f7      	bhi.n	8001bf8 <HAL_Delay+0x28>
  {
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200000a4 	.word	0x200000a4

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	@ (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0b      	blt.n	8001ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4906      	ldr	r1, [pc, #24]	@ (8001cb0 <__NVIC_EnableIRQ+0x34>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	@ (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	@ (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	@ 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d82:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d90:	f7ff ff90 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d94:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff2d 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff42 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff90 	bl	8001d08 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5f 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff35 	bl	8001c7c <__NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffa2 	bl	8001d6c <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b08b      	sub	sp, #44	@ 0x2c
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e46:	e179      	b.n	800213c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 8168 	bne.w	8002136 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4a96      	ldr	r2, [pc, #600]	@ (80020c4 <HAL_GPIO_Init+0x290>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d05e      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e70:	4a94      	ldr	r2, [pc, #592]	@ (80020c4 <HAL_GPIO_Init+0x290>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d875      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e76:	4a94      	ldr	r2, [pc, #592]	@ (80020c8 <HAL_GPIO_Init+0x294>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d058      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e7c:	4a92      	ldr	r2, [pc, #584]	@ (80020c8 <HAL_GPIO_Init+0x294>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d86f      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e82:	4a92      	ldr	r2, [pc, #584]	@ (80020cc <HAL_GPIO_Init+0x298>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d052      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e88:	4a90      	ldr	r2, [pc, #576]	@ (80020cc <HAL_GPIO_Init+0x298>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d869      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e8e:	4a90      	ldr	r2, [pc, #576]	@ (80020d0 <HAL_GPIO_Init+0x29c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d04c      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e94:	4a8e      	ldr	r2, [pc, #568]	@ (80020d0 <HAL_GPIO_Init+0x29c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d863      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e9a:	4a8e      	ldr	r2, [pc, #568]	@ (80020d4 <HAL_GPIO_Init+0x2a0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d046      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001ea0:	4a8c      	ldr	r2, [pc, #560]	@ (80020d4 <HAL_GPIO_Init+0x2a0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d85d      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001ea6:	2b12      	cmp	r3, #18
 8001ea8:	d82a      	bhi.n	8001f00 <HAL_GPIO_Init+0xcc>
 8001eaa:	2b12      	cmp	r3, #18
 8001eac:	d859      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001eae:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb4 <HAL_GPIO_Init+0x80>)
 8001eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb4:	08001f2f 	.word	0x08001f2f
 8001eb8:	08001f09 	.word	0x08001f09
 8001ebc:	08001f1b 	.word	0x08001f1b
 8001ec0:	08001f5d 	.word	0x08001f5d
 8001ec4:	08001f63 	.word	0x08001f63
 8001ec8:	08001f63 	.word	0x08001f63
 8001ecc:	08001f63 	.word	0x08001f63
 8001ed0:	08001f63 	.word	0x08001f63
 8001ed4:	08001f63 	.word	0x08001f63
 8001ed8:	08001f63 	.word	0x08001f63
 8001edc:	08001f63 	.word	0x08001f63
 8001ee0:	08001f63 	.word	0x08001f63
 8001ee4:	08001f63 	.word	0x08001f63
 8001ee8:	08001f63 	.word	0x08001f63
 8001eec:	08001f63 	.word	0x08001f63
 8001ef0:	08001f63 	.word	0x08001f63
 8001ef4:	08001f63 	.word	0x08001f63
 8001ef8:	08001f11 	.word	0x08001f11
 8001efc:	08001f25 	.word	0x08001f25
 8001f00:	4a75      	ldr	r2, [pc, #468]	@ (80020d8 <HAL_GPIO_Init+0x2a4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f06:	e02c      	b.n	8001f62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	623b      	str	r3, [r7, #32]
          break;
 8001f0e:	e029      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	3304      	adds	r3, #4
 8001f16:	623b      	str	r3, [r7, #32]
          break;
 8001f18:	e024      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	3308      	adds	r3, #8
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e01f      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	330c      	adds	r3, #12
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e01a      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f36:	2304      	movs	r3, #4
 8001f38:	623b      	str	r3, [r7, #32]
          break;
 8001f3a:	e013      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f44:	2308      	movs	r3, #8
 8001f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	611a      	str	r2, [r3, #16]
          break;
 8001f4e:	e009      	b.n	8001f64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f50:	2308      	movs	r3, #8
 8001f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	615a      	str	r2, [r3, #20]
          break;
 8001f5a:	e003      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e000      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          break;
 8001f62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2bff      	cmp	r3, #255	@ 0xff
 8001f68:	d801      	bhi.n	8001f6e <HAL_GPIO_Init+0x13a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	e001      	b.n	8001f72 <HAL_GPIO_Init+0x13e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3304      	adds	r3, #4
 8001f72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2bff      	cmp	r3, #255	@ 0xff
 8001f78:	d802      	bhi.n	8001f80 <HAL_GPIO_Init+0x14c>
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	e002      	b.n	8001f86 <HAL_GPIO_Init+0x152>
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	3b08      	subs	r3, #8
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	401a      	ands	r2, r3
 8001f98:	6a39      	ldr	r1, [r7, #32]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80c1 	beq.w	8002136 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb4:	4b49      	ldr	r3, [pc, #292]	@ (80020dc <HAL_GPIO_Init+0x2a8>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a48      	ldr	r2, [pc, #288]	@ (80020dc <HAL_GPIO_Init+0x2a8>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b46      	ldr	r3, [pc, #280]	@ (80020dc <HAL_GPIO_Init+0x2a8>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fcc:	4a44      	ldr	r2, [pc, #272]	@ (80020e0 <HAL_GPIO_Init+0x2ac>)
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80020e4 <HAL_GPIO_Init+0x2b0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d01f      	beq.n	8002038 <HAL_GPIO_Init+0x204>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3b      	ldr	r2, [pc, #236]	@ (80020e8 <HAL_GPIO_Init+0x2b4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d019      	beq.n	8002034 <HAL_GPIO_Init+0x200>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3a      	ldr	r2, [pc, #232]	@ (80020ec <HAL_GPIO_Init+0x2b8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d013      	beq.n	8002030 <HAL_GPIO_Init+0x1fc>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a39      	ldr	r2, [pc, #228]	@ (80020f0 <HAL_GPIO_Init+0x2bc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00d      	beq.n	800202c <HAL_GPIO_Init+0x1f8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a38      	ldr	r2, [pc, #224]	@ (80020f4 <HAL_GPIO_Init+0x2c0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d007      	beq.n	8002028 <HAL_GPIO_Init+0x1f4>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a37      	ldr	r2, [pc, #220]	@ (80020f8 <HAL_GPIO_Init+0x2c4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d101      	bne.n	8002024 <HAL_GPIO_Init+0x1f0>
 8002020:	2305      	movs	r3, #5
 8002022:	e00a      	b.n	800203a <HAL_GPIO_Init+0x206>
 8002024:	2306      	movs	r3, #6
 8002026:	e008      	b.n	800203a <HAL_GPIO_Init+0x206>
 8002028:	2304      	movs	r3, #4
 800202a:	e006      	b.n	800203a <HAL_GPIO_Init+0x206>
 800202c:	2303      	movs	r3, #3
 800202e:	e004      	b.n	800203a <HAL_GPIO_Init+0x206>
 8002030:	2302      	movs	r3, #2
 8002032:	e002      	b.n	800203a <HAL_GPIO_Init+0x206>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_GPIO_Init+0x206>
 8002038:	2300      	movs	r3, #0
 800203a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800203c:	f002 0203 	and.w	r2, r2, #3
 8002040:	0092      	lsls	r2, r2, #2
 8002042:	4093      	lsls	r3, r2
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800204a:	4925      	ldr	r1, [pc, #148]	@ (80020e0 <HAL_GPIO_Init+0x2ac>)
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002064:	4b25      	ldr	r3, [pc, #148]	@ (80020fc <HAL_GPIO_Init+0x2c8>)
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	4924      	ldr	r1, [pc, #144]	@ (80020fc <HAL_GPIO_Init+0x2c8>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002072:	4b22      	ldr	r3, [pc, #136]	@ (80020fc <HAL_GPIO_Init+0x2c8>)
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	43db      	mvns	r3, r3
 800207a:	4920      	ldr	r1, [pc, #128]	@ (80020fc <HAL_GPIO_Init+0x2c8>)
 800207c:	4013      	ands	r3, r2
 800207e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d006      	beq.n	800209a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800208c:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <HAL_GPIO_Init+0x2c8>)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	491a      	ldr	r1, [pc, #104]	@ (80020fc <HAL_GPIO_Init+0x2c8>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800209a:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <HAL_GPIO_Init+0x2c8>)
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	4916      	ldr	r1, [pc, #88]	@ (80020fc <HAL_GPIO_Init+0x2c8>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d025      	beq.n	8002100 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <HAL_GPIO_Init+0x2c8>)
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4910      	ldr	r1, [pc, #64]	@ (80020fc <HAL_GPIO_Init+0x2c8>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
 80020c0:	e025      	b.n	800210e <HAL_GPIO_Init+0x2da>
 80020c2:	bf00      	nop
 80020c4:	10320000 	.word	0x10320000
 80020c8:	10310000 	.word	0x10310000
 80020cc:	10220000 	.word	0x10220000
 80020d0:	10210000 	.word	0x10210000
 80020d4:	10120000 	.word	0x10120000
 80020d8:	10110000 	.word	0x10110000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010000 	.word	0x40010000
 80020e4:	40010800 	.word	0x40010800
 80020e8:	40010c00 	.word	0x40010c00
 80020ec:	40011000 	.word	0x40011000
 80020f0:	40011400 	.word	0x40011400
 80020f4:	40011800 	.word	0x40011800
 80020f8:	40011c00 	.word	0x40011c00
 80020fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002100:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <HAL_GPIO_Init+0x324>)
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	43db      	mvns	r3, r3
 8002108:	4913      	ldr	r1, [pc, #76]	@ (8002158 <HAL_GPIO_Init+0x324>)
 800210a:	4013      	ands	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800211a:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <HAL_GPIO_Init+0x324>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	490e      	ldr	r1, [pc, #56]	@ (8002158 <HAL_GPIO_Init+0x324>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]
 8002126:	e006      	b.n	8002136 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_GPIO_Init+0x324>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	43db      	mvns	r3, r3
 8002130:	4909      	ldr	r1, [pc, #36]	@ (8002158 <HAL_GPIO_Init+0x324>)
 8002132:	4013      	ands	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	3301      	adds	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	fa22 f303 	lsr.w	r3, r2, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	f47f ae7e 	bne.w	8001e48 <HAL_GPIO_Init+0x14>
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	372c      	adds	r7, #44	@ 0x2c
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40010400 	.word	0x40010400

0800215c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	887b      	ldrh	r3, [r7, #2]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e001      	b.n	800217e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	807b      	strh	r3, [r7, #2]
 8002196:	4613      	mov	r3, r2
 8002198:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800219a:	787b      	ldrb	r3, [r7, #1]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a0:	887a      	ldrh	r2, [r7, #2]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021a6:	e003      	b.n	80021b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	041a      	lsls	r2, r3, #16
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	611a      	str	r2, [r3, #16]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021c6:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021d2:	4a05      	ldr	r2, [pc, #20]	@ (80021e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f806 	bl	80021ec <HAL_GPIO_EXTI_Callback>
  }
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40010400 	.word	0x40010400

080021ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e272      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8087 	beq.w	800232e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002220:	4b92      	ldr	r3, [pc, #584]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b04      	cmp	r3, #4
 800222a:	d00c      	beq.n	8002246 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800222c:	4b8f      	ldr	r3, [pc, #572]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d112      	bne.n	800225e <HAL_RCC_OscConfig+0x5e>
 8002238:	4b8c      	ldr	r3, [pc, #560]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002244:	d10b      	bne.n	800225e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002246:	4b89      	ldr	r3, [pc, #548]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d06c      	beq.n	800232c <HAL_RCC_OscConfig+0x12c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d168      	bne.n	800232c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e24c      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x76>
 8002268:	4b80      	ldr	r3, [pc, #512]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a7f      	ldr	r2, [pc, #508]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e02e      	b.n	80022d4 <HAL_RCC_OscConfig+0xd4>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x98>
 800227e:	4b7b      	ldr	r3, [pc, #492]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a7a      	ldr	r2, [pc, #488]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 8002284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b78      	ldr	r3, [pc, #480]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a77      	ldr	r2, [pc, #476]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 8002290:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xd4>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0xbc>
 80022a2:	4b72      	ldr	r3, [pc, #456]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a71      	ldr	r2, [pc, #452]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b6f      	ldr	r3, [pc, #444]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6e      	ldr	r2, [pc, #440]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xd4>
 80022bc:	4b6b      	ldr	r3, [pc, #428]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a6a      	ldr	r2, [pc, #424]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b68      	ldr	r3, [pc, #416]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a67      	ldr	r2, [pc, #412]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fc6e 	bl	8001bbc <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff fc6a 	bl	8001bbc <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	@ 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e200      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b5d      	ldr	r3, [pc, #372]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xe4>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fc5a 	bl	8001bbc <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fc56 	bl	8001bbc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	@ 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1ec      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	4b53      	ldr	r3, [pc, #332]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x10c>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233a:	4b4c      	ldr	r3, [pc, #304]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002346:	4b49      	ldr	r3, [pc, #292]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b08      	cmp	r3, #8
 8002350:	d11c      	bne.n	800238c <HAL_RCC_OscConfig+0x18c>
 8002352:	4b46      	ldr	r3, [pc, #280]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	4b43      	ldr	r3, [pc, #268]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x176>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e1c0      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b3d      	ldr	r3, [pc, #244]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4939      	ldr	r1, [pc, #228]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	e03a      	b.n	8002402 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002394:	4b36      	ldr	r3, [pc, #216]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7ff fc0f 	bl	8001bbc <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a2:	f7ff fc0b 	bl	8001bbc <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1a1      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	4b2d      	ldr	r3, [pc, #180]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b2a      	ldr	r3, [pc, #168]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4927      	ldr	r1, [pc, #156]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b26      	ldr	r3, [pc, #152]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff fbee 	bl	8001bbc <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7ff fbea 	bl	8001bbc <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e180      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d03a      	beq.n	8002484 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d019      	beq.n	800244a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b17      	ldr	r3, [pc, #92]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7ff fbce 	bl	8001bbc <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7ff fbca 	bl	8001bbc <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e160      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <HAL_RCC_OscConfig+0x26c>)
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002442:	2001      	movs	r0, #1
 8002444:	f000 face 	bl	80029e4 <RCC_Delay>
 8002448:	e01c      	b.n	8002484 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244a:	4b0a      	ldr	r3, [pc, #40]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7ff fbb4 	bl	8001bbc <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002456:	e00f      	b.n	8002478 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7ff fbb0 	bl	8001bbc <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d908      	bls.n	8002478 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e146      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	42420000 	.word	0x42420000
 8002474:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002478:	4b92      	ldr	r3, [pc, #584]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e9      	bne.n	8002458 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80a6 	beq.w	80025de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002496:	4b8b      	ldr	r3, [pc, #556]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10d      	bne.n	80024be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	4b88      	ldr	r3, [pc, #544]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a87      	ldr	r2, [pc, #540]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	61d3      	str	r3, [r2, #28]
 80024ae:	4b85      	ldr	r3, [pc, #532]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b82      	ldr	r3, [pc, #520]	@ (80026c8 <HAL_RCC_OscConfig+0x4c8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ca:	4b7f      	ldr	r3, [pc, #508]	@ (80026c8 <HAL_RCC_OscConfig+0x4c8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a7e      	ldr	r2, [pc, #504]	@ (80026c8 <HAL_RCC_OscConfig+0x4c8>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7ff fb71 	bl	8001bbc <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7ff fb6d 	bl	8001bbc <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	@ 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e103      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b75      	ldr	r3, [pc, #468]	@ (80026c8 <HAL_RCC_OscConfig+0x4c8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x312>
 8002504:	4b6f      	ldr	r3, [pc, #444]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a6e      	ldr	r2, [pc, #440]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e02d      	b.n	800256e <HAL_RCC_OscConfig+0x36e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x334>
 800251a:	4b6a      	ldr	r3, [pc, #424]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a69      	ldr	r2, [pc, #420]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6213      	str	r3, [r2, #32]
 8002526:	4b67      	ldr	r3, [pc, #412]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a66      	ldr	r2, [pc, #408]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	e01c      	b.n	800256e <HAL_RCC_OscConfig+0x36e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d10c      	bne.n	8002556 <HAL_RCC_OscConfig+0x356>
 800253c:	4b61      	ldr	r3, [pc, #388]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4a60      	ldr	r2, [pc, #384]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	6213      	str	r3, [r2, #32]
 8002548:	4b5e      	ldr	r3, [pc, #376]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a5d      	ldr	r2, [pc, #372]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	e00b      	b.n	800256e <HAL_RCC_OscConfig+0x36e>
 8002556:	4b5b      	ldr	r3, [pc, #364]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a5a      	ldr	r2, [pc, #360]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	6213      	str	r3, [r2, #32]
 8002562:	4b58      	ldr	r3, [pc, #352]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a57      	ldr	r2, [pc, #348]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d015      	beq.n	80025a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7ff fb21 	bl	8001bbc <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7ff fb1d 	bl	8001bbc <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e0b1      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002594:	4b4b      	ldr	r3, [pc, #300]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ee      	beq.n	800257e <HAL_RCC_OscConfig+0x37e>
 80025a0:	e014      	b.n	80025cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7ff fb0b 	bl	8001bbc <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7ff fb07 	bl	8001bbc <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e09b      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c0:	4b40      	ldr	r3, [pc, #256]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1ee      	bne.n	80025aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d105      	bne.n	80025de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d2:	4b3c      	ldr	r3, [pc, #240]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a3b      	ldr	r2, [pc, #236]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8087 	beq.w	80026f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e8:	4b36      	ldr	r3, [pc, #216]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d061      	beq.n	80026b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d146      	bne.n	800268a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fc:	4b33      	ldr	r3, [pc, #204]	@ (80026cc <HAL_RCC_OscConfig+0x4cc>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7ff fadb 	bl	8001bbc <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260a:	f7ff fad7 	bl	8001bbc <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e06d      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261c:	4b29      	ldr	r3, [pc, #164]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002630:	d108      	bne.n	8002644 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002632:	4b24      	ldr	r3, [pc, #144]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	4921      	ldr	r1, [pc, #132]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002644:	4b1f      	ldr	r3, [pc, #124]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a19      	ldr	r1, [r3, #32]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	430b      	orrs	r3, r1
 8002656:	491b      	ldr	r1, [pc, #108]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800265c:	4b1b      	ldr	r3, [pc, #108]	@ (80026cc <HAL_RCC_OscConfig+0x4cc>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7ff faab 	bl	8001bbc <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266a:	f7ff faa7 	bl	8001bbc <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e03d      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800267c:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x46a>
 8002688:	e035      	b.n	80026f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268a:	4b10      	ldr	r3, [pc, #64]	@ (80026cc <HAL_RCC_OscConfig+0x4cc>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff fa94 	bl	8001bbc <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7ff fa90 	bl	8001bbc <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e026      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x498>
 80026b6:	e01e      	b.n	80026f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e019      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40007000 	.word	0x40007000
 80026cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <HAL_RCC_OscConfig+0x500>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000

08002704 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0d0      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b6a      	ldr	r3, [pc, #424]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d910      	bls.n	8002748 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b67      	ldr	r3, [pc, #412]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	4965      	ldr	r1, [pc, #404]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b63      	ldr	r3, [pc, #396]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0b8      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002760:	4b59      	ldr	r3, [pc, #356]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4a58      	ldr	r2, [pc, #352]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800276a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002778:	4b53      	ldr	r3, [pc, #332]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a52      	ldr	r2, [pc, #328]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002782:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b50      	ldr	r3, [pc, #320]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	494d      	ldr	r1, [pc, #308]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d040      	beq.n	8002824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b47      	ldr	r3, [pc, #284]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d115      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c2:	4b41      	ldr	r3, [pc, #260]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e073      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	4b3d      	ldr	r3, [pc, #244]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06b      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e2:	4b39      	ldr	r3, [pc, #228]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f023 0203 	bic.w	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4936      	ldr	r1, [pc, #216]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f4:	f7ff f9e2 	bl	8001bbc <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fc:	f7ff f9de 	bl	8001bbc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e053      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	4b2d      	ldr	r3, [pc, #180]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 020c 	and.w	r2, r3, #12
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	429a      	cmp	r2, r3
 8002822:	d1eb      	bne.n	80027fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002824:	4b27      	ldr	r3, [pc, #156]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d210      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0207 	bic.w	r2, r3, #7
 800283a:	4922      	ldr	r1, [pc, #136]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b20      	ldr	r3, [pc, #128]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e032      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4916      	ldr	r1, [pc, #88]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800287e:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	490e      	ldr	r1, [pc, #56]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002892:	f000 f821 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002896:	4602      	mov	r2, r0
 8002898:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	490a      	ldr	r1, [pc, #40]	@ (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 80028a4:	5ccb      	ldrb	r3, [r1, r3]
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	4a09      	ldr	r2, [pc, #36]	@ (80028d0 <HAL_RCC_ClockConfig+0x1cc>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ae:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_RCC_ClockConfig+0x1d0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f940 	bl	8001b38 <HAL_InitTick>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40022000 	.word	0x40022000
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08004188 	.word	0x08004188
 80028d0:	2000009c 	.word	0x2000009c
 80028d4:	200000a0 	.word	0x200000a0

080028d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028f2:	4b1e      	ldr	r3, [pc, #120]	@ (800296c <HAL_RCC_GetSysClockFreq+0x94>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d002      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x30>
 8002902:	2b08      	cmp	r3, #8
 8002904:	d003      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0x36>
 8002906:	e027      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002908:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x98>)
 800290a:	613b      	str	r3, [r7, #16]
      break;
 800290c:	e027      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	0c9b      	lsrs	r3, r3, #18
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	4a17      	ldr	r2, [pc, #92]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002918:	5cd3      	ldrb	r3, [r2, r3]
 800291a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d010      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002926:	4b11      	ldr	r3, [pc, #68]	@ (800296c <HAL_RCC_GetSysClockFreq+0x94>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	0c5b      	lsrs	r3, r3, #17
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	4a11      	ldr	r2, [pc, #68]	@ (8002978 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a0d      	ldr	r2, [pc, #52]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x98>)
 800293a:	fb03 f202 	mul.w	r2, r3, r2
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e004      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a0c      	ldr	r2, [pc, #48]	@ (800297c <HAL_RCC_GetSysClockFreq+0xa4>)
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	613b      	str	r3, [r7, #16]
      break;
 8002956:	e002      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x98>)
 800295a:	613b      	str	r3, [r7, #16]
      break;
 800295c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295e:	693b      	ldr	r3, [r7, #16]
}
 8002960:	4618      	mov	r0, r3
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	007a1200 	.word	0x007a1200
 8002974:	080041a0 	.word	0x080041a0
 8002978:	080041b0 	.word	0x080041b0
 800297c:	003d0900 	.word	0x003d0900

08002980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b02      	ldr	r3, [pc, #8]	@ (8002990 <HAL_RCC_GetHCLKFreq+0x10>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	2000009c 	.word	0x2000009c

08002994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002998:	f7ff fff2 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4903      	ldr	r1, [pc, #12]	@ (80029b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	08004198 	.word	0x08004198

080029bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c0:	f7ff ffde 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	0adb      	lsrs	r3, r3, #11
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4903      	ldr	r1, [pc, #12]	@ (80029e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	08004198 	.word	0x08004198

080029e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <RCC_Delay+0x34>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	@ (8002a1c <RCC_Delay+0x38>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0a5b      	lsrs	r3, r3, #9
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a00:	bf00      	nop
  }
  while (Delay --);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1e5a      	subs	r2, r3, #1
 8002a06:	60fa      	str	r2, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f9      	bne.n	8002a00 <RCC_Delay+0x1c>
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	2000009c 	.word	0x2000009c
 8002a1c:	10624dd3 	.word	0x10624dd3

08002a20 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_SRAM_Init+0x1c>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a3a:	d101      	bne.n	8002a40 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e038      	b.n	8002ab2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7fe ff85 	bl	8001964 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3308      	adds	r3, #8
 8002a62:	4619      	mov	r1, r3
 8002a64:	4610      	mov	r0, r2
 8002a66:	f000 fae3 	bl	8003030 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	f000 fb45 	bl	8003104 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6858      	ldr	r0, [r3, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	f000 fb6a 	bl	8003160 <FSMC_NORSRAM_Extended_Timing_Init>
                                          hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	6892      	ldr	r2, [r2, #8]
 8002a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	6892      	ldr	r2, [r2, #8]
 8002aa0:	f041 0101 	orr.w	r1, r1, #1
 8002aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e042      	b.n	8002b52 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7fe fe5f 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2224      	movs	r2, #36	@ 0x24
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002afc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa08 	bl	8002f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b08a      	sub	sp, #40	@ 0x28
 8002b5e:	af02      	add	r7, sp, #8
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d175      	bne.n	8002c66 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_UART_Transmit+0x2c>
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06e      	b.n	8002c68 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2221      	movs	r2, #33	@ 0x21
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b98:	f7ff f810 	bl	8001bbc <HAL_GetTick>
 8002b9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	88fa      	ldrh	r2, [r7, #6]
 8002ba2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	88fa      	ldrh	r2, [r7, #6]
 8002ba8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bb2:	d108      	bne.n	8002bc6 <HAL_UART_Transmit+0x6c>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	e003      	b.n	8002bce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bce:	e02e      	b.n	8002c2e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2180      	movs	r1, #128	@ 0x80
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f8df 	bl	8002d9e <UART_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e03a      	b.n	8002c68 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10b      	bne.n	8002c10 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c06:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	61bb      	str	r3, [r7, #24]
 8002c0e:	e007      	b.n	8002c20 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1cb      	bne.n	8002bd0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2140      	movs	r1, #64	@ 0x40
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f8ab 	bl	8002d9e <UART_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e006      	b.n	8002c68 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
  }
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	@ 0x28
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	f040 8081 	bne.w	8002d94 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_UART_Receive+0x2e>
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e079      	b.n	8002d96 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2222      	movs	r2, #34	@ 0x22
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cb6:	f7fe ff81 	bl	8001bbc <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	88fa      	ldrh	r2, [r7, #6]
 8002cc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd0:	d108      	bne.n	8002ce4 <HAL_UART_Receive+0x74>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d104      	bne.n	8002ce4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	e003      	b.n	8002cec <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002cec:	e047      	b.n	8002d7e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2120      	movs	r1, #32
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f850 	bl	8002d9e <UART_WaitOnFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e042      	b.n	8002d96 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10c      	bne.n	8002d30 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	e01f      	b.n	8002d70 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d38:	d007      	beq.n	8002d4a <HAL_UART_Receive+0xda>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <HAL_UART_Receive+0xe8>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e008      	b.n	8002d6a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1b2      	bne.n	8002cee <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	4613      	mov	r3, r2
 8002dac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dae:	e03b      	b.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002db6:	d037      	beq.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db8:	f7fe ff00 	bl	8001bbc <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	6a3a      	ldr	r2, [r7, #32]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d302      	bcc.n	8002dce <UART_WaitOnFlagUntilTimeout+0x30>
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e03a      	b.n	8002e48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d023      	beq.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b80      	cmp	r3, #128	@ 0x80
 8002de4:	d020      	beq.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b40      	cmp	r3, #64	@ 0x40
 8002dea:	d01d      	beq.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d116      	bne.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f81d 	bl	8002e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e00f      	b.n	8002e48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d0b4      	beq.n	8002db0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b095      	sub	sp, #84	@ 0x54
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e62:	e853 3f00 	ldrex	r3, [r3]
 8002e66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e78:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e5      	bne.n	8002e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3314      	adds	r3, #20
 8002e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002eac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d119      	bne.n	8002efc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	e853 3f00 	ldrex	r3, [r3]
 8002ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f023 0310 	bic.w	r3, r3, #16
 8002ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ee8:	61ba      	str	r2, [r7, #24]
 8002eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eec:	6979      	ldr	r1, [r7, #20]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	e841 2300 	strex	r3, r2, [r1]
 8002ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e5      	bne.n	8002ec8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f0a:	bf00      	nop
 8002f0c:	3754      	adds	r7, #84	@ 0x54
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002f4e:	f023 030c 	bic.w	r3, r3, #12
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2c      	ldr	r2, [pc, #176]	@ (8003028 <UART_SetConfig+0x114>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d103      	bne.n	8002f84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f7ff fd1e 	bl	80029bc <HAL_RCC_GetPCLK2Freq>
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	e002      	b.n	8002f8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f84:	f7ff fd06 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8002f88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009a      	lsls	r2, r3, #2
 8002f94:	441a      	add	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	4a22      	ldr	r2, [pc, #136]	@ (800302c <UART_SetConfig+0x118>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	0119      	lsls	r1, r3, #4
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009a      	lsls	r2, r3, #2
 8002fb4:	441a      	add	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <UART_SetConfig+0x118>)
 8002fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2064      	movs	r0, #100	@ 0x64
 8002fca:	fb00 f303 	mul.w	r3, r0, r3
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	3332      	adds	r3, #50	@ 0x32
 8002fd4:	4a15      	ldr	r2, [pc, #84]	@ (800302c <UART_SetConfig+0x118>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe0:	4419      	add	r1, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	009a      	lsls	r2, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <UART_SetConfig+0x118>)
 8002ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2064      	movs	r0, #100	@ 0x64
 8003002:	fb00 f303 	mul.w	r3, r0, r3
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	3332      	adds	r3, #50	@ 0x32
 800300c:	4a07      	ldr	r2, [pc, #28]	@ (800302c <UART_SetConfig+0x118>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	f003 020f 	and.w	r2, r3, #15
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	440a      	add	r2, r1
 800301e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40013800 	.word	0x40013800
 800302c:	51eb851f 	.word	0x51eb851f

08003030 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	f023 0101 	bic.w	r1, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b08      	cmp	r3, #8
 8003058:	d102      	bne.n	8003060 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800305a:	2340      	movs	r3, #64	@ 0x40
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e001      	b.n	8003064 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003070:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003076:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800307c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003082:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003088:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800308e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8003094:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800309a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80030a0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80030be:	4b10      	ldr	r3, [pc, #64]	@ (8003100 <FSMC_NORSRAM_Init+0xd0>)
 80030c0:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030c8:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80030d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	43db      	mvns	r3, r3
 80030e0:	ea02 0103 	and.w	r1, r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4319      	orrs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	0008fb7f 	.word	0x0008fb7f

08003104 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 800311a:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8003122:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 800312a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	3b01      	subs	r3, #1
 8003132:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8003134:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	3b02      	subs	r3, #2
 800313c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 800313e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 800314a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
	...

08003160 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003174:	d11d      	bne.n	80031b2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800317e:	4b13      	ldr	r3, [pc, #76]	@ (80031cc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003180:	4013      	ands	r3, r2
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	6811      	ldr	r1, [r2, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	6852      	ldr	r2, [r2, #4]
 800318a:	0112      	lsls	r2, r2, #4
 800318c:	4311      	orrs	r1, r2
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	6892      	ldr	r2, [r2, #8]
 8003192:	0212      	lsls	r2, r2, #8
 8003194:	4311      	orrs	r1, r2
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	6992      	ldr	r2, [r2, #24]
 800319a:	4311      	orrs	r1, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	68d2      	ldr	r2, [r2, #12]
 80031a0:	0412      	lsls	r2, r2, #16
 80031a2:	430a      	orrs	r2, r1
 80031a4:	ea43 0102 	orr.w	r1, r3, r2
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80031b0:	e005      	b.n	80031be <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80031ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	cff00000 	.word	0xcff00000

080031d0 <siprintf>:
 80031d0:	b40e      	push	{r1, r2, r3}
 80031d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80031d6:	b500      	push	{lr}
 80031d8:	b09c      	sub	sp, #112	@ 0x70
 80031da:	ab1d      	add	r3, sp, #116	@ 0x74
 80031dc:	9002      	str	r0, [sp, #8]
 80031de:	9006      	str	r0, [sp, #24]
 80031e0:	9107      	str	r1, [sp, #28]
 80031e2:	9104      	str	r1, [sp, #16]
 80031e4:	4808      	ldr	r0, [pc, #32]	@ (8003208 <siprintf+0x38>)
 80031e6:	4909      	ldr	r1, [pc, #36]	@ (800320c <siprintf+0x3c>)
 80031e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80031ec:	9105      	str	r1, [sp, #20]
 80031ee:	6800      	ldr	r0, [r0, #0]
 80031f0:	a902      	add	r1, sp, #8
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	f000 f89c 	bl	8003330 <_svfiprintf_r>
 80031f8:	2200      	movs	r2, #0
 80031fa:	9b02      	ldr	r3, [sp, #8]
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	b01c      	add	sp, #112	@ 0x70
 8003200:	f85d eb04 	ldr.w	lr, [sp], #4
 8003204:	b003      	add	sp, #12
 8003206:	4770      	bx	lr
 8003208:	200000a8 	.word	0x200000a8
 800320c:	ffff0208 	.word	0xffff0208

08003210 <memset>:
 8003210:	4603      	mov	r3, r0
 8003212:	4402      	add	r2, r0
 8003214:	4293      	cmp	r3, r2
 8003216:	d100      	bne.n	800321a <memset+0xa>
 8003218:	4770      	bx	lr
 800321a:	f803 1b01 	strb.w	r1, [r3], #1
 800321e:	e7f9      	b.n	8003214 <memset+0x4>

08003220 <__errno>:
 8003220:	4b01      	ldr	r3, [pc, #4]	@ (8003228 <__errno+0x8>)
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	200000a8 	.word	0x200000a8

0800322c <__libc_init_array>:
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	2600      	movs	r6, #0
 8003230:	4d0c      	ldr	r5, [pc, #48]	@ (8003264 <__libc_init_array+0x38>)
 8003232:	4c0d      	ldr	r4, [pc, #52]	@ (8003268 <__libc_init_array+0x3c>)
 8003234:	1b64      	subs	r4, r4, r5
 8003236:	10a4      	asrs	r4, r4, #2
 8003238:	42a6      	cmp	r6, r4
 800323a:	d109      	bne.n	8003250 <__libc_init_array+0x24>
 800323c:	f000 fc78 	bl	8003b30 <_init>
 8003240:	2600      	movs	r6, #0
 8003242:	4d0a      	ldr	r5, [pc, #40]	@ (800326c <__libc_init_array+0x40>)
 8003244:	4c0a      	ldr	r4, [pc, #40]	@ (8003270 <__libc_init_array+0x44>)
 8003246:	1b64      	subs	r4, r4, r5
 8003248:	10a4      	asrs	r4, r4, #2
 800324a:	42a6      	cmp	r6, r4
 800324c:	d105      	bne.n	800325a <__libc_init_array+0x2e>
 800324e:	bd70      	pop	{r4, r5, r6, pc}
 8003250:	f855 3b04 	ldr.w	r3, [r5], #4
 8003254:	4798      	blx	r3
 8003256:	3601      	adds	r6, #1
 8003258:	e7ee      	b.n	8003238 <__libc_init_array+0xc>
 800325a:	f855 3b04 	ldr.w	r3, [r5], #4
 800325e:	4798      	blx	r3
 8003260:	3601      	adds	r6, #1
 8003262:	e7f2      	b.n	800324a <__libc_init_array+0x1e>
 8003264:	080041e8 	.word	0x080041e8
 8003268:	080041e8 	.word	0x080041e8
 800326c:	080041e8 	.word	0x080041e8
 8003270:	080041ec 	.word	0x080041ec

08003274 <__retarget_lock_acquire_recursive>:
 8003274:	4770      	bx	lr

08003276 <__retarget_lock_release_recursive>:
 8003276:	4770      	bx	lr

08003278 <__ssputs_r>:
 8003278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800327c:	461f      	mov	r7, r3
 800327e:	688e      	ldr	r6, [r1, #8]
 8003280:	4682      	mov	sl, r0
 8003282:	42be      	cmp	r6, r7
 8003284:	460c      	mov	r4, r1
 8003286:	4690      	mov	r8, r2
 8003288:	680b      	ldr	r3, [r1, #0]
 800328a:	d82d      	bhi.n	80032e8 <__ssputs_r+0x70>
 800328c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003290:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003294:	d026      	beq.n	80032e4 <__ssputs_r+0x6c>
 8003296:	6965      	ldr	r5, [r4, #20]
 8003298:	6909      	ldr	r1, [r1, #16]
 800329a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800329e:	eba3 0901 	sub.w	r9, r3, r1
 80032a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032a6:	1c7b      	adds	r3, r7, #1
 80032a8:	444b      	add	r3, r9
 80032aa:	106d      	asrs	r5, r5, #1
 80032ac:	429d      	cmp	r5, r3
 80032ae:	bf38      	it	cc
 80032b0:	461d      	movcc	r5, r3
 80032b2:	0553      	lsls	r3, r2, #21
 80032b4:	d527      	bpl.n	8003306 <__ssputs_r+0x8e>
 80032b6:	4629      	mov	r1, r5
 80032b8:	f000 f958 	bl	800356c <_malloc_r>
 80032bc:	4606      	mov	r6, r0
 80032be:	b360      	cbz	r0, 800331a <__ssputs_r+0xa2>
 80032c0:	464a      	mov	r2, r9
 80032c2:	6921      	ldr	r1, [r4, #16]
 80032c4:	f000 fbd6 	bl	8003a74 <memcpy>
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80032ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032d2:	81a3      	strh	r3, [r4, #12]
 80032d4:	6126      	str	r6, [r4, #16]
 80032d6:	444e      	add	r6, r9
 80032d8:	6026      	str	r6, [r4, #0]
 80032da:	463e      	mov	r6, r7
 80032dc:	6165      	str	r5, [r4, #20]
 80032de:	eba5 0509 	sub.w	r5, r5, r9
 80032e2:	60a5      	str	r5, [r4, #8]
 80032e4:	42be      	cmp	r6, r7
 80032e6:	d900      	bls.n	80032ea <__ssputs_r+0x72>
 80032e8:	463e      	mov	r6, r7
 80032ea:	4632      	mov	r2, r6
 80032ec:	4641      	mov	r1, r8
 80032ee:	6820      	ldr	r0, [r4, #0]
 80032f0:	f000 fb88 	bl	8003a04 <memmove>
 80032f4:	2000      	movs	r0, #0
 80032f6:	68a3      	ldr	r3, [r4, #8]
 80032f8:	1b9b      	subs	r3, r3, r6
 80032fa:	60a3      	str	r3, [r4, #8]
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	4433      	add	r3, r6
 8003300:	6023      	str	r3, [r4, #0]
 8003302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003306:	462a      	mov	r2, r5
 8003308:	f000 fb4e 	bl	80039a8 <_realloc_r>
 800330c:	4606      	mov	r6, r0
 800330e:	2800      	cmp	r0, #0
 8003310:	d1e0      	bne.n	80032d4 <__ssputs_r+0x5c>
 8003312:	4650      	mov	r0, sl
 8003314:	6921      	ldr	r1, [r4, #16]
 8003316:	f000 fbbb 	bl	8003a90 <_free_r>
 800331a:	230c      	movs	r3, #12
 800331c:	f8ca 3000 	str.w	r3, [sl]
 8003320:	89a3      	ldrh	r3, [r4, #12]
 8003322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800332a:	81a3      	strh	r3, [r4, #12]
 800332c:	e7e9      	b.n	8003302 <__ssputs_r+0x8a>
	...

08003330 <_svfiprintf_r>:
 8003330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003334:	4698      	mov	r8, r3
 8003336:	898b      	ldrh	r3, [r1, #12]
 8003338:	4607      	mov	r7, r0
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	460d      	mov	r5, r1
 800333e:	4614      	mov	r4, r2
 8003340:	b09d      	sub	sp, #116	@ 0x74
 8003342:	d510      	bpl.n	8003366 <_svfiprintf_r+0x36>
 8003344:	690b      	ldr	r3, [r1, #16]
 8003346:	b973      	cbnz	r3, 8003366 <_svfiprintf_r+0x36>
 8003348:	2140      	movs	r1, #64	@ 0x40
 800334a:	f000 f90f 	bl	800356c <_malloc_r>
 800334e:	6028      	str	r0, [r5, #0]
 8003350:	6128      	str	r0, [r5, #16]
 8003352:	b930      	cbnz	r0, 8003362 <_svfiprintf_r+0x32>
 8003354:	230c      	movs	r3, #12
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800335c:	b01d      	add	sp, #116	@ 0x74
 800335e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003362:	2340      	movs	r3, #64	@ 0x40
 8003364:	616b      	str	r3, [r5, #20]
 8003366:	2300      	movs	r3, #0
 8003368:	9309      	str	r3, [sp, #36]	@ 0x24
 800336a:	2320      	movs	r3, #32
 800336c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003370:	2330      	movs	r3, #48	@ 0x30
 8003372:	f04f 0901 	mov.w	r9, #1
 8003376:	f8cd 800c 	str.w	r8, [sp, #12]
 800337a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003514 <_svfiprintf_r+0x1e4>
 800337e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003382:	4623      	mov	r3, r4
 8003384:	469a      	mov	sl, r3
 8003386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800338a:	b10a      	cbz	r2, 8003390 <_svfiprintf_r+0x60>
 800338c:	2a25      	cmp	r2, #37	@ 0x25
 800338e:	d1f9      	bne.n	8003384 <_svfiprintf_r+0x54>
 8003390:	ebba 0b04 	subs.w	fp, sl, r4
 8003394:	d00b      	beq.n	80033ae <_svfiprintf_r+0x7e>
 8003396:	465b      	mov	r3, fp
 8003398:	4622      	mov	r2, r4
 800339a:	4629      	mov	r1, r5
 800339c:	4638      	mov	r0, r7
 800339e:	f7ff ff6b 	bl	8003278 <__ssputs_r>
 80033a2:	3001      	adds	r0, #1
 80033a4:	f000 80a7 	beq.w	80034f6 <_svfiprintf_r+0x1c6>
 80033a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033aa:	445a      	add	r2, fp
 80033ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80033ae:	f89a 3000 	ldrb.w	r3, [sl]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 809f 	beq.w	80034f6 <_svfiprintf_r+0x1c6>
 80033b8:	2300      	movs	r3, #0
 80033ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033c2:	f10a 0a01 	add.w	sl, sl, #1
 80033c6:	9304      	str	r3, [sp, #16]
 80033c8:	9307      	str	r3, [sp, #28]
 80033ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80033d0:	4654      	mov	r4, sl
 80033d2:	2205      	movs	r2, #5
 80033d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d8:	484e      	ldr	r0, [pc, #312]	@ (8003514 <_svfiprintf_r+0x1e4>)
 80033da:	f000 fb3d 	bl	8003a58 <memchr>
 80033de:	9a04      	ldr	r2, [sp, #16]
 80033e0:	b9d8      	cbnz	r0, 800341a <_svfiprintf_r+0xea>
 80033e2:	06d0      	lsls	r0, r2, #27
 80033e4:	bf44      	itt	mi
 80033e6:	2320      	movmi	r3, #32
 80033e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033ec:	0711      	lsls	r1, r2, #28
 80033ee:	bf44      	itt	mi
 80033f0:	232b      	movmi	r3, #43	@ 0x2b
 80033f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033f6:	f89a 3000 	ldrb.w	r3, [sl]
 80033fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80033fc:	d015      	beq.n	800342a <_svfiprintf_r+0xfa>
 80033fe:	4654      	mov	r4, sl
 8003400:	2000      	movs	r0, #0
 8003402:	f04f 0c0a 	mov.w	ip, #10
 8003406:	9a07      	ldr	r2, [sp, #28]
 8003408:	4621      	mov	r1, r4
 800340a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800340e:	3b30      	subs	r3, #48	@ 0x30
 8003410:	2b09      	cmp	r3, #9
 8003412:	d94b      	bls.n	80034ac <_svfiprintf_r+0x17c>
 8003414:	b1b0      	cbz	r0, 8003444 <_svfiprintf_r+0x114>
 8003416:	9207      	str	r2, [sp, #28]
 8003418:	e014      	b.n	8003444 <_svfiprintf_r+0x114>
 800341a:	eba0 0308 	sub.w	r3, r0, r8
 800341e:	fa09 f303 	lsl.w	r3, r9, r3
 8003422:	4313      	orrs	r3, r2
 8003424:	46a2      	mov	sl, r4
 8003426:	9304      	str	r3, [sp, #16]
 8003428:	e7d2      	b.n	80033d0 <_svfiprintf_r+0xa0>
 800342a:	9b03      	ldr	r3, [sp, #12]
 800342c:	1d19      	adds	r1, r3, #4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	9103      	str	r1, [sp, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	bfbb      	ittet	lt
 8003436:	425b      	neglt	r3, r3
 8003438:	f042 0202 	orrlt.w	r2, r2, #2
 800343c:	9307      	strge	r3, [sp, #28]
 800343e:	9307      	strlt	r3, [sp, #28]
 8003440:	bfb8      	it	lt
 8003442:	9204      	strlt	r2, [sp, #16]
 8003444:	7823      	ldrb	r3, [r4, #0]
 8003446:	2b2e      	cmp	r3, #46	@ 0x2e
 8003448:	d10a      	bne.n	8003460 <_svfiprintf_r+0x130>
 800344a:	7863      	ldrb	r3, [r4, #1]
 800344c:	2b2a      	cmp	r3, #42	@ 0x2a
 800344e:	d132      	bne.n	80034b6 <_svfiprintf_r+0x186>
 8003450:	9b03      	ldr	r3, [sp, #12]
 8003452:	3402      	adds	r4, #2
 8003454:	1d1a      	adds	r2, r3, #4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	9203      	str	r2, [sp, #12]
 800345a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800345e:	9305      	str	r3, [sp, #20]
 8003460:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003518 <_svfiprintf_r+0x1e8>
 8003464:	2203      	movs	r2, #3
 8003466:	4650      	mov	r0, sl
 8003468:	7821      	ldrb	r1, [r4, #0]
 800346a:	f000 faf5 	bl	8003a58 <memchr>
 800346e:	b138      	cbz	r0, 8003480 <_svfiprintf_r+0x150>
 8003470:	2240      	movs	r2, #64	@ 0x40
 8003472:	9b04      	ldr	r3, [sp, #16]
 8003474:	eba0 000a 	sub.w	r0, r0, sl
 8003478:	4082      	lsls	r2, r0
 800347a:	4313      	orrs	r3, r2
 800347c:	3401      	adds	r4, #1
 800347e:	9304      	str	r3, [sp, #16]
 8003480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003484:	2206      	movs	r2, #6
 8003486:	4825      	ldr	r0, [pc, #148]	@ (800351c <_svfiprintf_r+0x1ec>)
 8003488:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800348c:	f000 fae4 	bl	8003a58 <memchr>
 8003490:	2800      	cmp	r0, #0
 8003492:	d036      	beq.n	8003502 <_svfiprintf_r+0x1d2>
 8003494:	4b22      	ldr	r3, [pc, #136]	@ (8003520 <_svfiprintf_r+0x1f0>)
 8003496:	bb1b      	cbnz	r3, 80034e0 <_svfiprintf_r+0x1b0>
 8003498:	9b03      	ldr	r3, [sp, #12]
 800349a:	3307      	adds	r3, #7
 800349c:	f023 0307 	bic.w	r3, r3, #7
 80034a0:	3308      	adds	r3, #8
 80034a2:	9303      	str	r3, [sp, #12]
 80034a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034a6:	4433      	add	r3, r6
 80034a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80034aa:	e76a      	b.n	8003382 <_svfiprintf_r+0x52>
 80034ac:	460c      	mov	r4, r1
 80034ae:	2001      	movs	r0, #1
 80034b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80034b4:	e7a8      	b.n	8003408 <_svfiprintf_r+0xd8>
 80034b6:	2300      	movs	r3, #0
 80034b8:	f04f 0c0a 	mov.w	ip, #10
 80034bc:	4619      	mov	r1, r3
 80034be:	3401      	adds	r4, #1
 80034c0:	9305      	str	r3, [sp, #20]
 80034c2:	4620      	mov	r0, r4
 80034c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034c8:	3a30      	subs	r2, #48	@ 0x30
 80034ca:	2a09      	cmp	r2, #9
 80034cc:	d903      	bls.n	80034d6 <_svfiprintf_r+0x1a6>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0c6      	beq.n	8003460 <_svfiprintf_r+0x130>
 80034d2:	9105      	str	r1, [sp, #20]
 80034d4:	e7c4      	b.n	8003460 <_svfiprintf_r+0x130>
 80034d6:	4604      	mov	r4, r0
 80034d8:	2301      	movs	r3, #1
 80034da:	fb0c 2101 	mla	r1, ip, r1, r2
 80034de:	e7f0      	b.n	80034c2 <_svfiprintf_r+0x192>
 80034e0:	ab03      	add	r3, sp, #12
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	462a      	mov	r2, r5
 80034e6:	4638      	mov	r0, r7
 80034e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003524 <_svfiprintf_r+0x1f4>)
 80034ea:	a904      	add	r1, sp, #16
 80034ec:	f3af 8000 	nop.w
 80034f0:	1c42      	adds	r2, r0, #1
 80034f2:	4606      	mov	r6, r0
 80034f4:	d1d6      	bne.n	80034a4 <_svfiprintf_r+0x174>
 80034f6:	89ab      	ldrh	r3, [r5, #12]
 80034f8:	065b      	lsls	r3, r3, #25
 80034fa:	f53f af2d 	bmi.w	8003358 <_svfiprintf_r+0x28>
 80034fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003500:	e72c      	b.n	800335c <_svfiprintf_r+0x2c>
 8003502:	ab03      	add	r3, sp, #12
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	462a      	mov	r2, r5
 8003508:	4638      	mov	r0, r7
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <_svfiprintf_r+0x1f4>)
 800350c:	a904      	add	r1, sp, #16
 800350e:	f000 f91f 	bl	8003750 <_printf_i>
 8003512:	e7ed      	b.n	80034f0 <_svfiprintf_r+0x1c0>
 8003514:	080041b2 	.word	0x080041b2
 8003518:	080041b8 	.word	0x080041b8
 800351c:	080041bc 	.word	0x080041bc
 8003520:	00000000 	.word	0x00000000
 8003524:	08003279 	.word	0x08003279

08003528 <sbrk_aligned>:
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	4e0f      	ldr	r6, [pc, #60]	@ (8003568 <sbrk_aligned+0x40>)
 800352c:	460c      	mov	r4, r1
 800352e:	6831      	ldr	r1, [r6, #0]
 8003530:	4605      	mov	r5, r0
 8003532:	b911      	cbnz	r1, 800353a <sbrk_aligned+0x12>
 8003534:	f000 fa80 	bl	8003a38 <_sbrk_r>
 8003538:	6030      	str	r0, [r6, #0]
 800353a:	4621      	mov	r1, r4
 800353c:	4628      	mov	r0, r5
 800353e:	f000 fa7b 	bl	8003a38 <_sbrk_r>
 8003542:	1c43      	adds	r3, r0, #1
 8003544:	d103      	bne.n	800354e <sbrk_aligned+0x26>
 8003546:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800354a:	4620      	mov	r0, r4
 800354c:	bd70      	pop	{r4, r5, r6, pc}
 800354e:	1cc4      	adds	r4, r0, #3
 8003550:	f024 0403 	bic.w	r4, r4, #3
 8003554:	42a0      	cmp	r0, r4
 8003556:	d0f8      	beq.n	800354a <sbrk_aligned+0x22>
 8003558:	1a21      	subs	r1, r4, r0
 800355a:	4628      	mov	r0, r5
 800355c:	f000 fa6c 	bl	8003a38 <_sbrk_r>
 8003560:	3001      	adds	r0, #1
 8003562:	d1f2      	bne.n	800354a <sbrk_aligned+0x22>
 8003564:	e7ef      	b.n	8003546 <sbrk_aligned+0x1e>
 8003566:	bf00      	nop
 8003568:	20000360 	.word	0x20000360

0800356c <_malloc_r>:
 800356c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003570:	1ccd      	adds	r5, r1, #3
 8003572:	f025 0503 	bic.w	r5, r5, #3
 8003576:	3508      	adds	r5, #8
 8003578:	2d0c      	cmp	r5, #12
 800357a:	bf38      	it	cc
 800357c:	250c      	movcc	r5, #12
 800357e:	2d00      	cmp	r5, #0
 8003580:	4606      	mov	r6, r0
 8003582:	db01      	blt.n	8003588 <_malloc_r+0x1c>
 8003584:	42a9      	cmp	r1, r5
 8003586:	d904      	bls.n	8003592 <_malloc_r+0x26>
 8003588:	230c      	movs	r3, #12
 800358a:	6033      	str	r3, [r6, #0]
 800358c:	2000      	movs	r0, #0
 800358e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003592:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003668 <_malloc_r+0xfc>
 8003596:	f000 f9fb 	bl	8003990 <__malloc_lock>
 800359a:	f8d8 3000 	ldr.w	r3, [r8]
 800359e:	461c      	mov	r4, r3
 80035a0:	bb44      	cbnz	r4, 80035f4 <_malloc_r+0x88>
 80035a2:	4629      	mov	r1, r5
 80035a4:	4630      	mov	r0, r6
 80035a6:	f7ff ffbf 	bl	8003528 <sbrk_aligned>
 80035aa:	1c43      	adds	r3, r0, #1
 80035ac:	4604      	mov	r4, r0
 80035ae:	d158      	bne.n	8003662 <_malloc_r+0xf6>
 80035b0:	f8d8 4000 	ldr.w	r4, [r8]
 80035b4:	4627      	mov	r7, r4
 80035b6:	2f00      	cmp	r7, #0
 80035b8:	d143      	bne.n	8003642 <_malloc_r+0xd6>
 80035ba:	2c00      	cmp	r4, #0
 80035bc:	d04b      	beq.n	8003656 <_malloc_r+0xea>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	4639      	mov	r1, r7
 80035c2:	4630      	mov	r0, r6
 80035c4:	eb04 0903 	add.w	r9, r4, r3
 80035c8:	f000 fa36 	bl	8003a38 <_sbrk_r>
 80035cc:	4581      	cmp	r9, r0
 80035ce:	d142      	bne.n	8003656 <_malloc_r+0xea>
 80035d0:	6821      	ldr	r1, [r4, #0]
 80035d2:	4630      	mov	r0, r6
 80035d4:	1a6d      	subs	r5, r5, r1
 80035d6:	4629      	mov	r1, r5
 80035d8:	f7ff ffa6 	bl	8003528 <sbrk_aligned>
 80035dc:	3001      	adds	r0, #1
 80035de:	d03a      	beq.n	8003656 <_malloc_r+0xea>
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	442b      	add	r3, r5
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	f8d8 3000 	ldr.w	r3, [r8]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	bb62      	cbnz	r2, 8003648 <_malloc_r+0xdc>
 80035ee:	f8c8 7000 	str.w	r7, [r8]
 80035f2:	e00f      	b.n	8003614 <_malloc_r+0xa8>
 80035f4:	6822      	ldr	r2, [r4, #0]
 80035f6:	1b52      	subs	r2, r2, r5
 80035f8:	d420      	bmi.n	800363c <_malloc_r+0xd0>
 80035fa:	2a0b      	cmp	r2, #11
 80035fc:	d917      	bls.n	800362e <_malloc_r+0xc2>
 80035fe:	1961      	adds	r1, r4, r5
 8003600:	42a3      	cmp	r3, r4
 8003602:	6025      	str	r5, [r4, #0]
 8003604:	bf18      	it	ne
 8003606:	6059      	strne	r1, [r3, #4]
 8003608:	6863      	ldr	r3, [r4, #4]
 800360a:	bf08      	it	eq
 800360c:	f8c8 1000 	streq.w	r1, [r8]
 8003610:	5162      	str	r2, [r4, r5]
 8003612:	604b      	str	r3, [r1, #4]
 8003614:	4630      	mov	r0, r6
 8003616:	f000 f9c1 	bl	800399c <__malloc_unlock>
 800361a:	f104 000b 	add.w	r0, r4, #11
 800361e:	1d23      	adds	r3, r4, #4
 8003620:	f020 0007 	bic.w	r0, r0, #7
 8003624:	1ac2      	subs	r2, r0, r3
 8003626:	bf1c      	itt	ne
 8003628:	1a1b      	subne	r3, r3, r0
 800362a:	50a3      	strne	r3, [r4, r2]
 800362c:	e7af      	b.n	800358e <_malloc_r+0x22>
 800362e:	6862      	ldr	r2, [r4, #4]
 8003630:	42a3      	cmp	r3, r4
 8003632:	bf0c      	ite	eq
 8003634:	f8c8 2000 	streq.w	r2, [r8]
 8003638:	605a      	strne	r2, [r3, #4]
 800363a:	e7eb      	b.n	8003614 <_malloc_r+0xa8>
 800363c:	4623      	mov	r3, r4
 800363e:	6864      	ldr	r4, [r4, #4]
 8003640:	e7ae      	b.n	80035a0 <_malloc_r+0x34>
 8003642:	463c      	mov	r4, r7
 8003644:	687f      	ldr	r7, [r7, #4]
 8003646:	e7b6      	b.n	80035b6 <_malloc_r+0x4a>
 8003648:	461a      	mov	r2, r3
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	42a3      	cmp	r3, r4
 800364e:	d1fb      	bne.n	8003648 <_malloc_r+0xdc>
 8003650:	2300      	movs	r3, #0
 8003652:	6053      	str	r3, [r2, #4]
 8003654:	e7de      	b.n	8003614 <_malloc_r+0xa8>
 8003656:	230c      	movs	r3, #12
 8003658:	4630      	mov	r0, r6
 800365a:	6033      	str	r3, [r6, #0]
 800365c:	f000 f99e 	bl	800399c <__malloc_unlock>
 8003660:	e794      	b.n	800358c <_malloc_r+0x20>
 8003662:	6005      	str	r5, [r0, #0]
 8003664:	e7d6      	b.n	8003614 <_malloc_r+0xa8>
 8003666:	bf00      	nop
 8003668:	20000364 	.word	0x20000364

0800366c <_printf_common>:
 800366c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003670:	4616      	mov	r6, r2
 8003672:	4698      	mov	r8, r3
 8003674:	688a      	ldr	r2, [r1, #8]
 8003676:	690b      	ldr	r3, [r1, #16]
 8003678:	4607      	mov	r7, r0
 800367a:	4293      	cmp	r3, r2
 800367c:	bfb8      	it	lt
 800367e:	4613      	movlt	r3, r2
 8003680:	6033      	str	r3, [r6, #0]
 8003682:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003686:	460c      	mov	r4, r1
 8003688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800368c:	b10a      	cbz	r2, 8003692 <_printf_common+0x26>
 800368e:	3301      	adds	r3, #1
 8003690:	6033      	str	r3, [r6, #0]
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	0699      	lsls	r1, r3, #26
 8003696:	bf42      	ittt	mi
 8003698:	6833      	ldrmi	r3, [r6, #0]
 800369a:	3302      	addmi	r3, #2
 800369c:	6033      	strmi	r3, [r6, #0]
 800369e:	6825      	ldr	r5, [r4, #0]
 80036a0:	f015 0506 	ands.w	r5, r5, #6
 80036a4:	d106      	bne.n	80036b4 <_printf_common+0x48>
 80036a6:	f104 0a19 	add.w	sl, r4, #25
 80036aa:	68e3      	ldr	r3, [r4, #12]
 80036ac:	6832      	ldr	r2, [r6, #0]
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	42ab      	cmp	r3, r5
 80036b2:	dc2b      	bgt.n	800370c <_printf_common+0xa0>
 80036b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036b8:	6822      	ldr	r2, [r4, #0]
 80036ba:	3b00      	subs	r3, #0
 80036bc:	bf18      	it	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	0692      	lsls	r2, r2, #26
 80036c2:	d430      	bmi.n	8003726 <_printf_common+0xba>
 80036c4:	4641      	mov	r1, r8
 80036c6:	4638      	mov	r0, r7
 80036c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036cc:	47c8      	blx	r9
 80036ce:	3001      	adds	r0, #1
 80036d0:	d023      	beq.n	800371a <_printf_common+0xae>
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	6922      	ldr	r2, [r4, #16]
 80036d6:	f003 0306 	and.w	r3, r3, #6
 80036da:	2b04      	cmp	r3, #4
 80036dc:	bf14      	ite	ne
 80036de:	2500      	movne	r5, #0
 80036e0:	6833      	ldreq	r3, [r6, #0]
 80036e2:	f04f 0600 	mov.w	r6, #0
 80036e6:	bf08      	it	eq
 80036e8:	68e5      	ldreq	r5, [r4, #12]
 80036ea:	f104 041a 	add.w	r4, r4, #26
 80036ee:	bf08      	it	eq
 80036f0:	1aed      	subeq	r5, r5, r3
 80036f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036f6:	bf08      	it	eq
 80036f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036fc:	4293      	cmp	r3, r2
 80036fe:	bfc4      	itt	gt
 8003700:	1a9b      	subgt	r3, r3, r2
 8003702:	18ed      	addgt	r5, r5, r3
 8003704:	42b5      	cmp	r5, r6
 8003706:	d11a      	bne.n	800373e <_printf_common+0xd2>
 8003708:	2000      	movs	r0, #0
 800370a:	e008      	b.n	800371e <_printf_common+0xb2>
 800370c:	2301      	movs	r3, #1
 800370e:	4652      	mov	r2, sl
 8003710:	4641      	mov	r1, r8
 8003712:	4638      	mov	r0, r7
 8003714:	47c8      	blx	r9
 8003716:	3001      	adds	r0, #1
 8003718:	d103      	bne.n	8003722 <_printf_common+0xb6>
 800371a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800371e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003722:	3501      	adds	r5, #1
 8003724:	e7c1      	b.n	80036aa <_printf_common+0x3e>
 8003726:	2030      	movs	r0, #48	@ 0x30
 8003728:	18e1      	adds	r1, r4, r3
 800372a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003734:	4422      	add	r2, r4
 8003736:	3302      	adds	r3, #2
 8003738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800373c:	e7c2      	b.n	80036c4 <_printf_common+0x58>
 800373e:	2301      	movs	r3, #1
 8003740:	4622      	mov	r2, r4
 8003742:	4641      	mov	r1, r8
 8003744:	4638      	mov	r0, r7
 8003746:	47c8      	blx	r9
 8003748:	3001      	adds	r0, #1
 800374a:	d0e6      	beq.n	800371a <_printf_common+0xae>
 800374c:	3601      	adds	r6, #1
 800374e:	e7d9      	b.n	8003704 <_printf_common+0x98>

08003750 <_printf_i>:
 8003750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003754:	7e0f      	ldrb	r7, [r1, #24]
 8003756:	4691      	mov	r9, r2
 8003758:	2f78      	cmp	r7, #120	@ 0x78
 800375a:	4680      	mov	r8, r0
 800375c:	460c      	mov	r4, r1
 800375e:	469a      	mov	sl, r3
 8003760:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003762:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003766:	d807      	bhi.n	8003778 <_printf_i+0x28>
 8003768:	2f62      	cmp	r7, #98	@ 0x62
 800376a:	d80a      	bhi.n	8003782 <_printf_i+0x32>
 800376c:	2f00      	cmp	r7, #0
 800376e:	f000 80d3 	beq.w	8003918 <_printf_i+0x1c8>
 8003772:	2f58      	cmp	r7, #88	@ 0x58
 8003774:	f000 80ba 	beq.w	80038ec <_printf_i+0x19c>
 8003778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800377c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003780:	e03a      	b.n	80037f8 <_printf_i+0xa8>
 8003782:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003786:	2b15      	cmp	r3, #21
 8003788:	d8f6      	bhi.n	8003778 <_printf_i+0x28>
 800378a:	a101      	add	r1, pc, #4	@ (adr r1, 8003790 <_printf_i+0x40>)
 800378c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003790:	080037e9 	.word	0x080037e9
 8003794:	080037fd 	.word	0x080037fd
 8003798:	08003779 	.word	0x08003779
 800379c:	08003779 	.word	0x08003779
 80037a0:	08003779 	.word	0x08003779
 80037a4:	08003779 	.word	0x08003779
 80037a8:	080037fd 	.word	0x080037fd
 80037ac:	08003779 	.word	0x08003779
 80037b0:	08003779 	.word	0x08003779
 80037b4:	08003779 	.word	0x08003779
 80037b8:	08003779 	.word	0x08003779
 80037bc:	080038ff 	.word	0x080038ff
 80037c0:	08003827 	.word	0x08003827
 80037c4:	080038b9 	.word	0x080038b9
 80037c8:	08003779 	.word	0x08003779
 80037cc:	08003779 	.word	0x08003779
 80037d0:	08003921 	.word	0x08003921
 80037d4:	08003779 	.word	0x08003779
 80037d8:	08003827 	.word	0x08003827
 80037dc:	08003779 	.word	0x08003779
 80037e0:	08003779 	.word	0x08003779
 80037e4:	080038c1 	.word	0x080038c1
 80037e8:	6833      	ldr	r3, [r6, #0]
 80037ea:	1d1a      	adds	r2, r3, #4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6032      	str	r2, [r6, #0]
 80037f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037f8:	2301      	movs	r3, #1
 80037fa:	e09e      	b.n	800393a <_printf_i+0x1ea>
 80037fc:	6833      	ldr	r3, [r6, #0]
 80037fe:	6820      	ldr	r0, [r4, #0]
 8003800:	1d19      	adds	r1, r3, #4
 8003802:	6031      	str	r1, [r6, #0]
 8003804:	0606      	lsls	r6, r0, #24
 8003806:	d501      	bpl.n	800380c <_printf_i+0xbc>
 8003808:	681d      	ldr	r5, [r3, #0]
 800380a:	e003      	b.n	8003814 <_printf_i+0xc4>
 800380c:	0645      	lsls	r5, r0, #25
 800380e:	d5fb      	bpl.n	8003808 <_printf_i+0xb8>
 8003810:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003814:	2d00      	cmp	r5, #0
 8003816:	da03      	bge.n	8003820 <_printf_i+0xd0>
 8003818:	232d      	movs	r3, #45	@ 0x2d
 800381a:	426d      	negs	r5, r5
 800381c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003820:	230a      	movs	r3, #10
 8003822:	4859      	ldr	r0, [pc, #356]	@ (8003988 <_printf_i+0x238>)
 8003824:	e011      	b.n	800384a <_printf_i+0xfa>
 8003826:	6821      	ldr	r1, [r4, #0]
 8003828:	6833      	ldr	r3, [r6, #0]
 800382a:	0608      	lsls	r0, r1, #24
 800382c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003830:	d402      	bmi.n	8003838 <_printf_i+0xe8>
 8003832:	0649      	lsls	r1, r1, #25
 8003834:	bf48      	it	mi
 8003836:	b2ad      	uxthmi	r5, r5
 8003838:	2f6f      	cmp	r7, #111	@ 0x6f
 800383a:	6033      	str	r3, [r6, #0]
 800383c:	bf14      	ite	ne
 800383e:	230a      	movne	r3, #10
 8003840:	2308      	moveq	r3, #8
 8003842:	4851      	ldr	r0, [pc, #324]	@ (8003988 <_printf_i+0x238>)
 8003844:	2100      	movs	r1, #0
 8003846:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800384a:	6866      	ldr	r6, [r4, #4]
 800384c:	2e00      	cmp	r6, #0
 800384e:	bfa8      	it	ge
 8003850:	6821      	ldrge	r1, [r4, #0]
 8003852:	60a6      	str	r6, [r4, #8]
 8003854:	bfa4      	itt	ge
 8003856:	f021 0104 	bicge.w	r1, r1, #4
 800385a:	6021      	strge	r1, [r4, #0]
 800385c:	b90d      	cbnz	r5, 8003862 <_printf_i+0x112>
 800385e:	2e00      	cmp	r6, #0
 8003860:	d04b      	beq.n	80038fa <_printf_i+0x1aa>
 8003862:	4616      	mov	r6, r2
 8003864:	fbb5 f1f3 	udiv	r1, r5, r3
 8003868:	fb03 5711 	mls	r7, r3, r1, r5
 800386c:	5dc7      	ldrb	r7, [r0, r7]
 800386e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003872:	462f      	mov	r7, r5
 8003874:	42bb      	cmp	r3, r7
 8003876:	460d      	mov	r5, r1
 8003878:	d9f4      	bls.n	8003864 <_printf_i+0x114>
 800387a:	2b08      	cmp	r3, #8
 800387c:	d10b      	bne.n	8003896 <_printf_i+0x146>
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	07df      	lsls	r7, r3, #31
 8003882:	d508      	bpl.n	8003896 <_printf_i+0x146>
 8003884:	6923      	ldr	r3, [r4, #16]
 8003886:	6861      	ldr	r1, [r4, #4]
 8003888:	4299      	cmp	r1, r3
 800388a:	bfde      	ittt	le
 800388c:	2330      	movle	r3, #48	@ 0x30
 800388e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003892:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003896:	1b92      	subs	r2, r2, r6
 8003898:	6122      	str	r2, [r4, #16]
 800389a:	464b      	mov	r3, r9
 800389c:	4621      	mov	r1, r4
 800389e:	4640      	mov	r0, r8
 80038a0:	f8cd a000 	str.w	sl, [sp]
 80038a4:	aa03      	add	r2, sp, #12
 80038a6:	f7ff fee1 	bl	800366c <_printf_common>
 80038aa:	3001      	adds	r0, #1
 80038ac:	d14a      	bne.n	8003944 <_printf_i+0x1f4>
 80038ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038b2:	b004      	add	sp, #16
 80038b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	f043 0320 	orr.w	r3, r3, #32
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	2778      	movs	r7, #120	@ 0x78
 80038c2:	4832      	ldr	r0, [pc, #200]	@ (800398c <_printf_i+0x23c>)
 80038c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	6831      	ldr	r1, [r6, #0]
 80038cc:	061f      	lsls	r7, r3, #24
 80038ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80038d2:	d402      	bmi.n	80038da <_printf_i+0x18a>
 80038d4:	065f      	lsls	r7, r3, #25
 80038d6:	bf48      	it	mi
 80038d8:	b2ad      	uxthmi	r5, r5
 80038da:	6031      	str	r1, [r6, #0]
 80038dc:	07d9      	lsls	r1, r3, #31
 80038de:	bf44      	itt	mi
 80038e0:	f043 0320 	orrmi.w	r3, r3, #32
 80038e4:	6023      	strmi	r3, [r4, #0]
 80038e6:	b11d      	cbz	r5, 80038f0 <_printf_i+0x1a0>
 80038e8:	2310      	movs	r3, #16
 80038ea:	e7ab      	b.n	8003844 <_printf_i+0xf4>
 80038ec:	4826      	ldr	r0, [pc, #152]	@ (8003988 <_printf_i+0x238>)
 80038ee:	e7e9      	b.n	80038c4 <_printf_i+0x174>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	f023 0320 	bic.w	r3, r3, #32
 80038f6:	6023      	str	r3, [r4, #0]
 80038f8:	e7f6      	b.n	80038e8 <_printf_i+0x198>
 80038fa:	4616      	mov	r6, r2
 80038fc:	e7bd      	b.n	800387a <_printf_i+0x12a>
 80038fe:	6833      	ldr	r3, [r6, #0]
 8003900:	6825      	ldr	r5, [r4, #0]
 8003902:	1d18      	adds	r0, r3, #4
 8003904:	6961      	ldr	r1, [r4, #20]
 8003906:	6030      	str	r0, [r6, #0]
 8003908:	062e      	lsls	r6, r5, #24
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	d501      	bpl.n	8003912 <_printf_i+0x1c2>
 800390e:	6019      	str	r1, [r3, #0]
 8003910:	e002      	b.n	8003918 <_printf_i+0x1c8>
 8003912:	0668      	lsls	r0, r5, #25
 8003914:	d5fb      	bpl.n	800390e <_printf_i+0x1be>
 8003916:	8019      	strh	r1, [r3, #0]
 8003918:	2300      	movs	r3, #0
 800391a:	4616      	mov	r6, r2
 800391c:	6123      	str	r3, [r4, #16]
 800391e:	e7bc      	b.n	800389a <_printf_i+0x14a>
 8003920:	6833      	ldr	r3, [r6, #0]
 8003922:	2100      	movs	r1, #0
 8003924:	1d1a      	adds	r2, r3, #4
 8003926:	6032      	str	r2, [r6, #0]
 8003928:	681e      	ldr	r6, [r3, #0]
 800392a:	6862      	ldr	r2, [r4, #4]
 800392c:	4630      	mov	r0, r6
 800392e:	f000 f893 	bl	8003a58 <memchr>
 8003932:	b108      	cbz	r0, 8003938 <_printf_i+0x1e8>
 8003934:	1b80      	subs	r0, r0, r6
 8003936:	6060      	str	r0, [r4, #4]
 8003938:	6863      	ldr	r3, [r4, #4]
 800393a:	6123      	str	r3, [r4, #16]
 800393c:	2300      	movs	r3, #0
 800393e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003942:	e7aa      	b.n	800389a <_printf_i+0x14a>
 8003944:	4632      	mov	r2, r6
 8003946:	4649      	mov	r1, r9
 8003948:	4640      	mov	r0, r8
 800394a:	6923      	ldr	r3, [r4, #16]
 800394c:	47d0      	blx	sl
 800394e:	3001      	adds	r0, #1
 8003950:	d0ad      	beq.n	80038ae <_printf_i+0x15e>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	079b      	lsls	r3, r3, #30
 8003956:	d413      	bmi.n	8003980 <_printf_i+0x230>
 8003958:	68e0      	ldr	r0, [r4, #12]
 800395a:	9b03      	ldr	r3, [sp, #12]
 800395c:	4298      	cmp	r0, r3
 800395e:	bfb8      	it	lt
 8003960:	4618      	movlt	r0, r3
 8003962:	e7a6      	b.n	80038b2 <_printf_i+0x162>
 8003964:	2301      	movs	r3, #1
 8003966:	4632      	mov	r2, r6
 8003968:	4649      	mov	r1, r9
 800396a:	4640      	mov	r0, r8
 800396c:	47d0      	blx	sl
 800396e:	3001      	adds	r0, #1
 8003970:	d09d      	beq.n	80038ae <_printf_i+0x15e>
 8003972:	3501      	adds	r5, #1
 8003974:	68e3      	ldr	r3, [r4, #12]
 8003976:	9903      	ldr	r1, [sp, #12]
 8003978:	1a5b      	subs	r3, r3, r1
 800397a:	42ab      	cmp	r3, r5
 800397c:	dcf2      	bgt.n	8003964 <_printf_i+0x214>
 800397e:	e7eb      	b.n	8003958 <_printf_i+0x208>
 8003980:	2500      	movs	r5, #0
 8003982:	f104 0619 	add.w	r6, r4, #25
 8003986:	e7f5      	b.n	8003974 <_printf_i+0x224>
 8003988:	080041c3 	.word	0x080041c3
 800398c:	080041d4 	.word	0x080041d4

08003990 <__malloc_lock>:
 8003990:	4801      	ldr	r0, [pc, #4]	@ (8003998 <__malloc_lock+0x8>)
 8003992:	f7ff bc6f 	b.w	8003274 <__retarget_lock_acquire_recursive>
 8003996:	bf00      	nop
 8003998:	2000035c 	.word	0x2000035c

0800399c <__malloc_unlock>:
 800399c:	4801      	ldr	r0, [pc, #4]	@ (80039a4 <__malloc_unlock+0x8>)
 800399e:	f7ff bc6a 	b.w	8003276 <__retarget_lock_release_recursive>
 80039a2:	bf00      	nop
 80039a4:	2000035c 	.word	0x2000035c

080039a8 <_realloc_r>:
 80039a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ac:	4680      	mov	r8, r0
 80039ae:	4615      	mov	r5, r2
 80039b0:	460c      	mov	r4, r1
 80039b2:	b921      	cbnz	r1, 80039be <_realloc_r+0x16>
 80039b4:	4611      	mov	r1, r2
 80039b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ba:	f7ff bdd7 	b.w	800356c <_malloc_r>
 80039be:	b92a      	cbnz	r2, 80039cc <_realloc_r+0x24>
 80039c0:	f000 f866 	bl	8003a90 <_free_r>
 80039c4:	2400      	movs	r4, #0
 80039c6:	4620      	mov	r0, r4
 80039c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039cc:	f000 f8a8 	bl	8003b20 <_malloc_usable_size_r>
 80039d0:	4285      	cmp	r5, r0
 80039d2:	4606      	mov	r6, r0
 80039d4:	d802      	bhi.n	80039dc <_realloc_r+0x34>
 80039d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80039da:	d8f4      	bhi.n	80039c6 <_realloc_r+0x1e>
 80039dc:	4629      	mov	r1, r5
 80039de:	4640      	mov	r0, r8
 80039e0:	f7ff fdc4 	bl	800356c <_malloc_r>
 80039e4:	4607      	mov	r7, r0
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d0ec      	beq.n	80039c4 <_realloc_r+0x1c>
 80039ea:	42b5      	cmp	r5, r6
 80039ec:	462a      	mov	r2, r5
 80039ee:	4621      	mov	r1, r4
 80039f0:	bf28      	it	cs
 80039f2:	4632      	movcs	r2, r6
 80039f4:	f000 f83e 	bl	8003a74 <memcpy>
 80039f8:	4621      	mov	r1, r4
 80039fa:	4640      	mov	r0, r8
 80039fc:	f000 f848 	bl	8003a90 <_free_r>
 8003a00:	463c      	mov	r4, r7
 8003a02:	e7e0      	b.n	80039c6 <_realloc_r+0x1e>

08003a04 <memmove>:
 8003a04:	4288      	cmp	r0, r1
 8003a06:	b510      	push	{r4, lr}
 8003a08:	eb01 0402 	add.w	r4, r1, r2
 8003a0c:	d902      	bls.n	8003a14 <memmove+0x10>
 8003a0e:	4284      	cmp	r4, r0
 8003a10:	4623      	mov	r3, r4
 8003a12:	d807      	bhi.n	8003a24 <memmove+0x20>
 8003a14:	1e43      	subs	r3, r0, #1
 8003a16:	42a1      	cmp	r1, r4
 8003a18:	d008      	beq.n	8003a2c <memmove+0x28>
 8003a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a22:	e7f8      	b.n	8003a16 <memmove+0x12>
 8003a24:	4601      	mov	r1, r0
 8003a26:	4402      	add	r2, r0
 8003a28:	428a      	cmp	r2, r1
 8003a2a:	d100      	bne.n	8003a2e <memmove+0x2a>
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a36:	e7f7      	b.n	8003a28 <memmove+0x24>

08003a38 <_sbrk_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	4d05      	ldr	r5, [pc, #20]	@ (8003a54 <_sbrk_r+0x1c>)
 8003a3e:	4604      	mov	r4, r0
 8003a40:	4608      	mov	r0, r1
 8003a42:	602b      	str	r3, [r5, #0]
 8003a44:	f7fe f800 	bl	8001a48 <_sbrk>
 8003a48:	1c43      	adds	r3, r0, #1
 8003a4a:	d102      	bne.n	8003a52 <_sbrk_r+0x1a>
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	b103      	cbz	r3, 8003a52 <_sbrk_r+0x1a>
 8003a50:	6023      	str	r3, [r4, #0]
 8003a52:	bd38      	pop	{r3, r4, r5, pc}
 8003a54:	20000368 	.word	0x20000368

08003a58 <memchr>:
 8003a58:	4603      	mov	r3, r0
 8003a5a:	b510      	push	{r4, lr}
 8003a5c:	b2c9      	uxtb	r1, r1
 8003a5e:	4402      	add	r2, r0
 8003a60:	4293      	cmp	r3, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	d101      	bne.n	8003a6a <memchr+0x12>
 8003a66:	2000      	movs	r0, #0
 8003a68:	e003      	b.n	8003a72 <memchr+0x1a>
 8003a6a:	7804      	ldrb	r4, [r0, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	428c      	cmp	r4, r1
 8003a70:	d1f6      	bne.n	8003a60 <memchr+0x8>
 8003a72:	bd10      	pop	{r4, pc}

08003a74 <memcpy>:
 8003a74:	440a      	add	r2, r1
 8003a76:	4291      	cmp	r1, r2
 8003a78:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003a7c:	d100      	bne.n	8003a80 <memcpy+0xc>
 8003a7e:	4770      	bx	lr
 8003a80:	b510      	push	{r4, lr}
 8003a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a86:	4291      	cmp	r1, r2
 8003a88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a8c:	d1f9      	bne.n	8003a82 <memcpy+0xe>
 8003a8e:	bd10      	pop	{r4, pc}

08003a90 <_free_r>:
 8003a90:	b538      	push	{r3, r4, r5, lr}
 8003a92:	4605      	mov	r5, r0
 8003a94:	2900      	cmp	r1, #0
 8003a96:	d040      	beq.n	8003b1a <_free_r+0x8a>
 8003a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a9c:	1f0c      	subs	r4, r1, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bfb8      	it	lt
 8003aa2:	18e4      	addlt	r4, r4, r3
 8003aa4:	f7ff ff74 	bl	8003990 <__malloc_lock>
 8003aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b1c <_free_r+0x8c>)
 8003aaa:	6813      	ldr	r3, [r2, #0]
 8003aac:	b933      	cbnz	r3, 8003abc <_free_r+0x2c>
 8003aae:	6063      	str	r3, [r4, #4]
 8003ab0:	6014      	str	r4, [r2, #0]
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ab8:	f7ff bf70 	b.w	800399c <__malloc_unlock>
 8003abc:	42a3      	cmp	r3, r4
 8003abe:	d908      	bls.n	8003ad2 <_free_r+0x42>
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	1821      	adds	r1, r4, r0
 8003ac4:	428b      	cmp	r3, r1
 8003ac6:	bf01      	itttt	eq
 8003ac8:	6819      	ldreq	r1, [r3, #0]
 8003aca:	685b      	ldreq	r3, [r3, #4]
 8003acc:	1809      	addeq	r1, r1, r0
 8003ace:	6021      	streq	r1, [r4, #0]
 8003ad0:	e7ed      	b.n	8003aae <_free_r+0x1e>
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	b10b      	cbz	r3, 8003adc <_free_r+0x4c>
 8003ad8:	42a3      	cmp	r3, r4
 8003ada:	d9fa      	bls.n	8003ad2 <_free_r+0x42>
 8003adc:	6811      	ldr	r1, [r2, #0]
 8003ade:	1850      	adds	r0, r2, r1
 8003ae0:	42a0      	cmp	r0, r4
 8003ae2:	d10b      	bne.n	8003afc <_free_r+0x6c>
 8003ae4:	6820      	ldr	r0, [r4, #0]
 8003ae6:	4401      	add	r1, r0
 8003ae8:	1850      	adds	r0, r2, r1
 8003aea:	4283      	cmp	r3, r0
 8003aec:	6011      	str	r1, [r2, #0]
 8003aee:	d1e0      	bne.n	8003ab2 <_free_r+0x22>
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4408      	add	r0, r1
 8003af6:	6010      	str	r0, [r2, #0]
 8003af8:	6053      	str	r3, [r2, #4]
 8003afa:	e7da      	b.n	8003ab2 <_free_r+0x22>
 8003afc:	d902      	bls.n	8003b04 <_free_r+0x74>
 8003afe:	230c      	movs	r3, #12
 8003b00:	602b      	str	r3, [r5, #0]
 8003b02:	e7d6      	b.n	8003ab2 <_free_r+0x22>
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	1821      	adds	r1, r4, r0
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	bf01      	itttt	eq
 8003b0c:	6819      	ldreq	r1, [r3, #0]
 8003b0e:	685b      	ldreq	r3, [r3, #4]
 8003b10:	1809      	addeq	r1, r1, r0
 8003b12:	6021      	streq	r1, [r4, #0]
 8003b14:	6063      	str	r3, [r4, #4]
 8003b16:	6054      	str	r4, [r2, #4]
 8003b18:	e7cb      	b.n	8003ab2 <_free_r+0x22>
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
 8003b1c:	20000364 	.word	0x20000364

08003b20 <_malloc_usable_size_r>:
 8003b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b24:	1f18      	subs	r0, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bfbc      	itt	lt
 8003b2a:	580b      	ldrlt	r3, [r1, r0]
 8003b2c:	18c0      	addlt	r0, r0, r3
 8003b2e:	4770      	bx	lr

08003b30 <_init>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	bf00      	nop
 8003b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b36:	bc08      	pop	{r3}
 8003b38:	469e      	mov	lr, r3
 8003b3a:	4770      	bx	lr

08003b3c <_fini>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	bf00      	nop
 8003b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b42:	bc08      	pop	{r3}
 8003b44:	469e      	mov	lr, r3
 8003b46:	4770      	bx	lr
